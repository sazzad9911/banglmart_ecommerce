generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["mongodb"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model users {
  id                   String                 @id @default(cuid())
  email                String?                @unique
  name                 String
  image                String?
  phone                String?                @unique
  birthday             String?
  gender               String?
  role                 Int                    @default(1)
  uid                  String?
  address              Json?
  createdAt            DateTime               @default(now())
  seller               seller[]
  brand                brands[]
  products             products[]
  comments             comments[]
  reviews              reviews[]
  notifications        notifications[]
  pushToken            String?
  flashSellProduct     flashSellProduct[]
  verified             Boolean                @default(true)
  conversations        conversations[]
  orders               orders[]
  cart                 cart[]
  wish                 wish[]
  messages             messages[]
  active               Boolean                @default(false)
  socketId             String?                @unique
  coin                 Int                    @default(0)
  promo_code_user      promo_code_user[]
  coupon_code_users    coupon_code_users[]
  special_member_users special_member_users[]
  special_member       special_member[]
  coupon_code          coupon_code[]
  promo_code           promo_code[]
}

model category {
  id          String        @id @default(cuid())
  name        String        @unique
  icon        String
  subCategory subCategory[]
  products    products[]
}

model subCategory {
  id         String     @id @default(cuid())
  name       String     @unique
  categoryId String
  category   category?  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  options    options[]
  products   products[]
}

model options {
  id            String       @id @default(cuid())
  name          String
  subCategoryId String
  subCategory   subCategory? @relation(fields: [subCategoryId], references: [id], onDelete: Cascade)
  products      products[]
}

model seller {
  id          String     @id @default(cuid())
  userId      String
  user        users?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  shopName    String     @unique
  shopAddress String
  categories  Json?
  logo        String
  products    products[]
  verified    Boolean    @default(false)
  reviews     reviews[]
  createdAt   DateTime   @default(now())
}

model brands {
  id           String     @id @default(cuid())
  userId       String
  user         users?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  brandName    String     @unique
  brandAddress String
  brandIcon    String
  categories   Json?
  products     products[]
  verified     Boolean    @default(true)
  reviews      reviews[]
  createdAt    DateTime   @default(now())
}

model products {
  id                   String                 @id @default(cuid())
  price                Int
  coin                 Boolean                @default(false)
  title                String
  description          String                 @db.MediumText
  thumbnail            String
  quantity             Int                    @default(1)
  minOrder             Int                    @default(1)
  freeCoin             Int                    @default(0)
  offer                Int                    @default(0)
  vat                  Float                  @default(0)
  deliveryCharge       Int                    @default(0)
  percentage           Boolean                @default(false)
  freeDelivery         Boolean                @default(false)
  fixedPrice           Boolean                @default(true)
  createdAt            DateTime               @default(now())
  colors               Json?
  sizes                Json?
  specifications       Json?
  images               Json?
  comments             comments[]
  reviews              reviews[]
  flashSellProduct     flashSellProduct[]
  verified             Boolean                @default(true)
  sellerId             String?
  seller               seller?                @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  brandId              String?
  brand                brands?                @relation(fields: [brandId], references: [id], onDelete: Cascade)
  category             category?              @relation(fields: [categoryId], references: [id])
  categoryId           String
  subCategoryId        String
  subCategory          subCategory?           @relation(fields: [subCategoryId], references: [id])
  optionId             String
  option               options?               @relation(fields: [optionId], references: [id])
  userId               String
  user                 users?                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  banner               banner[]
  adds                 adds[]
  conversations        conversations[]
  orders               orders[]
  slider               slider[]
  cart                 cart[]
  wish                 wish[]
  product_visitors     product_visitors[]
  coupon_code_products coupon_code_products[]
  campaignOffer        campaignOffer?
}

model colors {
  id    String @id @default(cuid())
  title String @unique
  color String
}

model size {
  id    String @id @default(cuid())
  title String @unique
  cm    String
}

model specifications {
  id      String @id @default(cuid())
  title   String @unique
  details String
}

model comments {
  id            String          @id @default(cuid())
  message       String
  image         String?
  replay        String?
  userId        String
  user          users?          @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId     String
  product       products?       @relation(fields: [productId], references: [id], onDelete: Cascade)
  notifications notifications[]
  date          DateTime        @default(now())
}

model reviews {
  id            String          @id @default(cuid())
  message       String
  rate          Float           @default(0)
  userId        String
  user          users?          @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId     String
  product       products?       @relation(fields: [productId], references: [id], onDelete: Cascade)
  notifications notifications[]
  sellerId      String?
  seller        seller?         @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  brandId       String?
  brand         brands?         @relation(fields: [brandId], references: [id], onDelete: Cascade)
}

model notifications {
  id        String    @id @default(cuid())
  message   String
  title     String
  userId    String
  user      users?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  commentId String?
  comments  comments? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  reviewId  String?
  reviews   reviews?  @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  orderId   String?
  order     orders?   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  read      Boolean   @default(false)
  date      DateTime  @default(now())
}

model flashSell {
  id      String             @id @default(cuid())
  startAt DateTime
  endAt   DateTime
  banner  String
  title   String             @unique
  product flashSellProduct[]
}

model flashSellProduct {
  id           String     @id @default(cuid())
  offer        Int        @default(0)
  percentage   Boolean    @default(false)
  minSell      Int        @default(1)
  quantity     Int        @default(1)
  deliveryFree Boolean    @default(false)
  flashSellId  String
  flashSell    flashSell? @relation(fields: [flashSellId], references: [id], onDelete: Cascade)
  productId    String
  product      products?  @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId       String
  user         users?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
}

model contacts {
  id          String   @id @default(cuid())
  title       String
  description String   @db.VarChar(300)
  name        String
  phone       String
  email       String
  date        DateTime @default(now())
  replied     Boolean  @default(false)
}

model conversations {
  id         String     @id @default(cuid())
  senderId   String
  receiver   users?     @relation(fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId String
  date       DateTime   @default(now())
  productId  String
  product    products?  @relation(fields: [productId], references: [id], onDelete: Cascade)
  messages   messages[]
  unread     Int        @default(0)
}

model messages {
  id             String         @id @default(cuid())
  message        String?
  image          String?
  date           DateTime       @default(now())
  conversationId String
  conversation   conversations? @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  receiver       users?         @relation(fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId     String?
}

model orders {
  id                 String          @id @default(cuid())
  buyerId            String
  buyer              users           @relation(fields: [buyerId], references: [id], onDelete: Cascade)
  productId          String?
  product            products?       @relation(fields: [productId], references: [id], onDelete: Cascade)
  date               DateTime        @default(now())
  status             String          @default("PENDING")
  paymentMethod      String
  address            Json?
  token              String          @db.Text
  totalAmount        Float           @default(0)
  quantity           Int             @default(1)
  deliveryFee        Float           @default(0)
  colors             Json?
  sizes              Json?
  specifications     Json?
  offerPrice         Float           @default(0)
  couponDiscount     Float           @default(0)
  specialMemberOffer Float           @default(0)
  specialPromoOffer  Float           @default(0)
  freeCoin           Int             @default(0)
  paid               Boolean         @default(false)
  notifications      notifications[]
  paymentId          String?
  payment            payment?        @relation(fields: [paymentId], references: [id], onDelete: Cascade)
}

model banner {
  id        String    @id @default(cuid())
  title     String    @unique
  image     String
  productId String
  product   products? @relation(fields: [productId], references: [id])
  date      DateTime  @default(now())
}

model slider {
  id        String    @id @default(cuid())
  title     String    @unique
  image     String
  productId String
  product   products? @relation(fields: [productId], references: [id], onDelete: Cascade)
  date      DateTime  @default(now())
}

model cart {
  id             String       @id @default(cuid())
  userId         String
  user           users?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  productIds     String
  product        products?    @relation(fields: [productIds], references: [id], onDelete: Cascade)
  quantity       Int          @default(1)
  couponId       String?
  coupon         coupon_code? @relation(fields: [couponId], references: [id])
  colors         Json?
  sizes          Json?
  specifications Json?
  offerPrice     Int          @default(0)
}

model wish {
  id        String    @id @default(cuid())
  userId    String
  user      users?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   products? @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model adds {
  id        String          @id @default(cuid())
  title     String          @unique
  image     String
  productId String
  product   products?       @relation(fields: [productId], references: [id], onDelete: Cascade)
  date      DateTime        @default(now())
  visitors  adds_visitors[]
}

model adds_visitors {
  id         String    @id @default(cuid())
  visitorsId String
  visitors   visitors? @relation(fields: [visitorsId], references: [id])
  adds       adds?     @relation(fields: [addId], references: [id])
  addId      String?
}

model product_visitors {
  id           String    @id @default(cuid())
  visitorsId   String?
  visitorsInfo visitors? @relation(fields: [visitorsId], references: [id], onDelete: Cascade)
  productInfo  products? @relation(fields: [productsId], references: [id], onDelete: Cascade)
  productsId   String?
  createdAt    DateTime  @default(now())
}

model visitors {
  id               String             @id @default(cuid())
  ip               String
  deviceName       String
  randomId         String             @unique
  date             DateTime           @default(now())
  uid              String?
  adds_visitors    adds_visitors[]
  product_visitors product_visitors[]
}

model promo_code {
  id         String            @id @default(cuid())
  code       String            @unique
  offer      Int
  percentage Boolean           @default(false)
  date       DateTime          @default(now())
  users      promo_code_user[]
  userId     String?
  user       users?            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model promo_code_user {
  id     String     @id @default(cuid())
  userId String
  user   users      @relation(fields: [userId], references: [id], onDelete: Cascade)
  codeId String
  code   promo_code @relation(fields: [codeId], references: [id], onDelete: Cascade)
  date   DateTime   @default(now())
}

model coupon_code {
  id         String                 @id @default(cuid())
  code       String                 @unique
  date       DateTime               @default(now())
  offer      Int
  percentage Boolean                @default(false)
  products   coupon_code_products[]
  users      coupon_code_users[]
  cart       cart[]
  userId     String?
  user       users?                 @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model coupon_code_products {
  id        String      @id @default(cuid())
  codeId    String
  code      coupon_code @relation(fields: [codeId], references: [id], onDelete: Cascade)
  productId String
  products  products    @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model coupon_code_users {
  id     String      @id @default(cuid())
  userId String
  user   users       @relation(fields: [userId], references: [id], onDelete: Cascade)
  codeId String
  code   coupon_code @relation(fields: [codeId], references: [id], onDelete: Cascade)
  date   DateTime    @default(now())
}

model special_member {
  id         String                 @id @default(cuid())
  code       String                 @unique
  date       DateTime               @default(now())
  offer      Int
  percentage Boolean                @default(false)
  users      special_member_users[]
  userId     String?
  user       users?                 @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model special_member_users {
  id     String         @id @default(cuid())
  userId String
  user   users          @relation(fields: [userId], references: [id], onDelete: Cascade)
  codeId String
  code   special_member @relation(fields: [codeId], references: [id], onDelete: Cascade)
  date   DateTime       @default(now())
  used   Boolean        @default(false)
}

model delivery_fee {
  id          String @id @default(cuid())
  division    String
  district    String
  subDistrict String
  union       String
  fee         Int
}

model payment {
  id            String   @id @default(cuid())
  paymentMethod String
  amount        Float
  trxID         String?
  paymentID     String?
  sku           String?
  orders        orders[]
}

model campaign {
  id            String          @id @default(cuid())
  date          DateTime        @default(now())
  durationMonth Int
  startAt       DateTime        @default(now())
  endAt         DateTime
  products      campaignOffer[]
  image         String
}

model campaignOffer {
  id           String    @id @default(cuid())
  offer        Int
  percentage   Boolean   @default(false)
  date         DateTime  @default(now())
  sale         Int       @default(0)
  total        Int       @default(1)
  campaign     campaign? @relation(fields: [campaignId], references: [id])
  campaignId   String?
  productId    String    @unique
  product      products  @relation(fields: [productId], references: [id], onDelete: Cascade)
  freeDelivery Boolean   @default(false)
  minOrder     Int       @default(1)
}

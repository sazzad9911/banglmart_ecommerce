generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["mongodb"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model users {
  id               String             @id @default(cuid())
  email            String?            @unique
  name             String
  image            String?
  phone            String?            @unique
  birthday         String?
  gender           String?
  role             Int                @default(1)
  uid              String?
  address          Json?
  createdAt        DateTime           @default(now())
  seller           seller[]
  brand            brands[]
  products         products[]
  comments         comments[]
  reviews          reviews[]
  notifications    notifications[]
  pushToken        String?
  flashSellProduct flashSellProduct[]
  verified         Boolean            @default(true)
  conversations    conversations[]
  orders           orders[]
}

model category {
  id          String        @id @default(cuid())
  name        String        @unique
  icon        String
  subCategory subCategory[]
  products    products[]
}

model subCategory {
  id         String     @id @default(cuid())
  name       String     @unique
  categoryId String
  category   category?  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  options    options[]
  products   products[]
}

model options {
  id            String       @id @default(cuid())
  name          String
  subCategoryId String
  subCategory   subCategory? @relation(fields: [subCategoryId], references: [id], onDelete: Cascade)
  products      products[]
}

model seller {
  id          String     @id @default(cuid())
  userId      String
  user        users?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  shopName    String     @unique
  shopAddress String
  categories  Json?
  logo        String
  products    products[]
  verified    Boolean    @default(false)
  reviews     reviews[]
  createdAt  DateTime @default(now())
}

model brands {
  id           String     @id @default(cuid())
  userId       String
  user         users?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  brandName    String     @unique
  brandAddress String
  brandIcon    String
  categories   Json?
  products     products[]
  verified     Boolean    @default(true)
  reviews      reviews[]
  createdAt  DateTime @default(now())
}

model products {
  id               String             @id @default(cuid())
  price            Int
  coin             Boolean            @default(false)
  title            String
  description      String             @db.VarChar(10000)
  thumbnail        String
  quantity         Int                @default(1)
  minOrder         Int                @default(1)
  freeCoin         Int                @default(0)
  offer            Int                @default(0)
  percentage       Boolean            @default(false)
  freeDelivery     Boolean            @default(false)
  fixedPrice       Boolean            @default(true)
  createdAt        DateTime           @default(now())
  colors           colors?            @relation(fields: [colorId], references: [id])
  colorId          String
  sizeId           String
  size             size?              @relation(fields: [sizeId], references: [id])
  specificationsId String
  specification    specifications?    @relation(fields: [specificationsId], references: [id])
  images           Json?
  comments         comments[]
  reviews          reviews[]
  flashSellProduct flashSellProduct[]
  verified         Boolean            @default(true)
  sellerId         String?
  seller           seller?            @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  brandId          String?
  brand            brands?            @relation(fields: [brandId], references: [id], onDelete: Cascade)
  category         category?          @relation(fields: [categoryId], references: [id])
  categoryId       String
  subCategoryId    String
  subCategory      subCategory?       @relation(fields: [subCategoryId], references: [id])
  optionId         String
  option           options?           @relation(fields: [optionId], references: [id])
  userId           String
  user             users?             @relation(fields: [userId], references: [id], onDelete: Cascade)
  banner           banner[]
  adds             adds[]
  messages         messages[]
  orders           orders[]
}

model colors {
  id       String     @id @default(cuid())
  title    String     @unique
  color    String
  products products[]
}

model size {
  id       String     @id @default(cuid())
  title    String     @unique
  cm       String
  products products[]
}

model specifications {
  id       String     @id @default(cuid())
  title    String     @unique
  details  String
  products products[]
}

model comments {
  id            String          @id @default(cuid())
  message       String
  image         String?
  replay        String?
  userId        String
  user          users?          @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId     String
  product       products?       @relation(fields: [productId], references: [id], onDelete: Cascade)
  notifications notifications[]
  receiverId    String
}

model reviews {
  id            String          @id @default(cuid())
  message       String
  rate          Int             @default(0)
  userId        String
  user          users?          @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId     String
  product       products?       @relation(fields: [productId], references: [id], onDelete: Cascade)
  notifications notifications[]
  sellerId      String?
  seller        seller?         @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  brandId       String?
  brand         brands?         @relation(fields: [brandId], references: [id], onDelete: Cascade)
}

model notifications {
  id        String    @id @default(cuid())
  message   String
  title     String
  userId    String
  user      users?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  commentId String
  comments  comments? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  reviewId  String
  reviews   reviews?  @relation(fields: [reviewId], references: [id], onDelete: Cascade)
}

model flashSell {
  id      String             @id @default(cuid())
  startAt DateTime
  endAt   DateTime
  banner  String
  title   String             @unique
  product flashSellProduct[]
}

model flashSellProduct {
  id           String     @id @default(cuid())
  offer        Int        @default(0)
  percentage   Boolean    @default(false)
  minSell      Int        @default(1)
  quantity     Int        @default(1)
  deliveryFree Boolean    @default(false)
  flashSellId  String
  flashSell    flashSell? @relation(fields: [flashSellId], references: [id], onDelete: Cascade)
  productId    String
  product      products?  @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId       String
  user         users?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
}

model contacts {
  id          String   @id @default(cuid())
  title       String
  description String   @db.VarChar(300)
  name        String
  phone       String
  email       String
  date        DateTime @default(now())
}

model conversations {
  id         String   @id @default(cuid())
  senderId   String
  sender     users?   @relation(fields: [senderId], references: [id], onDelete: Cascade)
  receiverId String
  date       DateTime @default(now())
}

model messages {
  id        String    @id @default(cuid())
  message   String?
  image     String?
  date      DateTime  @default(now())
  productId String
  product   products? @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model orders {
  id         String   @id @default(cuid())
  buyerid    String
  buyer      users    @relation(fields: [buyerid], references: [id], onDelete: Cascade)
  productId  String
  product    products @relation(fields: [productId], references: [id], onDelete: Cascade)
  offerPrice Int      @default(0)
  date       DateTime @default(now())
}

model banner {
  id        String    @id @default(cuid())
  title     String    @unique
  image     String
  productId String
  product   products? @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model adds {
  id        String          @id @default(cuid())
  title     String          @unique
  image     String
  productId String
  product   products?       @relation(fields: [productId], references: [id], onDelete: Cascade)
  date      DateTime        @default(now())
  visitors  adds_visitors?
}

model adds_visitors {
  id        String    @id @default(cuid())
  visitorId String?   @unique
  visitors  visitors? @relation(fields: [visitorId], references: [id])
  adds      adds?     @relation(fields: [addsId], references: [id])
  addsId    String?   @unique
}

model visitors {
  id            String         @id @default(cuid())
  ip            String
  deviceName    String
  randomId      String         @unique
  date          DateTime       @default(now())
  uid           String?
  adds_visitors adds_visitors?
}

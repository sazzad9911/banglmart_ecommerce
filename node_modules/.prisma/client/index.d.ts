
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions

export type PrismaPromise<T> = $Public.PrismaPromise<T>


export type usersPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "users"
  objects: {
    seller: sellerPayload<ExtArgs>[]
    brand: brandsPayload<ExtArgs>[]
    products: productsPayload<ExtArgs>[]
    comments: commentsPayload<ExtArgs>[]
    reviews: reviewsPayload<ExtArgs>[]
    notifications: notificationsPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: string
    email: string | null
    name: string
    image: string | null
    phone: string | null
    birthday: string | null
    gender: string | null
    role: number
    uid: string
    address: Prisma.JsonValue | null
    createdAt: Date
  }, ExtArgs["result"]["users"]>
  composites: {}
}

/**
 * Model users
 * 
 */
export type users = runtime.Types.DefaultSelection<usersPayload>
export type categoryPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "category"
  objects: {
    subCategory: subCategoryPayload<ExtArgs>[]
    products: productsPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: string
    name: string
    icon: string
  }, ExtArgs["result"]["category"]>
  composites: {}
}

/**
 * Model category
 * 
 */
export type category = runtime.Types.DefaultSelection<categoryPayload>
export type subCategoryPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "subCategory"
  objects: {
    category: categoryPayload<ExtArgs> | null
    options: optionsPayload<ExtArgs>[]
    products: productsPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: string
    name: string
    categoryId: string
  }, ExtArgs["result"]["subCategory"]>
  composites: {}
}

/**
 * Model subCategory
 * 
 */
export type subCategory = runtime.Types.DefaultSelection<subCategoryPayload>
export type optionsPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "options"
  objects: {
    subCategory: subCategoryPayload<ExtArgs> | null
    products: productsPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: string
    name: string
    subCategoryId: string
  }, ExtArgs["result"]["options"]>
  composites: {}
}

/**
 * Model options
 * 
 */
export type options = runtime.Types.DefaultSelection<optionsPayload>
export type sellerPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "seller"
  objects: {
    user: usersPayload<ExtArgs> | null
    products: productsPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: string
    userId: string
    shopName: string
    shopAddress: string
  }, ExtArgs["result"]["seller"]>
  composites: {}
}

/**
 * Model seller
 * 
 */
export type seller = runtime.Types.DefaultSelection<sellerPayload>
export type brandsPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "brands"
  objects: {
    user: usersPayload<ExtArgs> | null
    products: productsPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: string
    userId: string
    brandName: string
    brandAddress: string
    brandIcon: string
  }, ExtArgs["result"]["brands"]>
  composites: {}
}

/**
 * Model brands
 * 
 */
export type brands = runtime.Types.DefaultSelection<brandsPayload>
export type productsPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "products"
  objects: {
    offers: offersPayload<ExtArgs>[]
    coins: coinsPayload<ExtArgs>[]
    variants: variantsPayload<ExtArgs>[]
    comments: commentsPayload<ExtArgs>[]
    reviews: reviewsPayload<ExtArgs>[]
    seller: sellerPayload<ExtArgs> | null
    brand: brandsPayload<ExtArgs> | null
    category: categoryPayload<ExtArgs> | null
    subCategory: subCategoryPayload<ExtArgs> | null
    option: optionsPayload<ExtArgs> | null
    user: usersPayload<ExtArgs> | null
  }
  scalars: $Extensions.GetResult<{
    id: string
    price: number
    title: string
    description: string
    thumbnail: string
    verified: boolean
    sellerId: string | null
    brandId: string | null
    categoryId: string
    subCategoryId: string
    optionId: string
    userId: string
  }, ExtArgs["result"]["products"]>
  composites: {}
}

/**
 * Model products
 * 
 */
export type products = runtime.Types.DefaultSelection<productsPayload>
export type offersPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "offers"
  objects: {
    product: productsPayload<ExtArgs> | null
  }
  scalars: $Extensions.GetResult<{
    id: string
    money: number
    percentage: number
    name: string | null
    productId: string
  }, ExtArgs["result"]["offers"]>
  composites: {}
}

/**
 * Model offers
 * 
 */
export type offers = runtime.Types.DefaultSelection<offersPayload>
export type coinsPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "coins"
  objects: {
    product: productsPayload<ExtArgs> | null
  }
  scalars: $Extensions.GetResult<{
    id: string
    number: number
    name: string | null
    productId: string
  }, ExtArgs["result"]["coins"]>
  composites: {}
}

/**
 * Model coins
 * 
 */
export type coins = runtime.Types.DefaultSelection<coinsPayload>
export type variantsPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "variants"
  objects: {
    product: productsPayload<ExtArgs> | null
  }
  scalars: $Extensions.GetResult<{
    id: string
    size: string
    color: string
    image: string
    productId: string
  }, ExtArgs["result"]["variants"]>
  composites: {}
}

/**
 * Model variants
 * 
 */
export type variants = runtime.Types.DefaultSelection<variantsPayload>
export type commentsPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "comments"
  objects: {
    user: usersPayload<ExtArgs> | null
    product: productsPayload<ExtArgs> | null
    notifications: notificationsPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: string
    message: string
    replay: string
    userId: string
    productId: string
  }, ExtArgs["result"]["comments"]>
  composites: {}
}

/**
 * Model comments
 * 
 */
export type comments = runtime.Types.DefaultSelection<commentsPayload>
export type reviewsPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "reviews"
  objects: {
    user: usersPayload<ExtArgs> | null
    product: productsPayload<ExtArgs> | null
    notifications: notificationsPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: string
    message: string
    rate: number
    replay: string
    userId: string
    productId: string
  }, ExtArgs["result"]["reviews"]>
  composites: {}
}

/**
 * Model reviews
 * 
 */
export type reviews = runtime.Types.DefaultSelection<reviewsPayload>
export type notificationsPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "notifications"
  objects: {
    user: usersPayload<ExtArgs> | null
    comments: commentsPayload<ExtArgs> | null
    reviews: reviewsPayload<ExtArgs> | null
  }
  scalars: $Extensions.GetResult<{
    id: string
    message: string
    title: string
    userId: string
    commentId: string
    reviewId: string
  }, ExtArgs["result"]["notifications"]>
  composites: {}
}

/**
 * Model notifications
 * 
 */
export type notifications = runtime.Types.DefaultSelection<notificationsPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.users.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.users.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P]): Promise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => Promise<R>, options?: { maxWait?: number, timeout?: number }): Promise<R>

  /**
   * Executes a raw MongoDB command and returns the result of it.
   * @example
   * ```
   * const user = await prisma.$runCommandRaw({
   *   aggregate: 'User',
   *   pipeline: [{ $match: { name: 'Bob' } }, { $project: { email: true, _id: false } }],
   *   explain: false,
   * })
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $runCommandRaw(command: Prisma.InputJsonObject): Prisma.PrismaPromise<Prisma.JsonObject>

  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.users`: Exposes CRUD operations for the **users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.usersDelegate<ExtArgs>;

  /**
   * `prisma.category`: Exposes CRUD operations for the **category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.categoryDelegate<ExtArgs>;

  /**
   * `prisma.subCategory`: Exposes CRUD operations for the **subCategory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SubCategories
    * const subCategories = await prisma.subCategory.findMany()
    * ```
    */
  get subCategory(): Prisma.subCategoryDelegate<ExtArgs>;

  /**
   * `prisma.options`: Exposes CRUD operations for the **options** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Options
    * const options = await prisma.options.findMany()
    * ```
    */
  get options(): Prisma.optionsDelegate<ExtArgs>;

  /**
   * `prisma.seller`: Exposes CRUD operations for the **seller** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sellers
    * const sellers = await prisma.seller.findMany()
    * ```
    */
  get seller(): Prisma.sellerDelegate<ExtArgs>;

  /**
   * `prisma.brands`: Exposes CRUD operations for the **brands** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Brands
    * const brands = await prisma.brands.findMany()
    * ```
    */
  get brands(): Prisma.brandsDelegate<ExtArgs>;

  /**
   * `prisma.products`: Exposes CRUD operations for the **products** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products
    * const products = await prisma.products.findMany()
    * ```
    */
  get products(): Prisma.productsDelegate<ExtArgs>;

  /**
   * `prisma.offers`: Exposes CRUD operations for the **offers** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Offers
    * const offers = await prisma.offers.findMany()
    * ```
    */
  get offers(): Prisma.offersDelegate<ExtArgs>;

  /**
   * `prisma.coins`: Exposes CRUD operations for the **coins** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Coins
    * const coins = await prisma.coins.findMany()
    * ```
    */
  get coins(): Prisma.coinsDelegate<ExtArgs>;

  /**
   * `prisma.variants`: Exposes CRUD operations for the **variants** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Variants
    * const variants = await prisma.variants.findMany()
    * ```
    */
  get variants(): Prisma.variantsDelegate<ExtArgs>;

  /**
   * `prisma.comments`: Exposes CRUD operations for the **comments** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Comments
    * const comments = await prisma.comments.findMany()
    * ```
    */
  get comments(): Prisma.commentsDelegate<ExtArgs>;

  /**
   * `prisma.reviews`: Exposes CRUD operations for the **reviews** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reviews
    * const reviews = await prisma.reviews.findMany()
    * ```
    */
  get reviews(): Prisma.reviewsDelegate<ExtArgs>;

  /**
   * `prisma.notifications`: Exposes CRUD operations for the **notifications** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notifications.findMany()
    * ```
    */
  get notifications(): Prisma.notificationsDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export type Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export type Args<T, F extends $Public.Operation> = $Public.Args<T, F>
  export type Payload<T, F extends $Public.Operation> = $Public.Payload<T, F>
  export type Result<T, A, F extends $Public.Operation> = $Public.Result<T, A, F>
  export type Exact<T, W> = $Public.Exact<T, W>

  /**
   * Prisma Client JS version: 5.0.0
   * Query Engine version: 6b0aef69b7cdfc787f822ecd7cdc76d5f1991584
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    users: 'users',
    category: 'category',
    subCategory: 'subCategory',
    options: 'options',
    seller: 'seller',
    brands: 'brands',
    products: 'products',
    offers: 'offers',
    coins: 'coins',
    variants: 'variants',
    comments: 'comments',
    reviews: 'reviews',
    notifications: 'notifications'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.Args}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'users' | 'category' | 'subCategory' | 'options' | 'seller' | 'brands' | 'products' | 'offers' | 'coins' | 'variants' | 'comments' | 'reviews' | 'notifications'
      txIsolationLevel: never
    },
    model: {
      users: {
        payload: usersPayload<ExtArgs>
        fields: Prisma.usersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.usersFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<usersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.usersFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<usersPayload>
          }
          findFirst: {
            args: Prisma.usersFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<usersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.usersFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<usersPayload>
          }
          findMany: {
            args: Prisma.usersFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<usersPayload>[]
          }
          create: {
            args: Prisma.usersCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<usersPayload>
          }
          createMany: {
            args: Prisma.usersCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.usersDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<usersPayload>
          }
          update: {
            args: Prisma.usersUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<usersPayload>
          }
          deleteMany: {
            args: Prisma.usersDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.usersUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.usersUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<usersPayload>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUsers>
          }
          groupBy: {
            args: Prisma.usersGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UsersGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.usersFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.usersAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.usersCountArgs<ExtArgs>,
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
          }
        }
      }
      category: {
        payload: categoryPayload<ExtArgs>
        fields: Prisma.categoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.categoryFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<categoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.categoryFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<categoryPayload>
          }
          findFirst: {
            args: Prisma.categoryFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<categoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.categoryFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<categoryPayload>
          }
          findMany: {
            args: Prisma.categoryFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<categoryPayload>[]
          }
          create: {
            args: Prisma.categoryCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<categoryPayload>
          }
          createMany: {
            args: Prisma.categoryCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.categoryDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<categoryPayload>
          }
          update: {
            args: Prisma.categoryUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<categoryPayload>
          }
          deleteMany: {
            args: Prisma.categoryDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.categoryUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.categoryUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<categoryPayload>
          }
          aggregate: {
            args: Prisma.CategoryAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCategory>
          }
          groupBy: {
            args: Prisma.categoryGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CategoryGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.categoryFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.categoryAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.categoryCountArgs<ExtArgs>,
            result: $Utils.Optional<CategoryCountAggregateOutputType> | number
          }
        }
      }
      subCategory: {
        payload: subCategoryPayload<ExtArgs>
        fields: Prisma.subCategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.subCategoryFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<subCategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.subCategoryFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<subCategoryPayload>
          }
          findFirst: {
            args: Prisma.subCategoryFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<subCategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.subCategoryFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<subCategoryPayload>
          }
          findMany: {
            args: Prisma.subCategoryFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<subCategoryPayload>[]
          }
          create: {
            args: Prisma.subCategoryCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<subCategoryPayload>
          }
          createMany: {
            args: Prisma.subCategoryCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.subCategoryDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<subCategoryPayload>
          }
          update: {
            args: Prisma.subCategoryUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<subCategoryPayload>
          }
          deleteMany: {
            args: Prisma.subCategoryDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.subCategoryUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.subCategoryUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<subCategoryPayload>
          }
          aggregate: {
            args: Prisma.SubCategoryAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSubCategory>
          }
          groupBy: {
            args: Prisma.subCategoryGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SubCategoryGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.subCategoryFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.subCategoryAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.subCategoryCountArgs<ExtArgs>,
            result: $Utils.Optional<SubCategoryCountAggregateOutputType> | number
          }
        }
      }
      options: {
        payload: optionsPayload<ExtArgs>
        fields: Prisma.optionsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.optionsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<optionsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.optionsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<optionsPayload>
          }
          findFirst: {
            args: Prisma.optionsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<optionsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.optionsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<optionsPayload>
          }
          findMany: {
            args: Prisma.optionsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<optionsPayload>[]
          }
          create: {
            args: Prisma.optionsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<optionsPayload>
          }
          createMany: {
            args: Prisma.optionsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.optionsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<optionsPayload>
          }
          update: {
            args: Prisma.optionsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<optionsPayload>
          }
          deleteMany: {
            args: Prisma.optionsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.optionsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.optionsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<optionsPayload>
          }
          aggregate: {
            args: Prisma.OptionsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateOptions>
          }
          groupBy: {
            args: Prisma.optionsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<OptionsGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.optionsFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.optionsAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.optionsCountArgs<ExtArgs>,
            result: $Utils.Optional<OptionsCountAggregateOutputType> | number
          }
        }
      }
      seller: {
        payload: sellerPayload<ExtArgs>
        fields: Prisma.sellerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.sellerFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<sellerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.sellerFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<sellerPayload>
          }
          findFirst: {
            args: Prisma.sellerFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<sellerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.sellerFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<sellerPayload>
          }
          findMany: {
            args: Prisma.sellerFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<sellerPayload>[]
          }
          create: {
            args: Prisma.sellerCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<sellerPayload>
          }
          createMany: {
            args: Prisma.sellerCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.sellerDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<sellerPayload>
          }
          update: {
            args: Prisma.sellerUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<sellerPayload>
          }
          deleteMany: {
            args: Prisma.sellerDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.sellerUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.sellerUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<sellerPayload>
          }
          aggregate: {
            args: Prisma.SellerAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSeller>
          }
          groupBy: {
            args: Prisma.sellerGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SellerGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.sellerFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.sellerAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.sellerCountArgs<ExtArgs>,
            result: $Utils.Optional<SellerCountAggregateOutputType> | number
          }
        }
      }
      brands: {
        payload: brandsPayload<ExtArgs>
        fields: Prisma.brandsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.brandsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<brandsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.brandsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<brandsPayload>
          }
          findFirst: {
            args: Prisma.brandsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<brandsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.brandsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<brandsPayload>
          }
          findMany: {
            args: Prisma.brandsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<brandsPayload>[]
          }
          create: {
            args: Prisma.brandsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<brandsPayload>
          }
          createMany: {
            args: Prisma.brandsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.brandsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<brandsPayload>
          }
          update: {
            args: Prisma.brandsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<brandsPayload>
          }
          deleteMany: {
            args: Prisma.brandsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.brandsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.brandsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<brandsPayload>
          }
          aggregate: {
            args: Prisma.BrandsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateBrands>
          }
          groupBy: {
            args: Prisma.brandsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<BrandsGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.brandsFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.brandsAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.brandsCountArgs<ExtArgs>,
            result: $Utils.Optional<BrandsCountAggregateOutputType> | number
          }
        }
      }
      products: {
        payload: productsPayload<ExtArgs>
        fields: Prisma.productsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.productsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<productsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.productsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<productsPayload>
          }
          findFirst: {
            args: Prisma.productsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<productsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.productsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<productsPayload>
          }
          findMany: {
            args: Prisma.productsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<productsPayload>[]
          }
          create: {
            args: Prisma.productsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<productsPayload>
          }
          createMany: {
            args: Prisma.productsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.productsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<productsPayload>
          }
          update: {
            args: Prisma.productsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<productsPayload>
          }
          deleteMany: {
            args: Prisma.productsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.productsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.productsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<productsPayload>
          }
          aggregate: {
            args: Prisma.ProductsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProducts>
          }
          groupBy: {
            args: Prisma.productsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ProductsGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.productsFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.productsAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.productsCountArgs<ExtArgs>,
            result: $Utils.Optional<ProductsCountAggregateOutputType> | number
          }
        }
      }
      offers: {
        payload: offersPayload<ExtArgs>
        fields: Prisma.offersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.offersFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<offersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.offersFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<offersPayload>
          }
          findFirst: {
            args: Prisma.offersFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<offersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.offersFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<offersPayload>
          }
          findMany: {
            args: Prisma.offersFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<offersPayload>[]
          }
          create: {
            args: Prisma.offersCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<offersPayload>
          }
          createMany: {
            args: Prisma.offersCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.offersDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<offersPayload>
          }
          update: {
            args: Prisma.offersUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<offersPayload>
          }
          deleteMany: {
            args: Prisma.offersDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.offersUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.offersUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<offersPayload>
          }
          aggregate: {
            args: Prisma.OffersAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateOffers>
          }
          groupBy: {
            args: Prisma.offersGroupByArgs<ExtArgs>,
            result: $Utils.Optional<OffersGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.offersFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.offersAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.offersCountArgs<ExtArgs>,
            result: $Utils.Optional<OffersCountAggregateOutputType> | number
          }
        }
      }
      coins: {
        payload: coinsPayload<ExtArgs>
        fields: Prisma.coinsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.coinsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<coinsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.coinsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<coinsPayload>
          }
          findFirst: {
            args: Prisma.coinsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<coinsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.coinsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<coinsPayload>
          }
          findMany: {
            args: Prisma.coinsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<coinsPayload>[]
          }
          create: {
            args: Prisma.coinsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<coinsPayload>
          }
          createMany: {
            args: Prisma.coinsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.coinsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<coinsPayload>
          }
          update: {
            args: Prisma.coinsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<coinsPayload>
          }
          deleteMany: {
            args: Prisma.coinsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.coinsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.coinsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<coinsPayload>
          }
          aggregate: {
            args: Prisma.CoinsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCoins>
          }
          groupBy: {
            args: Prisma.coinsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CoinsGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.coinsFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.coinsAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.coinsCountArgs<ExtArgs>,
            result: $Utils.Optional<CoinsCountAggregateOutputType> | number
          }
        }
      }
      variants: {
        payload: variantsPayload<ExtArgs>
        fields: Prisma.variantsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.variantsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<variantsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.variantsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<variantsPayload>
          }
          findFirst: {
            args: Prisma.variantsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<variantsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.variantsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<variantsPayload>
          }
          findMany: {
            args: Prisma.variantsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<variantsPayload>[]
          }
          create: {
            args: Prisma.variantsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<variantsPayload>
          }
          createMany: {
            args: Prisma.variantsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.variantsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<variantsPayload>
          }
          update: {
            args: Prisma.variantsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<variantsPayload>
          }
          deleteMany: {
            args: Prisma.variantsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.variantsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.variantsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<variantsPayload>
          }
          aggregate: {
            args: Prisma.VariantsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateVariants>
          }
          groupBy: {
            args: Prisma.variantsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<VariantsGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.variantsFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.variantsAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.variantsCountArgs<ExtArgs>,
            result: $Utils.Optional<VariantsCountAggregateOutputType> | number
          }
        }
      }
      comments: {
        payload: commentsPayload<ExtArgs>
        fields: Prisma.commentsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.commentsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<commentsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.commentsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<commentsPayload>
          }
          findFirst: {
            args: Prisma.commentsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<commentsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.commentsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<commentsPayload>
          }
          findMany: {
            args: Prisma.commentsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<commentsPayload>[]
          }
          create: {
            args: Prisma.commentsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<commentsPayload>
          }
          createMany: {
            args: Prisma.commentsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.commentsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<commentsPayload>
          }
          update: {
            args: Prisma.commentsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<commentsPayload>
          }
          deleteMany: {
            args: Prisma.commentsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.commentsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.commentsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<commentsPayload>
          }
          aggregate: {
            args: Prisma.CommentsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateComments>
          }
          groupBy: {
            args: Prisma.commentsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CommentsGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.commentsFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.commentsAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.commentsCountArgs<ExtArgs>,
            result: $Utils.Optional<CommentsCountAggregateOutputType> | number
          }
        }
      }
      reviews: {
        payload: reviewsPayload<ExtArgs>
        fields: Prisma.reviewsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.reviewsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<reviewsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.reviewsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<reviewsPayload>
          }
          findFirst: {
            args: Prisma.reviewsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<reviewsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.reviewsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<reviewsPayload>
          }
          findMany: {
            args: Prisma.reviewsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<reviewsPayload>[]
          }
          create: {
            args: Prisma.reviewsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<reviewsPayload>
          }
          createMany: {
            args: Prisma.reviewsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.reviewsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<reviewsPayload>
          }
          update: {
            args: Prisma.reviewsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<reviewsPayload>
          }
          deleteMany: {
            args: Prisma.reviewsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.reviewsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.reviewsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<reviewsPayload>
          }
          aggregate: {
            args: Prisma.ReviewsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateReviews>
          }
          groupBy: {
            args: Prisma.reviewsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ReviewsGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.reviewsFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.reviewsAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.reviewsCountArgs<ExtArgs>,
            result: $Utils.Optional<ReviewsCountAggregateOutputType> | number
          }
        }
      }
      notifications: {
        payload: notificationsPayload<ExtArgs>
        fields: Prisma.notificationsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.notificationsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<notificationsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.notificationsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<notificationsPayload>
          }
          findFirst: {
            args: Prisma.notificationsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<notificationsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.notificationsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<notificationsPayload>
          }
          findMany: {
            args: Prisma.notificationsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<notificationsPayload>[]
          }
          create: {
            args: Prisma.notificationsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<notificationsPayload>
          }
          createMany: {
            args: Prisma.notificationsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.notificationsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<notificationsPayload>
          }
          update: {
            args: Prisma.notificationsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<notificationsPayload>
          }
          deleteMany: {
            args: Prisma.notificationsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.notificationsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.notificationsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<notificationsPayload>
          }
          aggregate: {
            args: Prisma.NotificationsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateNotifications>
          }
          groupBy: {
            args: Prisma.notificationsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<NotificationsGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.notificationsFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.notificationsAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.notificationsCountArgs<ExtArgs>,
            result: $Utils.Optional<NotificationsCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $runCommandRaw: {
          args: Prisma.InputJsonObject,
          result: Prisma.JsonObject
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsersCountOutputType
   */


  export type UsersCountOutputType = {
    seller: number
    brand: number
    products: number
    comments: number
    reviews: number
    notifications: number
  }

  export type UsersCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    seller?: boolean | UsersCountOutputTypeCountSellerArgs
    brand?: boolean | UsersCountOutputTypeCountBrandArgs
    products?: boolean | UsersCountOutputTypeCountProductsArgs
    comments?: boolean | UsersCountOutputTypeCountCommentsArgs
    reviews?: boolean | UsersCountOutputTypeCountReviewsArgs
    notifications?: boolean | UsersCountOutputTypeCountNotificationsArgs
  }

  // Custom InputTypes

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     */
    select?: UsersCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountSellerArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: sellerWhereInput
  }


  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountBrandArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: brandsWhereInput
  }


  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountProductsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: productsWhereInput
  }


  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: commentsWhereInput
  }


  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountReviewsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: reviewsWhereInput
  }


  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: notificationsWhereInput
  }



  /**
   * Count Type CategoryCountOutputType
   */


  export type CategoryCountOutputType = {
    subCategory: number
    products: number
  }

  export type CategoryCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    subCategory?: boolean | CategoryCountOutputTypeCountSubCategoryArgs
    products?: boolean | CategoryCountOutputTypeCountProductsArgs
  }

  // Custom InputTypes

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryCountOutputType
     */
    select?: CategoryCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountSubCategoryArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: subCategoryWhereInput
  }


  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountProductsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: productsWhereInput
  }



  /**
   * Count Type SubCategoryCountOutputType
   */


  export type SubCategoryCountOutputType = {
    options: number
    products: number
  }

  export type SubCategoryCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    options?: boolean | SubCategoryCountOutputTypeCountOptionsArgs
    products?: boolean | SubCategoryCountOutputTypeCountProductsArgs
  }

  // Custom InputTypes

  /**
   * SubCategoryCountOutputType without action
   */
  export type SubCategoryCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubCategoryCountOutputType
     */
    select?: SubCategoryCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * SubCategoryCountOutputType without action
   */
  export type SubCategoryCountOutputTypeCountOptionsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: optionsWhereInput
  }


  /**
   * SubCategoryCountOutputType without action
   */
  export type SubCategoryCountOutputTypeCountProductsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: productsWhereInput
  }



  /**
   * Count Type OptionsCountOutputType
   */


  export type OptionsCountOutputType = {
    products: number
  }

  export type OptionsCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    products?: boolean | OptionsCountOutputTypeCountProductsArgs
  }

  // Custom InputTypes

  /**
   * OptionsCountOutputType without action
   */
  export type OptionsCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OptionsCountOutputType
     */
    select?: OptionsCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * OptionsCountOutputType without action
   */
  export type OptionsCountOutputTypeCountProductsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: productsWhereInput
  }



  /**
   * Count Type SellerCountOutputType
   */


  export type SellerCountOutputType = {
    products: number
  }

  export type SellerCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    products?: boolean | SellerCountOutputTypeCountProductsArgs
  }

  // Custom InputTypes

  /**
   * SellerCountOutputType without action
   */
  export type SellerCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SellerCountOutputType
     */
    select?: SellerCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * SellerCountOutputType without action
   */
  export type SellerCountOutputTypeCountProductsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: productsWhereInput
  }



  /**
   * Count Type BrandsCountOutputType
   */


  export type BrandsCountOutputType = {
    products: number
  }

  export type BrandsCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    products?: boolean | BrandsCountOutputTypeCountProductsArgs
  }

  // Custom InputTypes

  /**
   * BrandsCountOutputType without action
   */
  export type BrandsCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BrandsCountOutputType
     */
    select?: BrandsCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * BrandsCountOutputType without action
   */
  export type BrandsCountOutputTypeCountProductsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: productsWhereInput
  }



  /**
   * Count Type ProductsCountOutputType
   */


  export type ProductsCountOutputType = {
    offers: number
    coins: number
    variants: number
    comments: number
    reviews: number
  }

  export type ProductsCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    offers?: boolean | ProductsCountOutputTypeCountOffersArgs
    coins?: boolean | ProductsCountOutputTypeCountCoinsArgs
    variants?: boolean | ProductsCountOutputTypeCountVariantsArgs
    comments?: boolean | ProductsCountOutputTypeCountCommentsArgs
    reviews?: boolean | ProductsCountOutputTypeCountReviewsArgs
  }

  // Custom InputTypes

  /**
   * ProductsCountOutputType without action
   */
  export type ProductsCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductsCountOutputType
     */
    select?: ProductsCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ProductsCountOutputType without action
   */
  export type ProductsCountOutputTypeCountOffersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: offersWhereInput
  }


  /**
   * ProductsCountOutputType without action
   */
  export type ProductsCountOutputTypeCountCoinsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: coinsWhereInput
  }


  /**
   * ProductsCountOutputType without action
   */
  export type ProductsCountOutputTypeCountVariantsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: variantsWhereInput
  }


  /**
   * ProductsCountOutputType without action
   */
  export type ProductsCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: commentsWhereInput
  }


  /**
   * ProductsCountOutputType without action
   */
  export type ProductsCountOutputTypeCountReviewsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: reviewsWhereInput
  }



  /**
   * Count Type CommentsCountOutputType
   */


  export type CommentsCountOutputType = {
    notifications: number
  }

  export type CommentsCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    notifications?: boolean | CommentsCountOutputTypeCountNotificationsArgs
  }

  // Custom InputTypes

  /**
   * CommentsCountOutputType without action
   */
  export type CommentsCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommentsCountOutputType
     */
    select?: CommentsCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CommentsCountOutputType without action
   */
  export type CommentsCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: notificationsWhereInput
  }



  /**
   * Count Type ReviewsCountOutputType
   */


  export type ReviewsCountOutputType = {
    notifications: number
  }

  export type ReviewsCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    notifications?: boolean | ReviewsCountOutputTypeCountNotificationsArgs
  }

  // Custom InputTypes

  /**
   * ReviewsCountOutputType without action
   */
  export type ReviewsCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewsCountOutputType
     */
    select?: ReviewsCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ReviewsCountOutputType without action
   */
  export type ReviewsCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: notificationsWhereInput
  }



  /**
   * Models
   */

  /**
   * Model users
   */


  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    role: number | null
  }

  export type UsersSumAggregateOutputType = {
    role: number | null
  }

  export type UsersMinAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    image: string | null
    phone: string | null
    birthday: string | null
    gender: string | null
    role: number | null
    uid: string | null
    createdAt: Date | null
  }

  export type UsersMaxAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    image: string | null
    phone: string | null
    birthday: string | null
    gender: string | null
    role: number | null
    uid: string | null
    createdAt: Date | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    email: number
    name: number
    image: number
    phone: number
    birthday: number
    gender: number
    role: number
    uid: number
    address: number
    createdAt: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    role?: true
  }

  export type UsersSumAggregateInputType = {
    role?: true
  }

  export type UsersMinAggregateInputType = {
    id?: true
    email?: true
    name?: true
    image?: true
    phone?: true
    birthday?: true
    gender?: true
    role?: true
    uid?: true
    createdAt?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    email?: true
    name?: true
    image?: true
    phone?: true
    birthday?: true
    gender?: true
    role?: true
    uid?: true
    createdAt?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    email?: true
    name?: true
    image?: true
    phone?: true
    birthday?: true
    gender?: true
    role?: true
    uid?: true
    address?: true
    createdAt?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to aggregate.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type usersGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: usersWhereInput
    orderBy?: usersOrderByWithAggregationInput | usersOrderByWithAggregationInput[]
    by: UsersScalarFieldEnum[] | UsersScalarFieldEnum
    having?: usersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }


  export type UsersGroupByOutputType = {
    id: string
    email: string | null
    name: string
    image: string | null
    phone: string | null
    birthday: string | null
    gender: string | null
    role: number
    uid: string
    address: JsonValue | null
    createdAt: Date
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends usersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type usersSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    image?: boolean
    phone?: boolean
    birthday?: boolean
    gender?: boolean
    role?: boolean
    uid?: boolean
    address?: boolean
    createdAt?: boolean
    seller?: boolean | users$sellerArgs<ExtArgs>
    brand?: boolean | users$brandArgs<ExtArgs>
    products?: boolean | users$productsArgs<ExtArgs>
    comments?: boolean | users$commentsArgs<ExtArgs>
    reviews?: boolean | users$reviewsArgs<ExtArgs>
    notifications?: boolean | users$notificationsArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>

  export type usersSelectScalar = {
    id?: boolean
    email?: boolean
    name?: boolean
    image?: boolean
    phone?: boolean
    birthday?: boolean
    gender?: boolean
    role?: boolean
    uid?: boolean
    address?: boolean
    createdAt?: boolean
  }

  export type usersInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    seller?: boolean | users$sellerArgs<ExtArgs>
    brand?: boolean | users$brandArgs<ExtArgs>
    products?: boolean | users$productsArgs<ExtArgs>
    comments?: boolean | users$commentsArgs<ExtArgs>
    reviews?: boolean | users$reviewsArgs<ExtArgs>
    notifications?: boolean | users$notificationsArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeArgs<ExtArgs>
  }


  type usersGetPayload<S extends boolean | null | undefined | usersArgs> = $Types.GetResult<usersPayload, S>

  type usersCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<usersFindManyArgs, 'select' | 'include'> & {
      select?: UsersCountAggregateInputType | true
    }

  export interface usersDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['users'], meta: { name: 'users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {usersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends usersFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, usersFindUniqueArgs<ExtArgs>>
    ): Prisma__usersClient<$Types.GetResult<usersPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Users that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {usersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends usersFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, usersFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__usersClient<$Types.GetResult<usersPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends usersFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, usersFindFirstArgs<ExtArgs>>
    ): Prisma__usersClient<$Types.GetResult<usersPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends usersFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, usersFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__usersClient<$Types.GetResult<usersPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends usersFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usersFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<usersPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Users.
     * @param {usersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
    **/
    create<T extends usersCreateArgs<ExtArgs>>(
      args: SelectSubset<T, usersCreateArgs<ExtArgs>>
    ): Prisma__usersClient<$Types.GetResult<usersPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {usersCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const users = await prisma.users.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends usersCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usersCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {usersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
    **/
    delete<T extends usersDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, usersDeleteArgs<ExtArgs>>
    ): Prisma__usersClient<$Types.GetResult<usersPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Users.
     * @param {usersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends usersUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, usersUpdateArgs<ExtArgs>>
    ): Prisma__usersClient<$Types.GetResult<usersPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {usersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends usersDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usersDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends usersUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, usersUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {usersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
    **/
    upsert<T extends usersUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, usersUpsertArgs<ExtArgs>>
    ): Prisma__usersClient<$Types.GetResult<usersPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * @param {usersFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const users = await prisma.users.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: usersFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Users.
     * @param {usersAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const users = await prisma.users.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: usersAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends usersCountArgs>(
      args?: Subset<T, usersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends usersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: usersGroupByArgs['orderBy'] }
        : { orderBy?: usersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, usersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the users model
   */
  readonly fields: usersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__usersClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    seller<T extends users$sellerArgs<ExtArgs> = {}>(args?: Subset<T, users$sellerArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<sellerPayload<ExtArgs>, T, 'findMany'>| Null>;

    brand<T extends users$brandArgs<ExtArgs> = {}>(args?: Subset<T, users$brandArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<brandsPayload<ExtArgs>, T, 'findMany'>| Null>;

    products<T extends users$productsArgs<ExtArgs> = {}>(args?: Subset<T, users$productsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<productsPayload<ExtArgs>, T, 'findMany'>| Null>;

    comments<T extends users$commentsArgs<ExtArgs> = {}>(args?: Subset<T, users$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<commentsPayload<ExtArgs>, T, 'findMany'>| Null>;

    reviews<T extends users$reviewsArgs<ExtArgs> = {}>(args?: Subset<T, users$reviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<reviewsPayload<ExtArgs>, T, 'findMany'>| Null>;

    notifications<T extends users$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, users$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<notificationsPayload<ExtArgs>, T, 'findMany'>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the users model
   */ 
  interface usersFieldRefs {
    readonly id: FieldRef<"users", 'String'>
    readonly email: FieldRef<"users", 'String'>
    readonly name: FieldRef<"users", 'String'>
    readonly image: FieldRef<"users", 'String'>
    readonly phone: FieldRef<"users", 'String'>
    readonly birthday: FieldRef<"users", 'String'>
    readonly gender: FieldRef<"users", 'String'>
    readonly role: FieldRef<"users", 'Int'>
    readonly uid: FieldRef<"users", 'String'>
    readonly address: FieldRef<"users", 'Json'>
    readonly createdAt: FieldRef<"users", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * users findUnique
   */
  export type usersFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }


  /**
   * users findUniqueOrThrow
   */
  export type usersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }


  /**
   * users findFirst
   */
  export type usersFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * users findFirstOrThrow
   */
  export type usersFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * users findMany
   */
  export type usersFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * users create
   */
  export type usersCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The data needed to create a users.
     */
    data: XOR<usersCreateInput, usersUncheckedCreateInput>
  }


  /**
   * users createMany
   */
  export type usersCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many users.
     */
    data: usersCreateManyInput | usersCreateManyInput[]
  }


  /**
   * users update
   */
  export type usersUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The data needed to update a users.
     */
    data: XOR<usersUpdateInput, usersUncheckedUpdateInput>
    /**
     * Choose, which users to update.
     */
    where: usersWhereUniqueInput
  }


  /**
   * users updateMany
   */
  export type usersUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update users.
     */
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: usersWhereInput
  }


  /**
   * users upsert
   */
  export type usersUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The filter to search for the users to update in case it exists.
     */
    where: usersWhereUniqueInput
    /**
     * In case the users found by the `where` argument doesn't exist, create a new users with this data.
     */
    create: XOR<usersCreateInput, usersUncheckedCreateInput>
    /**
     * In case the users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<usersUpdateInput, usersUncheckedUpdateInput>
  }


  /**
   * users delete
   */
  export type usersDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter which users to delete.
     */
    where: usersWhereUniqueInput
  }


  /**
   * users deleteMany
   */
  export type usersDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to delete
     */
    where?: usersWhereInput
  }


  /**
   * users findRaw
   */
  export type usersFindRawArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * users aggregateRaw
   */
  export type usersAggregateRawArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * users.seller
   */
  export type users$sellerArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the seller
     */
    select?: sellerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sellerInclude<ExtArgs> | null
    where?: sellerWhereInput
    orderBy?: sellerOrderByWithRelationInput | sellerOrderByWithRelationInput[]
    cursor?: sellerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SellerScalarFieldEnum | SellerScalarFieldEnum[]
  }


  /**
   * users.brand
   */
  export type users$brandArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the brands
     */
    select?: brandsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: brandsInclude<ExtArgs> | null
    where?: brandsWhereInput
    orderBy?: brandsOrderByWithRelationInput | brandsOrderByWithRelationInput[]
    cursor?: brandsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BrandsScalarFieldEnum | BrandsScalarFieldEnum[]
  }


  /**
   * users.products
   */
  export type users$productsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productsInclude<ExtArgs> | null
    where?: productsWhereInput
    orderBy?: productsOrderByWithRelationInput | productsOrderByWithRelationInput[]
    cursor?: productsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductsScalarFieldEnum | ProductsScalarFieldEnum[]
  }


  /**
   * users.comments
   */
  export type users$commentsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comments
     */
    select?: commentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: commentsInclude<ExtArgs> | null
    where?: commentsWhereInput
    orderBy?: commentsOrderByWithRelationInput | commentsOrderByWithRelationInput[]
    cursor?: commentsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentsScalarFieldEnum | CommentsScalarFieldEnum[]
  }


  /**
   * users.reviews
   */
  export type users$reviewsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reviews
     */
    select?: reviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: reviewsInclude<ExtArgs> | null
    where?: reviewsWhereInput
    orderBy?: reviewsOrderByWithRelationInput | reviewsOrderByWithRelationInput[]
    cursor?: reviewsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReviewsScalarFieldEnum | ReviewsScalarFieldEnum[]
  }


  /**
   * users.notifications
   */
  export type users$notificationsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notifications
     */
    select?: notificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: notificationsInclude<ExtArgs> | null
    where?: notificationsWhereInput
    orderBy?: notificationsOrderByWithRelationInput | notificationsOrderByWithRelationInput[]
    cursor?: notificationsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationsScalarFieldEnum | NotificationsScalarFieldEnum[]
  }


  /**
   * users without action
   */
  export type usersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
  }



  /**
   * Model category
   */


  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryMinAggregateOutputType = {
    id: string | null
    name: string | null
    icon: string | null
  }

  export type CategoryMaxAggregateOutputType = {
    id: string | null
    name: string | null
    icon: string | null
  }

  export type CategoryCountAggregateOutputType = {
    id: number
    name: number
    icon: number
    _all: number
  }


  export type CategoryMinAggregateInputType = {
    id?: true
    name?: true
    icon?: true
  }

  export type CategoryMaxAggregateInputType = {
    id?: true
    name?: true
    icon?: true
  }

  export type CategoryCountAggregateInputType = {
    id?: true
    name?: true
    icon?: true
    _all?: true
  }

  export type CategoryAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which category to aggregate.
     */
    where?: categoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     */
    orderBy?: categoryOrderByWithRelationInput | categoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: categoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned categories
    **/
    _count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }




  export type categoryGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: categoryWhereInput
    orderBy?: categoryOrderByWithAggregationInput | categoryOrderByWithAggregationInput[]
    by: CategoryScalarFieldEnum[] | CategoryScalarFieldEnum
    having?: categoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryCountAggregateInputType | true
    _min?: CategoryMinAggregateInputType
    _max?: CategoryMaxAggregateInputType
  }


  export type CategoryGroupByOutputType = {
    id: string
    name: string
    icon: string
    _count: CategoryCountAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends categoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>
        }
      >
    >


  export type categorySelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    icon?: boolean
    subCategory?: boolean | category$subCategoryArgs<ExtArgs>
    products?: boolean | category$productsArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>

  export type categorySelectScalar = {
    id?: boolean
    name?: boolean
    icon?: boolean
  }

  export type categoryInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    subCategory?: boolean | category$subCategoryArgs<ExtArgs>
    products?: boolean | category$productsArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeArgs<ExtArgs>
  }


  type categoryGetPayload<S extends boolean | null | undefined | categoryArgs> = $Types.GetResult<categoryPayload, S>

  type categoryCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<categoryFindManyArgs, 'select' | 'include'> & {
      select?: CategoryCountAggregateInputType | true
    }

  export interface categoryDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['category'], meta: { name: 'category' } }
    /**
     * Find zero or one Category that matches the filter.
     * @param {categoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends categoryFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, categoryFindUniqueArgs<ExtArgs>>
    ): Prisma__categoryClient<$Types.GetResult<categoryPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Category that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {categoryFindUniqueOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends categoryFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, categoryFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__categoryClient<$Types.GetResult<categoryPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends categoryFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, categoryFindFirstArgs<ExtArgs>>
    ): Prisma__categoryClient<$Types.GetResult<categoryPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Category that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoryFindFirstOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends categoryFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, categoryFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__categoryClient<$Types.GetResult<categoryPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoryWithIdOnly = await prisma.category.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends categoryFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, categoryFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<categoryPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Category.
     * @param {categoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
    **/
    create<T extends categoryCreateArgs<ExtArgs>>(
      args: SelectSubset<T, categoryCreateArgs<ExtArgs>>
    ): Prisma__categoryClient<$Types.GetResult<categoryPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Categories.
     *     @param {categoryCreateManyArgs} args - Arguments to create many Categories.
     *     @example
     *     // Create many Categories
     *     const category = await prisma.category.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends categoryCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, categoryCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Category.
     * @param {categoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
    **/
    delete<T extends categoryDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, categoryDeleteArgs<ExtArgs>>
    ): Prisma__categoryClient<$Types.GetResult<categoryPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Category.
     * @param {categoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends categoryUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, categoryUpdateArgs<ExtArgs>>
    ): Prisma__categoryClient<$Types.GetResult<categoryPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Categories.
     * @param {categoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends categoryDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, categoryDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends categoryUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, categoryUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Category.
     * @param {categoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
    **/
    upsert<T extends categoryUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, categoryUpsertArgs<ExtArgs>>
    ): Prisma__categoryClient<$Types.GetResult<categoryPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Categories that matches the filter.
     * @param {categoryFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const category = await prisma.category.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: categoryFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Category.
     * @param {categoryAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const category = await prisma.category.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: categoryAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends categoryCountArgs>(
      args?: Subset<T, categoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): Prisma.PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends categoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: categoryGroupByArgs['orderBy'] }
        : { orderBy?: categoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, categoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the category model
   */
  readonly fields: categoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__categoryClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    subCategory<T extends category$subCategoryArgs<ExtArgs> = {}>(args?: Subset<T, category$subCategoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<subCategoryPayload<ExtArgs>, T, 'findMany'>| Null>;

    products<T extends category$productsArgs<ExtArgs> = {}>(args?: Subset<T, category$productsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<productsPayload<ExtArgs>, T, 'findMany'>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the category model
   */ 
  interface categoryFieldRefs {
    readonly id: FieldRef<"category", 'String'>
    readonly name: FieldRef<"category", 'String'>
    readonly icon: FieldRef<"category", 'String'>
  }
    

  // Custom InputTypes

  /**
   * category findUnique
   */
  export type categoryFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoryInclude<ExtArgs> | null
    /**
     * Filter, which category to fetch.
     */
    where: categoryWhereUniqueInput
  }


  /**
   * category findUniqueOrThrow
   */
  export type categoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoryInclude<ExtArgs> | null
    /**
     * Filter, which category to fetch.
     */
    where: categoryWhereUniqueInput
  }


  /**
   * category findFirst
   */
  export type categoryFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoryInclude<ExtArgs> | null
    /**
     * Filter, which category to fetch.
     */
    where?: categoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     */
    orderBy?: categoryOrderByWithRelationInput | categoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for categories.
     */
    cursor?: categoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }


  /**
   * category findFirstOrThrow
   */
  export type categoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoryInclude<ExtArgs> | null
    /**
     * Filter, which category to fetch.
     */
    where?: categoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     */
    orderBy?: categoryOrderByWithRelationInput | categoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for categories.
     */
    cursor?: categoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }


  /**
   * category findMany
   */
  export type categoryFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoryInclude<ExtArgs> | null
    /**
     * Filter, which categories to fetch.
     */
    where?: categoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     */
    orderBy?: categoryOrderByWithRelationInput | categoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing categories.
     */
    cursor?: categoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     */
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }


  /**
   * category create
   */
  export type categoryCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoryInclude<ExtArgs> | null
    /**
     * The data needed to create a category.
     */
    data: XOR<categoryCreateInput, categoryUncheckedCreateInput>
  }


  /**
   * category createMany
   */
  export type categoryCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many categories.
     */
    data: categoryCreateManyInput | categoryCreateManyInput[]
  }


  /**
   * category update
   */
  export type categoryUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoryInclude<ExtArgs> | null
    /**
     * The data needed to update a category.
     */
    data: XOR<categoryUpdateInput, categoryUncheckedUpdateInput>
    /**
     * Choose, which category to update.
     */
    where: categoryWhereUniqueInput
  }


  /**
   * category updateMany
   */
  export type categoryUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update categories.
     */
    data: XOR<categoryUpdateManyMutationInput, categoryUncheckedUpdateManyInput>
    /**
     * Filter which categories to update
     */
    where?: categoryWhereInput
  }


  /**
   * category upsert
   */
  export type categoryUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoryInclude<ExtArgs> | null
    /**
     * The filter to search for the category to update in case it exists.
     */
    where: categoryWhereUniqueInput
    /**
     * In case the category found by the `where` argument doesn't exist, create a new category with this data.
     */
    create: XOR<categoryCreateInput, categoryUncheckedCreateInput>
    /**
     * In case the category was found with the provided `where` argument, update it with this data.
     */
    update: XOR<categoryUpdateInput, categoryUncheckedUpdateInput>
  }


  /**
   * category delete
   */
  export type categoryDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoryInclude<ExtArgs> | null
    /**
     * Filter which category to delete.
     */
    where: categoryWhereUniqueInput
  }


  /**
   * category deleteMany
   */
  export type categoryDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which categories to delete
     */
    where?: categoryWhereInput
  }


  /**
   * category findRaw
   */
  export type categoryFindRawArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * category aggregateRaw
   */
  export type categoryAggregateRawArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * category.subCategory
   */
  export type category$subCategoryArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subCategory
     */
    select?: subCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: subCategoryInclude<ExtArgs> | null
    where?: subCategoryWhereInput
    orderBy?: subCategoryOrderByWithRelationInput | subCategoryOrderByWithRelationInput[]
    cursor?: subCategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubCategoryScalarFieldEnum | SubCategoryScalarFieldEnum[]
  }


  /**
   * category.products
   */
  export type category$productsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productsInclude<ExtArgs> | null
    where?: productsWhereInput
    orderBy?: productsOrderByWithRelationInput | productsOrderByWithRelationInput[]
    cursor?: productsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductsScalarFieldEnum | ProductsScalarFieldEnum[]
  }


  /**
   * category without action
   */
  export type categoryArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoryInclude<ExtArgs> | null
  }



  /**
   * Model subCategory
   */


  export type AggregateSubCategory = {
    _count: SubCategoryCountAggregateOutputType | null
    _min: SubCategoryMinAggregateOutputType | null
    _max: SubCategoryMaxAggregateOutputType | null
  }

  export type SubCategoryMinAggregateOutputType = {
    id: string | null
    name: string | null
    categoryId: string | null
  }

  export type SubCategoryMaxAggregateOutputType = {
    id: string | null
    name: string | null
    categoryId: string | null
  }

  export type SubCategoryCountAggregateOutputType = {
    id: number
    name: number
    categoryId: number
    _all: number
  }


  export type SubCategoryMinAggregateInputType = {
    id?: true
    name?: true
    categoryId?: true
  }

  export type SubCategoryMaxAggregateInputType = {
    id?: true
    name?: true
    categoryId?: true
  }

  export type SubCategoryCountAggregateInputType = {
    id?: true
    name?: true
    categoryId?: true
    _all?: true
  }

  export type SubCategoryAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which subCategory to aggregate.
     */
    where?: subCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of subCategories to fetch.
     */
    orderBy?: subCategoryOrderByWithRelationInput | subCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: subCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` subCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` subCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned subCategories
    **/
    _count?: true | SubCategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubCategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubCategoryMaxAggregateInputType
  }

  export type GetSubCategoryAggregateType<T extends SubCategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateSubCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubCategory[P]>
      : GetScalarType<T[P], AggregateSubCategory[P]>
  }




  export type subCategoryGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: subCategoryWhereInput
    orderBy?: subCategoryOrderByWithAggregationInput | subCategoryOrderByWithAggregationInput[]
    by: SubCategoryScalarFieldEnum[] | SubCategoryScalarFieldEnum
    having?: subCategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubCategoryCountAggregateInputType | true
    _min?: SubCategoryMinAggregateInputType
    _max?: SubCategoryMaxAggregateInputType
  }


  export type SubCategoryGroupByOutputType = {
    id: string
    name: string
    categoryId: string
    _count: SubCategoryCountAggregateOutputType | null
    _min: SubCategoryMinAggregateOutputType | null
    _max: SubCategoryMaxAggregateOutputType | null
  }

  type GetSubCategoryGroupByPayload<T extends subCategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubCategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubCategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubCategoryGroupByOutputType[P]>
            : GetScalarType<T[P], SubCategoryGroupByOutputType[P]>
        }
      >
    >


  export type subCategorySelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    categoryId?: boolean
    category?: boolean | subCategory$categoryArgs<ExtArgs>
    options?: boolean | subCategory$optionsArgs<ExtArgs>
    products?: boolean | subCategory$productsArgs<ExtArgs>
    _count?: boolean | SubCategoryCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["subCategory"]>

  export type subCategorySelectScalar = {
    id?: boolean
    name?: boolean
    categoryId?: boolean
  }

  export type subCategoryInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    category?: boolean | subCategory$categoryArgs<ExtArgs>
    options?: boolean | subCategory$optionsArgs<ExtArgs>
    products?: boolean | subCategory$productsArgs<ExtArgs>
    _count?: boolean | SubCategoryCountOutputTypeArgs<ExtArgs>
  }


  type subCategoryGetPayload<S extends boolean | null | undefined | subCategoryArgs> = $Types.GetResult<subCategoryPayload, S>

  type subCategoryCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<subCategoryFindManyArgs, 'select' | 'include'> & {
      select?: SubCategoryCountAggregateInputType | true
    }

  export interface subCategoryDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['subCategory'], meta: { name: 'subCategory' } }
    /**
     * Find zero or one SubCategory that matches the filter.
     * @param {subCategoryFindUniqueArgs} args - Arguments to find a SubCategory
     * @example
     * // Get one SubCategory
     * const subCategory = await prisma.subCategory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends subCategoryFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, subCategoryFindUniqueArgs<ExtArgs>>
    ): Prisma__subCategoryClient<$Types.GetResult<subCategoryPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one SubCategory that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {subCategoryFindUniqueOrThrowArgs} args - Arguments to find a SubCategory
     * @example
     * // Get one SubCategory
     * const subCategory = await prisma.subCategory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends subCategoryFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, subCategoryFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__subCategoryClient<$Types.GetResult<subCategoryPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first SubCategory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {subCategoryFindFirstArgs} args - Arguments to find a SubCategory
     * @example
     * // Get one SubCategory
     * const subCategory = await prisma.subCategory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends subCategoryFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, subCategoryFindFirstArgs<ExtArgs>>
    ): Prisma__subCategoryClient<$Types.GetResult<subCategoryPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first SubCategory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {subCategoryFindFirstOrThrowArgs} args - Arguments to find a SubCategory
     * @example
     * // Get one SubCategory
     * const subCategory = await prisma.subCategory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends subCategoryFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, subCategoryFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__subCategoryClient<$Types.GetResult<subCategoryPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more SubCategories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {subCategoryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SubCategories
     * const subCategories = await prisma.subCategory.findMany()
     * 
     * // Get first 10 SubCategories
     * const subCategories = await prisma.subCategory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const subCategoryWithIdOnly = await prisma.subCategory.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends subCategoryFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, subCategoryFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<subCategoryPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a SubCategory.
     * @param {subCategoryCreateArgs} args - Arguments to create a SubCategory.
     * @example
     * // Create one SubCategory
     * const SubCategory = await prisma.subCategory.create({
     *   data: {
     *     // ... data to create a SubCategory
     *   }
     * })
     * 
    **/
    create<T extends subCategoryCreateArgs<ExtArgs>>(
      args: SelectSubset<T, subCategoryCreateArgs<ExtArgs>>
    ): Prisma__subCategoryClient<$Types.GetResult<subCategoryPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many SubCategories.
     *     @param {subCategoryCreateManyArgs} args - Arguments to create many SubCategories.
     *     @example
     *     // Create many SubCategories
     *     const subCategory = await prisma.subCategory.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends subCategoryCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, subCategoryCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SubCategory.
     * @param {subCategoryDeleteArgs} args - Arguments to delete one SubCategory.
     * @example
     * // Delete one SubCategory
     * const SubCategory = await prisma.subCategory.delete({
     *   where: {
     *     // ... filter to delete one SubCategory
     *   }
     * })
     * 
    **/
    delete<T extends subCategoryDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, subCategoryDeleteArgs<ExtArgs>>
    ): Prisma__subCategoryClient<$Types.GetResult<subCategoryPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one SubCategory.
     * @param {subCategoryUpdateArgs} args - Arguments to update one SubCategory.
     * @example
     * // Update one SubCategory
     * const subCategory = await prisma.subCategory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends subCategoryUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, subCategoryUpdateArgs<ExtArgs>>
    ): Prisma__subCategoryClient<$Types.GetResult<subCategoryPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more SubCategories.
     * @param {subCategoryDeleteManyArgs} args - Arguments to filter SubCategories to delete.
     * @example
     * // Delete a few SubCategories
     * const { count } = await prisma.subCategory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends subCategoryDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, subCategoryDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SubCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {subCategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SubCategories
     * const subCategory = await prisma.subCategory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends subCategoryUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, subCategoryUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SubCategory.
     * @param {subCategoryUpsertArgs} args - Arguments to update or create a SubCategory.
     * @example
     * // Update or create a SubCategory
     * const subCategory = await prisma.subCategory.upsert({
     *   create: {
     *     // ... data to create a SubCategory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SubCategory we want to update
     *   }
     * })
    **/
    upsert<T extends subCategoryUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, subCategoryUpsertArgs<ExtArgs>>
    ): Prisma__subCategoryClient<$Types.GetResult<subCategoryPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more SubCategories that matches the filter.
     * @param {subCategoryFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const subCategory = await prisma.subCategory.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: subCategoryFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a SubCategory.
     * @param {subCategoryAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const subCategory = await prisma.subCategory.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: subCategoryAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of SubCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {subCategoryCountArgs} args - Arguments to filter SubCategories to count.
     * @example
     * // Count the number of SubCategories
     * const count = await prisma.subCategory.count({
     *   where: {
     *     // ... the filter for the SubCategories we want to count
     *   }
     * })
    **/
    count<T extends subCategoryCountArgs>(
      args?: Subset<T, subCategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubCategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SubCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubCategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubCategoryAggregateArgs>(args: Subset<T, SubCategoryAggregateArgs>): Prisma.PrismaPromise<GetSubCategoryAggregateType<T>>

    /**
     * Group by SubCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {subCategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends subCategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: subCategoryGroupByArgs['orderBy'] }
        : { orderBy?: subCategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, subCategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the subCategory model
   */
  readonly fields: subCategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for subCategory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__subCategoryClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    category<T extends subCategory$categoryArgs<ExtArgs> = {}>(args?: Subset<T, subCategory$categoryArgs<ExtArgs>>): Prisma__categoryClient<$Types.GetResult<categoryPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    options<T extends subCategory$optionsArgs<ExtArgs> = {}>(args?: Subset<T, subCategory$optionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<optionsPayload<ExtArgs>, T, 'findMany'>| Null>;

    products<T extends subCategory$productsArgs<ExtArgs> = {}>(args?: Subset<T, subCategory$productsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<productsPayload<ExtArgs>, T, 'findMany'>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the subCategory model
   */ 
  interface subCategoryFieldRefs {
    readonly id: FieldRef<"subCategory", 'String'>
    readonly name: FieldRef<"subCategory", 'String'>
    readonly categoryId: FieldRef<"subCategory", 'String'>
  }
    

  // Custom InputTypes

  /**
   * subCategory findUnique
   */
  export type subCategoryFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subCategory
     */
    select?: subCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: subCategoryInclude<ExtArgs> | null
    /**
     * Filter, which subCategory to fetch.
     */
    where: subCategoryWhereUniqueInput
  }


  /**
   * subCategory findUniqueOrThrow
   */
  export type subCategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subCategory
     */
    select?: subCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: subCategoryInclude<ExtArgs> | null
    /**
     * Filter, which subCategory to fetch.
     */
    where: subCategoryWhereUniqueInput
  }


  /**
   * subCategory findFirst
   */
  export type subCategoryFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subCategory
     */
    select?: subCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: subCategoryInclude<ExtArgs> | null
    /**
     * Filter, which subCategory to fetch.
     */
    where?: subCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of subCategories to fetch.
     */
    orderBy?: subCategoryOrderByWithRelationInput | subCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for subCategories.
     */
    cursor?: subCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` subCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` subCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of subCategories.
     */
    distinct?: SubCategoryScalarFieldEnum | SubCategoryScalarFieldEnum[]
  }


  /**
   * subCategory findFirstOrThrow
   */
  export type subCategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subCategory
     */
    select?: subCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: subCategoryInclude<ExtArgs> | null
    /**
     * Filter, which subCategory to fetch.
     */
    where?: subCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of subCategories to fetch.
     */
    orderBy?: subCategoryOrderByWithRelationInput | subCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for subCategories.
     */
    cursor?: subCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` subCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` subCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of subCategories.
     */
    distinct?: SubCategoryScalarFieldEnum | SubCategoryScalarFieldEnum[]
  }


  /**
   * subCategory findMany
   */
  export type subCategoryFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subCategory
     */
    select?: subCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: subCategoryInclude<ExtArgs> | null
    /**
     * Filter, which subCategories to fetch.
     */
    where?: subCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of subCategories to fetch.
     */
    orderBy?: subCategoryOrderByWithRelationInput | subCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing subCategories.
     */
    cursor?: subCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` subCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` subCategories.
     */
    skip?: number
    distinct?: SubCategoryScalarFieldEnum | SubCategoryScalarFieldEnum[]
  }


  /**
   * subCategory create
   */
  export type subCategoryCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subCategory
     */
    select?: subCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: subCategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a subCategory.
     */
    data: XOR<subCategoryCreateInput, subCategoryUncheckedCreateInput>
  }


  /**
   * subCategory createMany
   */
  export type subCategoryCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many subCategories.
     */
    data: subCategoryCreateManyInput | subCategoryCreateManyInput[]
  }


  /**
   * subCategory update
   */
  export type subCategoryUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subCategory
     */
    select?: subCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: subCategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a subCategory.
     */
    data: XOR<subCategoryUpdateInput, subCategoryUncheckedUpdateInput>
    /**
     * Choose, which subCategory to update.
     */
    where: subCategoryWhereUniqueInput
  }


  /**
   * subCategory updateMany
   */
  export type subCategoryUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update subCategories.
     */
    data: XOR<subCategoryUpdateManyMutationInput, subCategoryUncheckedUpdateManyInput>
    /**
     * Filter which subCategories to update
     */
    where?: subCategoryWhereInput
  }


  /**
   * subCategory upsert
   */
  export type subCategoryUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subCategory
     */
    select?: subCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: subCategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the subCategory to update in case it exists.
     */
    where: subCategoryWhereUniqueInput
    /**
     * In case the subCategory found by the `where` argument doesn't exist, create a new subCategory with this data.
     */
    create: XOR<subCategoryCreateInput, subCategoryUncheckedCreateInput>
    /**
     * In case the subCategory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<subCategoryUpdateInput, subCategoryUncheckedUpdateInput>
  }


  /**
   * subCategory delete
   */
  export type subCategoryDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subCategory
     */
    select?: subCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: subCategoryInclude<ExtArgs> | null
    /**
     * Filter which subCategory to delete.
     */
    where: subCategoryWhereUniqueInput
  }


  /**
   * subCategory deleteMany
   */
  export type subCategoryDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which subCategories to delete
     */
    where?: subCategoryWhereInput
  }


  /**
   * subCategory findRaw
   */
  export type subCategoryFindRawArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * subCategory aggregateRaw
   */
  export type subCategoryAggregateRawArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * subCategory.category
   */
  export type subCategory$categoryArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoryInclude<ExtArgs> | null
    where?: categoryWhereInput
  }


  /**
   * subCategory.options
   */
  export type subCategory$optionsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the options
     */
    select?: optionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: optionsInclude<ExtArgs> | null
    where?: optionsWhereInput
    orderBy?: optionsOrderByWithRelationInput | optionsOrderByWithRelationInput[]
    cursor?: optionsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OptionsScalarFieldEnum | OptionsScalarFieldEnum[]
  }


  /**
   * subCategory.products
   */
  export type subCategory$productsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productsInclude<ExtArgs> | null
    where?: productsWhereInput
    orderBy?: productsOrderByWithRelationInput | productsOrderByWithRelationInput[]
    cursor?: productsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductsScalarFieldEnum | ProductsScalarFieldEnum[]
  }


  /**
   * subCategory without action
   */
  export type subCategoryArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subCategory
     */
    select?: subCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: subCategoryInclude<ExtArgs> | null
  }



  /**
   * Model options
   */


  export type AggregateOptions = {
    _count: OptionsCountAggregateOutputType | null
    _min: OptionsMinAggregateOutputType | null
    _max: OptionsMaxAggregateOutputType | null
  }

  export type OptionsMinAggregateOutputType = {
    id: string | null
    name: string | null
    subCategoryId: string | null
  }

  export type OptionsMaxAggregateOutputType = {
    id: string | null
    name: string | null
    subCategoryId: string | null
  }

  export type OptionsCountAggregateOutputType = {
    id: number
    name: number
    subCategoryId: number
    _all: number
  }


  export type OptionsMinAggregateInputType = {
    id?: true
    name?: true
    subCategoryId?: true
  }

  export type OptionsMaxAggregateInputType = {
    id?: true
    name?: true
    subCategoryId?: true
  }

  export type OptionsCountAggregateInputType = {
    id?: true
    name?: true
    subCategoryId?: true
    _all?: true
  }

  export type OptionsAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which options to aggregate.
     */
    where?: optionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of options to fetch.
     */
    orderBy?: optionsOrderByWithRelationInput | optionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: optionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` options from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` options.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned options
    **/
    _count?: true | OptionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OptionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OptionsMaxAggregateInputType
  }

  export type GetOptionsAggregateType<T extends OptionsAggregateArgs> = {
        [P in keyof T & keyof AggregateOptions]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOptions[P]>
      : GetScalarType<T[P], AggregateOptions[P]>
  }




  export type optionsGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: optionsWhereInput
    orderBy?: optionsOrderByWithAggregationInput | optionsOrderByWithAggregationInput[]
    by: OptionsScalarFieldEnum[] | OptionsScalarFieldEnum
    having?: optionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OptionsCountAggregateInputType | true
    _min?: OptionsMinAggregateInputType
    _max?: OptionsMaxAggregateInputType
  }


  export type OptionsGroupByOutputType = {
    id: string
    name: string
    subCategoryId: string
    _count: OptionsCountAggregateOutputType | null
    _min: OptionsMinAggregateOutputType | null
    _max: OptionsMaxAggregateOutputType | null
  }

  type GetOptionsGroupByPayload<T extends optionsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OptionsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OptionsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OptionsGroupByOutputType[P]>
            : GetScalarType<T[P], OptionsGroupByOutputType[P]>
        }
      >
    >


  export type optionsSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    subCategoryId?: boolean
    subCategory?: boolean | options$subCategoryArgs<ExtArgs>
    products?: boolean | options$productsArgs<ExtArgs>
    _count?: boolean | OptionsCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["options"]>

  export type optionsSelectScalar = {
    id?: boolean
    name?: boolean
    subCategoryId?: boolean
  }

  export type optionsInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    subCategory?: boolean | options$subCategoryArgs<ExtArgs>
    products?: boolean | options$productsArgs<ExtArgs>
    _count?: boolean | OptionsCountOutputTypeArgs<ExtArgs>
  }


  type optionsGetPayload<S extends boolean | null | undefined | optionsArgs> = $Types.GetResult<optionsPayload, S>

  type optionsCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<optionsFindManyArgs, 'select' | 'include'> & {
      select?: OptionsCountAggregateInputType | true
    }

  export interface optionsDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['options'], meta: { name: 'options' } }
    /**
     * Find zero or one Options that matches the filter.
     * @param {optionsFindUniqueArgs} args - Arguments to find a Options
     * @example
     * // Get one Options
     * const options = await prisma.options.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends optionsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, optionsFindUniqueArgs<ExtArgs>>
    ): Prisma__optionsClient<$Types.GetResult<optionsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Options that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {optionsFindUniqueOrThrowArgs} args - Arguments to find a Options
     * @example
     * // Get one Options
     * const options = await prisma.options.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends optionsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, optionsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__optionsClient<$Types.GetResult<optionsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Options that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {optionsFindFirstArgs} args - Arguments to find a Options
     * @example
     * // Get one Options
     * const options = await prisma.options.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends optionsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, optionsFindFirstArgs<ExtArgs>>
    ): Prisma__optionsClient<$Types.GetResult<optionsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Options that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {optionsFindFirstOrThrowArgs} args - Arguments to find a Options
     * @example
     * // Get one Options
     * const options = await prisma.options.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends optionsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, optionsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__optionsClient<$Types.GetResult<optionsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Options that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {optionsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Options
     * const options = await prisma.options.findMany()
     * 
     * // Get first 10 Options
     * const options = await prisma.options.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const optionsWithIdOnly = await prisma.options.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends optionsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, optionsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<optionsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Options.
     * @param {optionsCreateArgs} args - Arguments to create a Options.
     * @example
     * // Create one Options
     * const Options = await prisma.options.create({
     *   data: {
     *     // ... data to create a Options
     *   }
     * })
     * 
    **/
    create<T extends optionsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, optionsCreateArgs<ExtArgs>>
    ): Prisma__optionsClient<$Types.GetResult<optionsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Options.
     *     @param {optionsCreateManyArgs} args - Arguments to create many Options.
     *     @example
     *     // Create many Options
     *     const options = await prisma.options.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends optionsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, optionsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Options.
     * @param {optionsDeleteArgs} args - Arguments to delete one Options.
     * @example
     * // Delete one Options
     * const Options = await prisma.options.delete({
     *   where: {
     *     // ... filter to delete one Options
     *   }
     * })
     * 
    **/
    delete<T extends optionsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, optionsDeleteArgs<ExtArgs>>
    ): Prisma__optionsClient<$Types.GetResult<optionsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Options.
     * @param {optionsUpdateArgs} args - Arguments to update one Options.
     * @example
     * // Update one Options
     * const options = await prisma.options.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends optionsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, optionsUpdateArgs<ExtArgs>>
    ): Prisma__optionsClient<$Types.GetResult<optionsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Options.
     * @param {optionsDeleteManyArgs} args - Arguments to filter Options to delete.
     * @example
     * // Delete a few Options
     * const { count } = await prisma.options.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends optionsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, optionsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Options.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {optionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Options
     * const options = await prisma.options.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends optionsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, optionsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Options.
     * @param {optionsUpsertArgs} args - Arguments to update or create a Options.
     * @example
     * // Update or create a Options
     * const options = await prisma.options.upsert({
     *   create: {
     *     // ... data to create a Options
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Options we want to update
     *   }
     * })
    **/
    upsert<T extends optionsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, optionsUpsertArgs<ExtArgs>>
    ): Prisma__optionsClient<$Types.GetResult<optionsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Options that matches the filter.
     * @param {optionsFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const options = await prisma.options.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: optionsFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Options.
     * @param {optionsAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const options = await prisma.options.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: optionsAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Options.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {optionsCountArgs} args - Arguments to filter Options to count.
     * @example
     * // Count the number of Options
     * const count = await prisma.options.count({
     *   where: {
     *     // ... the filter for the Options we want to count
     *   }
     * })
    **/
    count<T extends optionsCountArgs>(
      args?: Subset<T, optionsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OptionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Options.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OptionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OptionsAggregateArgs>(args: Subset<T, OptionsAggregateArgs>): Prisma.PrismaPromise<GetOptionsAggregateType<T>>

    /**
     * Group by Options.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {optionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends optionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: optionsGroupByArgs['orderBy'] }
        : { orderBy?: optionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, optionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOptionsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the options model
   */
  readonly fields: optionsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for options.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__optionsClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    subCategory<T extends options$subCategoryArgs<ExtArgs> = {}>(args?: Subset<T, options$subCategoryArgs<ExtArgs>>): Prisma__subCategoryClient<$Types.GetResult<subCategoryPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    products<T extends options$productsArgs<ExtArgs> = {}>(args?: Subset<T, options$productsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<productsPayload<ExtArgs>, T, 'findMany'>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the options model
   */ 
  interface optionsFieldRefs {
    readonly id: FieldRef<"options", 'String'>
    readonly name: FieldRef<"options", 'String'>
    readonly subCategoryId: FieldRef<"options", 'String'>
  }
    

  // Custom InputTypes

  /**
   * options findUnique
   */
  export type optionsFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the options
     */
    select?: optionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: optionsInclude<ExtArgs> | null
    /**
     * Filter, which options to fetch.
     */
    where: optionsWhereUniqueInput
  }


  /**
   * options findUniqueOrThrow
   */
  export type optionsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the options
     */
    select?: optionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: optionsInclude<ExtArgs> | null
    /**
     * Filter, which options to fetch.
     */
    where: optionsWhereUniqueInput
  }


  /**
   * options findFirst
   */
  export type optionsFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the options
     */
    select?: optionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: optionsInclude<ExtArgs> | null
    /**
     * Filter, which options to fetch.
     */
    where?: optionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of options to fetch.
     */
    orderBy?: optionsOrderByWithRelationInput | optionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for options.
     */
    cursor?: optionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` options from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` options.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of options.
     */
    distinct?: OptionsScalarFieldEnum | OptionsScalarFieldEnum[]
  }


  /**
   * options findFirstOrThrow
   */
  export type optionsFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the options
     */
    select?: optionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: optionsInclude<ExtArgs> | null
    /**
     * Filter, which options to fetch.
     */
    where?: optionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of options to fetch.
     */
    orderBy?: optionsOrderByWithRelationInput | optionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for options.
     */
    cursor?: optionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` options from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` options.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of options.
     */
    distinct?: OptionsScalarFieldEnum | OptionsScalarFieldEnum[]
  }


  /**
   * options findMany
   */
  export type optionsFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the options
     */
    select?: optionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: optionsInclude<ExtArgs> | null
    /**
     * Filter, which options to fetch.
     */
    where?: optionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of options to fetch.
     */
    orderBy?: optionsOrderByWithRelationInput | optionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing options.
     */
    cursor?: optionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` options from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` options.
     */
    skip?: number
    distinct?: OptionsScalarFieldEnum | OptionsScalarFieldEnum[]
  }


  /**
   * options create
   */
  export type optionsCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the options
     */
    select?: optionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: optionsInclude<ExtArgs> | null
    /**
     * The data needed to create a options.
     */
    data: XOR<optionsCreateInput, optionsUncheckedCreateInput>
  }


  /**
   * options createMany
   */
  export type optionsCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many options.
     */
    data: optionsCreateManyInput | optionsCreateManyInput[]
  }


  /**
   * options update
   */
  export type optionsUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the options
     */
    select?: optionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: optionsInclude<ExtArgs> | null
    /**
     * The data needed to update a options.
     */
    data: XOR<optionsUpdateInput, optionsUncheckedUpdateInput>
    /**
     * Choose, which options to update.
     */
    where: optionsWhereUniqueInput
  }


  /**
   * options updateMany
   */
  export type optionsUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update options.
     */
    data: XOR<optionsUpdateManyMutationInput, optionsUncheckedUpdateManyInput>
    /**
     * Filter which options to update
     */
    where?: optionsWhereInput
  }


  /**
   * options upsert
   */
  export type optionsUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the options
     */
    select?: optionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: optionsInclude<ExtArgs> | null
    /**
     * The filter to search for the options to update in case it exists.
     */
    where: optionsWhereUniqueInput
    /**
     * In case the options found by the `where` argument doesn't exist, create a new options with this data.
     */
    create: XOR<optionsCreateInput, optionsUncheckedCreateInput>
    /**
     * In case the options was found with the provided `where` argument, update it with this data.
     */
    update: XOR<optionsUpdateInput, optionsUncheckedUpdateInput>
  }


  /**
   * options delete
   */
  export type optionsDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the options
     */
    select?: optionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: optionsInclude<ExtArgs> | null
    /**
     * Filter which options to delete.
     */
    where: optionsWhereUniqueInput
  }


  /**
   * options deleteMany
   */
  export type optionsDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which options to delete
     */
    where?: optionsWhereInput
  }


  /**
   * options findRaw
   */
  export type optionsFindRawArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * options aggregateRaw
   */
  export type optionsAggregateRawArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * options.subCategory
   */
  export type options$subCategoryArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subCategory
     */
    select?: subCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: subCategoryInclude<ExtArgs> | null
    where?: subCategoryWhereInput
  }


  /**
   * options.products
   */
  export type options$productsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productsInclude<ExtArgs> | null
    where?: productsWhereInput
    orderBy?: productsOrderByWithRelationInput | productsOrderByWithRelationInput[]
    cursor?: productsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductsScalarFieldEnum | ProductsScalarFieldEnum[]
  }


  /**
   * options without action
   */
  export type optionsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the options
     */
    select?: optionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: optionsInclude<ExtArgs> | null
  }



  /**
   * Model seller
   */


  export type AggregateSeller = {
    _count: SellerCountAggregateOutputType | null
    _min: SellerMinAggregateOutputType | null
    _max: SellerMaxAggregateOutputType | null
  }

  export type SellerMinAggregateOutputType = {
    id: string | null
    userId: string | null
    shopName: string | null
    shopAddress: string | null
  }

  export type SellerMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    shopName: string | null
    shopAddress: string | null
  }

  export type SellerCountAggregateOutputType = {
    id: number
    userId: number
    shopName: number
    shopAddress: number
    _all: number
  }


  export type SellerMinAggregateInputType = {
    id?: true
    userId?: true
    shopName?: true
    shopAddress?: true
  }

  export type SellerMaxAggregateInputType = {
    id?: true
    userId?: true
    shopName?: true
    shopAddress?: true
  }

  export type SellerCountAggregateInputType = {
    id?: true
    userId?: true
    shopName?: true
    shopAddress?: true
    _all?: true
  }

  export type SellerAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which seller to aggregate.
     */
    where?: sellerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sellers to fetch.
     */
    orderBy?: sellerOrderByWithRelationInput | sellerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: sellerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sellers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sellers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned sellers
    **/
    _count?: true | SellerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SellerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SellerMaxAggregateInputType
  }

  export type GetSellerAggregateType<T extends SellerAggregateArgs> = {
        [P in keyof T & keyof AggregateSeller]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSeller[P]>
      : GetScalarType<T[P], AggregateSeller[P]>
  }




  export type sellerGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: sellerWhereInput
    orderBy?: sellerOrderByWithAggregationInput | sellerOrderByWithAggregationInput[]
    by: SellerScalarFieldEnum[] | SellerScalarFieldEnum
    having?: sellerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SellerCountAggregateInputType | true
    _min?: SellerMinAggregateInputType
    _max?: SellerMaxAggregateInputType
  }


  export type SellerGroupByOutputType = {
    id: string
    userId: string
    shopName: string
    shopAddress: string
    _count: SellerCountAggregateOutputType | null
    _min: SellerMinAggregateOutputType | null
    _max: SellerMaxAggregateOutputType | null
  }

  type GetSellerGroupByPayload<T extends sellerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SellerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SellerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SellerGroupByOutputType[P]>
            : GetScalarType<T[P], SellerGroupByOutputType[P]>
        }
      >
    >


  export type sellerSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    shopName?: boolean
    shopAddress?: boolean
    user?: boolean | seller$userArgs<ExtArgs>
    products?: boolean | seller$productsArgs<ExtArgs>
    _count?: boolean | SellerCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["seller"]>

  export type sellerSelectScalar = {
    id?: boolean
    userId?: boolean
    shopName?: boolean
    shopAddress?: boolean
  }

  export type sellerInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | seller$userArgs<ExtArgs>
    products?: boolean | seller$productsArgs<ExtArgs>
    _count?: boolean | SellerCountOutputTypeArgs<ExtArgs>
  }


  type sellerGetPayload<S extends boolean | null | undefined | sellerArgs> = $Types.GetResult<sellerPayload, S>

  type sellerCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<sellerFindManyArgs, 'select' | 'include'> & {
      select?: SellerCountAggregateInputType | true
    }

  export interface sellerDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['seller'], meta: { name: 'seller' } }
    /**
     * Find zero or one Seller that matches the filter.
     * @param {sellerFindUniqueArgs} args - Arguments to find a Seller
     * @example
     * // Get one Seller
     * const seller = await prisma.seller.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends sellerFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, sellerFindUniqueArgs<ExtArgs>>
    ): Prisma__sellerClient<$Types.GetResult<sellerPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Seller that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {sellerFindUniqueOrThrowArgs} args - Arguments to find a Seller
     * @example
     * // Get one Seller
     * const seller = await prisma.seller.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends sellerFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, sellerFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__sellerClient<$Types.GetResult<sellerPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Seller that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sellerFindFirstArgs} args - Arguments to find a Seller
     * @example
     * // Get one Seller
     * const seller = await prisma.seller.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends sellerFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, sellerFindFirstArgs<ExtArgs>>
    ): Prisma__sellerClient<$Types.GetResult<sellerPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Seller that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sellerFindFirstOrThrowArgs} args - Arguments to find a Seller
     * @example
     * // Get one Seller
     * const seller = await prisma.seller.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends sellerFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, sellerFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__sellerClient<$Types.GetResult<sellerPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Sellers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sellerFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sellers
     * const sellers = await prisma.seller.findMany()
     * 
     * // Get first 10 Sellers
     * const sellers = await prisma.seller.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sellerWithIdOnly = await prisma.seller.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends sellerFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, sellerFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<sellerPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Seller.
     * @param {sellerCreateArgs} args - Arguments to create a Seller.
     * @example
     * // Create one Seller
     * const Seller = await prisma.seller.create({
     *   data: {
     *     // ... data to create a Seller
     *   }
     * })
     * 
    **/
    create<T extends sellerCreateArgs<ExtArgs>>(
      args: SelectSubset<T, sellerCreateArgs<ExtArgs>>
    ): Prisma__sellerClient<$Types.GetResult<sellerPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Sellers.
     *     @param {sellerCreateManyArgs} args - Arguments to create many Sellers.
     *     @example
     *     // Create many Sellers
     *     const seller = await prisma.seller.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends sellerCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, sellerCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Seller.
     * @param {sellerDeleteArgs} args - Arguments to delete one Seller.
     * @example
     * // Delete one Seller
     * const Seller = await prisma.seller.delete({
     *   where: {
     *     // ... filter to delete one Seller
     *   }
     * })
     * 
    **/
    delete<T extends sellerDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, sellerDeleteArgs<ExtArgs>>
    ): Prisma__sellerClient<$Types.GetResult<sellerPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Seller.
     * @param {sellerUpdateArgs} args - Arguments to update one Seller.
     * @example
     * // Update one Seller
     * const seller = await prisma.seller.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends sellerUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, sellerUpdateArgs<ExtArgs>>
    ): Prisma__sellerClient<$Types.GetResult<sellerPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Sellers.
     * @param {sellerDeleteManyArgs} args - Arguments to filter Sellers to delete.
     * @example
     * // Delete a few Sellers
     * const { count } = await prisma.seller.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends sellerDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, sellerDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sellers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sellerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sellers
     * const seller = await prisma.seller.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends sellerUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, sellerUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Seller.
     * @param {sellerUpsertArgs} args - Arguments to update or create a Seller.
     * @example
     * // Update or create a Seller
     * const seller = await prisma.seller.upsert({
     *   create: {
     *     // ... data to create a Seller
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Seller we want to update
     *   }
     * })
    **/
    upsert<T extends sellerUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, sellerUpsertArgs<ExtArgs>>
    ): Prisma__sellerClient<$Types.GetResult<sellerPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Sellers that matches the filter.
     * @param {sellerFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const seller = await prisma.seller.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: sellerFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Seller.
     * @param {sellerAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const seller = await prisma.seller.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: sellerAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Sellers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sellerCountArgs} args - Arguments to filter Sellers to count.
     * @example
     * // Count the number of Sellers
     * const count = await prisma.seller.count({
     *   where: {
     *     // ... the filter for the Sellers we want to count
     *   }
     * })
    **/
    count<T extends sellerCountArgs>(
      args?: Subset<T, sellerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SellerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Seller.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SellerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SellerAggregateArgs>(args: Subset<T, SellerAggregateArgs>): Prisma.PrismaPromise<GetSellerAggregateType<T>>

    /**
     * Group by Seller.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sellerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends sellerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: sellerGroupByArgs['orderBy'] }
        : { orderBy?: sellerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, sellerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSellerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the seller model
   */
  readonly fields: sellerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for seller.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__sellerClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends seller$userArgs<ExtArgs> = {}>(args?: Subset<T, seller$userArgs<ExtArgs>>): Prisma__usersClient<$Types.GetResult<usersPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    products<T extends seller$productsArgs<ExtArgs> = {}>(args?: Subset<T, seller$productsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<productsPayload<ExtArgs>, T, 'findMany'>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the seller model
   */ 
  interface sellerFieldRefs {
    readonly id: FieldRef<"seller", 'String'>
    readonly userId: FieldRef<"seller", 'String'>
    readonly shopName: FieldRef<"seller", 'String'>
    readonly shopAddress: FieldRef<"seller", 'String'>
  }
    

  // Custom InputTypes

  /**
   * seller findUnique
   */
  export type sellerFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the seller
     */
    select?: sellerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sellerInclude<ExtArgs> | null
    /**
     * Filter, which seller to fetch.
     */
    where: sellerWhereUniqueInput
  }


  /**
   * seller findUniqueOrThrow
   */
  export type sellerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the seller
     */
    select?: sellerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sellerInclude<ExtArgs> | null
    /**
     * Filter, which seller to fetch.
     */
    where: sellerWhereUniqueInput
  }


  /**
   * seller findFirst
   */
  export type sellerFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the seller
     */
    select?: sellerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sellerInclude<ExtArgs> | null
    /**
     * Filter, which seller to fetch.
     */
    where?: sellerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sellers to fetch.
     */
    orderBy?: sellerOrderByWithRelationInput | sellerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for sellers.
     */
    cursor?: sellerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sellers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sellers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of sellers.
     */
    distinct?: SellerScalarFieldEnum | SellerScalarFieldEnum[]
  }


  /**
   * seller findFirstOrThrow
   */
  export type sellerFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the seller
     */
    select?: sellerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sellerInclude<ExtArgs> | null
    /**
     * Filter, which seller to fetch.
     */
    where?: sellerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sellers to fetch.
     */
    orderBy?: sellerOrderByWithRelationInput | sellerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for sellers.
     */
    cursor?: sellerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sellers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sellers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of sellers.
     */
    distinct?: SellerScalarFieldEnum | SellerScalarFieldEnum[]
  }


  /**
   * seller findMany
   */
  export type sellerFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the seller
     */
    select?: sellerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sellerInclude<ExtArgs> | null
    /**
     * Filter, which sellers to fetch.
     */
    where?: sellerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sellers to fetch.
     */
    orderBy?: sellerOrderByWithRelationInput | sellerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing sellers.
     */
    cursor?: sellerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sellers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sellers.
     */
    skip?: number
    distinct?: SellerScalarFieldEnum | SellerScalarFieldEnum[]
  }


  /**
   * seller create
   */
  export type sellerCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the seller
     */
    select?: sellerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sellerInclude<ExtArgs> | null
    /**
     * The data needed to create a seller.
     */
    data: XOR<sellerCreateInput, sellerUncheckedCreateInput>
  }


  /**
   * seller createMany
   */
  export type sellerCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many sellers.
     */
    data: sellerCreateManyInput | sellerCreateManyInput[]
  }


  /**
   * seller update
   */
  export type sellerUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the seller
     */
    select?: sellerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sellerInclude<ExtArgs> | null
    /**
     * The data needed to update a seller.
     */
    data: XOR<sellerUpdateInput, sellerUncheckedUpdateInput>
    /**
     * Choose, which seller to update.
     */
    where: sellerWhereUniqueInput
  }


  /**
   * seller updateMany
   */
  export type sellerUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update sellers.
     */
    data: XOR<sellerUpdateManyMutationInput, sellerUncheckedUpdateManyInput>
    /**
     * Filter which sellers to update
     */
    where?: sellerWhereInput
  }


  /**
   * seller upsert
   */
  export type sellerUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the seller
     */
    select?: sellerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sellerInclude<ExtArgs> | null
    /**
     * The filter to search for the seller to update in case it exists.
     */
    where: sellerWhereUniqueInput
    /**
     * In case the seller found by the `where` argument doesn't exist, create a new seller with this data.
     */
    create: XOR<sellerCreateInput, sellerUncheckedCreateInput>
    /**
     * In case the seller was found with the provided `where` argument, update it with this data.
     */
    update: XOR<sellerUpdateInput, sellerUncheckedUpdateInput>
  }


  /**
   * seller delete
   */
  export type sellerDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the seller
     */
    select?: sellerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sellerInclude<ExtArgs> | null
    /**
     * Filter which seller to delete.
     */
    where: sellerWhereUniqueInput
  }


  /**
   * seller deleteMany
   */
  export type sellerDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which sellers to delete
     */
    where?: sellerWhereInput
  }


  /**
   * seller findRaw
   */
  export type sellerFindRawArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * seller aggregateRaw
   */
  export type sellerAggregateRawArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * seller.user
   */
  export type seller$userArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    where?: usersWhereInput
  }


  /**
   * seller.products
   */
  export type seller$productsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productsInclude<ExtArgs> | null
    where?: productsWhereInput
    orderBy?: productsOrderByWithRelationInput | productsOrderByWithRelationInput[]
    cursor?: productsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductsScalarFieldEnum | ProductsScalarFieldEnum[]
  }


  /**
   * seller without action
   */
  export type sellerArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the seller
     */
    select?: sellerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sellerInclude<ExtArgs> | null
  }



  /**
   * Model brands
   */


  export type AggregateBrands = {
    _count: BrandsCountAggregateOutputType | null
    _min: BrandsMinAggregateOutputType | null
    _max: BrandsMaxAggregateOutputType | null
  }

  export type BrandsMinAggregateOutputType = {
    id: string | null
    userId: string | null
    brandName: string | null
    brandAddress: string | null
    brandIcon: string | null
  }

  export type BrandsMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    brandName: string | null
    brandAddress: string | null
    brandIcon: string | null
  }

  export type BrandsCountAggregateOutputType = {
    id: number
    userId: number
    brandName: number
    brandAddress: number
    brandIcon: number
    _all: number
  }


  export type BrandsMinAggregateInputType = {
    id?: true
    userId?: true
    brandName?: true
    brandAddress?: true
    brandIcon?: true
  }

  export type BrandsMaxAggregateInputType = {
    id?: true
    userId?: true
    brandName?: true
    brandAddress?: true
    brandIcon?: true
  }

  export type BrandsCountAggregateInputType = {
    id?: true
    userId?: true
    brandName?: true
    brandAddress?: true
    brandIcon?: true
    _all?: true
  }

  export type BrandsAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which brands to aggregate.
     */
    where?: brandsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of brands to fetch.
     */
    orderBy?: brandsOrderByWithRelationInput | brandsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: brandsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` brands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` brands.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned brands
    **/
    _count?: true | BrandsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BrandsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BrandsMaxAggregateInputType
  }

  export type GetBrandsAggregateType<T extends BrandsAggregateArgs> = {
        [P in keyof T & keyof AggregateBrands]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBrands[P]>
      : GetScalarType<T[P], AggregateBrands[P]>
  }




  export type brandsGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: brandsWhereInput
    orderBy?: brandsOrderByWithAggregationInput | brandsOrderByWithAggregationInput[]
    by: BrandsScalarFieldEnum[] | BrandsScalarFieldEnum
    having?: brandsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BrandsCountAggregateInputType | true
    _min?: BrandsMinAggregateInputType
    _max?: BrandsMaxAggregateInputType
  }


  export type BrandsGroupByOutputType = {
    id: string
    userId: string
    brandName: string
    brandAddress: string
    brandIcon: string
    _count: BrandsCountAggregateOutputType | null
    _min: BrandsMinAggregateOutputType | null
    _max: BrandsMaxAggregateOutputType | null
  }

  type GetBrandsGroupByPayload<T extends brandsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BrandsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BrandsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BrandsGroupByOutputType[P]>
            : GetScalarType<T[P], BrandsGroupByOutputType[P]>
        }
      >
    >


  export type brandsSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    brandName?: boolean
    brandAddress?: boolean
    brandIcon?: boolean
    user?: boolean | brands$userArgs<ExtArgs>
    products?: boolean | brands$productsArgs<ExtArgs>
    _count?: boolean | BrandsCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["brands"]>

  export type brandsSelectScalar = {
    id?: boolean
    userId?: boolean
    brandName?: boolean
    brandAddress?: boolean
    brandIcon?: boolean
  }

  export type brandsInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | brands$userArgs<ExtArgs>
    products?: boolean | brands$productsArgs<ExtArgs>
    _count?: boolean | BrandsCountOutputTypeArgs<ExtArgs>
  }


  type brandsGetPayload<S extends boolean | null | undefined | brandsArgs> = $Types.GetResult<brandsPayload, S>

  type brandsCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<brandsFindManyArgs, 'select' | 'include'> & {
      select?: BrandsCountAggregateInputType | true
    }

  export interface brandsDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['brands'], meta: { name: 'brands' } }
    /**
     * Find zero or one Brands that matches the filter.
     * @param {brandsFindUniqueArgs} args - Arguments to find a Brands
     * @example
     * // Get one Brands
     * const brands = await prisma.brands.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends brandsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, brandsFindUniqueArgs<ExtArgs>>
    ): Prisma__brandsClient<$Types.GetResult<brandsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Brands that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {brandsFindUniqueOrThrowArgs} args - Arguments to find a Brands
     * @example
     * // Get one Brands
     * const brands = await prisma.brands.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends brandsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, brandsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__brandsClient<$Types.GetResult<brandsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Brands that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {brandsFindFirstArgs} args - Arguments to find a Brands
     * @example
     * // Get one Brands
     * const brands = await prisma.brands.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends brandsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, brandsFindFirstArgs<ExtArgs>>
    ): Prisma__brandsClient<$Types.GetResult<brandsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Brands that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {brandsFindFirstOrThrowArgs} args - Arguments to find a Brands
     * @example
     * // Get one Brands
     * const brands = await prisma.brands.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends brandsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, brandsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__brandsClient<$Types.GetResult<brandsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Brands that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {brandsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Brands
     * const brands = await prisma.brands.findMany()
     * 
     * // Get first 10 Brands
     * const brands = await prisma.brands.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const brandsWithIdOnly = await prisma.brands.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends brandsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, brandsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<brandsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Brands.
     * @param {brandsCreateArgs} args - Arguments to create a Brands.
     * @example
     * // Create one Brands
     * const Brands = await prisma.brands.create({
     *   data: {
     *     // ... data to create a Brands
     *   }
     * })
     * 
    **/
    create<T extends brandsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, brandsCreateArgs<ExtArgs>>
    ): Prisma__brandsClient<$Types.GetResult<brandsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Brands.
     *     @param {brandsCreateManyArgs} args - Arguments to create many Brands.
     *     @example
     *     // Create many Brands
     *     const brands = await prisma.brands.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends brandsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, brandsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Brands.
     * @param {brandsDeleteArgs} args - Arguments to delete one Brands.
     * @example
     * // Delete one Brands
     * const Brands = await prisma.brands.delete({
     *   where: {
     *     // ... filter to delete one Brands
     *   }
     * })
     * 
    **/
    delete<T extends brandsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, brandsDeleteArgs<ExtArgs>>
    ): Prisma__brandsClient<$Types.GetResult<brandsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Brands.
     * @param {brandsUpdateArgs} args - Arguments to update one Brands.
     * @example
     * // Update one Brands
     * const brands = await prisma.brands.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends brandsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, brandsUpdateArgs<ExtArgs>>
    ): Prisma__brandsClient<$Types.GetResult<brandsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Brands.
     * @param {brandsDeleteManyArgs} args - Arguments to filter Brands to delete.
     * @example
     * // Delete a few Brands
     * const { count } = await prisma.brands.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends brandsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, brandsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Brands.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {brandsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Brands
     * const brands = await prisma.brands.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends brandsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, brandsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Brands.
     * @param {brandsUpsertArgs} args - Arguments to update or create a Brands.
     * @example
     * // Update or create a Brands
     * const brands = await prisma.brands.upsert({
     *   create: {
     *     // ... data to create a Brands
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Brands we want to update
     *   }
     * })
    **/
    upsert<T extends brandsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, brandsUpsertArgs<ExtArgs>>
    ): Prisma__brandsClient<$Types.GetResult<brandsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Brands that matches the filter.
     * @param {brandsFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const brands = await prisma.brands.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: brandsFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Brands.
     * @param {brandsAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const brands = await prisma.brands.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: brandsAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Brands.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {brandsCountArgs} args - Arguments to filter Brands to count.
     * @example
     * // Count the number of Brands
     * const count = await prisma.brands.count({
     *   where: {
     *     // ... the filter for the Brands we want to count
     *   }
     * })
    **/
    count<T extends brandsCountArgs>(
      args?: Subset<T, brandsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BrandsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Brands.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BrandsAggregateArgs>(args: Subset<T, BrandsAggregateArgs>): Prisma.PrismaPromise<GetBrandsAggregateType<T>>

    /**
     * Group by Brands.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {brandsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends brandsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: brandsGroupByArgs['orderBy'] }
        : { orderBy?: brandsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, brandsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBrandsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the brands model
   */
  readonly fields: brandsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for brands.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__brandsClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends brands$userArgs<ExtArgs> = {}>(args?: Subset<T, brands$userArgs<ExtArgs>>): Prisma__usersClient<$Types.GetResult<usersPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    products<T extends brands$productsArgs<ExtArgs> = {}>(args?: Subset<T, brands$productsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<productsPayload<ExtArgs>, T, 'findMany'>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the brands model
   */ 
  interface brandsFieldRefs {
    readonly id: FieldRef<"brands", 'String'>
    readonly userId: FieldRef<"brands", 'String'>
    readonly brandName: FieldRef<"brands", 'String'>
    readonly brandAddress: FieldRef<"brands", 'String'>
    readonly brandIcon: FieldRef<"brands", 'String'>
  }
    

  // Custom InputTypes

  /**
   * brands findUnique
   */
  export type brandsFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the brands
     */
    select?: brandsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: brandsInclude<ExtArgs> | null
    /**
     * Filter, which brands to fetch.
     */
    where: brandsWhereUniqueInput
  }


  /**
   * brands findUniqueOrThrow
   */
  export type brandsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the brands
     */
    select?: brandsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: brandsInclude<ExtArgs> | null
    /**
     * Filter, which brands to fetch.
     */
    where: brandsWhereUniqueInput
  }


  /**
   * brands findFirst
   */
  export type brandsFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the brands
     */
    select?: brandsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: brandsInclude<ExtArgs> | null
    /**
     * Filter, which brands to fetch.
     */
    where?: brandsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of brands to fetch.
     */
    orderBy?: brandsOrderByWithRelationInput | brandsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for brands.
     */
    cursor?: brandsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` brands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` brands.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of brands.
     */
    distinct?: BrandsScalarFieldEnum | BrandsScalarFieldEnum[]
  }


  /**
   * brands findFirstOrThrow
   */
  export type brandsFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the brands
     */
    select?: brandsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: brandsInclude<ExtArgs> | null
    /**
     * Filter, which brands to fetch.
     */
    where?: brandsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of brands to fetch.
     */
    orderBy?: brandsOrderByWithRelationInput | brandsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for brands.
     */
    cursor?: brandsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` brands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` brands.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of brands.
     */
    distinct?: BrandsScalarFieldEnum | BrandsScalarFieldEnum[]
  }


  /**
   * brands findMany
   */
  export type brandsFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the brands
     */
    select?: brandsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: brandsInclude<ExtArgs> | null
    /**
     * Filter, which brands to fetch.
     */
    where?: brandsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of brands to fetch.
     */
    orderBy?: brandsOrderByWithRelationInput | brandsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing brands.
     */
    cursor?: brandsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` brands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` brands.
     */
    skip?: number
    distinct?: BrandsScalarFieldEnum | BrandsScalarFieldEnum[]
  }


  /**
   * brands create
   */
  export type brandsCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the brands
     */
    select?: brandsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: brandsInclude<ExtArgs> | null
    /**
     * The data needed to create a brands.
     */
    data: XOR<brandsCreateInput, brandsUncheckedCreateInput>
  }


  /**
   * brands createMany
   */
  export type brandsCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many brands.
     */
    data: brandsCreateManyInput | brandsCreateManyInput[]
  }


  /**
   * brands update
   */
  export type brandsUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the brands
     */
    select?: brandsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: brandsInclude<ExtArgs> | null
    /**
     * The data needed to update a brands.
     */
    data: XOR<brandsUpdateInput, brandsUncheckedUpdateInput>
    /**
     * Choose, which brands to update.
     */
    where: brandsWhereUniqueInput
  }


  /**
   * brands updateMany
   */
  export type brandsUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update brands.
     */
    data: XOR<brandsUpdateManyMutationInput, brandsUncheckedUpdateManyInput>
    /**
     * Filter which brands to update
     */
    where?: brandsWhereInput
  }


  /**
   * brands upsert
   */
  export type brandsUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the brands
     */
    select?: brandsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: brandsInclude<ExtArgs> | null
    /**
     * The filter to search for the brands to update in case it exists.
     */
    where: brandsWhereUniqueInput
    /**
     * In case the brands found by the `where` argument doesn't exist, create a new brands with this data.
     */
    create: XOR<brandsCreateInput, brandsUncheckedCreateInput>
    /**
     * In case the brands was found with the provided `where` argument, update it with this data.
     */
    update: XOR<brandsUpdateInput, brandsUncheckedUpdateInput>
  }


  /**
   * brands delete
   */
  export type brandsDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the brands
     */
    select?: brandsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: brandsInclude<ExtArgs> | null
    /**
     * Filter which brands to delete.
     */
    where: brandsWhereUniqueInput
  }


  /**
   * brands deleteMany
   */
  export type brandsDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which brands to delete
     */
    where?: brandsWhereInput
  }


  /**
   * brands findRaw
   */
  export type brandsFindRawArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * brands aggregateRaw
   */
  export type brandsAggregateRawArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * brands.user
   */
  export type brands$userArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    where?: usersWhereInput
  }


  /**
   * brands.products
   */
  export type brands$productsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productsInclude<ExtArgs> | null
    where?: productsWhereInput
    orderBy?: productsOrderByWithRelationInput | productsOrderByWithRelationInput[]
    cursor?: productsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductsScalarFieldEnum | ProductsScalarFieldEnum[]
  }


  /**
   * brands without action
   */
  export type brandsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the brands
     */
    select?: brandsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: brandsInclude<ExtArgs> | null
  }



  /**
   * Model products
   */


  export type AggregateProducts = {
    _count: ProductsCountAggregateOutputType | null
    _avg: ProductsAvgAggregateOutputType | null
    _sum: ProductsSumAggregateOutputType | null
    _min: ProductsMinAggregateOutputType | null
    _max: ProductsMaxAggregateOutputType | null
  }

  export type ProductsAvgAggregateOutputType = {
    price: number | null
  }

  export type ProductsSumAggregateOutputType = {
    price: number | null
  }

  export type ProductsMinAggregateOutputType = {
    id: string | null
    price: number | null
    title: string | null
    description: string | null
    thumbnail: string | null
    verified: boolean | null
    sellerId: string | null
    brandId: string | null
    categoryId: string | null
    subCategoryId: string | null
    optionId: string | null
    userId: string | null
  }

  export type ProductsMaxAggregateOutputType = {
    id: string | null
    price: number | null
    title: string | null
    description: string | null
    thumbnail: string | null
    verified: boolean | null
    sellerId: string | null
    brandId: string | null
    categoryId: string | null
    subCategoryId: string | null
    optionId: string | null
    userId: string | null
  }

  export type ProductsCountAggregateOutputType = {
    id: number
    price: number
    title: number
    description: number
    thumbnail: number
    verified: number
    sellerId: number
    brandId: number
    categoryId: number
    subCategoryId: number
    optionId: number
    userId: number
    _all: number
  }


  export type ProductsAvgAggregateInputType = {
    price?: true
  }

  export type ProductsSumAggregateInputType = {
    price?: true
  }

  export type ProductsMinAggregateInputType = {
    id?: true
    price?: true
    title?: true
    description?: true
    thumbnail?: true
    verified?: true
    sellerId?: true
    brandId?: true
    categoryId?: true
    subCategoryId?: true
    optionId?: true
    userId?: true
  }

  export type ProductsMaxAggregateInputType = {
    id?: true
    price?: true
    title?: true
    description?: true
    thumbnail?: true
    verified?: true
    sellerId?: true
    brandId?: true
    categoryId?: true
    subCategoryId?: true
    optionId?: true
    userId?: true
  }

  export type ProductsCountAggregateInputType = {
    id?: true
    price?: true
    title?: true
    description?: true
    thumbnail?: true
    verified?: true
    sellerId?: true
    brandId?: true
    categoryId?: true
    subCategoryId?: true
    optionId?: true
    userId?: true
    _all?: true
  }

  export type ProductsAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which products to aggregate.
     */
    where?: productsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     */
    orderBy?: productsOrderByWithRelationInput | productsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: productsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned products
    **/
    _count?: true | ProductsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductsMaxAggregateInputType
  }

  export type GetProductsAggregateType<T extends ProductsAggregateArgs> = {
        [P in keyof T & keyof AggregateProducts]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProducts[P]>
      : GetScalarType<T[P], AggregateProducts[P]>
  }




  export type productsGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: productsWhereInput
    orderBy?: productsOrderByWithAggregationInput | productsOrderByWithAggregationInput[]
    by: ProductsScalarFieldEnum[] | ProductsScalarFieldEnum
    having?: productsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductsCountAggregateInputType | true
    _avg?: ProductsAvgAggregateInputType
    _sum?: ProductsSumAggregateInputType
    _min?: ProductsMinAggregateInputType
    _max?: ProductsMaxAggregateInputType
  }


  export type ProductsGroupByOutputType = {
    id: string
    price: number
    title: string
    description: string
    thumbnail: string
    verified: boolean
    sellerId: string | null
    brandId: string | null
    categoryId: string
    subCategoryId: string
    optionId: string
    userId: string
    _count: ProductsCountAggregateOutputType | null
    _avg: ProductsAvgAggregateOutputType | null
    _sum: ProductsSumAggregateOutputType | null
    _min: ProductsMinAggregateOutputType | null
    _max: ProductsMaxAggregateOutputType | null
  }

  type GetProductsGroupByPayload<T extends productsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductsGroupByOutputType[P]>
            : GetScalarType<T[P], ProductsGroupByOutputType[P]>
        }
      >
    >


  export type productsSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    price?: boolean
    title?: boolean
    description?: boolean
    thumbnail?: boolean
    verified?: boolean
    sellerId?: boolean
    brandId?: boolean
    categoryId?: boolean
    subCategoryId?: boolean
    optionId?: boolean
    userId?: boolean
    offers?: boolean | products$offersArgs<ExtArgs>
    coins?: boolean | products$coinsArgs<ExtArgs>
    variants?: boolean | products$variantsArgs<ExtArgs>
    comments?: boolean | products$commentsArgs<ExtArgs>
    reviews?: boolean | products$reviewsArgs<ExtArgs>
    seller?: boolean | products$sellerArgs<ExtArgs>
    brand?: boolean | products$brandArgs<ExtArgs>
    category?: boolean | products$categoryArgs<ExtArgs>
    subCategory?: boolean | products$subCategoryArgs<ExtArgs>
    option?: boolean | products$optionArgs<ExtArgs>
    user?: boolean | products$userArgs<ExtArgs>
    _count?: boolean | ProductsCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["products"]>

  export type productsSelectScalar = {
    id?: boolean
    price?: boolean
    title?: boolean
    description?: boolean
    thumbnail?: boolean
    verified?: boolean
    sellerId?: boolean
    brandId?: boolean
    categoryId?: boolean
    subCategoryId?: boolean
    optionId?: boolean
    userId?: boolean
  }

  export type productsInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    offers?: boolean | products$offersArgs<ExtArgs>
    coins?: boolean | products$coinsArgs<ExtArgs>
    variants?: boolean | products$variantsArgs<ExtArgs>
    comments?: boolean | products$commentsArgs<ExtArgs>
    reviews?: boolean | products$reviewsArgs<ExtArgs>
    seller?: boolean | products$sellerArgs<ExtArgs>
    brand?: boolean | products$brandArgs<ExtArgs>
    category?: boolean | products$categoryArgs<ExtArgs>
    subCategory?: boolean | products$subCategoryArgs<ExtArgs>
    option?: boolean | products$optionArgs<ExtArgs>
    user?: boolean | products$userArgs<ExtArgs>
    _count?: boolean | ProductsCountOutputTypeArgs<ExtArgs>
  }


  type productsGetPayload<S extends boolean | null | undefined | productsArgs> = $Types.GetResult<productsPayload, S>

  type productsCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<productsFindManyArgs, 'select' | 'include'> & {
      select?: ProductsCountAggregateInputType | true
    }

  export interface productsDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['products'], meta: { name: 'products' } }
    /**
     * Find zero or one Products that matches the filter.
     * @param {productsFindUniqueArgs} args - Arguments to find a Products
     * @example
     * // Get one Products
     * const products = await prisma.products.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends productsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, productsFindUniqueArgs<ExtArgs>>
    ): Prisma__productsClient<$Types.GetResult<productsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Products that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {productsFindUniqueOrThrowArgs} args - Arguments to find a Products
     * @example
     * // Get one Products
     * const products = await prisma.products.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends productsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, productsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__productsClient<$Types.GetResult<productsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productsFindFirstArgs} args - Arguments to find a Products
     * @example
     * // Get one Products
     * const products = await prisma.products.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends productsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, productsFindFirstArgs<ExtArgs>>
    ): Prisma__productsClient<$Types.GetResult<productsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Products that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productsFindFirstOrThrowArgs} args - Arguments to find a Products
     * @example
     * // Get one Products
     * const products = await prisma.products.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends productsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, productsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__productsClient<$Types.GetResult<productsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.products.findMany()
     * 
     * // Get first 10 Products
     * const products = await prisma.products.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productsWithIdOnly = await prisma.products.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends productsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, productsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<productsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Products.
     * @param {productsCreateArgs} args - Arguments to create a Products.
     * @example
     * // Create one Products
     * const Products = await prisma.products.create({
     *   data: {
     *     // ... data to create a Products
     *   }
     * })
     * 
    **/
    create<T extends productsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, productsCreateArgs<ExtArgs>>
    ): Prisma__productsClient<$Types.GetResult<productsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Products.
     *     @param {productsCreateManyArgs} args - Arguments to create many Products.
     *     @example
     *     // Create many Products
     *     const products = await prisma.products.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends productsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, productsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Products.
     * @param {productsDeleteArgs} args - Arguments to delete one Products.
     * @example
     * // Delete one Products
     * const Products = await prisma.products.delete({
     *   where: {
     *     // ... filter to delete one Products
     *   }
     * })
     * 
    **/
    delete<T extends productsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, productsDeleteArgs<ExtArgs>>
    ): Prisma__productsClient<$Types.GetResult<productsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Products.
     * @param {productsUpdateArgs} args - Arguments to update one Products.
     * @example
     * // Update one Products
     * const products = await prisma.products.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends productsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, productsUpdateArgs<ExtArgs>>
    ): Prisma__productsClient<$Types.GetResult<productsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Products.
     * @param {productsDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.products.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends productsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, productsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const products = await prisma.products.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends productsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, productsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Products.
     * @param {productsUpsertArgs} args - Arguments to update or create a Products.
     * @example
     * // Update or create a Products
     * const products = await prisma.products.upsert({
     *   create: {
     *     // ... data to create a Products
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Products we want to update
     *   }
     * })
    **/
    upsert<T extends productsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, productsUpsertArgs<ExtArgs>>
    ): Prisma__productsClient<$Types.GetResult<productsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Products that matches the filter.
     * @param {productsFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const products = await prisma.products.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: productsFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Products.
     * @param {productsAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const products = await prisma.products.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: productsAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productsCountArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.products.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
    **/
    count<T extends productsCountArgs>(
      args?: Subset<T, productsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductsAggregateArgs>(args: Subset<T, ProductsAggregateArgs>): Prisma.PrismaPromise<GetProductsAggregateType<T>>

    /**
     * Group by Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends productsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: productsGroupByArgs['orderBy'] }
        : { orderBy?: productsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, productsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the products model
   */
  readonly fields: productsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for products.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__productsClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    offers<T extends products$offersArgs<ExtArgs> = {}>(args?: Subset<T, products$offersArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<offersPayload<ExtArgs>, T, 'findMany'>| Null>;

    coins<T extends products$coinsArgs<ExtArgs> = {}>(args?: Subset<T, products$coinsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<coinsPayload<ExtArgs>, T, 'findMany'>| Null>;

    variants<T extends products$variantsArgs<ExtArgs> = {}>(args?: Subset<T, products$variantsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<variantsPayload<ExtArgs>, T, 'findMany'>| Null>;

    comments<T extends products$commentsArgs<ExtArgs> = {}>(args?: Subset<T, products$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<commentsPayload<ExtArgs>, T, 'findMany'>| Null>;

    reviews<T extends products$reviewsArgs<ExtArgs> = {}>(args?: Subset<T, products$reviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<reviewsPayload<ExtArgs>, T, 'findMany'>| Null>;

    seller<T extends products$sellerArgs<ExtArgs> = {}>(args?: Subset<T, products$sellerArgs<ExtArgs>>): Prisma__sellerClient<$Types.GetResult<sellerPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    brand<T extends products$brandArgs<ExtArgs> = {}>(args?: Subset<T, products$brandArgs<ExtArgs>>): Prisma__brandsClient<$Types.GetResult<brandsPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    category<T extends products$categoryArgs<ExtArgs> = {}>(args?: Subset<T, products$categoryArgs<ExtArgs>>): Prisma__categoryClient<$Types.GetResult<categoryPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    subCategory<T extends products$subCategoryArgs<ExtArgs> = {}>(args?: Subset<T, products$subCategoryArgs<ExtArgs>>): Prisma__subCategoryClient<$Types.GetResult<subCategoryPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    option<T extends products$optionArgs<ExtArgs> = {}>(args?: Subset<T, products$optionArgs<ExtArgs>>): Prisma__optionsClient<$Types.GetResult<optionsPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    user<T extends products$userArgs<ExtArgs> = {}>(args?: Subset<T, products$userArgs<ExtArgs>>): Prisma__usersClient<$Types.GetResult<usersPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the products model
   */ 
  interface productsFieldRefs {
    readonly id: FieldRef<"products", 'String'>
    readonly price: FieldRef<"products", 'Int'>
    readonly title: FieldRef<"products", 'String'>
    readonly description: FieldRef<"products", 'String'>
    readonly thumbnail: FieldRef<"products", 'String'>
    readonly verified: FieldRef<"products", 'Boolean'>
    readonly sellerId: FieldRef<"products", 'String'>
    readonly brandId: FieldRef<"products", 'String'>
    readonly categoryId: FieldRef<"products", 'String'>
    readonly subCategoryId: FieldRef<"products", 'String'>
    readonly optionId: FieldRef<"products", 'String'>
    readonly userId: FieldRef<"products", 'String'>
  }
    

  // Custom InputTypes

  /**
   * products findUnique
   */
  export type productsFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productsInclude<ExtArgs> | null
    /**
     * Filter, which products to fetch.
     */
    where: productsWhereUniqueInput
  }


  /**
   * products findUniqueOrThrow
   */
  export type productsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productsInclude<ExtArgs> | null
    /**
     * Filter, which products to fetch.
     */
    where: productsWhereUniqueInput
  }


  /**
   * products findFirst
   */
  export type productsFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productsInclude<ExtArgs> | null
    /**
     * Filter, which products to fetch.
     */
    where?: productsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     */
    orderBy?: productsOrderByWithRelationInput | productsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for products.
     */
    cursor?: productsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of products.
     */
    distinct?: ProductsScalarFieldEnum | ProductsScalarFieldEnum[]
  }


  /**
   * products findFirstOrThrow
   */
  export type productsFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productsInclude<ExtArgs> | null
    /**
     * Filter, which products to fetch.
     */
    where?: productsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     */
    orderBy?: productsOrderByWithRelationInput | productsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for products.
     */
    cursor?: productsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of products.
     */
    distinct?: ProductsScalarFieldEnum | ProductsScalarFieldEnum[]
  }


  /**
   * products findMany
   */
  export type productsFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productsInclude<ExtArgs> | null
    /**
     * Filter, which products to fetch.
     */
    where?: productsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     */
    orderBy?: productsOrderByWithRelationInput | productsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing products.
     */
    cursor?: productsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     */
    skip?: number
    distinct?: ProductsScalarFieldEnum | ProductsScalarFieldEnum[]
  }


  /**
   * products create
   */
  export type productsCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productsInclude<ExtArgs> | null
    /**
     * The data needed to create a products.
     */
    data: XOR<productsCreateInput, productsUncheckedCreateInput>
  }


  /**
   * products createMany
   */
  export type productsCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many products.
     */
    data: productsCreateManyInput | productsCreateManyInput[]
  }


  /**
   * products update
   */
  export type productsUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productsInclude<ExtArgs> | null
    /**
     * The data needed to update a products.
     */
    data: XOR<productsUpdateInput, productsUncheckedUpdateInput>
    /**
     * Choose, which products to update.
     */
    where: productsWhereUniqueInput
  }


  /**
   * products updateMany
   */
  export type productsUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update products.
     */
    data: XOR<productsUpdateManyMutationInput, productsUncheckedUpdateManyInput>
    /**
     * Filter which products to update
     */
    where?: productsWhereInput
  }


  /**
   * products upsert
   */
  export type productsUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productsInclude<ExtArgs> | null
    /**
     * The filter to search for the products to update in case it exists.
     */
    where: productsWhereUniqueInput
    /**
     * In case the products found by the `where` argument doesn't exist, create a new products with this data.
     */
    create: XOR<productsCreateInput, productsUncheckedCreateInput>
    /**
     * In case the products was found with the provided `where` argument, update it with this data.
     */
    update: XOR<productsUpdateInput, productsUncheckedUpdateInput>
  }


  /**
   * products delete
   */
  export type productsDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productsInclude<ExtArgs> | null
    /**
     * Filter which products to delete.
     */
    where: productsWhereUniqueInput
  }


  /**
   * products deleteMany
   */
  export type productsDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which products to delete
     */
    where?: productsWhereInput
  }


  /**
   * products findRaw
   */
  export type productsFindRawArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * products aggregateRaw
   */
  export type productsAggregateRawArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * products.offers
   */
  export type products$offersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the offers
     */
    select?: offersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: offersInclude<ExtArgs> | null
    where?: offersWhereInput
    orderBy?: offersOrderByWithRelationInput | offersOrderByWithRelationInput[]
    cursor?: offersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OffersScalarFieldEnum | OffersScalarFieldEnum[]
  }


  /**
   * products.coins
   */
  export type products$coinsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the coins
     */
    select?: coinsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: coinsInclude<ExtArgs> | null
    where?: coinsWhereInput
    orderBy?: coinsOrderByWithRelationInput | coinsOrderByWithRelationInput[]
    cursor?: coinsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CoinsScalarFieldEnum | CoinsScalarFieldEnum[]
  }


  /**
   * products.variants
   */
  export type products$variantsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the variants
     */
    select?: variantsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: variantsInclude<ExtArgs> | null
    where?: variantsWhereInput
    orderBy?: variantsOrderByWithRelationInput | variantsOrderByWithRelationInput[]
    cursor?: variantsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VariantsScalarFieldEnum | VariantsScalarFieldEnum[]
  }


  /**
   * products.comments
   */
  export type products$commentsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comments
     */
    select?: commentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: commentsInclude<ExtArgs> | null
    where?: commentsWhereInput
    orderBy?: commentsOrderByWithRelationInput | commentsOrderByWithRelationInput[]
    cursor?: commentsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentsScalarFieldEnum | CommentsScalarFieldEnum[]
  }


  /**
   * products.reviews
   */
  export type products$reviewsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reviews
     */
    select?: reviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: reviewsInclude<ExtArgs> | null
    where?: reviewsWhereInput
    orderBy?: reviewsOrderByWithRelationInput | reviewsOrderByWithRelationInput[]
    cursor?: reviewsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReviewsScalarFieldEnum | ReviewsScalarFieldEnum[]
  }


  /**
   * products.seller
   */
  export type products$sellerArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the seller
     */
    select?: sellerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sellerInclude<ExtArgs> | null
    where?: sellerWhereInput
  }


  /**
   * products.brand
   */
  export type products$brandArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the brands
     */
    select?: brandsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: brandsInclude<ExtArgs> | null
    where?: brandsWhereInput
  }


  /**
   * products.category
   */
  export type products$categoryArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoryInclude<ExtArgs> | null
    where?: categoryWhereInput
  }


  /**
   * products.subCategory
   */
  export type products$subCategoryArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subCategory
     */
    select?: subCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: subCategoryInclude<ExtArgs> | null
    where?: subCategoryWhereInput
  }


  /**
   * products.option
   */
  export type products$optionArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the options
     */
    select?: optionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: optionsInclude<ExtArgs> | null
    where?: optionsWhereInput
  }


  /**
   * products.user
   */
  export type products$userArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    where?: usersWhereInput
  }


  /**
   * products without action
   */
  export type productsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productsInclude<ExtArgs> | null
  }



  /**
   * Model offers
   */


  export type AggregateOffers = {
    _count: OffersCountAggregateOutputType | null
    _avg: OffersAvgAggregateOutputType | null
    _sum: OffersSumAggregateOutputType | null
    _min: OffersMinAggregateOutputType | null
    _max: OffersMaxAggregateOutputType | null
  }

  export type OffersAvgAggregateOutputType = {
    money: number | null
    percentage: number | null
  }

  export type OffersSumAggregateOutputType = {
    money: number | null
    percentage: number | null
  }

  export type OffersMinAggregateOutputType = {
    id: string | null
    money: number | null
    percentage: number | null
    name: string | null
    productId: string | null
  }

  export type OffersMaxAggregateOutputType = {
    id: string | null
    money: number | null
    percentage: number | null
    name: string | null
    productId: string | null
  }

  export type OffersCountAggregateOutputType = {
    id: number
    money: number
    percentage: number
    name: number
    productId: number
    _all: number
  }


  export type OffersAvgAggregateInputType = {
    money?: true
    percentage?: true
  }

  export type OffersSumAggregateInputType = {
    money?: true
    percentage?: true
  }

  export type OffersMinAggregateInputType = {
    id?: true
    money?: true
    percentage?: true
    name?: true
    productId?: true
  }

  export type OffersMaxAggregateInputType = {
    id?: true
    money?: true
    percentage?: true
    name?: true
    productId?: true
  }

  export type OffersCountAggregateInputType = {
    id?: true
    money?: true
    percentage?: true
    name?: true
    productId?: true
    _all?: true
  }

  export type OffersAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which offers to aggregate.
     */
    where?: offersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of offers to fetch.
     */
    orderBy?: offersOrderByWithRelationInput | offersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: offersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` offers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` offers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned offers
    **/
    _count?: true | OffersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OffersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OffersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OffersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OffersMaxAggregateInputType
  }

  export type GetOffersAggregateType<T extends OffersAggregateArgs> = {
        [P in keyof T & keyof AggregateOffers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOffers[P]>
      : GetScalarType<T[P], AggregateOffers[P]>
  }




  export type offersGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: offersWhereInput
    orderBy?: offersOrderByWithAggregationInput | offersOrderByWithAggregationInput[]
    by: OffersScalarFieldEnum[] | OffersScalarFieldEnum
    having?: offersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OffersCountAggregateInputType | true
    _avg?: OffersAvgAggregateInputType
    _sum?: OffersSumAggregateInputType
    _min?: OffersMinAggregateInputType
    _max?: OffersMaxAggregateInputType
  }


  export type OffersGroupByOutputType = {
    id: string
    money: number
    percentage: number
    name: string | null
    productId: string
    _count: OffersCountAggregateOutputType | null
    _avg: OffersAvgAggregateOutputType | null
    _sum: OffersSumAggregateOutputType | null
    _min: OffersMinAggregateOutputType | null
    _max: OffersMaxAggregateOutputType | null
  }

  type GetOffersGroupByPayload<T extends offersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OffersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OffersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OffersGroupByOutputType[P]>
            : GetScalarType<T[P], OffersGroupByOutputType[P]>
        }
      >
    >


  export type offersSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    money?: boolean
    percentage?: boolean
    name?: boolean
    productId?: boolean
    product?: boolean | offers$productArgs<ExtArgs>
  }, ExtArgs["result"]["offers"]>

  export type offersSelectScalar = {
    id?: boolean
    money?: boolean
    percentage?: boolean
    name?: boolean
    productId?: boolean
  }

  export type offersInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    product?: boolean | offers$productArgs<ExtArgs>
  }


  type offersGetPayload<S extends boolean | null | undefined | offersArgs> = $Types.GetResult<offersPayload, S>

  type offersCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<offersFindManyArgs, 'select' | 'include'> & {
      select?: OffersCountAggregateInputType | true
    }

  export interface offersDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['offers'], meta: { name: 'offers' } }
    /**
     * Find zero or one Offers that matches the filter.
     * @param {offersFindUniqueArgs} args - Arguments to find a Offers
     * @example
     * // Get one Offers
     * const offers = await prisma.offers.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends offersFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, offersFindUniqueArgs<ExtArgs>>
    ): Prisma__offersClient<$Types.GetResult<offersPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Offers that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {offersFindUniqueOrThrowArgs} args - Arguments to find a Offers
     * @example
     * // Get one Offers
     * const offers = await prisma.offers.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends offersFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, offersFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__offersClient<$Types.GetResult<offersPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Offers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {offersFindFirstArgs} args - Arguments to find a Offers
     * @example
     * // Get one Offers
     * const offers = await prisma.offers.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends offersFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, offersFindFirstArgs<ExtArgs>>
    ): Prisma__offersClient<$Types.GetResult<offersPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Offers that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {offersFindFirstOrThrowArgs} args - Arguments to find a Offers
     * @example
     * // Get one Offers
     * const offers = await prisma.offers.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends offersFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, offersFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__offersClient<$Types.GetResult<offersPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Offers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {offersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Offers
     * const offers = await prisma.offers.findMany()
     * 
     * // Get first 10 Offers
     * const offers = await prisma.offers.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const offersWithIdOnly = await prisma.offers.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends offersFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, offersFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<offersPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Offers.
     * @param {offersCreateArgs} args - Arguments to create a Offers.
     * @example
     * // Create one Offers
     * const Offers = await prisma.offers.create({
     *   data: {
     *     // ... data to create a Offers
     *   }
     * })
     * 
    **/
    create<T extends offersCreateArgs<ExtArgs>>(
      args: SelectSubset<T, offersCreateArgs<ExtArgs>>
    ): Prisma__offersClient<$Types.GetResult<offersPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Offers.
     *     @param {offersCreateManyArgs} args - Arguments to create many Offers.
     *     @example
     *     // Create many Offers
     *     const offers = await prisma.offers.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends offersCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, offersCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Offers.
     * @param {offersDeleteArgs} args - Arguments to delete one Offers.
     * @example
     * // Delete one Offers
     * const Offers = await prisma.offers.delete({
     *   where: {
     *     // ... filter to delete one Offers
     *   }
     * })
     * 
    **/
    delete<T extends offersDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, offersDeleteArgs<ExtArgs>>
    ): Prisma__offersClient<$Types.GetResult<offersPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Offers.
     * @param {offersUpdateArgs} args - Arguments to update one Offers.
     * @example
     * // Update one Offers
     * const offers = await prisma.offers.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends offersUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, offersUpdateArgs<ExtArgs>>
    ): Prisma__offersClient<$Types.GetResult<offersPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Offers.
     * @param {offersDeleteManyArgs} args - Arguments to filter Offers to delete.
     * @example
     * // Delete a few Offers
     * const { count } = await prisma.offers.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends offersDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, offersDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Offers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {offersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Offers
     * const offers = await prisma.offers.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends offersUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, offersUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Offers.
     * @param {offersUpsertArgs} args - Arguments to update or create a Offers.
     * @example
     * // Update or create a Offers
     * const offers = await prisma.offers.upsert({
     *   create: {
     *     // ... data to create a Offers
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Offers we want to update
     *   }
     * })
    **/
    upsert<T extends offersUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, offersUpsertArgs<ExtArgs>>
    ): Prisma__offersClient<$Types.GetResult<offersPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Offers that matches the filter.
     * @param {offersFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const offers = await prisma.offers.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: offersFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Offers.
     * @param {offersAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const offers = await prisma.offers.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: offersAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Offers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {offersCountArgs} args - Arguments to filter Offers to count.
     * @example
     * // Count the number of Offers
     * const count = await prisma.offers.count({
     *   where: {
     *     // ... the filter for the Offers we want to count
     *   }
     * })
    **/
    count<T extends offersCountArgs>(
      args?: Subset<T, offersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OffersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Offers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OffersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OffersAggregateArgs>(args: Subset<T, OffersAggregateArgs>): Prisma.PrismaPromise<GetOffersAggregateType<T>>

    /**
     * Group by Offers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {offersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends offersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: offersGroupByArgs['orderBy'] }
        : { orderBy?: offersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, offersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOffersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the offers model
   */
  readonly fields: offersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for offers.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__offersClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    product<T extends offers$productArgs<ExtArgs> = {}>(args?: Subset<T, offers$productArgs<ExtArgs>>): Prisma__productsClient<$Types.GetResult<productsPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the offers model
   */ 
  interface offersFieldRefs {
    readonly id: FieldRef<"offers", 'String'>
    readonly money: FieldRef<"offers", 'Int'>
    readonly percentage: FieldRef<"offers", 'Int'>
    readonly name: FieldRef<"offers", 'String'>
    readonly productId: FieldRef<"offers", 'String'>
  }
    

  // Custom InputTypes

  /**
   * offers findUnique
   */
  export type offersFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the offers
     */
    select?: offersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: offersInclude<ExtArgs> | null
    /**
     * Filter, which offers to fetch.
     */
    where: offersWhereUniqueInput
  }


  /**
   * offers findUniqueOrThrow
   */
  export type offersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the offers
     */
    select?: offersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: offersInclude<ExtArgs> | null
    /**
     * Filter, which offers to fetch.
     */
    where: offersWhereUniqueInput
  }


  /**
   * offers findFirst
   */
  export type offersFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the offers
     */
    select?: offersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: offersInclude<ExtArgs> | null
    /**
     * Filter, which offers to fetch.
     */
    where?: offersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of offers to fetch.
     */
    orderBy?: offersOrderByWithRelationInput | offersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for offers.
     */
    cursor?: offersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` offers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` offers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of offers.
     */
    distinct?: OffersScalarFieldEnum | OffersScalarFieldEnum[]
  }


  /**
   * offers findFirstOrThrow
   */
  export type offersFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the offers
     */
    select?: offersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: offersInclude<ExtArgs> | null
    /**
     * Filter, which offers to fetch.
     */
    where?: offersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of offers to fetch.
     */
    orderBy?: offersOrderByWithRelationInput | offersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for offers.
     */
    cursor?: offersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` offers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` offers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of offers.
     */
    distinct?: OffersScalarFieldEnum | OffersScalarFieldEnum[]
  }


  /**
   * offers findMany
   */
  export type offersFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the offers
     */
    select?: offersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: offersInclude<ExtArgs> | null
    /**
     * Filter, which offers to fetch.
     */
    where?: offersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of offers to fetch.
     */
    orderBy?: offersOrderByWithRelationInput | offersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing offers.
     */
    cursor?: offersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` offers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` offers.
     */
    skip?: number
    distinct?: OffersScalarFieldEnum | OffersScalarFieldEnum[]
  }


  /**
   * offers create
   */
  export type offersCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the offers
     */
    select?: offersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: offersInclude<ExtArgs> | null
    /**
     * The data needed to create a offers.
     */
    data: XOR<offersCreateInput, offersUncheckedCreateInput>
  }


  /**
   * offers createMany
   */
  export type offersCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many offers.
     */
    data: offersCreateManyInput | offersCreateManyInput[]
  }


  /**
   * offers update
   */
  export type offersUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the offers
     */
    select?: offersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: offersInclude<ExtArgs> | null
    /**
     * The data needed to update a offers.
     */
    data: XOR<offersUpdateInput, offersUncheckedUpdateInput>
    /**
     * Choose, which offers to update.
     */
    where: offersWhereUniqueInput
  }


  /**
   * offers updateMany
   */
  export type offersUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update offers.
     */
    data: XOR<offersUpdateManyMutationInput, offersUncheckedUpdateManyInput>
    /**
     * Filter which offers to update
     */
    where?: offersWhereInput
  }


  /**
   * offers upsert
   */
  export type offersUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the offers
     */
    select?: offersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: offersInclude<ExtArgs> | null
    /**
     * The filter to search for the offers to update in case it exists.
     */
    where: offersWhereUniqueInput
    /**
     * In case the offers found by the `where` argument doesn't exist, create a new offers with this data.
     */
    create: XOR<offersCreateInput, offersUncheckedCreateInput>
    /**
     * In case the offers was found with the provided `where` argument, update it with this data.
     */
    update: XOR<offersUpdateInput, offersUncheckedUpdateInput>
  }


  /**
   * offers delete
   */
  export type offersDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the offers
     */
    select?: offersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: offersInclude<ExtArgs> | null
    /**
     * Filter which offers to delete.
     */
    where: offersWhereUniqueInput
  }


  /**
   * offers deleteMany
   */
  export type offersDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which offers to delete
     */
    where?: offersWhereInput
  }


  /**
   * offers findRaw
   */
  export type offersFindRawArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * offers aggregateRaw
   */
  export type offersAggregateRawArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * offers.product
   */
  export type offers$productArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productsInclude<ExtArgs> | null
    where?: productsWhereInput
  }


  /**
   * offers without action
   */
  export type offersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the offers
     */
    select?: offersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: offersInclude<ExtArgs> | null
  }



  /**
   * Model coins
   */


  export type AggregateCoins = {
    _count: CoinsCountAggregateOutputType | null
    _avg: CoinsAvgAggregateOutputType | null
    _sum: CoinsSumAggregateOutputType | null
    _min: CoinsMinAggregateOutputType | null
    _max: CoinsMaxAggregateOutputType | null
  }

  export type CoinsAvgAggregateOutputType = {
    number: number | null
  }

  export type CoinsSumAggregateOutputType = {
    number: number | null
  }

  export type CoinsMinAggregateOutputType = {
    id: string | null
    number: number | null
    name: string | null
    productId: string | null
  }

  export type CoinsMaxAggregateOutputType = {
    id: string | null
    number: number | null
    name: string | null
    productId: string | null
  }

  export type CoinsCountAggregateOutputType = {
    id: number
    number: number
    name: number
    productId: number
    _all: number
  }


  export type CoinsAvgAggregateInputType = {
    number?: true
  }

  export type CoinsSumAggregateInputType = {
    number?: true
  }

  export type CoinsMinAggregateInputType = {
    id?: true
    number?: true
    name?: true
    productId?: true
  }

  export type CoinsMaxAggregateInputType = {
    id?: true
    number?: true
    name?: true
    productId?: true
  }

  export type CoinsCountAggregateInputType = {
    id?: true
    number?: true
    name?: true
    productId?: true
    _all?: true
  }

  export type CoinsAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which coins to aggregate.
     */
    where?: coinsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of coins to fetch.
     */
    orderBy?: coinsOrderByWithRelationInput | coinsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: coinsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` coins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` coins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned coins
    **/
    _count?: true | CoinsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CoinsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CoinsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CoinsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CoinsMaxAggregateInputType
  }

  export type GetCoinsAggregateType<T extends CoinsAggregateArgs> = {
        [P in keyof T & keyof AggregateCoins]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCoins[P]>
      : GetScalarType<T[P], AggregateCoins[P]>
  }




  export type coinsGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: coinsWhereInput
    orderBy?: coinsOrderByWithAggregationInput | coinsOrderByWithAggregationInput[]
    by: CoinsScalarFieldEnum[] | CoinsScalarFieldEnum
    having?: coinsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CoinsCountAggregateInputType | true
    _avg?: CoinsAvgAggregateInputType
    _sum?: CoinsSumAggregateInputType
    _min?: CoinsMinAggregateInputType
    _max?: CoinsMaxAggregateInputType
  }


  export type CoinsGroupByOutputType = {
    id: string
    number: number
    name: string | null
    productId: string
    _count: CoinsCountAggregateOutputType | null
    _avg: CoinsAvgAggregateOutputType | null
    _sum: CoinsSumAggregateOutputType | null
    _min: CoinsMinAggregateOutputType | null
    _max: CoinsMaxAggregateOutputType | null
  }

  type GetCoinsGroupByPayload<T extends coinsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CoinsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CoinsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CoinsGroupByOutputType[P]>
            : GetScalarType<T[P], CoinsGroupByOutputType[P]>
        }
      >
    >


  export type coinsSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    number?: boolean
    name?: boolean
    productId?: boolean
    product?: boolean | coins$productArgs<ExtArgs>
  }, ExtArgs["result"]["coins"]>

  export type coinsSelectScalar = {
    id?: boolean
    number?: boolean
    name?: boolean
    productId?: boolean
  }

  export type coinsInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    product?: boolean | coins$productArgs<ExtArgs>
  }


  type coinsGetPayload<S extends boolean | null | undefined | coinsArgs> = $Types.GetResult<coinsPayload, S>

  type coinsCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<coinsFindManyArgs, 'select' | 'include'> & {
      select?: CoinsCountAggregateInputType | true
    }

  export interface coinsDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['coins'], meta: { name: 'coins' } }
    /**
     * Find zero or one Coins that matches the filter.
     * @param {coinsFindUniqueArgs} args - Arguments to find a Coins
     * @example
     * // Get one Coins
     * const coins = await prisma.coins.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends coinsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, coinsFindUniqueArgs<ExtArgs>>
    ): Prisma__coinsClient<$Types.GetResult<coinsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Coins that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {coinsFindUniqueOrThrowArgs} args - Arguments to find a Coins
     * @example
     * // Get one Coins
     * const coins = await prisma.coins.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends coinsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, coinsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__coinsClient<$Types.GetResult<coinsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Coins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {coinsFindFirstArgs} args - Arguments to find a Coins
     * @example
     * // Get one Coins
     * const coins = await prisma.coins.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends coinsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, coinsFindFirstArgs<ExtArgs>>
    ): Prisma__coinsClient<$Types.GetResult<coinsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Coins that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {coinsFindFirstOrThrowArgs} args - Arguments to find a Coins
     * @example
     * // Get one Coins
     * const coins = await prisma.coins.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends coinsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, coinsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__coinsClient<$Types.GetResult<coinsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Coins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {coinsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Coins
     * const coins = await prisma.coins.findMany()
     * 
     * // Get first 10 Coins
     * const coins = await prisma.coins.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const coinsWithIdOnly = await prisma.coins.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends coinsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, coinsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<coinsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Coins.
     * @param {coinsCreateArgs} args - Arguments to create a Coins.
     * @example
     * // Create one Coins
     * const Coins = await prisma.coins.create({
     *   data: {
     *     // ... data to create a Coins
     *   }
     * })
     * 
    **/
    create<T extends coinsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, coinsCreateArgs<ExtArgs>>
    ): Prisma__coinsClient<$Types.GetResult<coinsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Coins.
     *     @param {coinsCreateManyArgs} args - Arguments to create many Coins.
     *     @example
     *     // Create many Coins
     *     const coins = await prisma.coins.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends coinsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, coinsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Coins.
     * @param {coinsDeleteArgs} args - Arguments to delete one Coins.
     * @example
     * // Delete one Coins
     * const Coins = await prisma.coins.delete({
     *   where: {
     *     // ... filter to delete one Coins
     *   }
     * })
     * 
    **/
    delete<T extends coinsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, coinsDeleteArgs<ExtArgs>>
    ): Prisma__coinsClient<$Types.GetResult<coinsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Coins.
     * @param {coinsUpdateArgs} args - Arguments to update one Coins.
     * @example
     * // Update one Coins
     * const coins = await prisma.coins.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends coinsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, coinsUpdateArgs<ExtArgs>>
    ): Prisma__coinsClient<$Types.GetResult<coinsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Coins.
     * @param {coinsDeleteManyArgs} args - Arguments to filter Coins to delete.
     * @example
     * // Delete a few Coins
     * const { count } = await prisma.coins.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends coinsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, coinsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Coins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {coinsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Coins
     * const coins = await prisma.coins.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends coinsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, coinsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Coins.
     * @param {coinsUpsertArgs} args - Arguments to update or create a Coins.
     * @example
     * // Update or create a Coins
     * const coins = await prisma.coins.upsert({
     *   create: {
     *     // ... data to create a Coins
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Coins we want to update
     *   }
     * })
    **/
    upsert<T extends coinsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, coinsUpsertArgs<ExtArgs>>
    ): Prisma__coinsClient<$Types.GetResult<coinsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Coins that matches the filter.
     * @param {coinsFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const coins = await prisma.coins.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: coinsFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Coins.
     * @param {coinsAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const coins = await prisma.coins.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: coinsAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Coins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {coinsCountArgs} args - Arguments to filter Coins to count.
     * @example
     * // Count the number of Coins
     * const count = await prisma.coins.count({
     *   where: {
     *     // ... the filter for the Coins we want to count
     *   }
     * })
    **/
    count<T extends coinsCountArgs>(
      args?: Subset<T, coinsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CoinsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Coins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoinsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CoinsAggregateArgs>(args: Subset<T, CoinsAggregateArgs>): Prisma.PrismaPromise<GetCoinsAggregateType<T>>

    /**
     * Group by Coins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {coinsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends coinsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: coinsGroupByArgs['orderBy'] }
        : { orderBy?: coinsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, coinsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCoinsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the coins model
   */
  readonly fields: coinsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for coins.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__coinsClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    product<T extends coins$productArgs<ExtArgs> = {}>(args?: Subset<T, coins$productArgs<ExtArgs>>): Prisma__productsClient<$Types.GetResult<productsPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the coins model
   */ 
  interface coinsFieldRefs {
    readonly id: FieldRef<"coins", 'String'>
    readonly number: FieldRef<"coins", 'Int'>
    readonly name: FieldRef<"coins", 'String'>
    readonly productId: FieldRef<"coins", 'String'>
  }
    

  // Custom InputTypes

  /**
   * coins findUnique
   */
  export type coinsFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the coins
     */
    select?: coinsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: coinsInclude<ExtArgs> | null
    /**
     * Filter, which coins to fetch.
     */
    where: coinsWhereUniqueInput
  }


  /**
   * coins findUniqueOrThrow
   */
  export type coinsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the coins
     */
    select?: coinsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: coinsInclude<ExtArgs> | null
    /**
     * Filter, which coins to fetch.
     */
    where: coinsWhereUniqueInput
  }


  /**
   * coins findFirst
   */
  export type coinsFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the coins
     */
    select?: coinsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: coinsInclude<ExtArgs> | null
    /**
     * Filter, which coins to fetch.
     */
    where?: coinsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of coins to fetch.
     */
    orderBy?: coinsOrderByWithRelationInput | coinsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for coins.
     */
    cursor?: coinsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` coins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` coins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of coins.
     */
    distinct?: CoinsScalarFieldEnum | CoinsScalarFieldEnum[]
  }


  /**
   * coins findFirstOrThrow
   */
  export type coinsFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the coins
     */
    select?: coinsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: coinsInclude<ExtArgs> | null
    /**
     * Filter, which coins to fetch.
     */
    where?: coinsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of coins to fetch.
     */
    orderBy?: coinsOrderByWithRelationInput | coinsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for coins.
     */
    cursor?: coinsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` coins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` coins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of coins.
     */
    distinct?: CoinsScalarFieldEnum | CoinsScalarFieldEnum[]
  }


  /**
   * coins findMany
   */
  export type coinsFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the coins
     */
    select?: coinsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: coinsInclude<ExtArgs> | null
    /**
     * Filter, which coins to fetch.
     */
    where?: coinsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of coins to fetch.
     */
    orderBy?: coinsOrderByWithRelationInput | coinsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing coins.
     */
    cursor?: coinsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` coins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` coins.
     */
    skip?: number
    distinct?: CoinsScalarFieldEnum | CoinsScalarFieldEnum[]
  }


  /**
   * coins create
   */
  export type coinsCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the coins
     */
    select?: coinsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: coinsInclude<ExtArgs> | null
    /**
     * The data needed to create a coins.
     */
    data: XOR<coinsCreateInput, coinsUncheckedCreateInput>
  }


  /**
   * coins createMany
   */
  export type coinsCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many coins.
     */
    data: coinsCreateManyInput | coinsCreateManyInput[]
  }


  /**
   * coins update
   */
  export type coinsUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the coins
     */
    select?: coinsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: coinsInclude<ExtArgs> | null
    /**
     * The data needed to update a coins.
     */
    data: XOR<coinsUpdateInput, coinsUncheckedUpdateInput>
    /**
     * Choose, which coins to update.
     */
    where: coinsWhereUniqueInput
  }


  /**
   * coins updateMany
   */
  export type coinsUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update coins.
     */
    data: XOR<coinsUpdateManyMutationInput, coinsUncheckedUpdateManyInput>
    /**
     * Filter which coins to update
     */
    where?: coinsWhereInput
  }


  /**
   * coins upsert
   */
  export type coinsUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the coins
     */
    select?: coinsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: coinsInclude<ExtArgs> | null
    /**
     * The filter to search for the coins to update in case it exists.
     */
    where: coinsWhereUniqueInput
    /**
     * In case the coins found by the `where` argument doesn't exist, create a new coins with this data.
     */
    create: XOR<coinsCreateInput, coinsUncheckedCreateInput>
    /**
     * In case the coins was found with the provided `where` argument, update it with this data.
     */
    update: XOR<coinsUpdateInput, coinsUncheckedUpdateInput>
  }


  /**
   * coins delete
   */
  export type coinsDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the coins
     */
    select?: coinsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: coinsInclude<ExtArgs> | null
    /**
     * Filter which coins to delete.
     */
    where: coinsWhereUniqueInput
  }


  /**
   * coins deleteMany
   */
  export type coinsDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which coins to delete
     */
    where?: coinsWhereInput
  }


  /**
   * coins findRaw
   */
  export type coinsFindRawArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * coins aggregateRaw
   */
  export type coinsAggregateRawArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * coins.product
   */
  export type coins$productArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productsInclude<ExtArgs> | null
    where?: productsWhereInput
  }


  /**
   * coins without action
   */
  export type coinsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the coins
     */
    select?: coinsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: coinsInclude<ExtArgs> | null
  }



  /**
   * Model variants
   */


  export type AggregateVariants = {
    _count: VariantsCountAggregateOutputType | null
    _min: VariantsMinAggregateOutputType | null
    _max: VariantsMaxAggregateOutputType | null
  }

  export type VariantsMinAggregateOutputType = {
    id: string | null
    size: string | null
    color: string | null
    image: string | null
    productId: string | null
  }

  export type VariantsMaxAggregateOutputType = {
    id: string | null
    size: string | null
    color: string | null
    image: string | null
    productId: string | null
  }

  export type VariantsCountAggregateOutputType = {
    id: number
    size: number
    color: number
    image: number
    productId: number
    _all: number
  }


  export type VariantsMinAggregateInputType = {
    id?: true
    size?: true
    color?: true
    image?: true
    productId?: true
  }

  export type VariantsMaxAggregateInputType = {
    id?: true
    size?: true
    color?: true
    image?: true
    productId?: true
  }

  export type VariantsCountAggregateInputType = {
    id?: true
    size?: true
    color?: true
    image?: true
    productId?: true
    _all?: true
  }

  export type VariantsAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which variants to aggregate.
     */
    where?: variantsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of variants to fetch.
     */
    orderBy?: variantsOrderByWithRelationInput | variantsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: variantsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` variants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` variants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned variants
    **/
    _count?: true | VariantsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VariantsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VariantsMaxAggregateInputType
  }

  export type GetVariantsAggregateType<T extends VariantsAggregateArgs> = {
        [P in keyof T & keyof AggregateVariants]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVariants[P]>
      : GetScalarType<T[P], AggregateVariants[P]>
  }




  export type variantsGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: variantsWhereInput
    orderBy?: variantsOrderByWithAggregationInput | variantsOrderByWithAggregationInput[]
    by: VariantsScalarFieldEnum[] | VariantsScalarFieldEnum
    having?: variantsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VariantsCountAggregateInputType | true
    _min?: VariantsMinAggregateInputType
    _max?: VariantsMaxAggregateInputType
  }


  export type VariantsGroupByOutputType = {
    id: string
    size: string
    color: string
    image: string
    productId: string
    _count: VariantsCountAggregateOutputType | null
    _min: VariantsMinAggregateOutputType | null
    _max: VariantsMaxAggregateOutputType | null
  }

  type GetVariantsGroupByPayload<T extends variantsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VariantsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VariantsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VariantsGroupByOutputType[P]>
            : GetScalarType<T[P], VariantsGroupByOutputType[P]>
        }
      >
    >


  export type variantsSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    size?: boolean
    color?: boolean
    image?: boolean
    productId?: boolean
    product?: boolean | variants$productArgs<ExtArgs>
  }, ExtArgs["result"]["variants"]>

  export type variantsSelectScalar = {
    id?: boolean
    size?: boolean
    color?: boolean
    image?: boolean
    productId?: boolean
  }

  export type variantsInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    product?: boolean | variants$productArgs<ExtArgs>
  }


  type variantsGetPayload<S extends boolean | null | undefined | variantsArgs> = $Types.GetResult<variantsPayload, S>

  type variantsCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<variantsFindManyArgs, 'select' | 'include'> & {
      select?: VariantsCountAggregateInputType | true
    }

  export interface variantsDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['variants'], meta: { name: 'variants' } }
    /**
     * Find zero or one Variants that matches the filter.
     * @param {variantsFindUniqueArgs} args - Arguments to find a Variants
     * @example
     * // Get one Variants
     * const variants = await prisma.variants.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends variantsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, variantsFindUniqueArgs<ExtArgs>>
    ): Prisma__variantsClient<$Types.GetResult<variantsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Variants that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {variantsFindUniqueOrThrowArgs} args - Arguments to find a Variants
     * @example
     * // Get one Variants
     * const variants = await prisma.variants.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends variantsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, variantsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__variantsClient<$Types.GetResult<variantsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Variants that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {variantsFindFirstArgs} args - Arguments to find a Variants
     * @example
     * // Get one Variants
     * const variants = await prisma.variants.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends variantsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, variantsFindFirstArgs<ExtArgs>>
    ): Prisma__variantsClient<$Types.GetResult<variantsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Variants that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {variantsFindFirstOrThrowArgs} args - Arguments to find a Variants
     * @example
     * // Get one Variants
     * const variants = await prisma.variants.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends variantsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, variantsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__variantsClient<$Types.GetResult<variantsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Variants that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {variantsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Variants
     * const variants = await prisma.variants.findMany()
     * 
     * // Get first 10 Variants
     * const variants = await prisma.variants.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const variantsWithIdOnly = await prisma.variants.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends variantsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, variantsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<variantsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Variants.
     * @param {variantsCreateArgs} args - Arguments to create a Variants.
     * @example
     * // Create one Variants
     * const Variants = await prisma.variants.create({
     *   data: {
     *     // ... data to create a Variants
     *   }
     * })
     * 
    **/
    create<T extends variantsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, variantsCreateArgs<ExtArgs>>
    ): Prisma__variantsClient<$Types.GetResult<variantsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Variants.
     *     @param {variantsCreateManyArgs} args - Arguments to create many Variants.
     *     @example
     *     // Create many Variants
     *     const variants = await prisma.variants.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends variantsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, variantsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Variants.
     * @param {variantsDeleteArgs} args - Arguments to delete one Variants.
     * @example
     * // Delete one Variants
     * const Variants = await prisma.variants.delete({
     *   where: {
     *     // ... filter to delete one Variants
     *   }
     * })
     * 
    **/
    delete<T extends variantsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, variantsDeleteArgs<ExtArgs>>
    ): Prisma__variantsClient<$Types.GetResult<variantsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Variants.
     * @param {variantsUpdateArgs} args - Arguments to update one Variants.
     * @example
     * // Update one Variants
     * const variants = await prisma.variants.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends variantsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, variantsUpdateArgs<ExtArgs>>
    ): Prisma__variantsClient<$Types.GetResult<variantsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Variants.
     * @param {variantsDeleteManyArgs} args - Arguments to filter Variants to delete.
     * @example
     * // Delete a few Variants
     * const { count } = await prisma.variants.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends variantsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, variantsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Variants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {variantsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Variants
     * const variants = await prisma.variants.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends variantsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, variantsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Variants.
     * @param {variantsUpsertArgs} args - Arguments to update or create a Variants.
     * @example
     * // Update or create a Variants
     * const variants = await prisma.variants.upsert({
     *   create: {
     *     // ... data to create a Variants
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Variants we want to update
     *   }
     * })
    **/
    upsert<T extends variantsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, variantsUpsertArgs<ExtArgs>>
    ): Prisma__variantsClient<$Types.GetResult<variantsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Variants that matches the filter.
     * @param {variantsFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const variants = await prisma.variants.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: variantsFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Variants.
     * @param {variantsAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const variants = await prisma.variants.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: variantsAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Variants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {variantsCountArgs} args - Arguments to filter Variants to count.
     * @example
     * // Count the number of Variants
     * const count = await prisma.variants.count({
     *   where: {
     *     // ... the filter for the Variants we want to count
     *   }
     * })
    **/
    count<T extends variantsCountArgs>(
      args?: Subset<T, variantsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VariantsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Variants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VariantsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VariantsAggregateArgs>(args: Subset<T, VariantsAggregateArgs>): Prisma.PrismaPromise<GetVariantsAggregateType<T>>

    /**
     * Group by Variants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {variantsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends variantsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: variantsGroupByArgs['orderBy'] }
        : { orderBy?: variantsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, variantsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVariantsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the variants model
   */
  readonly fields: variantsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for variants.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__variantsClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    product<T extends variants$productArgs<ExtArgs> = {}>(args?: Subset<T, variants$productArgs<ExtArgs>>): Prisma__productsClient<$Types.GetResult<productsPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the variants model
   */ 
  interface variantsFieldRefs {
    readonly id: FieldRef<"variants", 'String'>
    readonly size: FieldRef<"variants", 'String'>
    readonly color: FieldRef<"variants", 'String'>
    readonly image: FieldRef<"variants", 'String'>
    readonly productId: FieldRef<"variants", 'String'>
  }
    

  // Custom InputTypes

  /**
   * variants findUnique
   */
  export type variantsFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the variants
     */
    select?: variantsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: variantsInclude<ExtArgs> | null
    /**
     * Filter, which variants to fetch.
     */
    where: variantsWhereUniqueInput
  }


  /**
   * variants findUniqueOrThrow
   */
  export type variantsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the variants
     */
    select?: variantsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: variantsInclude<ExtArgs> | null
    /**
     * Filter, which variants to fetch.
     */
    where: variantsWhereUniqueInput
  }


  /**
   * variants findFirst
   */
  export type variantsFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the variants
     */
    select?: variantsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: variantsInclude<ExtArgs> | null
    /**
     * Filter, which variants to fetch.
     */
    where?: variantsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of variants to fetch.
     */
    orderBy?: variantsOrderByWithRelationInput | variantsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for variants.
     */
    cursor?: variantsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` variants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` variants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of variants.
     */
    distinct?: VariantsScalarFieldEnum | VariantsScalarFieldEnum[]
  }


  /**
   * variants findFirstOrThrow
   */
  export type variantsFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the variants
     */
    select?: variantsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: variantsInclude<ExtArgs> | null
    /**
     * Filter, which variants to fetch.
     */
    where?: variantsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of variants to fetch.
     */
    orderBy?: variantsOrderByWithRelationInput | variantsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for variants.
     */
    cursor?: variantsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` variants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` variants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of variants.
     */
    distinct?: VariantsScalarFieldEnum | VariantsScalarFieldEnum[]
  }


  /**
   * variants findMany
   */
  export type variantsFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the variants
     */
    select?: variantsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: variantsInclude<ExtArgs> | null
    /**
     * Filter, which variants to fetch.
     */
    where?: variantsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of variants to fetch.
     */
    orderBy?: variantsOrderByWithRelationInput | variantsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing variants.
     */
    cursor?: variantsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` variants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` variants.
     */
    skip?: number
    distinct?: VariantsScalarFieldEnum | VariantsScalarFieldEnum[]
  }


  /**
   * variants create
   */
  export type variantsCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the variants
     */
    select?: variantsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: variantsInclude<ExtArgs> | null
    /**
     * The data needed to create a variants.
     */
    data: XOR<variantsCreateInput, variantsUncheckedCreateInput>
  }


  /**
   * variants createMany
   */
  export type variantsCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many variants.
     */
    data: variantsCreateManyInput | variantsCreateManyInput[]
  }


  /**
   * variants update
   */
  export type variantsUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the variants
     */
    select?: variantsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: variantsInclude<ExtArgs> | null
    /**
     * The data needed to update a variants.
     */
    data: XOR<variantsUpdateInput, variantsUncheckedUpdateInput>
    /**
     * Choose, which variants to update.
     */
    where: variantsWhereUniqueInput
  }


  /**
   * variants updateMany
   */
  export type variantsUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update variants.
     */
    data: XOR<variantsUpdateManyMutationInput, variantsUncheckedUpdateManyInput>
    /**
     * Filter which variants to update
     */
    where?: variantsWhereInput
  }


  /**
   * variants upsert
   */
  export type variantsUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the variants
     */
    select?: variantsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: variantsInclude<ExtArgs> | null
    /**
     * The filter to search for the variants to update in case it exists.
     */
    where: variantsWhereUniqueInput
    /**
     * In case the variants found by the `where` argument doesn't exist, create a new variants with this data.
     */
    create: XOR<variantsCreateInput, variantsUncheckedCreateInput>
    /**
     * In case the variants was found with the provided `where` argument, update it with this data.
     */
    update: XOR<variantsUpdateInput, variantsUncheckedUpdateInput>
  }


  /**
   * variants delete
   */
  export type variantsDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the variants
     */
    select?: variantsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: variantsInclude<ExtArgs> | null
    /**
     * Filter which variants to delete.
     */
    where: variantsWhereUniqueInput
  }


  /**
   * variants deleteMany
   */
  export type variantsDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which variants to delete
     */
    where?: variantsWhereInput
  }


  /**
   * variants findRaw
   */
  export type variantsFindRawArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * variants aggregateRaw
   */
  export type variantsAggregateRawArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * variants.product
   */
  export type variants$productArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productsInclude<ExtArgs> | null
    where?: productsWhereInput
  }


  /**
   * variants without action
   */
  export type variantsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the variants
     */
    select?: variantsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: variantsInclude<ExtArgs> | null
  }



  /**
   * Model comments
   */


  export type AggregateComments = {
    _count: CommentsCountAggregateOutputType | null
    _min: CommentsMinAggregateOutputType | null
    _max: CommentsMaxAggregateOutputType | null
  }

  export type CommentsMinAggregateOutputType = {
    id: string | null
    message: string | null
    replay: string | null
    userId: string | null
    productId: string | null
  }

  export type CommentsMaxAggregateOutputType = {
    id: string | null
    message: string | null
    replay: string | null
    userId: string | null
    productId: string | null
  }

  export type CommentsCountAggregateOutputType = {
    id: number
    message: number
    replay: number
    userId: number
    productId: number
    _all: number
  }


  export type CommentsMinAggregateInputType = {
    id?: true
    message?: true
    replay?: true
    userId?: true
    productId?: true
  }

  export type CommentsMaxAggregateInputType = {
    id?: true
    message?: true
    replay?: true
    userId?: true
    productId?: true
  }

  export type CommentsCountAggregateInputType = {
    id?: true
    message?: true
    replay?: true
    userId?: true
    productId?: true
    _all?: true
  }

  export type CommentsAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which comments to aggregate.
     */
    where?: commentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of comments to fetch.
     */
    orderBy?: commentsOrderByWithRelationInput | commentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: commentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned comments
    **/
    _count?: true | CommentsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommentsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommentsMaxAggregateInputType
  }

  export type GetCommentsAggregateType<T extends CommentsAggregateArgs> = {
        [P in keyof T & keyof AggregateComments]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComments[P]>
      : GetScalarType<T[P], AggregateComments[P]>
  }




  export type commentsGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: commentsWhereInput
    orderBy?: commentsOrderByWithAggregationInput | commentsOrderByWithAggregationInput[]
    by: CommentsScalarFieldEnum[] | CommentsScalarFieldEnum
    having?: commentsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommentsCountAggregateInputType | true
    _min?: CommentsMinAggregateInputType
    _max?: CommentsMaxAggregateInputType
  }


  export type CommentsGroupByOutputType = {
    id: string
    message: string
    replay: string
    userId: string
    productId: string
    _count: CommentsCountAggregateOutputType | null
    _min: CommentsMinAggregateOutputType | null
    _max: CommentsMaxAggregateOutputType | null
  }

  type GetCommentsGroupByPayload<T extends commentsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommentsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommentsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommentsGroupByOutputType[P]>
            : GetScalarType<T[P], CommentsGroupByOutputType[P]>
        }
      >
    >


  export type commentsSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    message?: boolean
    replay?: boolean
    userId?: boolean
    productId?: boolean
    user?: boolean | comments$userArgs<ExtArgs>
    product?: boolean | comments$productArgs<ExtArgs>
    notifications?: boolean | comments$notificationsArgs<ExtArgs>
    _count?: boolean | CommentsCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["comments"]>

  export type commentsSelectScalar = {
    id?: boolean
    message?: boolean
    replay?: boolean
    userId?: boolean
    productId?: boolean
  }

  export type commentsInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | comments$userArgs<ExtArgs>
    product?: boolean | comments$productArgs<ExtArgs>
    notifications?: boolean | comments$notificationsArgs<ExtArgs>
    _count?: boolean | CommentsCountOutputTypeArgs<ExtArgs>
  }


  type commentsGetPayload<S extends boolean | null | undefined | commentsArgs> = $Types.GetResult<commentsPayload, S>

  type commentsCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<commentsFindManyArgs, 'select' | 'include'> & {
      select?: CommentsCountAggregateInputType | true
    }

  export interface commentsDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['comments'], meta: { name: 'comments' } }
    /**
     * Find zero or one Comments that matches the filter.
     * @param {commentsFindUniqueArgs} args - Arguments to find a Comments
     * @example
     * // Get one Comments
     * const comments = await prisma.comments.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends commentsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, commentsFindUniqueArgs<ExtArgs>>
    ): Prisma__commentsClient<$Types.GetResult<commentsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Comments that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {commentsFindUniqueOrThrowArgs} args - Arguments to find a Comments
     * @example
     * // Get one Comments
     * const comments = await prisma.comments.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends commentsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, commentsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__commentsClient<$Types.GetResult<commentsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commentsFindFirstArgs} args - Arguments to find a Comments
     * @example
     * // Get one Comments
     * const comments = await prisma.comments.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends commentsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, commentsFindFirstArgs<ExtArgs>>
    ): Prisma__commentsClient<$Types.GetResult<commentsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Comments that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commentsFindFirstOrThrowArgs} args - Arguments to find a Comments
     * @example
     * // Get one Comments
     * const comments = await prisma.comments.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends commentsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, commentsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__commentsClient<$Types.GetResult<commentsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commentsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Comments
     * const comments = await prisma.comments.findMany()
     * 
     * // Get first 10 Comments
     * const comments = await prisma.comments.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commentsWithIdOnly = await prisma.comments.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends commentsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, commentsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<commentsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Comments.
     * @param {commentsCreateArgs} args - Arguments to create a Comments.
     * @example
     * // Create one Comments
     * const Comments = await prisma.comments.create({
     *   data: {
     *     // ... data to create a Comments
     *   }
     * })
     * 
    **/
    create<T extends commentsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, commentsCreateArgs<ExtArgs>>
    ): Prisma__commentsClient<$Types.GetResult<commentsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Comments.
     *     @param {commentsCreateManyArgs} args - Arguments to create many Comments.
     *     @example
     *     // Create many Comments
     *     const comments = await prisma.comments.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends commentsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, commentsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Comments.
     * @param {commentsDeleteArgs} args - Arguments to delete one Comments.
     * @example
     * // Delete one Comments
     * const Comments = await prisma.comments.delete({
     *   where: {
     *     // ... filter to delete one Comments
     *   }
     * })
     * 
    **/
    delete<T extends commentsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, commentsDeleteArgs<ExtArgs>>
    ): Prisma__commentsClient<$Types.GetResult<commentsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Comments.
     * @param {commentsUpdateArgs} args - Arguments to update one Comments.
     * @example
     * // Update one Comments
     * const comments = await prisma.comments.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends commentsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, commentsUpdateArgs<ExtArgs>>
    ): Prisma__commentsClient<$Types.GetResult<commentsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Comments.
     * @param {commentsDeleteManyArgs} args - Arguments to filter Comments to delete.
     * @example
     * // Delete a few Comments
     * const { count } = await prisma.comments.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends commentsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, commentsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commentsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Comments
     * const comments = await prisma.comments.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends commentsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, commentsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Comments.
     * @param {commentsUpsertArgs} args - Arguments to update or create a Comments.
     * @example
     * // Update or create a Comments
     * const comments = await prisma.comments.upsert({
     *   create: {
     *     // ... data to create a Comments
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Comments we want to update
     *   }
     * })
    **/
    upsert<T extends commentsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, commentsUpsertArgs<ExtArgs>>
    ): Prisma__commentsClient<$Types.GetResult<commentsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Comments that matches the filter.
     * @param {commentsFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const comments = await prisma.comments.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: commentsFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Comments.
     * @param {commentsAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const comments = await prisma.comments.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: commentsAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commentsCountArgs} args - Arguments to filter Comments to count.
     * @example
     * // Count the number of Comments
     * const count = await prisma.comments.count({
     *   where: {
     *     // ... the filter for the Comments we want to count
     *   }
     * })
    **/
    count<T extends commentsCountArgs>(
      args?: Subset<T, commentsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommentsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommentsAggregateArgs>(args: Subset<T, CommentsAggregateArgs>): Prisma.PrismaPromise<GetCommentsAggregateType<T>>

    /**
     * Group by Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commentsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends commentsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: commentsGroupByArgs['orderBy'] }
        : { orderBy?: commentsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, commentsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommentsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the comments model
   */
  readonly fields: commentsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for comments.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__commentsClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends comments$userArgs<ExtArgs> = {}>(args?: Subset<T, comments$userArgs<ExtArgs>>): Prisma__usersClient<$Types.GetResult<usersPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    product<T extends comments$productArgs<ExtArgs> = {}>(args?: Subset<T, comments$productArgs<ExtArgs>>): Prisma__productsClient<$Types.GetResult<productsPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    notifications<T extends comments$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, comments$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<notificationsPayload<ExtArgs>, T, 'findMany'>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the comments model
   */ 
  interface commentsFieldRefs {
    readonly id: FieldRef<"comments", 'String'>
    readonly message: FieldRef<"comments", 'String'>
    readonly replay: FieldRef<"comments", 'String'>
    readonly userId: FieldRef<"comments", 'String'>
    readonly productId: FieldRef<"comments", 'String'>
  }
    

  // Custom InputTypes

  /**
   * comments findUnique
   */
  export type commentsFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comments
     */
    select?: commentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: commentsInclude<ExtArgs> | null
    /**
     * Filter, which comments to fetch.
     */
    where: commentsWhereUniqueInput
  }


  /**
   * comments findUniqueOrThrow
   */
  export type commentsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comments
     */
    select?: commentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: commentsInclude<ExtArgs> | null
    /**
     * Filter, which comments to fetch.
     */
    where: commentsWhereUniqueInput
  }


  /**
   * comments findFirst
   */
  export type commentsFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comments
     */
    select?: commentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: commentsInclude<ExtArgs> | null
    /**
     * Filter, which comments to fetch.
     */
    where?: commentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of comments to fetch.
     */
    orderBy?: commentsOrderByWithRelationInput | commentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for comments.
     */
    cursor?: commentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of comments.
     */
    distinct?: CommentsScalarFieldEnum | CommentsScalarFieldEnum[]
  }


  /**
   * comments findFirstOrThrow
   */
  export type commentsFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comments
     */
    select?: commentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: commentsInclude<ExtArgs> | null
    /**
     * Filter, which comments to fetch.
     */
    where?: commentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of comments to fetch.
     */
    orderBy?: commentsOrderByWithRelationInput | commentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for comments.
     */
    cursor?: commentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of comments.
     */
    distinct?: CommentsScalarFieldEnum | CommentsScalarFieldEnum[]
  }


  /**
   * comments findMany
   */
  export type commentsFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comments
     */
    select?: commentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: commentsInclude<ExtArgs> | null
    /**
     * Filter, which comments to fetch.
     */
    where?: commentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of comments to fetch.
     */
    orderBy?: commentsOrderByWithRelationInput | commentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing comments.
     */
    cursor?: commentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` comments.
     */
    skip?: number
    distinct?: CommentsScalarFieldEnum | CommentsScalarFieldEnum[]
  }


  /**
   * comments create
   */
  export type commentsCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comments
     */
    select?: commentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: commentsInclude<ExtArgs> | null
    /**
     * The data needed to create a comments.
     */
    data: XOR<commentsCreateInput, commentsUncheckedCreateInput>
  }


  /**
   * comments createMany
   */
  export type commentsCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many comments.
     */
    data: commentsCreateManyInput | commentsCreateManyInput[]
  }


  /**
   * comments update
   */
  export type commentsUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comments
     */
    select?: commentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: commentsInclude<ExtArgs> | null
    /**
     * The data needed to update a comments.
     */
    data: XOR<commentsUpdateInput, commentsUncheckedUpdateInput>
    /**
     * Choose, which comments to update.
     */
    where: commentsWhereUniqueInput
  }


  /**
   * comments updateMany
   */
  export type commentsUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update comments.
     */
    data: XOR<commentsUpdateManyMutationInput, commentsUncheckedUpdateManyInput>
    /**
     * Filter which comments to update
     */
    where?: commentsWhereInput
  }


  /**
   * comments upsert
   */
  export type commentsUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comments
     */
    select?: commentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: commentsInclude<ExtArgs> | null
    /**
     * The filter to search for the comments to update in case it exists.
     */
    where: commentsWhereUniqueInput
    /**
     * In case the comments found by the `where` argument doesn't exist, create a new comments with this data.
     */
    create: XOR<commentsCreateInput, commentsUncheckedCreateInput>
    /**
     * In case the comments was found with the provided `where` argument, update it with this data.
     */
    update: XOR<commentsUpdateInput, commentsUncheckedUpdateInput>
  }


  /**
   * comments delete
   */
  export type commentsDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comments
     */
    select?: commentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: commentsInclude<ExtArgs> | null
    /**
     * Filter which comments to delete.
     */
    where: commentsWhereUniqueInput
  }


  /**
   * comments deleteMany
   */
  export type commentsDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which comments to delete
     */
    where?: commentsWhereInput
  }


  /**
   * comments findRaw
   */
  export type commentsFindRawArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * comments aggregateRaw
   */
  export type commentsAggregateRawArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * comments.user
   */
  export type comments$userArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    where?: usersWhereInput
  }


  /**
   * comments.product
   */
  export type comments$productArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productsInclude<ExtArgs> | null
    where?: productsWhereInput
  }


  /**
   * comments.notifications
   */
  export type comments$notificationsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notifications
     */
    select?: notificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: notificationsInclude<ExtArgs> | null
    where?: notificationsWhereInput
    orderBy?: notificationsOrderByWithRelationInput | notificationsOrderByWithRelationInput[]
    cursor?: notificationsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationsScalarFieldEnum | NotificationsScalarFieldEnum[]
  }


  /**
   * comments without action
   */
  export type commentsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comments
     */
    select?: commentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: commentsInclude<ExtArgs> | null
  }



  /**
   * Model reviews
   */


  export type AggregateReviews = {
    _count: ReviewsCountAggregateOutputType | null
    _avg: ReviewsAvgAggregateOutputType | null
    _sum: ReviewsSumAggregateOutputType | null
    _min: ReviewsMinAggregateOutputType | null
    _max: ReviewsMaxAggregateOutputType | null
  }

  export type ReviewsAvgAggregateOutputType = {
    rate: number | null
  }

  export type ReviewsSumAggregateOutputType = {
    rate: number | null
  }

  export type ReviewsMinAggregateOutputType = {
    id: string | null
    message: string | null
    rate: number | null
    replay: string | null
    userId: string | null
    productId: string | null
  }

  export type ReviewsMaxAggregateOutputType = {
    id: string | null
    message: string | null
    rate: number | null
    replay: string | null
    userId: string | null
    productId: string | null
  }

  export type ReviewsCountAggregateOutputType = {
    id: number
    message: number
    rate: number
    replay: number
    userId: number
    productId: number
    _all: number
  }


  export type ReviewsAvgAggregateInputType = {
    rate?: true
  }

  export type ReviewsSumAggregateInputType = {
    rate?: true
  }

  export type ReviewsMinAggregateInputType = {
    id?: true
    message?: true
    rate?: true
    replay?: true
    userId?: true
    productId?: true
  }

  export type ReviewsMaxAggregateInputType = {
    id?: true
    message?: true
    rate?: true
    replay?: true
    userId?: true
    productId?: true
  }

  export type ReviewsCountAggregateInputType = {
    id?: true
    message?: true
    rate?: true
    replay?: true
    userId?: true
    productId?: true
    _all?: true
  }

  export type ReviewsAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which reviews to aggregate.
     */
    where?: reviewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reviews to fetch.
     */
    orderBy?: reviewsOrderByWithRelationInput | reviewsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: reviewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned reviews
    **/
    _count?: true | ReviewsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReviewsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReviewsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReviewsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReviewsMaxAggregateInputType
  }

  export type GetReviewsAggregateType<T extends ReviewsAggregateArgs> = {
        [P in keyof T & keyof AggregateReviews]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReviews[P]>
      : GetScalarType<T[P], AggregateReviews[P]>
  }




  export type reviewsGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: reviewsWhereInput
    orderBy?: reviewsOrderByWithAggregationInput | reviewsOrderByWithAggregationInput[]
    by: ReviewsScalarFieldEnum[] | ReviewsScalarFieldEnum
    having?: reviewsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReviewsCountAggregateInputType | true
    _avg?: ReviewsAvgAggregateInputType
    _sum?: ReviewsSumAggregateInputType
    _min?: ReviewsMinAggregateInputType
    _max?: ReviewsMaxAggregateInputType
  }


  export type ReviewsGroupByOutputType = {
    id: string
    message: string
    rate: number
    replay: string
    userId: string
    productId: string
    _count: ReviewsCountAggregateOutputType | null
    _avg: ReviewsAvgAggregateOutputType | null
    _sum: ReviewsSumAggregateOutputType | null
    _min: ReviewsMinAggregateOutputType | null
    _max: ReviewsMaxAggregateOutputType | null
  }

  type GetReviewsGroupByPayload<T extends reviewsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReviewsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReviewsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReviewsGroupByOutputType[P]>
            : GetScalarType<T[P], ReviewsGroupByOutputType[P]>
        }
      >
    >


  export type reviewsSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    message?: boolean
    rate?: boolean
    replay?: boolean
    userId?: boolean
    productId?: boolean
    user?: boolean | reviews$userArgs<ExtArgs>
    product?: boolean | reviews$productArgs<ExtArgs>
    notifications?: boolean | reviews$notificationsArgs<ExtArgs>
    _count?: boolean | ReviewsCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["reviews"]>

  export type reviewsSelectScalar = {
    id?: boolean
    message?: boolean
    rate?: boolean
    replay?: boolean
    userId?: boolean
    productId?: boolean
  }

  export type reviewsInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | reviews$userArgs<ExtArgs>
    product?: boolean | reviews$productArgs<ExtArgs>
    notifications?: boolean | reviews$notificationsArgs<ExtArgs>
    _count?: boolean | ReviewsCountOutputTypeArgs<ExtArgs>
  }


  type reviewsGetPayload<S extends boolean | null | undefined | reviewsArgs> = $Types.GetResult<reviewsPayload, S>

  type reviewsCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<reviewsFindManyArgs, 'select' | 'include'> & {
      select?: ReviewsCountAggregateInputType | true
    }

  export interface reviewsDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['reviews'], meta: { name: 'reviews' } }
    /**
     * Find zero or one Reviews that matches the filter.
     * @param {reviewsFindUniqueArgs} args - Arguments to find a Reviews
     * @example
     * // Get one Reviews
     * const reviews = await prisma.reviews.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends reviewsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, reviewsFindUniqueArgs<ExtArgs>>
    ): Prisma__reviewsClient<$Types.GetResult<reviewsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Reviews that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {reviewsFindUniqueOrThrowArgs} args - Arguments to find a Reviews
     * @example
     * // Get one Reviews
     * const reviews = await prisma.reviews.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends reviewsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, reviewsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__reviewsClient<$Types.GetResult<reviewsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Reviews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reviewsFindFirstArgs} args - Arguments to find a Reviews
     * @example
     * // Get one Reviews
     * const reviews = await prisma.reviews.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends reviewsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, reviewsFindFirstArgs<ExtArgs>>
    ): Prisma__reviewsClient<$Types.GetResult<reviewsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Reviews that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reviewsFindFirstOrThrowArgs} args - Arguments to find a Reviews
     * @example
     * // Get one Reviews
     * const reviews = await prisma.reviews.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends reviewsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, reviewsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__reviewsClient<$Types.GetResult<reviewsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Reviews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reviewsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reviews
     * const reviews = await prisma.reviews.findMany()
     * 
     * // Get first 10 Reviews
     * const reviews = await prisma.reviews.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reviewsWithIdOnly = await prisma.reviews.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends reviewsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, reviewsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<reviewsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Reviews.
     * @param {reviewsCreateArgs} args - Arguments to create a Reviews.
     * @example
     * // Create one Reviews
     * const Reviews = await prisma.reviews.create({
     *   data: {
     *     // ... data to create a Reviews
     *   }
     * })
     * 
    **/
    create<T extends reviewsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, reviewsCreateArgs<ExtArgs>>
    ): Prisma__reviewsClient<$Types.GetResult<reviewsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Reviews.
     *     @param {reviewsCreateManyArgs} args - Arguments to create many Reviews.
     *     @example
     *     // Create many Reviews
     *     const reviews = await prisma.reviews.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends reviewsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, reviewsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Reviews.
     * @param {reviewsDeleteArgs} args - Arguments to delete one Reviews.
     * @example
     * // Delete one Reviews
     * const Reviews = await prisma.reviews.delete({
     *   where: {
     *     // ... filter to delete one Reviews
     *   }
     * })
     * 
    **/
    delete<T extends reviewsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, reviewsDeleteArgs<ExtArgs>>
    ): Prisma__reviewsClient<$Types.GetResult<reviewsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Reviews.
     * @param {reviewsUpdateArgs} args - Arguments to update one Reviews.
     * @example
     * // Update one Reviews
     * const reviews = await prisma.reviews.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends reviewsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, reviewsUpdateArgs<ExtArgs>>
    ): Prisma__reviewsClient<$Types.GetResult<reviewsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Reviews.
     * @param {reviewsDeleteManyArgs} args - Arguments to filter Reviews to delete.
     * @example
     * // Delete a few Reviews
     * const { count } = await prisma.reviews.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends reviewsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, reviewsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reviewsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reviews
     * const reviews = await prisma.reviews.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends reviewsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, reviewsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Reviews.
     * @param {reviewsUpsertArgs} args - Arguments to update or create a Reviews.
     * @example
     * // Update or create a Reviews
     * const reviews = await prisma.reviews.upsert({
     *   create: {
     *     // ... data to create a Reviews
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Reviews we want to update
     *   }
     * })
    **/
    upsert<T extends reviewsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, reviewsUpsertArgs<ExtArgs>>
    ): Prisma__reviewsClient<$Types.GetResult<reviewsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Reviews that matches the filter.
     * @param {reviewsFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const reviews = await prisma.reviews.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: reviewsFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Reviews.
     * @param {reviewsAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const reviews = await prisma.reviews.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: reviewsAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reviewsCountArgs} args - Arguments to filter Reviews to count.
     * @example
     * // Count the number of Reviews
     * const count = await prisma.reviews.count({
     *   where: {
     *     // ... the filter for the Reviews we want to count
     *   }
     * })
    **/
    count<T extends reviewsCountArgs>(
      args?: Subset<T, reviewsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReviewsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReviewsAggregateArgs>(args: Subset<T, ReviewsAggregateArgs>): Prisma.PrismaPromise<GetReviewsAggregateType<T>>

    /**
     * Group by Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reviewsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends reviewsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: reviewsGroupByArgs['orderBy'] }
        : { orderBy?: reviewsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, reviewsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReviewsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the reviews model
   */
  readonly fields: reviewsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for reviews.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__reviewsClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends reviews$userArgs<ExtArgs> = {}>(args?: Subset<T, reviews$userArgs<ExtArgs>>): Prisma__usersClient<$Types.GetResult<usersPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    product<T extends reviews$productArgs<ExtArgs> = {}>(args?: Subset<T, reviews$productArgs<ExtArgs>>): Prisma__productsClient<$Types.GetResult<productsPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    notifications<T extends reviews$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, reviews$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<notificationsPayload<ExtArgs>, T, 'findMany'>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the reviews model
   */ 
  interface reviewsFieldRefs {
    readonly id: FieldRef<"reviews", 'String'>
    readonly message: FieldRef<"reviews", 'String'>
    readonly rate: FieldRef<"reviews", 'Int'>
    readonly replay: FieldRef<"reviews", 'String'>
    readonly userId: FieldRef<"reviews", 'String'>
    readonly productId: FieldRef<"reviews", 'String'>
  }
    

  // Custom InputTypes

  /**
   * reviews findUnique
   */
  export type reviewsFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reviews
     */
    select?: reviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: reviewsInclude<ExtArgs> | null
    /**
     * Filter, which reviews to fetch.
     */
    where: reviewsWhereUniqueInput
  }


  /**
   * reviews findUniqueOrThrow
   */
  export type reviewsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reviews
     */
    select?: reviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: reviewsInclude<ExtArgs> | null
    /**
     * Filter, which reviews to fetch.
     */
    where: reviewsWhereUniqueInput
  }


  /**
   * reviews findFirst
   */
  export type reviewsFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reviews
     */
    select?: reviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: reviewsInclude<ExtArgs> | null
    /**
     * Filter, which reviews to fetch.
     */
    where?: reviewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reviews to fetch.
     */
    orderBy?: reviewsOrderByWithRelationInput | reviewsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for reviews.
     */
    cursor?: reviewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of reviews.
     */
    distinct?: ReviewsScalarFieldEnum | ReviewsScalarFieldEnum[]
  }


  /**
   * reviews findFirstOrThrow
   */
  export type reviewsFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reviews
     */
    select?: reviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: reviewsInclude<ExtArgs> | null
    /**
     * Filter, which reviews to fetch.
     */
    where?: reviewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reviews to fetch.
     */
    orderBy?: reviewsOrderByWithRelationInput | reviewsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for reviews.
     */
    cursor?: reviewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of reviews.
     */
    distinct?: ReviewsScalarFieldEnum | ReviewsScalarFieldEnum[]
  }


  /**
   * reviews findMany
   */
  export type reviewsFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reviews
     */
    select?: reviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: reviewsInclude<ExtArgs> | null
    /**
     * Filter, which reviews to fetch.
     */
    where?: reviewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reviews to fetch.
     */
    orderBy?: reviewsOrderByWithRelationInput | reviewsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing reviews.
     */
    cursor?: reviewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reviews.
     */
    skip?: number
    distinct?: ReviewsScalarFieldEnum | ReviewsScalarFieldEnum[]
  }


  /**
   * reviews create
   */
  export type reviewsCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reviews
     */
    select?: reviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: reviewsInclude<ExtArgs> | null
    /**
     * The data needed to create a reviews.
     */
    data: XOR<reviewsCreateInput, reviewsUncheckedCreateInput>
  }


  /**
   * reviews createMany
   */
  export type reviewsCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many reviews.
     */
    data: reviewsCreateManyInput | reviewsCreateManyInput[]
  }


  /**
   * reviews update
   */
  export type reviewsUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reviews
     */
    select?: reviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: reviewsInclude<ExtArgs> | null
    /**
     * The data needed to update a reviews.
     */
    data: XOR<reviewsUpdateInput, reviewsUncheckedUpdateInput>
    /**
     * Choose, which reviews to update.
     */
    where: reviewsWhereUniqueInput
  }


  /**
   * reviews updateMany
   */
  export type reviewsUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update reviews.
     */
    data: XOR<reviewsUpdateManyMutationInput, reviewsUncheckedUpdateManyInput>
    /**
     * Filter which reviews to update
     */
    where?: reviewsWhereInput
  }


  /**
   * reviews upsert
   */
  export type reviewsUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reviews
     */
    select?: reviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: reviewsInclude<ExtArgs> | null
    /**
     * The filter to search for the reviews to update in case it exists.
     */
    where: reviewsWhereUniqueInput
    /**
     * In case the reviews found by the `where` argument doesn't exist, create a new reviews with this data.
     */
    create: XOR<reviewsCreateInput, reviewsUncheckedCreateInput>
    /**
     * In case the reviews was found with the provided `where` argument, update it with this data.
     */
    update: XOR<reviewsUpdateInput, reviewsUncheckedUpdateInput>
  }


  /**
   * reviews delete
   */
  export type reviewsDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reviews
     */
    select?: reviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: reviewsInclude<ExtArgs> | null
    /**
     * Filter which reviews to delete.
     */
    where: reviewsWhereUniqueInput
  }


  /**
   * reviews deleteMany
   */
  export type reviewsDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which reviews to delete
     */
    where?: reviewsWhereInput
  }


  /**
   * reviews findRaw
   */
  export type reviewsFindRawArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * reviews aggregateRaw
   */
  export type reviewsAggregateRawArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * reviews.user
   */
  export type reviews$userArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    where?: usersWhereInput
  }


  /**
   * reviews.product
   */
  export type reviews$productArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productsInclude<ExtArgs> | null
    where?: productsWhereInput
  }


  /**
   * reviews.notifications
   */
  export type reviews$notificationsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notifications
     */
    select?: notificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: notificationsInclude<ExtArgs> | null
    where?: notificationsWhereInput
    orderBy?: notificationsOrderByWithRelationInput | notificationsOrderByWithRelationInput[]
    cursor?: notificationsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationsScalarFieldEnum | NotificationsScalarFieldEnum[]
  }


  /**
   * reviews without action
   */
  export type reviewsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reviews
     */
    select?: reviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: reviewsInclude<ExtArgs> | null
  }



  /**
   * Model notifications
   */


  export type AggregateNotifications = {
    _count: NotificationsCountAggregateOutputType | null
    _min: NotificationsMinAggregateOutputType | null
    _max: NotificationsMaxAggregateOutputType | null
  }

  export type NotificationsMinAggregateOutputType = {
    id: string | null
    message: string | null
    title: string | null
    userId: string | null
    commentId: string | null
    reviewId: string | null
  }

  export type NotificationsMaxAggregateOutputType = {
    id: string | null
    message: string | null
    title: string | null
    userId: string | null
    commentId: string | null
    reviewId: string | null
  }

  export type NotificationsCountAggregateOutputType = {
    id: number
    message: number
    title: number
    userId: number
    commentId: number
    reviewId: number
    _all: number
  }


  export type NotificationsMinAggregateInputType = {
    id?: true
    message?: true
    title?: true
    userId?: true
    commentId?: true
    reviewId?: true
  }

  export type NotificationsMaxAggregateInputType = {
    id?: true
    message?: true
    title?: true
    userId?: true
    commentId?: true
    reviewId?: true
  }

  export type NotificationsCountAggregateInputType = {
    id?: true
    message?: true
    title?: true
    userId?: true
    commentId?: true
    reviewId?: true
    _all?: true
  }

  export type NotificationsAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which notifications to aggregate.
     */
    where?: notificationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of notifications to fetch.
     */
    orderBy?: notificationsOrderByWithRelationInput | notificationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: notificationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned notifications
    **/
    _count?: true | NotificationsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationsMaxAggregateInputType
  }

  export type GetNotificationsAggregateType<T extends NotificationsAggregateArgs> = {
        [P in keyof T & keyof AggregateNotifications]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotifications[P]>
      : GetScalarType<T[P], AggregateNotifications[P]>
  }




  export type notificationsGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: notificationsWhereInput
    orderBy?: notificationsOrderByWithAggregationInput | notificationsOrderByWithAggregationInput[]
    by: NotificationsScalarFieldEnum[] | NotificationsScalarFieldEnum
    having?: notificationsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationsCountAggregateInputType | true
    _min?: NotificationsMinAggregateInputType
    _max?: NotificationsMaxAggregateInputType
  }


  export type NotificationsGroupByOutputType = {
    id: string
    message: string
    title: string
    userId: string
    commentId: string
    reviewId: string
    _count: NotificationsCountAggregateOutputType | null
    _min: NotificationsMinAggregateOutputType | null
    _max: NotificationsMaxAggregateOutputType | null
  }

  type GetNotificationsGroupByPayload<T extends notificationsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationsGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationsGroupByOutputType[P]>
        }
      >
    >


  export type notificationsSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    message?: boolean
    title?: boolean
    userId?: boolean
    commentId?: boolean
    reviewId?: boolean
    user?: boolean | notifications$userArgs<ExtArgs>
    comments?: boolean | notifications$commentsArgs<ExtArgs>
    reviews?: boolean | notifications$reviewsArgs<ExtArgs>
  }, ExtArgs["result"]["notifications"]>

  export type notificationsSelectScalar = {
    id?: boolean
    message?: boolean
    title?: boolean
    userId?: boolean
    commentId?: boolean
    reviewId?: boolean
  }

  export type notificationsInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | notifications$userArgs<ExtArgs>
    comments?: boolean | notifications$commentsArgs<ExtArgs>
    reviews?: boolean | notifications$reviewsArgs<ExtArgs>
  }


  type notificationsGetPayload<S extends boolean | null | undefined | notificationsArgs> = $Types.GetResult<notificationsPayload, S>

  type notificationsCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<notificationsFindManyArgs, 'select' | 'include'> & {
      select?: NotificationsCountAggregateInputType | true
    }

  export interface notificationsDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['notifications'], meta: { name: 'notifications' } }
    /**
     * Find zero or one Notifications that matches the filter.
     * @param {notificationsFindUniqueArgs} args - Arguments to find a Notifications
     * @example
     * // Get one Notifications
     * const notifications = await prisma.notifications.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends notificationsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, notificationsFindUniqueArgs<ExtArgs>>
    ): Prisma__notificationsClient<$Types.GetResult<notificationsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Notifications that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {notificationsFindUniqueOrThrowArgs} args - Arguments to find a Notifications
     * @example
     * // Get one Notifications
     * const notifications = await prisma.notifications.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends notificationsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, notificationsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__notificationsClient<$Types.GetResult<notificationsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {notificationsFindFirstArgs} args - Arguments to find a Notifications
     * @example
     * // Get one Notifications
     * const notifications = await prisma.notifications.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends notificationsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, notificationsFindFirstArgs<ExtArgs>>
    ): Prisma__notificationsClient<$Types.GetResult<notificationsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Notifications that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {notificationsFindFirstOrThrowArgs} args - Arguments to find a Notifications
     * @example
     * // Get one Notifications
     * const notifications = await prisma.notifications.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends notificationsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, notificationsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__notificationsClient<$Types.GetResult<notificationsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {notificationsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notifications.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notifications.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationsWithIdOnly = await prisma.notifications.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends notificationsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, notificationsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<notificationsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Notifications.
     * @param {notificationsCreateArgs} args - Arguments to create a Notifications.
     * @example
     * // Create one Notifications
     * const Notifications = await prisma.notifications.create({
     *   data: {
     *     // ... data to create a Notifications
     *   }
     * })
     * 
    **/
    create<T extends notificationsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, notificationsCreateArgs<ExtArgs>>
    ): Prisma__notificationsClient<$Types.GetResult<notificationsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Notifications.
     *     @param {notificationsCreateManyArgs} args - Arguments to create many Notifications.
     *     @example
     *     // Create many Notifications
     *     const notifications = await prisma.notifications.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends notificationsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, notificationsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Notifications.
     * @param {notificationsDeleteArgs} args - Arguments to delete one Notifications.
     * @example
     * // Delete one Notifications
     * const Notifications = await prisma.notifications.delete({
     *   where: {
     *     // ... filter to delete one Notifications
     *   }
     * })
     * 
    **/
    delete<T extends notificationsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, notificationsDeleteArgs<ExtArgs>>
    ): Prisma__notificationsClient<$Types.GetResult<notificationsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Notifications.
     * @param {notificationsUpdateArgs} args - Arguments to update one Notifications.
     * @example
     * // Update one Notifications
     * const notifications = await prisma.notifications.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends notificationsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, notificationsUpdateArgs<ExtArgs>>
    ): Prisma__notificationsClient<$Types.GetResult<notificationsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Notifications.
     * @param {notificationsDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notifications.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends notificationsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, notificationsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {notificationsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notifications = await prisma.notifications.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends notificationsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, notificationsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Notifications.
     * @param {notificationsUpsertArgs} args - Arguments to update or create a Notifications.
     * @example
     * // Update or create a Notifications
     * const notifications = await prisma.notifications.upsert({
     *   create: {
     *     // ... data to create a Notifications
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notifications we want to update
     *   }
     * })
    **/
    upsert<T extends notificationsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, notificationsUpsertArgs<ExtArgs>>
    ): Prisma__notificationsClient<$Types.GetResult<notificationsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Notifications that matches the filter.
     * @param {notificationsFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const notifications = await prisma.notifications.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: notificationsFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Notifications.
     * @param {notificationsAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const notifications = await prisma.notifications.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: notificationsAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {notificationsCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notifications.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends notificationsCountArgs>(
      args?: Subset<T, notificationsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationsAggregateArgs>(args: Subset<T, NotificationsAggregateArgs>): Prisma.PrismaPromise<GetNotificationsAggregateType<T>>

    /**
     * Group by Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {notificationsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends notificationsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: notificationsGroupByArgs['orderBy'] }
        : { orderBy?: notificationsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, notificationsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the notifications model
   */
  readonly fields: notificationsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for notifications.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__notificationsClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends notifications$userArgs<ExtArgs> = {}>(args?: Subset<T, notifications$userArgs<ExtArgs>>): Prisma__usersClient<$Types.GetResult<usersPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    comments<T extends notifications$commentsArgs<ExtArgs> = {}>(args?: Subset<T, notifications$commentsArgs<ExtArgs>>): Prisma__commentsClient<$Types.GetResult<commentsPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    reviews<T extends notifications$reviewsArgs<ExtArgs> = {}>(args?: Subset<T, notifications$reviewsArgs<ExtArgs>>): Prisma__reviewsClient<$Types.GetResult<reviewsPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the notifications model
   */ 
  interface notificationsFieldRefs {
    readonly id: FieldRef<"notifications", 'String'>
    readonly message: FieldRef<"notifications", 'String'>
    readonly title: FieldRef<"notifications", 'String'>
    readonly userId: FieldRef<"notifications", 'String'>
    readonly commentId: FieldRef<"notifications", 'String'>
    readonly reviewId: FieldRef<"notifications", 'String'>
  }
    

  // Custom InputTypes

  /**
   * notifications findUnique
   */
  export type notificationsFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notifications
     */
    select?: notificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: notificationsInclude<ExtArgs> | null
    /**
     * Filter, which notifications to fetch.
     */
    where: notificationsWhereUniqueInput
  }


  /**
   * notifications findUniqueOrThrow
   */
  export type notificationsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notifications
     */
    select?: notificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: notificationsInclude<ExtArgs> | null
    /**
     * Filter, which notifications to fetch.
     */
    where: notificationsWhereUniqueInput
  }


  /**
   * notifications findFirst
   */
  export type notificationsFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notifications
     */
    select?: notificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: notificationsInclude<ExtArgs> | null
    /**
     * Filter, which notifications to fetch.
     */
    where?: notificationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of notifications to fetch.
     */
    orderBy?: notificationsOrderByWithRelationInput | notificationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for notifications.
     */
    cursor?: notificationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of notifications.
     */
    distinct?: NotificationsScalarFieldEnum | NotificationsScalarFieldEnum[]
  }


  /**
   * notifications findFirstOrThrow
   */
  export type notificationsFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notifications
     */
    select?: notificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: notificationsInclude<ExtArgs> | null
    /**
     * Filter, which notifications to fetch.
     */
    where?: notificationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of notifications to fetch.
     */
    orderBy?: notificationsOrderByWithRelationInput | notificationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for notifications.
     */
    cursor?: notificationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of notifications.
     */
    distinct?: NotificationsScalarFieldEnum | NotificationsScalarFieldEnum[]
  }


  /**
   * notifications findMany
   */
  export type notificationsFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notifications
     */
    select?: notificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: notificationsInclude<ExtArgs> | null
    /**
     * Filter, which notifications to fetch.
     */
    where?: notificationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of notifications to fetch.
     */
    orderBy?: notificationsOrderByWithRelationInput | notificationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing notifications.
     */
    cursor?: notificationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` notifications.
     */
    skip?: number
    distinct?: NotificationsScalarFieldEnum | NotificationsScalarFieldEnum[]
  }


  /**
   * notifications create
   */
  export type notificationsCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notifications
     */
    select?: notificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: notificationsInclude<ExtArgs> | null
    /**
     * The data needed to create a notifications.
     */
    data: XOR<notificationsCreateInput, notificationsUncheckedCreateInput>
  }


  /**
   * notifications createMany
   */
  export type notificationsCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many notifications.
     */
    data: notificationsCreateManyInput | notificationsCreateManyInput[]
  }


  /**
   * notifications update
   */
  export type notificationsUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notifications
     */
    select?: notificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: notificationsInclude<ExtArgs> | null
    /**
     * The data needed to update a notifications.
     */
    data: XOR<notificationsUpdateInput, notificationsUncheckedUpdateInput>
    /**
     * Choose, which notifications to update.
     */
    where: notificationsWhereUniqueInput
  }


  /**
   * notifications updateMany
   */
  export type notificationsUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update notifications.
     */
    data: XOR<notificationsUpdateManyMutationInput, notificationsUncheckedUpdateManyInput>
    /**
     * Filter which notifications to update
     */
    where?: notificationsWhereInput
  }


  /**
   * notifications upsert
   */
  export type notificationsUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notifications
     */
    select?: notificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: notificationsInclude<ExtArgs> | null
    /**
     * The filter to search for the notifications to update in case it exists.
     */
    where: notificationsWhereUniqueInput
    /**
     * In case the notifications found by the `where` argument doesn't exist, create a new notifications with this data.
     */
    create: XOR<notificationsCreateInput, notificationsUncheckedCreateInput>
    /**
     * In case the notifications was found with the provided `where` argument, update it with this data.
     */
    update: XOR<notificationsUpdateInput, notificationsUncheckedUpdateInput>
  }


  /**
   * notifications delete
   */
  export type notificationsDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notifications
     */
    select?: notificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: notificationsInclude<ExtArgs> | null
    /**
     * Filter which notifications to delete.
     */
    where: notificationsWhereUniqueInput
  }


  /**
   * notifications deleteMany
   */
  export type notificationsDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which notifications to delete
     */
    where?: notificationsWhereInput
  }


  /**
   * notifications findRaw
   */
  export type notificationsFindRawArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * notifications aggregateRaw
   */
  export type notificationsAggregateRawArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * notifications.user
   */
  export type notifications$userArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    where?: usersWhereInput
  }


  /**
   * notifications.comments
   */
  export type notifications$commentsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comments
     */
    select?: commentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: commentsInclude<ExtArgs> | null
    where?: commentsWhereInput
  }


  /**
   * notifications.reviews
   */
  export type notifications$reviewsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reviews
     */
    select?: reviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: reviewsInclude<ExtArgs> | null
    where?: reviewsWhereInput
  }


  /**
   * notifications without action
   */
  export type notificationsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notifications
     */
    select?: notificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: notificationsInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const UsersScalarFieldEnum: {
    id: 'id',
    email: 'email',
    name: 'name',
    image: 'image',
    phone: 'phone',
    birthday: 'birthday',
    gender: 'gender',
    role: 'role',
    uid: 'uid',
    address: 'address',
    createdAt: 'createdAt'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const CategoryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    icon: 'icon'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const SubCategoryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    categoryId: 'categoryId'
  };

  export type SubCategoryScalarFieldEnum = (typeof SubCategoryScalarFieldEnum)[keyof typeof SubCategoryScalarFieldEnum]


  export const OptionsScalarFieldEnum: {
    id: 'id',
    name: 'name',
    subCategoryId: 'subCategoryId'
  };

  export type OptionsScalarFieldEnum = (typeof OptionsScalarFieldEnum)[keyof typeof OptionsScalarFieldEnum]


  export const SellerScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    shopName: 'shopName',
    shopAddress: 'shopAddress'
  };

  export type SellerScalarFieldEnum = (typeof SellerScalarFieldEnum)[keyof typeof SellerScalarFieldEnum]


  export const BrandsScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    brandName: 'brandName',
    brandAddress: 'brandAddress',
    brandIcon: 'brandIcon'
  };

  export type BrandsScalarFieldEnum = (typeof BrandsScalarFieldEnum)[keyof typeof BrandsScalarFieldEnum]


  export const ProductsScalarFieldEnum: {
    id: 'id',
    price: 'price',
    title: 'title',
    description: 'description',
    thumbnail: 'thumbnail',
    verified: 'verified',
    sellerId: 'sellerId',
    brandId: 'brandId',
    categoryId: 'categoryId',
    subCategoryId: 'subCategoryId',
    optionId: 'optionId',
    userId: 'userId'
  };

  export type ProductsScalarFieldEnum = (typeof ProductsScalarFieldEnum)[keyof typeof ProductsScalarFieldEnum]


  export const OffersScalarFieldEnum: {
    id: 'id',
    money: 'money',
    percentage: 'percentage',
    name: 'name',
    productId: 'productId'
  };

  export type OffersScalarFieldEnum = (typeof OffersScalarFieldEnum)[keyof typeof OffersScalarFieldEnum]


  export const CoinsScalarFieldEnum: {
    id: 'id',
    number: 'number',
    name: 'name',
    productId: 'productId'
  };

  export type CoinsScalarFieldEnum = (typeof CoinsScalarFieldEnum)[keyof typeof CoinsScalarFieldEnum]


  export const VariantsScalarFieldEnum: {
    id: 'id',
    size: 'size',
    color: 'color',
    image: 'image',
    productId: 'productId'
  };

  export type VariantsScalarFieldEnum = (typeof VariantsScalarFieldEnum)[keyof typeof VariantsScalarFieldEnum]


  export const CommentsScalarFieldEnum: {
    id: 'id',
    message: 'message',
    replay: 'replay',
    userId: 'userId',
    productId: 'productId'
  };

  export type CommentsScalarFieldEnum = (typeof CommentsScalarFieldEnum)[keyof typeof CommentsScalarFieldEnum]


  export const ReviewsScalarFieldEnum: {
    id: 'id',
    message: 'message',
    rate: 'rate',
    replay: 'replay',
    userId: 'userId',
    productId: 'productId'
  };

  export type ReviewsScalarFieldEnum = (typeof ReviewsScalarFieldEnum)[keyof typeof ReviewsScalarFieldEnum]


  export const NotificationsScalarFieldEnum: {
    id: 'id',
    message: 'message',
    title: 'title',
    userId: 'userId',
    commentId: 'commentId',
    reviewId: 'reviewId'
  };

  export type NotificationsScalarFieldEnum = (typeof NotificationsScalarFieldEnum)[keyof typeof NotificationsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type usersWhereInput = {
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    id?: StringFilter<"users"> | string
    email?: StringNullableFilter<"users"> | string | null
    name?: StringFilter<"users"> | string
    image?: StringNullableFilter<"users"> | string | null
    phone?: StringNullableFilter<"users"> | string | null
    birthday?: StringNullableFilter<"users"> | string | null
    gender?: StringNullableFilter<"users"> | string | null
    role?: IntFilter<"users"> | number
    uid?: StringFilter<"users"> | string
    address?: JsonNullableFilter<"users">
    createdAt?: DateTimeFilter<"users"> | Date | string
    seller?: SellerListRelationFilter
    brand?: BrandsListRelationFilter
    products?: ProductsListRelationFilter
    comments?: CommentsListRelationFilter
    reviews?: ReviewsListRelationFilter
    notifications?: NotificationsListRelationFilter
  }

  export type usersOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    image?: SortOrder
    phone?: SortOrder
    birthday?: SortOrder
    gender?: SortOrder
    role?: SortOrder
    uid?: SortOrder
    address?: SortOrder
    createdAt?: SortOrder
    seller?: sellerOrderByRelationAggregateInput
    brand?: brandsOrderByRelationAggregateInput
    products?: productsOrderByRelationAggregateInput
    comments?: commentsOrderByRelationAggregateInput
    reviews?: reviewsOrderByRelationAggregateInput
    notifications?: notificationsOrderByRelationAggregateInput
  }

  export type usersWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    phone?: string
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    name?: StringFilter<"users"> | string
    image?: StringNullableFilter<"users"> | string | null
    birthday?: StringNullableFilter<"users"> | string | null
    gender?: StringNullableFilter<"users"> | string | null
    role?: IntFilter<"users"> | number
    uid?: StringFilter<"users"> | string
    address?: JsonNullableFilter<"users">
    createdAt?: DateTimeFilter<"users"> | Date | string
    seller?: SellerListRelationFilter
    brand?: BrandsListRelationFilter
    products?: ProductsListRelationFilter
    comments?: CommentsListRelationFilter
    reviews?: ReviewsListRelationFilter
    notifications?: NotificationsListRelationFilter
  }, "id" | "email" | "phone">

  export type usersOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    image?: SortOrder
    phone?: SortOrder
    birthday?: SortOrder
    gender?: SortOrder
    role?: SortOrder
    uid?: SortOrder
    address?: SortOrder
    createdAt?: SortOrder
    _count?: usersCountOrderByAggregateInput
    _avg?: usersAvgOrderByAggregateInput
    _max?: usersMaxOrderByAggregateInput
    _min?: usersMinOrderByAggregateInput
    _sum?: usersSumOrderByAggregateInput
  }

  export type usersScalarWhereWithAggregatesInput = {
    AND?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    OR?: usersScalarWhereWithAggregatesInput[]
    NOT?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"users"> | string
    email?: StringNullableWithAggregatesFilter<"users"> | string | null
    name?: StringWithAggregatesFilter<"users"> | string
    image?: StringNullableWithAggregatesFilter<"users"> | string | null
    phone?: StringNullableWithAggregatesFilter<"users"> | string | null
    birthday?: StringNullableWithAggregatesFilter<"users"> | string | null
    gender?: StringNullableWithAggregatesFilter<"users"> | string | null
    role?: IntWithAggregatesFilter<"users"> | number
    uid?: StringWithAggregatesFilter<"users"> | string
    address?: JsonNullableWithAggregatesFilter<"users">
    createdAt?: DateTimeWithAggregatesFilter<"users"> | Date | string
  }

  export type categoryWhereInput = {
    AND?: categoryWhereInput | categoryWhereInput[]
    OR?: categoryWhereInput[]
    NOT?: categoryWhereInput | categoryWhereInput[]
    id?: StringFilter<"category"> | string
    name?: StringFilter<"category"> | string
    icon?: StringFilter<"category"> | string
    subCategory?: SubCategoryListRelationFilter
    products?: ProductsListRelationFilter
  }

  export type categoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    icon?: SortOrder
    subCategory?: subCategoryOrderByRelationAggregateInput
    products?: productsOrderByRelationAggregateInput
  }

  export type categoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: categoryWhereInput | categoryWhereInput[]
    OR?: categoryWhereInput[]
    NOT?: categoryWhereInput | categoryWhereInput[]
    icon?: StringFilter<"category"> | string
    subCategory?: SubCategoryListRelationFilter
    products?: ProductsListRelationFilter
  }, "id" | "name">

  export type categoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    icon?: SortOrder
    _count?: categoryCountOrderByAggregateInput
    _max?: categoryMaxOrderByAggregateInput
    _min?: categoryMinOrderByAggregateInput
  }

  export type categoryScalarWhereWithAggregatesInput = {
    AND?: categoryScalarWhereWithAggregatesInput | categoryScalarWhereWithAggregatesInput[]
    OR?: categoryScalarWhereWithAggregatesInput[]
    NOT?: categoryScalarWhereWithAggregatesInput | categoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"category"> | string
    name?: StringWithAggregatesFilter<"category"> | string
    icon?: StringWithAggregatesFilter<"category"> | string
  }

  export type subCategoryWhereInput = {
    AND?: subCategoryWhereInput | subCategoryWhereInput[]
    OR?: subCategoryWhereInput[]
    NOT?: subCategoryWhereInput | subCategoryWhereInput[]
    id?: StringFilter<"subCategory"> | string
    name?: StringFilter<"subCategory"> | string
    categoryId?: StringFilter<"subCategory"> | string
    category?: XOR<CategoryNullableRelationFilter, categoryWhereInput> | null
    options?: OptionsListRelationFilter
    products?: ProductsListRelationFilter
  }

  export type subCategoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    categoryId?: SortOrder
    category?: categoryOrderByWithRelationInput
    options?: optionsOrderByRelationAggregateInput
    products?: productsOrderByRelationAggregateInput
  }

  export type subCategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: subCategoryWhereInput | subCategoryWhereInput[]
    OR?: subCategoryWhereInput[]
    NOT?: subCategoryWhereInput | subCategoryWhereInput[]
    categoryId?: StringFilter<"subCategory"> | string
    category?: XOR<CategoryNullableRelationFilter, categoryWhereInput> | null
    options?: OptionsListRelationFilter
    products?: ProductsListRelationFilter
  }, "id" | "name">

  export type subCategoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    categoryId?: SortOrder
    _count?: subCategoryCountOrderByAggregateInput
    _max?: subCategoryMaxOrderByAggregateInput
    _min?: subCategoryMinOrderByAggregateInput
  }

  export type subCategoryScalarWhereWithAggregatesInput = {
    AND?: subCategoryScalarWhereWithAggregatesInput | subCategoryScalarWhereWithAggregatesInput[]
    OR?: subCategoryScalarWhereWithAggregatesInput[]
    NOT?: subCategoryScalarWhereWithAggregatesInput | subCategoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"subCategory"> | string
    name?: StringWithAggregatesFilter<"subCategory"> | string
    categoryId?: StringWithAggregatesFilter<"subCategory"> | string
  }

  export type optionsWhereInput = {
    AND?: optionsWhereInput | optionsWhereInput[]
    OR?: optionsWhereInput[]
    NOT?: optionsWhereInput | optionsWhereInput[]
    id?: StringFilter<"options"> | string
    name?: StringFilter<"options"> | string
    subCategoryId?: StringFilter<"options"> | string
    subCategory?: XOR<SubCategoryNullableRelationFilter, subCategoryWhereInput> | null
    products?: ProductsListRelationFilter
  }

  export type optionsOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    subCategoryId?: SortOrder
    subCategory?: subCategoryOrderByWithRelationInput
    products?: productsOrderByRelationAggregateInput
  }

  export type optionsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: optionsWhereInput | optionsWhereInput[]
    OR?: optionsWhereInput[]
    NOT?: optionsWhereInput | optionsWhereInput[]
    name?: StringFilter<"options"> | string
    subCategoryId?: StringFilter<"options"> | string
    subCategory?: XOR<SubCategoryNullableRelationFilter, subCategoryWhereInput> | null
    products?: ProductsListRelationFilter
  }, "id">

  export type optionsOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    subCategoryId?: SortOrder
    _count?: optionsCountOrderByAggregateInput
    _max?: optionsMaxOrderByAggregateInput
    _min?: optionsMinOrderByAggregateInput
  }

  export type optionsScalarWhereWithAggregatesInput = {
    AND?: optionsScalarWhereWithAggregatesInput | optionsScalarWhereWithAggregatesInput[]
    OR?: optionsScalarWhereWithAggregatesInput[]
    NOT?: optionsScalarWhereWithAggregatesInput | optionsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"options"> | string
    name?: StringWithAggregatesFilter<"options"> | string
    subCategoryId?: StringWithAggregatesFilter<"options"> | string
  }

  export type sellerWhereInput = {
    AND?: sellerWhereInput | sellerWhereInput[]
    OR?: sellerWhereInput[]
    NOT?: sellerWhereInput | sellerWhereInput[]
    id?: StringFilter<"seller"> | string
    userId?: StringFilter<"seller"> | string
    shopName?: StringFilter<"seller"> | string
    shopAddress?: StringFilter<"seller"> | string
    user?: XOR<UsersNullableRelationFilter, usersWhereInput> | null
    products?: ProductsListRelationFilter
  }

  export type sellerOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    shopName?: SortOrder
    shopAddress?: SortOrder
    user?: usersOrderByWithRelationInput
    products?: productsOrderByRelationAggregateInput
  }

  export type sellerWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: sellerWhereInput | sellerWhereInput[]
    OR?: sellerWhereInput[]
    NOT?: sellerWhereInput | sellerWhereInput[]
    shopName?: StringFilter<"seller"> | string
    shopAddress?: StringFilter<"seller"> | string
    user?: XOR<UsersNullableRelationFilter, usersWhereInput> | null
    products?: ProductsListRelationFilter
  }, "id" | "userId">

  export type sellerOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    shopName?: SortOrder
    shopAddress?: SortOrder
    _count?: sellerCountOrderByAggregateInput
    _max?: sellerMaxOrderByAggregateInput
    _min?: sellerMinOrderByAggregateInput
  }

  export type sellerScalarWhereWithAggregatesInput = {
    AND?: sellerScalarWhereWithAggregatesInput | sellerScalarWhereWithAggregatesInput[]
    OR?: sellerScalarWhereWithAggregatesInput[]
    NOT?: sellerScalarWhereWithAggregatesInput | sellerScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"seller"> | string
    userId?: StringWithAggregatesFilter<"seller"> | string
    shopName?: StringWithAggregatesFilter<"seller"> | string
    shopAddress?: StringWithAggregatesFilter<"seller"> | string
  }

  export type brandsWhereInput = {
    AND?: brandsWhereInput | brandsWhereInput[]
    OR?: brandsWhereInput[]
    NOT?: brandsWhereInput | brandsWhereInput[]
    id?: StringFilter<"brands"> | string
    userId?: StringFilter<"brands"> | string
    brandName?: StringFilter<"brands"> | string
    brandAddress?: StringFilter<"brands"> | string
    brandIcon?: StringFilter<"brands"> | string
    user?: XOR<UsersNullableRelationFilter, usersWhereInput> | null
    products?: ProductsListRelationFilter
  }

  export type brandsOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    brandName?: SortOrder
    brandAddress?: SortOrder
    brandIcon?: SortOrder
    user?: usersOrderByWithRelationInput
    products?: productsOrderByRelationAggregateInput
  }

  export type brandsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: brandsWhereInput | brandsWhereInput[]
    OR?: brandsWhereInput[]
    NOT?: brandsWhereInput | brandsWhereInput[]
    brandName?: StringFilter<"brands"> | string
    brandAddress?: StringFilter<"brands"> | string
    brandIcon?: StringFilter<"brands"> | string
    user?: XOR<UsersNullableRelationFilter, usersWhereInput> | null
    products?: ProductsListRelationFilter
  }, "id" | "userId">

  export type brandsOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    brandName?: SortOrder
    brandAddress?: SortOrder
    brandIcon?: SortOrder
    _count?: brandsCountOrderByAggregateInput
    _max?: brandsMaxOrderByAggregateInput
    _min?: brandsMinOrderByAggregateInput
  }

  export type brandsScalarWhereWithAggregatesInput = {
    AND?: brandsScalarWhereWithAggregatesInput | brandsScalarWhereWithAggregatesInput[]
    OR?: brandsScalarWhereWithAggregatesInput[]
    NOT?: brandsScalarWhereWithAggregatesInput | brandsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"brands"> | string
    userId?: StringWithAggregatesFilter<"brands"> | string
    brandName?: StringWithAggregatesFilter<"brands"> | string
    brandAddress?: StringWithAggregatesFilter<"brands"> | string
    brandIcon?: StringWithAggregatesFilter<"brands"> | string
  }

  export type productsWhereInput = {
    AND?: productsWhereInput | productsWhereInput[]
    OR?: productsWhereInput[]
    NOT?: productsWhereInput | productsWhereInput[]
    id?: StringFilter<"products"> | string
    price?: IntFilter<"products"> | number
    title?: StringFilter<"products"> | string
    description?: StringFilter<"products"> | string
    thumbnail?: StringFilter<"products"> | string
    verified?: BoolFilter<"products"> | boolean
    sellerId?: StringNullableFilter<"products"> | string | null
    brandId?: StringNullableFilter<"products"> | string | null
    categoryId?: StringFilter<"products"> | string
    subCategoryId?: StringFilter<"products"> | string
    optionId?: StringFilter<"products"> | string
    userId?: StringFilter<"products"> | string
    offers?: OffersListRelationFilter
    coins?: CoinsListRelationFilter
    variants?: VariantsListRelationFilter
    comments?: CommentsListRelationFilter
    reviews?: ReviewsListRelationFilter
    seller?: XOR<SellerNullableRelationFilter, sellerWhereInput> | null
    brand?: XOR<BrandsNullableRelationFilter, brandsWhereInput> | null
    category?: XOR<CategoryNullableRelationFilter, categoryWhereInput> | null
    subCategory?: XOR<SubCategoryNullableRelationFilter, subCategoryWhereInput> | null
    option?: XOR<OptionsNullableRelationFilter, optionsWhereInput> | null
    user?: XOR<UsersNullableRelationFilter, usersWhereInput> | null
  }

  export type productsOrderByWithRelationInput = {
    id?: SortOrder
    price?: SortOrder
    title?: SortOrder
    description?: SortOrder
    thumbnail?: SortOrder
    verified?: SortOrder
    sellerId?: SortOrder
    brandId?: SortOrder
    categoryId?: SortOrder
    subCategoryId?: SortOrder
    optionId?: SortOrder
    userId?: SortOrder
    offers?: offersOrderByRelationAggregateInput
    coins?: coinsOrderByRelationAggregateInput
    variants?: variantsOrderByRelationAggregateInput
    comments?: commentsOrderByRelationAggregateInput
    reviews?: reviewsOrderByRelationAggregateInput
    seller?: sellerOrderByWithRelationInput
    brand?: brandsOrderByWithRelationInput
    category?: categoryOrderByWithRelationInput
    subCategory?: subCategoryOrderByWithRelationInput
    option?: optionsOrderByWithRelationInput
    user?: usersOrderByWithRelationInput
  }

  export type productsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: productsWhereInput | productsWhereInput[]
    OR?: productsWhereInput[]
    NOT?: productsWhereInput | productsWhereInput[]
    price?: IntFilter<"products"> | number
    title?: StringFilter<"products"> | string
    description?: StringFilter<"products"> | string
    thumbnail?: StringFilter<"products"> | string
    verified?: BoolFilter<"products"> | boolean
    sellerId?: StringNullableFilter<"products"> | string | null
    brandId?: StringNullableFilter<"products"> | string | null
    categoryId?: StringFilter<"products"> | string
    subCategoryId?: StringFilter<"products"> | string
    optionId?: StringFilter<"products"> | string
    userId?: StringFilter<"products"> | string
    offers?: OffersListRelationFilter
    coins?: CoinsListRelationFilter
    variants?: VariantsListRelationFilter
    comments?: CommentsListRelationFilter
    reviews?: ReviewsListRelationFilter
    seller?: XOR<SellerNullableRelationFilter, sellerWhereInput> | null
    brand?: XOR<BrandsNullableRelationFilter, brandsWhereInput> | null
    category?: XOR<CategoryNullableRelationFilter, categoryWhereInput> | null
    subCategory?: XOR<SubCategoryNullableRelationFilter, subCategoryWhereInput> | null
    option?: XOR<OptionsNullableRelationFilter, optionsWhereInput> | null
    user?: XOR<UsersNullableRelationFilter, usersWhereInput> | null
  }, "id">

  export type productsOrderByWithAggregationInput = {
    id?: SortOrder
    price?: SortOrder
    title?: SortOrder
    description?: SortOrder
    thumbnail?: SortOrder
    verified?: SortOrder
    sellerId?: SortOrder
    brandId?: SortOrder
    categoryId?: SortOrder
    subCategoryId?: SortOrder
    optionId?: SortOrder
    userId?: SortOrder
    _count?: productsCountOrderByAggregateInput
    _avg?: productsAvgOrderByAggregateInput
    _max?: productsMaxOrderByAggregateInput
    _min?: productsMinOrderByAggregateInput
    _sum?: productsSumOrderByAggregateInput
  }

  export type productsScalarWhereWithAggregatesInput = {
    AND?: productsScalarWhereWithAggregatesInput | productsScalarWhereWithAggregatesInput[]
    OR?: productsScalarWhereWithAggregatesInput[]
    NOT?: productsScalarWhereWithAggregatesInput | productsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"products"> | string
    price?: IntWithAggregatesFilter<"products"> | number
    title?: StringWithAggregatesFilter<"products"> | string
    description?: StringWithAggregatesFilter<"products"> | string
    thumbnail?: StringWithAggregatesFilter<"products"> | string
    verified?: BoolWithAggregatesFilter<"products"> | boolean
    sellerId?: StringNullableWithAggregatesFilter<"products"> | string | null
    brandId?: StringNullableWithAggregatesFilter<"products"> | string | null
    categoryId?: StringWithAggregatesFilter<"products"> | string
    subCategoryId?: StringWithAggregatesFilter<"products"> | string
    optionId?: StringWithAggregatesFilter<"products"> | string
    userId?: StringWithAggregatesFilter<"products"> | string
  }

  export type offersWhereInput = {
    AND?: offersWhereInput | offersWhereInput[]
    OR?: offersWhereInput[]
    NOT?: offersWhereInput | offersWhereInput[]
    id?: StringFilter<"offers"> | string
    money?: IntFilter<"offers"> | number
    percentage?: IntFilter<"offers"> | number
    name?: StringNullableFilter<"offers"> | string | null
    productId?: StringFilter<"offers"> | string
    product?: XOR<ProductsNullableRelationFilter, productsWhereInput> | null
  }

  export type offersOrderByWithRelationInput = {
    id?: SortOrder
    money?: SortOrder
    percentage?: SortOrder
    name?: SortOrder
    productId?: SortOrder
    product?: productsOrderByWithRelationInput
  }

  export type offersWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: offersWhereInput | offersWhereInput[]
    OR?: offersWhereInput[]
    NOT?: offersWhereInput | offersWhereInput[]
    money?: IntFilter<"offers"> | number
    percentage?: IntFilter<"offers"> | number
    name?: StringNullableFilter<"offers"> | string | null
    productId?: StringFilter<"offers"> | string
    product?: XOR<ProductsNullableRelationFilter, productsWhereInput> | null
  }, "id">

  export type offersOrderByWithAggregationInput = {
    id?: SortOrder
    money?: SortOrder
    percentage?: SortOrder
    name?: SortOrder
    productId?: SortOrder
    _count?: offersCountOrderByAggregateInput
    _avg?: offersAvgOrderByAggregateInput
    _max?: offersMaxOrderByAggregateInput
    _min?: offersMinOrderByAggregateInput
    _sum?: offersSumOrderByAggregateInput
  }

  export type offersScalarWhereWithAggregatesInput = {
    AND?: offersScalarWhereWithAggregatesInput | offersScalarWhereWithAggregatesInput[]
    OR?: offersScalarWhereWithAggregatesInput[]
    NOT?: offersScalarWhereWithAggregatesInput | offersScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"offers"> | string
    money?: IntWithAggregatesFilter<"offers"> | number
    percentage?: IntWithAggregatesFilter<"offers"> | number
    name?: StringNullableWithAggregatesFilter<"offers"> | string | null
    productId?: StringWithAggregatesFilter<"offers"> | string
  }

  export type coinsWhereInput = {
    AND?: coinsWhereInput | coinsWhereInput[]
    OR?: coinsWhereInput[]
    NOT?: coinsWhereInput | coinsWhereInput[]
    id?: StringFilter<"coins"> | string
    number?: IntFilter<"coins"> | number
    name?: StringNullableFilter<"coins"> | string | null
    productId?: StringFilter<"coins"> | string
    product?: XOR<ProductsNullableRelationFilter, productsWhereInput> | null
  }

  export type coinsOrderByWithRelationInput = {
    id?: SortOrder
    number?: SortOrder
    name?: SortOrder
    productId?: SortOrder
    product?: productsOrderByWithRelationInput
  }

  export type coinsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: coinsWhereInput | coinsWhereInput[]
    OR?: coinsWhereInput[]
    NOT?: coinsWhereInput | coinsWhereInput[]
    number?: IntFilter<"coins"> | number
    name?: StringNullableFilter<"coins"> | string | null
    productId?: StringFilter<"coins"> | string
    product?: XOR<ProductsNullableRelationFilter, productsWhereInput> | null
  }, "id">

  export type coinsOrderByWithAggregationInput = {
    id?: SortOrder
    number?: SortOrder
    name?: SortOrder
    productId?: SortOrder
    _count?: coinsCountOrderByAggregateInput
    _avg?: coinsAvgOrderByAggregateInput
    _max?: coinsMaxOrderByAggregateInput
    _min?: coinsMinOrderByAggregateInput
    _sum?: coinsSumOrderByAggregateInput
  }

  export type coinsScalarWhereWithAggregatesInput = {
    AND?: coinsScalarWhereWithAggregatesInput | coinsScalarWhereWithAggregatesInput[]
    OR?: coinsScalarWhereWithAggregatesInput[]
    NOT?: coinsScalarWhereWithAggregatesInput | coinsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"coins"> | string
    number?: IntWithAggregatesFilter<"coins"> | number
    name?: StringNullableWithAggregatesFilter<"coins"> | string | null
    productId?: StringWithAggregatesFilter<"coins"> | string
  }

  export type variantsWhereInput = {
    AND?: variantsWhereInput | variantsWhereInput[]
    OR?: variantsWhereInput[]
    NOT?: variantsWhereInput | variantsWhereInput[]
    id?: StringFilter<"variants"> | string
    size?: StringFilter<"variants"> | string
    color?: StringFilter<"variants"> | string
    image?: StringFilter<"variants"> | string
    productId?: StringFilter<"variants"> | string
    product?: XOR<ProductsNullableRelationFilter, productsWhereInput> | null
  }

  export type variantsOrderByWithRelationInput = {
    id?: SortOrder
    size?: SortOrder
    color?: SortOrder
    image?: SortOrder
    productId?: SortOrder
    product?: productsOrderByWithRelationInput
  }

  export type variantsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: variantsWhereInput | variantsWhereInput[]
    OR?: variantsWhereInput[]
    NOT?: variantsWhereInput | variantsWhereInput[]
    size?: StringFilter<"variants"> | string
    color?: StringFilter<"variants"> | string
    image?: StringFilter<"variants"> | string
    productId?: StringFilter<"variants"> | string
    product?: XOR<ProductsNullableRelationFilter, productsWhereInput> | null
  }, "id">

  export type variantsOrderByWithAggregationInput = {
    id?: SortOrder
    size?: SortOrder
    color?: SortOrder
    image?: SortOrder
    productId?: SortOrder
    _count?: variantsCountOrderByAggregateInput
    _max?: variantsMaxOrderByAggregateInput
    _min?: variantsMinOrderByAggregateInput
  }

  export type variantsScalarWhereWithAggregatesInput = {
    AND?: variantsScalarWhereWithAggregatesInput | variantsScalarWhereWithAggregatesInput[]
    OR?: variantsScalarWhereWithAggregatesInput[]
    NOT?: variantsScalarWhereWithAggregatesInput | variantsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"variants"> | string
    size?: StringWithAggregatesFilter<"variants"> | string
    color?: StringWithAggregatesFilter<"variants"> | string
    image?: StringWithAggregatesFilter<"variants"> | string
    productId?: StringWithAggregatesFilter<"variants"> | string
  }

  export type commentsWhereInput = {
    AND?: commentsWhereInput | commentsWhereInput[]
    OR?: commentsWhereInput[]
    NOT?: commentsWhereInput | commentsWhereInput[]
    id?: StringFilter<"comments"> | string
    message?: StringFilter<"comments"> | string
    replay?: StringFilter<"comments"> | string
    userId?: StringFilter<"comments"> | string
    productId?: StringFilter<"comments"> | string
    user?: XOR<UsersNullableRelationFilter, usersWhereInput> | null
    product?: XOR<ProductsNullableRelationFilter, productsWhereInput> | null
    notifications?: NotificationsListRelationFilter
  }

  export type commentsOrderByWithRelationInput = {
    id?: SortOrder
    message?: SortOrder
    replay?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    user?: usersOrderByWithRelationInput
    product?: productsOrderByWithRelationInput
    notifications?: notificationsOrderByRelationAggregateInput
  }

  export type commentsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: commentsWhereInput | commentsWhereInput[]
    OR?: commentsWhereInput[]
    NOT?: commentsWhereInput | commentsWhereInput[]
    message?: StringFilter<"comments"> | string
    replay?: StringFilter<"comments"> | string
    userId?: StringFilter<"comments"> | string
    productId?: StringFilter<"comments"> | string
    user?: XOR<UsersNullableRelationFilter, usersWhereInput> | null
    product?: XOR<ProductsNullableRelationFilter, productsWhereInput> | null
    notifications?: NotificationsListRelationFilter
  }, "id">

  export type commentsOrderByWithAggregationInput = {
    id?: SortOrder
    message?: SortOrder
    replay?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    _count?: commentsCountOrderByAggregateInput
    _max?: commentsMaxOrderByAggregateInput
    _min?: commentsMinOrderByAggregateInput
  }

  export type commentsScalarWhereWithAggregatesInput = {
    AND?: commentsScalarWhereWithAggregatesInput | commentsScalarWhereWithAggregatesInput[]
    OR?: commentsScalarWhereWithAggregatesInput[]
    NOT?: commentsScalarWhereWithAggregatesInput | commentsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"comments"> | string
    message?: StringWithAggregatesFilter<"comments"> | string
    replay?: StringWithAggregatesFilter<"comments"> | string
    userId?: StringWithAggregatesFilter<"comments"> | string
    productId?: StringWithAggregatesFilter<"comments"> | string
  }

  export type reviewsWhereInput = {
    AND?: reviewsWhereInput | reviewsWhereInput[]
    OR?: reviewsWhereInput[]
    NOT?: reviewsWhereInput | reviewsWhereInput[]
    id?: StringFilter<"reviews"> | string
    message?: StringFilter<"reviews"> | string
    rate?: IntFilter<"reviews"> | number
    replay?: StringFilter<"reviews"> | string
    userId?: StringFilter<"reviews"> | string
    productId?: StringFilter<"reviews"> | string
    user?: XOR<UsersNullableRelationFilter, usersWhereInput> | null
    product?: XOR<ProductsNullableRelationFilter, productsWhereInput> | null
    notifications?: NotificationsListRelationFilter
  }

  export type reviewsOrderByWithRelationInput = {
    id?: SortOrder
    message?: SortOrder
    rate?: SortOrder
    replay?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    user?: usersOrderByWithRelationInput
    product?: productsOrderByWithRelationInput
    notifications?: notificationsOrderByRelationAggregateInput
  }

  export type reviewsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: reviewsWhereInput | reviewsWhereInput[]
    OR?: reviewsWhereInput[]
    NOT?: reviewsWhereInput | reviewsWhereInput[]
    message?: StringFilter<"reviews"> | string
    rate?: IntFilter<"reviews"> | number
    replay?: StringFilter<"reviews"> | string
    userId?: StringFilter<"reviews"> | string
    productId?: StringFilter<"reviews"> | string
    user?: XOR<UsersNullableRelationFilter, usersWhereInput> | null
    product?: XOR<ProductsNullableRelationFilter, productsWhereInput> | null
    notifications?: NotificationsListRelationFilter
  }, "id">

  export type reviewsOrderByWithAggregationInput = {
    id?: SortOrder
    message?: SortOrder
    rate?: SortOrder
    replay?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    _count?: reviewsCountOrderByAggregateInput
    _avg?: reviewsAvgOrderByAggregateInput
    _max?: reviewsMaxOrderByAggregateInput
    _min?: reviewsMinOrderByAggregateInput
    _sum?: reviewsSumOrderByAggregateInput
  }

  export type reviewsScalarWhereWithAggregatesInput = {
    AND?: reviewsScalarWhereWithAggregatesInput | reviewsScalarWhereWithAggregatesInput[]
    OR?: reviewsScalarWhereWithAggregatesInput[]
    NOT?: reviewsScalarWhereWithAggregatesInput | reviewsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"reviews"> | string
    message?: StringWithAggregatesFilter<"reviews"> | string
    rate?: IntWithAggregatesFilter<"reviews"> | number
    replay?: StringWithAggregatesFilter<"reviews"> | string
    userId?: StringWithAggregatesFilter<"reviews"> | string
    productId?: StringWithAggregatesFilter<"reviews"> | string
  }

  export type notificationsWhereInput = {
    AND?: notificationsWhereInput | notificationsWhereInput[]
    OR?: notificationsWhereInput[]
    NOT?: notificationsWhereInput | notificationsWhereInput[]
    id?: StringFilter<"notifications"> | string
    message?: StringFilter<"notifications"> | string
    title?: StringFilter<"notifications"> | string
    userId?: StringFilter<"notifications"> | string
    commentId?: StringFilter<"notifications"> | string
    reviewId?: StringFilter<"notifications"> | string
    user?: XOR<UsersNullableRelationFilter, usersWhereInput> | null
    comments?: XOR<CommentsNullableRelationFilter, commentsWhereInput> | null
    reviews?: XOR<ReviewsNullableRelationFilter, reviewsWhereInput> | null
  }

  export type notificationsOrderByWithRelationInput = {
    id?: SortOrder
    message?: SortOrder
    title?: SortOrder
    userId?: SortOrder
    commentId?: SortOrder
    reviewId?: SortOrder
    user?: usersOrderByWithRelationInput
    comments?: commentsOrderByWithRelationInput
    reviews?: reviewsOrderByWithRelationInput
  }

  export type notificationsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: notificationsWhereInput | notificationsWhereInput[]
    OR?: notificationsWhereInput[]
    NOT?: notificationsWhereInput | notificationsWhereInput[]
    message?: StringFilter<"notifications"> | string
    title?: StringFilter<"notifications"> | string
    userId?: StringFilter<"notifications"> | string
    commentId?: StringFilter<"notifications"> | string
    reviewId?: StringFilter<"notifications"> | string
    user?: XOR<UsersNullableRelationFilter, usersWhereInput> | null
    comments?: XOR<CommentsNullableRelationFilter, commentsWhereInput> | null
    reviews?: XOR<ReviewsNullableRelationFilter, reviewsWhereInput> | null
  }, "id">

  export type notificationsOrderByWithAggregationInput = {
    id?: SortOrder
    message?: SortOrder
    title?: SortOrder
    userId?: SortOrder
    commentId?: SortOrder
    reviewId?: SortOrder
    _count?: notificationsCountOrderByAggregateInput
    _max?: notificationsMaxOrderByAggregateInput
    _min?: notificationsMinOrderByAggregateInput
  }

  export type notificationsScalarWhereWithAggregatesInput = {
    AND?: notificationsScalarWhereWithAggregatesInput | notificationsScalarWhereWithAggregatesInput[]
    OR?: notificationsScalarWhereWithAggregatesInput[]
    NOT?: notificationsScalarWhereWithAggregatesInput | notificationsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"notifications"> | string
    message?: StringWithAggregatesFilter<"notifications"> | string
    title?: StringWithAggregatesFilter<"notifications"> | string
    userId?: StringWithAggregatesFilter<"notifications"> | string
    commentId?: StringWithAggregatesFilter<"notifications"> | string
    reviewId?: StringWithAggregatesFilter<"notifications"> | string
  }

  export type usersCreateInput = {
    id?: string
    email?: string | null
    name: string
    image?: string | null
    phone?: string | null
    birthday?: string | null
    gender?: string | null
    role?: number
    uid: string
    address?: InputJsonValue | null
    createdAt?: Date | string
    seller?: sellerCreateNestedManyWithoutUserInput
    brand?: brandsCreateNestedManyWithoutUserInput
    products?: productsCreateNestedManyWithoutUserInput
    comments?: commentsCreateNestedManyWithoutUserInput
    reviews?: reviewsCreateNestedManyWithoutUserInput
    notifications?: notificationsCreateNestedManyWithoutUserInput
  }

  export type usersUncheckedCreateInput = {
    id?: string
    email?: string | null
    name: string
    image?: string | null
    phone?: string | null
    birthday?: string | null
    gender?: string | null
    role?: number
    uid: string
    address?: InputJsonValue | null
    createdAt?: Date | string
    seller?: sellerUncheckedCreateNestedManyWithoutUserInput
    brand?: brandsUncheckedCreateNestedManyWithoutUserInput
    products?: productsUncheckedCreateNestedManyWithoutUserInput
    comments?: commentsUncheckedCreateNestedManyWithoutUserInput
    reviews?: reviewsUncheckedCreateNestedManyWithoutUserInput
    notifications?: notificationsUncheckedCreateNestedManyWithoutUserInput
  }

  export type usersUpdateInput = {
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    role?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    address?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    seller?: sellerUpdateManyWithoutUserNestedInput
    brand?: brandsUpdateManyWithoutUserNestedInput
    products?: productsUpdateManyWithoutUserNestedInput
    comments?: commentsUpdateManyWithoutUserNestedInput
    reviews?: reviewsUpdateManyWithoutUserNestedInput
    notifications?: notificationsUpdateManyWithoutUserNestedInput
  }

  export type usersUncheckedUpdateInput = {
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    role?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    address?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    seller?: sellerUncheckedUpdateManyWithoutUserNestedInput
    brand?: brandsUncheckedUpdateManyWithoutUserNestedInput
    products?: productsUncheckedUpdateManyWithoutUserNestedInput
    comments?: commentsUncheckedUpdateManyWithoutUserNestedInput
    reviews?: reviewsUncheckedUpdateManyWithoutUserNestedInput
    notifications?: notificationsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type usersCreateManyInput = {
    id?: string
    email?: string | null
    name: string
    image?: string | null
    phone?: string | null
    birthday?: string | null
    gender?: string | null
    role?: number
    uid: string
    address?: InputJsonValue | null
    createdAt?: Date | string
  }

  export type usersUpdateManyMutationInput = {
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    role?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    address?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type usersUncheckedUpdateManyInput = {
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    role?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    address?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type categoryCreateInput = {
    id?: string
    name: string
    icon: string
    subCategory?: subCategoryCreateNestedManyWithoutCategoryInput
    products?: productsCreateNestedManyWithoutCategoryInput
  }

  export type categoryUncheckedCreateInput = {
    id?: string
    name: string
    icon: string
    subCategory?: subCategoryUncheckedCreateNestedManyWithoutCategoryInput
    products?: productsUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type categoryUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    subCategory?: subCategoryUpdateManyWithoutCategoryNestedInput
    products?: productsUpdateManyWithoutCategoryNestedInput
  }

  export type categoryUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    subCategory?: subCategoryUncheckedUpdateManyWithoutCategoryNestedInput
    products?: productsUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type categoryCreateManyInput = {
    id?: string
    name: string
    icon: string
  }

  export type categoryUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
  }

  export type categoryUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
  }

  export type subCategoryCreateInput = {
    id?: string
    name: string
    category?: categoryCreateNestedOneWithoutSubCategoryInput
    options?: optionsCreateNestedManyWithoutSubCategoryInput
    products?: productsCreateNestedManyWithoutSubCategoryInput
  }

  export type subCategoryUncheckedCreateInput = {
    id?: string
    name: string
    categoryId: string
    options?: optionsUncheckedCreateNestedManyWithoutSubCategoryInput
    products?: productsUncheckedCreateNestedManyWithoutSubCategoryInput
  }

  export type subCategoryUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    category?: categoryUpdateOneWithoutSubCategoryNestedInput
    options?: optionsUpdateManyWithoutSubCategoryNestedInput
    products?: productsUpdateManyWithoutSubCategoryNestedInput
  }

  export type subCategoryUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    options?: optionsUncheckedUpdateManyWithoutSubCategoryNestedInput
    products?: productsUncheckedUpdateManyWithoutSubCategoryNestedInput
  }

  export type subCategoryCreateManyInput = {
    id?: string
    name: string
    categoryId: string
  }

  export type subCategoryUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type subCategoryUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
  }

  export type optionsCreateInput = {
    id?: string
    name: string
    subCategory?: subCategoryCreateNestedOneWithoutOptionsInput
    products?: productsCreateNestedManyWithoutOptionInput
  }

  export type optionsUncheckedCreateInput = {
    id?: string
    name: string
    subCategoryId: string
    products?: productsUncheckedCreateNestedManyWithoutOptionInput
  }

  export type optionsUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    subCategory?: subCategoryUpdateOneWithoutOptionsNestedInput
    products?: productsUpdateManyWithoutOptionNestedInput
  }

  export type optionsUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    subCategoryId?: StringFieldUpdateOperationsInput | string
    products?: productsUncheckedUpdateManyWithoutOptionNestedInput
  }

  export type optionsCreateManyInput = {
    id?: string
    name: string
    subCategoryId: string
  }

  export type optionsUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type optionsUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    subCategoryId?: StringFieldUpdateOperationsInput | string
  }

  export type sellerCreateInput = {
    id?: string
    shopName: string
    shopAddress: string
    user?: usersCreateNestedOneWithoutSellerInput
    products?: productsCreateNestedManyWithoutSellerInput
  }

  export type sellerUncheckedCreateInput = {
    id?: string
    userId: string
    shopName: string
    shopAddress: string
    products?: productsUncheckedCreateNestedManyWithoutSellerInput
  }

  export type sellerUpdateInput = {
    shopName?: StringFieldUpdateOperationsInput | string
    shopAddress?: StringFieldUpdateOperationsInput | string
    user?: usersUpdateOneWithoutSellerNestedInput
    products?: productsUpdateManyWithoutSellerNestedInput
  }

  export type sellerUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    shopName?: StringFieldUpdateOperationsInput | string
    shopAddress?: StringFieldUpdateOperationsInput | string
    products?: productsUncheckedUpdateManyWithoutSellerNestedInput
  }

  export type sellerCreateManyInput = {
    id?: string
    userId: string
    shopName: string
    shopAddress: string
  }

  export type sellerUpdateManyMutationInput = {
    shopName?: StringFieldUpdateOperationsInput | string
    shopAddress?: StringFieldUpdateOperationsInput | string
  }

  export type sellerUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    shopName?: StringFieldUpdateOperationsInput | string
    shopAddress?: StringFieldUpdateOperationsInput | string
  }

  export type brandsCreateInput = {
    id?: string
    brandName: string
    brandAddress: string
    brandIcon: string
    user?: usersCreateNestedOneWithoutBrandInput
    products?: productsCreateNestedManyWithoutBrandInput
  }

  export type brandsUncheckedCreateInput = {
    id?: string
    userId: string
    brandName: string
    brandAddress: string
    brandIcon: string
    products?: productsUncheckedCreateNestedManyWithoutBrandInput
  }

  export type brandsUpdateInput = {
    brandName?: StringFieldUpdateOperationsInput | string
    brandAddress?: StringFieldUpdateOperationsInput | string
    brandIcon?: StringFieldUpdateOperationsInput | string
    user?: usersUpdateOneWithoutBrandNestedInput
    products?: productsUpdateManyWithoutBrandNestedInput
  }

  export type brandsUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    brandName?: StringFieldUpdateOperationsInput | string
    brandAddress?: StringFieldUpdateOperationsInput | string
    brandIcon?: StringFieldUpdateOperationsInput | string
    products?: productsUncheckedUpdateManyWithoutBrandNestedInput
  }

  export type brandsCreateManyInput = {
    id?: string
    userId: string
    brandName: string
    brandAddress: string
    brandIcon: string
  }

  export type brandsUpdateManyMutationInput = {
    brandName?: StringFieldUpdateOperationsInput | string
    brandAddress?: StringFieldUpdateOperationsInput | string
    brandIcon?: StringFieldUpdateOperationsInput | string
  }

  export type brandsUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    brandName?: StringFieldUpdateOperationsInput | string
    brandAddress?: StringFieldUpdateOperationsInput | string
    brandIcon?: StringFieldUpdateOperationsInput | string
  }

  export type productsCreateInput = {
    id?: string
    price: number
    title: string
    description: string
    thumbnail: string
    verified?: boolean
    offers?: offersCreateNestedManyWithoutProductInput
    coins?: coinsCreateNestedManyWithoutProductInput
    variants?: variantsCreateNestedManyWithoutProductInput
    comments?: commentsCreateNestedManyWithoutProductInput
    reviews?: reviewsCreateNestedManyWithoutProductInput
    seller?: sellerCreateNestedOneWithoutProductsInput
    brand?: brandsCreateNestedOneWithoutProductsInput
    category?: categoryCreateNestedOneWithoutProductsInput
    subCategory?: subCategoryCreateNestedOneWithoutProductsInput
    option?: optionsCreateNestedOneWithoutProductsInput
    user?: usersCreateNestedOneWithoutProductsInput
  }

  export type productsUncheckedCreateInput = {
    id?: string
    price: number
    title: string
    description: string
    thumbnail: string
    verified?: boolean
    sellerId?: string | null
    brandId?: string | null
    categoryId: string
    subCategoryId: string
    optionId: string
    userId: string
    offers?: offersUncheckedCreateNestedManyWithoutProductInput
    coins?: coinsUncheckedCreateNestedManyWithoutProductInput
    variants?: variantsUncheckedCreateNestedManyWithoutProductInput
    comments?: commentsUncheckedCreateNestedManyWithoutProductInput
    reviews?: reviewsUncheckedCreateNestedManyWithoutProductInput
  }

  export type productsUpdateInput = {
    price?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    offers?: offersUpdateManyWithoutProductNestedInput
    coins?: coinsUpdateManyWithoutProductNestedInput
    variants?: variantsUpdateManyWithoutProductNestedInput
    comments?: commentsUpdateManyWithoutProductNestedInput
    reviews?: reviewsUpdateManyWithoutProductNestedInput
    seller?: sellerUpdateOneWithoutProductsNestedInput
    brand?: brandsUpdateOneWithoutProductsNestedInput
    category?: categoryUpdateOneWithoutProductsNestedInput
    subCategory?: subCategoryUpdateOneWithoutProductsNestedInput
    option?: optionsUpdateOneWithoutProductsNestedInput
    user?: usersUpdateOneWithoutProductsNestedInput
  }

  export type productsUncheckedUpdateInput = {
    price?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    sellerId?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    subCategoryId?: StringFieldUpdateOperationsInput | string
    optionId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    offers?: offersUncheckedUpdateManyWithoutProductNestedInput
    coins?: coinsUncheckedUpdateManyWithoutProductNestedInput
    variants?: variantsUncheckedUpdateManyWithoutProductNestedInput
    comments?: commentsUncheckedUpdateManyWithoutProductNestedInput
    reviews?: reviewsUncheckedUpdateManyWithoutProductNestedInput
  }

  export type productsCreateManyInput = {
    id?: string
    price: number
    title: string
    description: string
    thumbnail: string
    verified?: boolean
    sellerId?: string | null
    brandId?: string | null
    categoryId: string
    subCategoryId: string
    optionId: string
    userId: string
  }

  export type productsUpdateManyMutationInput = {
    price?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
  }

  export type productsUncheckedUpdateManyInput = {
    price?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    sellerId?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    subCategoryId?: StringFieldUpdateOperationsInput | string
    optionId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type offersCreateInput = {
    id?: string
    money?: number
    percentage?: number
    name?: string | null
    product?: productsCreateNestedOneWithoutOffersInput
  }

  export type offersUncheckedCreateInput = {
    id?: string
    money?: number
    percentage?: number
    name?: string | null
    productId: string
  }

  export type offersUpdateInput = {
    money?: IntFieldUpdateOperationsInput | number
    percentage?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    product?: productsUpdateOneWithoutOffersNestedInput
  }

  export type offersUncheckedUpdateInput = {
    money?: IntFieldUpdateOperationsInput | number
    percentage?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    productId?: StringFieldUpdateOperationsInput | string
  }

  export type offersCreateManyInput = {
    id?: string
    money?: number
    percentage?: number
    name?: string | null
    productId: string
  }

  export type offersUpdateManyMutationInput = {
    money?: IntFieldUpdateOperationsInput | number
    percentage?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type offersUncheckedUpdateManyInput = {
    money?: IntFieldUpdateOperationsInput | number
    percentage?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    productId?: StringFieldUpdateOperationsInput | string
  }

  export type coinsCreateInput = {
    id?: string
    number?: number
    name?: string | null
    product?: productsCreateNestedOneWithoutCoinsInput
  }

  export type coinsUncheckedCreateInput = {
    id?: string
    number?: number
    name?: string | null
    productId: string
  }

  export type coinsUpdateInput = {
    number?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    product?: productsUpdateOneWithoutCoinsNestedInput
  }

  export type coinsUncheckedUpdateInput = {
    number?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    productId?: StringFieldUpdateOperationsInput | string
  }

  export type coinsCreateManyInput = {
    id?: string
    number?: number
    name?: string | null
    productId: string
  }

  export type coinsUpdateManyMutationInput = {
    number?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type coinsUncheckedUpdateManyInput = {
    number?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    productId?: StringFieldUpdateOperationsInput | string
  }

  export type variantsCreateInput = {
    id?: string
    size: string
    color: string
    image: string
    product?: productsCreateNestedOneWithoutVariantsInput
  }

  export type variantsUncheckedCreateInput = {
    id?: string
    size: string
    color: string
    image: string
    productId: string
  }

  export type variantsUpdateInput = {
    size?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    product?: productsUpdateOneWithoutVariantsNestedInput
  }

  export type variantsUncheckedUpdateInput = {
    size?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
  }

  export type variantsCreateManyInput = {
    id?: string
    size: string
    color: string
    image: string
    productId: string
  }

  export type variantsUpdateManyMutationInput = {
    size?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type variantsUncheckedUpdateManyInput = {
    size?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
  }

  export type commentsCreateInput = {
    id?: string
    message: string
    replay: string
    user?: usersCreateNestedOneWithoutCommentsInput
    product?: productsCreateNestedOneWithoutCommentsInput
    notifications?: notificationsCreateNestedManyWithoutCommentsInput
  }

  export type commentsUncheckedCreateInput = {
    id?: string
    message: string
    replay: string
    userId: string
    productId: string
    notifications?: notificationsUncheckedCreateNestedManyWithoutCommentsInput
  }

  export type commentsUpdateInput = {
    message?: StringFieldUpdateOperationsInput | string
    replay?: StringFieldUpdateOperationsInput | string
    user?: usersUpdateOneWithoutCommentsNestedInput
    product?: productsUpdateOneWithoutCommentsNestedInput
    notifications?: notificationsUpdateManyWithoutCommentsNestedInput
  }

  export type commentsUncheckedUpdateInput = {
    message?: StringFieldUpdateOperationsInput | string
    replay?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    notifications?: notificationsUncheckedUpdateManyWithoutCommentsNestedInput
  }

  export type commentsCreateManyInput = {
    id?: string
    message: string
    replay: string
    userId: string
    productId: string
  }

  export type commentsUpdateManyMutationInput = {
    message?: StringFieldUpdateOperationsInput | string
    replay?: StringFieldUpdateOperationsInput | string
  }

  export type commentsUncheckedUpdateManyInput = {
    message?: StringFieldUpdateOperationsInput | string
    replay?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
  }

  export type reviewsCreateInput = {
    id?: string
    message: string
    rate?: number
    replay: string
    user?: usersCreateNestedOneWithoutReviewsInput
    product?: productsCreateNestedOneWithoutReviewsInput
    notifications?: notificationsCreateNestedManyWithoutReviewsInput
  }

  export type reviewsUncheckedCreateInput = {
    id?: string
    message: string
    rate?: number
    replay: string
    userId: string
    productId: string
    notifications?: notificationsUncheckedCreateNestedManyWithoutReviewsInput
  }

  export type reviewsUpdateInput = {
    message?: StringFieldUpdateOperationsInput | string
    rate?: IntFieldUpdateOperationsInput | number
    replay?: StringFieldUpdateOperationsInput | string
    user?: usersUpdateOneWithoutReviewsNestedInput
    product?: productsUpdateOneWithoutReviewsNestedInput
    notifications?: notificationsUpdateManyWithoutReviewsNestedInput
  }

  export type reviewsUncheckedUpdateInput = {
    message?: StringFieldUpdateOperationsInput | string
    rate?: IntFieldUpdateOperationsInput | number
    replay?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    notifications?: notificationsUncheckedUpdateManyWithoutReviewsNestedInput
  }

  export type reviewsCreateManyInput = {
    id?: string
    message: string
    rate?: number
    replay: string
    userId: string
    productId: string
  }

  export type reviewsUpdateManyMutationInput = {
    message?: StringFieldUpdateOperationsInput | string
    rate?: IntFieldUpdateOperationsInput | number
    replay?: StringFieldUpdateOperationsInput | string
  }

  export type reviewsUncheckedUpdateManyInput = {
    message?: StringFieldUpdateOperationsInput | string
    rate?: IntFieldUpdateOperationsInput | number
    replay?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
  }

  export type notificationsCreateInput = {
    id?: string
    message: string
    title: string
    user?: usersCreateNestedOneWithoutNotificationsInput
    comments?: commentsCreateNestedOneWithoutNotificationsInput
    reviews?: reviewsCreateNestedOneWithoutNotificationsInput
  }

  export type notificationsUncheckedCreateInput = {
    id?: string
    message: string
    title: string
    userId: string
    commentId: string
    reviewId: string
  }

  export type notificationsUpdateInput = {
    message?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    user?: usersUpdateOneWithoutNotificationsNestedInput
    comments?: commentsUpdateOneWithoutNotificationsNestedInput
    reviews?: reviewsUpdateOneWithoutNotificationsNestedInput
  }

  export type notificationsUncheckedUpdateInput = {
    message?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    commentId?: StringFieldUpdateOperationsInput | string
    reviewId?: StringFieldUpdateOperationsInput | string
  }

  export type notificationsCreateManyInput = {
    id?: string
    message: string
    title: string
    userId: string
    commentId: string
    reviewId: string
  }

  export type notificationsUpdateManyMutationInput = {
    message?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
  }

  export type notificationsUncheckedUpdateManyInput = {
    message?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    commentId?: StringFieldUpdateOperationsInput | string
    reviewId?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
    isSet?: boolean
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    isSet?: boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type SellerListRelationFilter = {
    every?: sellerWhereInput
    some?: sellerWhereInput
    none?: sellerWhereInput
  }

  export type BrandsListRelationFilter = {
    every?: brandsWhereInput
    some?: brandsWhereInput
    none?: brandsWhereInput
  }

  export type ProductsListRelationFilter = {
    every?: productsWhereInput
    some?: productsWhereInput
    none?: productsWhereInput
  }

  export type CommentsListRelationFilter = {
    every?: commentsWhereInput
    some?: commentsWhereInput
    none?: commentsWhereInput
  }

  export type ReviewsListRelationFilter = {
    every?: reviewsWhereInput
    some?: reviewsWhereInput
    none?: reviewsWhereInput
  }

  export type NotificationsListRelationFilter = {
    every?: notificationsWhereInput
    some?: notificationsWhereInput
    none?: notificationsWhereInput
  }

  export type sellerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type brandsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type productsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type commentsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type reviewsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type notificationsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type usersCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    image?: SortOrder
    phone?: SortOrder
    birthday?: SortOrder
    gender?: SortOrder
    role?: SortOrder
    uid?: SortOrder
    address?: SortOrder
    createdAt?: SortOrder
  }

  export type usersAvgOrderByAggregateInput = {
    role?: SortOrder
  }

  export type usersMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    image?: SortOrder
    phone?: SortOrder
    birthday?: SortOrder
    gender?: SortOrder
    role?: SortOrder
    uid?: SortOrder
    createdAt?: SortOrder
  }

  export type usersMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    image?: SortOrder
    phone?: SortOrder
    birthday?: SortOrder
    gender?: SortOrder
    role?: SortOrder
    uid?: SortOrder
    createdAt?: SortOrder
  }

  export type usersSumOrderByAggregateInput = {
    role?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type SubCategoryListRelationFilter = {
    every?: subCategoryWhereInput
    some?: subCategoryWhereInput
    none?: subCategoryWhereInput
  }

  export type subCategoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type categoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    icon?: SortOrder
  }

  export type categoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    icon?: SortOrder
  }

  export type categoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    icon?: SortOrder
  }

  export type CategoryNullableRelationFilter = {
    is?: categoryWhereInput | null
    isNot?: categoryWhereInput | null
  }

  export type OptionsListRelationFilter = {
    every?: optionsWhereInput
    some?: optionsWhereInput
    none?: optionsWhereInput
  }

  export type optionsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type subCategoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    categoryId?: SortOrder
  }

  export type subCategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    categoryId?: SortOrder
  }

  export type subCategoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    categoryId?: SortOrder
  }

  export type SubCategoryNullableRelationFilter = {
    is?: subCategoryWhereInput | null
    isNot?: subCategoryWhereInput | null
  }

  export type optionsCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    subCategoryId?: SortOrder
  }

  export type optionsMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    subCategoryId?: SortOrder
  }

  export type optionsMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    subCategoryId?: SortOrder
  }

  export type UsersNullableRelationFilter = {
    is?: usersWhereInput | null
    isNot?: usersWhereInput | null
  }

  export type sellerCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    shopName?: SortOrder
    shopAddress?: SortOrder
  }

  export type sellerMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    shopName?: SortOrder
    shopAddress?: SortOrder
  }

  export type sellerMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    shopName?: SortOrder
    shopAddress?: SortOrder
  }

  export type brandsCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    brandName?: SortOrder
    brandAddress?: SortOrder
    brandIcon?: SortOrder
  }

  export type brandsMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    brandName?: SortOrder
    brandAddress?: SortOrder
    brandIcon?: SortOrder
  }

  export type brandsMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    brandName?: SortOrder
    brandAddress?: SortOrder
    brandIcon?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type OffersListRelationFilter = {
    every?: offersWhereInput
    some?: offersWhereInput
    none?: offersWhereInput
  }

  export type CoinsListRelationFilter = {
    every?: coinsWhereInput
    some?: coinsWhereInput
    none?: coinsWhereInput
  }

  export type VariantsListRelationFilter = {
    every?: variantsWhereInput
    some?: variantsWhereInput
    none?: variantsWhereInput
  }

  export type SellerNullableRelationFilter = {
    is?: sellerWhereInput | null
    isNot?: sellerWhereInput | null
  }

  export type BrandsNullableRelationFilter = {
    is?: brandsWhereInput | null
    isNot?: brandsWhereInput | null
  }

  export type OptionsNullableRelationFilter = {
    is?: optionsWhereInput | null
    isNot?: optionsWhereInput | null
  }

  export type offersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type coinsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type variantsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type productsCountOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    title?: SortOrder
    description?: SortOrder
    thumbnail?: SortOrder
    verified?: SortOrder
    sellerId?: SortOrder
    brandId?: SortOrder
    categoryId?: SortOrder
    subCategoryId?: SortOrder
    optionId?: SortOrder
    userId?: SortOrder
  }

  export type productsAvgOrderByAggregateInput = {
    price?: SortOrder
  }

  export type productsMaxOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    title?: SortOrder
    description?: SortOrder
    thumbnail?: SortOrder
    verified?: SortOrder
    sellerId?: SortOrder
    brandId?: SortOrder
    categoryId?: SortOrder
    subCategoryId?: SortOrder
    optionId?: SortOrder
    userId?: SortOrder
  }

  export type productsMinOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    title?: SortOrder
    description?: SortOrder
    thumbnail?: SortOrder
    verified?: SortOrder
    sellerId?: SortOrder
    brandId?: SortOrder
    categoryId?: SortOrder
    subCategoryId?: SortOrder
    optionId?: SortOrder
    userId?: SortOrder
  }

  export type productsSumOrderByAggregateInput = {
    price?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type ProductsNullableRelationFilter = {
    is?: productsWhereInput | null
    isNot?: productsWhereInput | null
  }

  export type offersCountOrderByAggregateInput = {
    id?: SortOrder
    money?: SortOrder
    percentage?: SortOrder
    name?: SortOrder
    productId?: SortOrder
  }

  export type offersAvgOrderByAggregateInput = {
    money?: SortOrder
    percentage?: SortOrder
  }

  export type offersMaxOrderByAggregateInput = {
    id?: SortOrder
    money?: SortOrder
    percentage?: SortOrder
    name?: SortOrder
    productId?: SortOrder
  }

  export type offersMinOrderByAggregateInput = {
    id?: SortOrder
    money?: SortOrder
    percentage?: SortOrder
    name?: SortOrder
    productId?: SortOrder
  }

  export type offersSumOrderByAggregateInput = {
    money?: SortOrder
    percentage?: SortOrder
  }

  export type coinsCountOrderByAggregateInput = {
    id?: SortOrder
    number?: SortOrder
    name?: SortOrder
    productId?: SortOrder
  }

  export type coinsAvgOrderByAggregateInput = {
    number?: SortOrder
  }

  export type coinsMaxOrderByAggregateInput = {
    id?: SortOrder
    number?: SortOrder
    name?: SortOrder
    productId?: SortOrder
  }

  export type coinsMinOrderByAggregateInput = {
    id?: SortOrder
    number?: SortOrder
    name?: SortOrder
    productId?: SortOrder
  }

  export type coinsSumOrderByAggregateInput = {
    number?: SortOrder
  }

  export type variantsCountOrderByAggregateInput = {
    id?: SortOrder
    size?: SortOrder
    color?: SortOrder
    image?: SortOrder
    productId?: SortOrder
  }

  export type variantsMaxOrderByAggregateInput = {
    id?: SortOrder
    size?: SortOrder
    color?: SortOrder
    image?: SortOrder
    productId?: SortOrder
  }

  export type variantsMinOrderByAggregateInput = {
    id?: SortOrder
    size?: SortOrder
    color?: SortOrder
    image?: SortOrder
    productId?: SortOrder
  }

  export type commentsCountOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    replay?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
  }

  export type commentsMaxOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    replay?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
  }

  export type commentsMinOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    replay?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
  }

  export type reviewsCountOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    rate?: SortOrder
    replay?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
  }

  export type reviewsAvgOrderByAggregateInput = {
    rate?: SortOrder
  }

  export type reviewsMaxOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    rate?: SortOrder
    replay?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
  }

  export type reviewsMinOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    rate?: SortOrder
    replay?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
  }

  export type reviewsSumOrderByAggregateInput = {
    rate?: SortOrder
  }

  export type CommentsNullableRelationFilter = {
    is?: commentsWhereInput | null
    isNot?: commentsWhereInput | null
  }

  export type ReviewsNullableRelationFilter = {
    is?: reviewsWhereInput | null
    isNot?: reviewsWhereInput | null
  }

  export type notificationsCountOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    title?: SortOrder
    userId?: SortOrder
    commentId?: SortOrder
    reviewId?: SortOrder
  }

  export type notificationsMaxOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    title?: SortOrder
    userId?: SortOrder
    commentId?: SortOrder
    reviewId?: SortOrder
  }

  export type notificationsMinOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    title?: SortOrder
    userId?: SortOrder
    commentId?: SortOrder
    reviewId?: SortOrder
  }

  export type sellerCreateNestedManyWithoutUserInput = {
    create?: XOR<sellerCreateWithoutUserInput, sellerUncheckedCreateWithoutUserInput> | sellerCreateWithoutUserInput[] | sellerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: sellerCreateOrConnectWithoutUserInput | sellerCreateOrConnectWithoutUserInput[]
    createMany?: sellerCreateManyUserInputEnvelope
    connect?: sellerWhereUniqueInput | sellerWhereUniqueInput[]
  }

  export type brandsCreateNestedManyWithoutUserInput = {
    create?: XOR<brandsCreateWithoutUserInput, brandsUncheckedCreateWithoutUserInput> | brandsCreateWithoutUserInput[] | brandsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: brandsCreateOrConnectWithoutUserInput | brandsCreateOrConnectWithoutUserInput[]
    createMany?: brandsCreateManyUserInputEnvelope
    connect?: brandsWhereUniqueInput | brandsWhereUniqueInput[]
  }

  export type productsCreateNestedManyWithoutUserInput = {
    create?: XOR<productsCreateWithoutUserInput, productsUncheckedCreateWithoutUserInput> | productsCreateWithoutUserInput[] | productsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: productsCreateOrConnectWithoutUserInput | productsCreateOrConnectWithoutUserInput[]
    createMany?: productsCreateManyUserInputEnvelope
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
  }

  export type commentsCreateNestedManyWithoutUserInput = {
    create?: XOR<commentsCreateWithoutUserInput, commentsUncheckedCreateWithoutUserInput> | commentsCreateWithoutUserInput[] | commentsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: commentsCreateOrConnectWithoutUserInput | commentsCreateOrConnectWithoutUserInput[]
    createMany?: commentsCreateManyUserInputEnvelope
    connect?: commentsWhereUniqueInput | commentsWhereUniqueInput[]
  }

  export type reviewsCreateNestedManyWithoutUserInput = {
    create?: XOR<reviewsCreateWithoutUserInput, reviewsUncheckedCreateWithoutUserInput> | reviewsCreateWithoutUserInput[] | reviewsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: reviewsCreateOrConnectWithoutUserInput | reviewsCreateOrConnectWithoutUserInput[]
    createMany?: reviewsCreateManyUserInputEnvelope
    connect?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
  }

  export type notificationsCreateNestedManyWithoutUserInput = {
    create?: XOR<notificationsCreateWithoutUserInput, notificationsUncheckedCreateWithoutUserInput> | notificationsCreateWithoutUserInput[] | notificationsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: notificationsCreateOrConnectWithoutUserInput | notificationsCreateOrConnectWithoutUserInput[]
    createMany?: notificationsCreateManyUserInputEnvelope
    connect?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
  }

  export type sellerUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<sellerCreateWithoutUserInput, sellerUncheckedCreateWithoutUserInput> | sellerCreateWithoutUserInput[] | sellerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: sellerCreateOrConnectWithoutUserInput | sellerCreateOrConnectWithoutUserInput[]
    createMany?: sellerCreateManyUserInputEnvelope
    connect?: sellerWhereUniqueInput | sellerWhereUniqueInput[]
  }

  export type brandsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<brandsCreateWithoutUserInput, brandsUncheckedCreateWithoutUserInput> | brandsCreateWithoutUserInput[] | brandsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: brandsCreateOrConnectWithoutUserInput | brandsCreateOrConnectWithoutUserInput[]
    createMany?: brandsCreateManyUserInputEnvelope
    connect?: brandsWhereUniqueInput | brandsWhereUniqueInput[]
  }

  export type productsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<productsCreateWithoutUserInput, productsUncheckedCreateWithoutUserInput> | productsCreateWithoutUserInput[] | productsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: productsCreateOrConnectWithoutUserInput | productsCreateOrConnectWithoutUserInput[]
    createMany?: productsCreateManyUserInputEnvelope
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
  }

  export type commentsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<commentsCreateWithoutUserInput, commentsUncheckedCreateWithoutUserInput> | commentsCreateWithoutUserInput[] | commentsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: commentsCreateOrConnectWithoutUserInput | commentsCreateOrConnectWithoutUserInput[]
    createMany?: commentsCreateManyUserInputEnvelope
    connect?: commentsWhereUniqueInput | commentsWhereUniqueInput[]
  }

  export type reviewsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<reviewsCreateWithoutUserInput, reviewsUncheckedCreateWithoutUserInput> | reviewsCreateWithoutUserInput[] | reviewsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: reviewsCreateOrConnectWithoutUserInput | reviewsCreateOrConnectWithoutUserInput[]
    createMany?: reviewsCreateManyUserInputEnvelope
    connect?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
  }

  export type notificationsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<notificationsCreateWithoutUserInput, notificationsUncheckedCreateWithoutUserInput> | notificationsCreateWithoutUserInput[] | notificationsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: notificationsCreateOrConnectWithoutUserInput | notificationsCreateOrConnectWithoutUserInput[]
    createMany?: notificationsCreateManyUserInputEnvelope
    connect?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
    unset?: boolean
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type sellerUpdateManyWithoutUserNestedInput = {
    create?: XOR<sellerCreateWithoutUserInput, sellerUncheckedCreateWithoutUserInput> | sellerCreateWithoutUserInput[] | sellerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: sellerCreateOrConnectWithoutUserInput | sellerCreateOrConnectWithoutUserInput[]
    upsert?: sellerUpsertWithWhereUniqueWithoutUserInput | sellerUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: sellerCreateManyUserInputEnvelope
    set?: sellerWhereUniqueInput | sellerWhereUniqueInput[]
    disconnect?: sellerWhereUniqueInput | sellerWhereUniqueInput[]
    delete?: sellerWhereUniqueInput | sellerWhereUniqueInput[]
    connect?: sellerWhereUniqueInput | sellerWhereUniqueInput[]
    update?: sellerUpdateWithWhereUniqueWithoutUserInput | sellerUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: sellerUpdateManyWithWhereWithoutUserInput | sellerUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: sellerScalarWhereInput | sellerScalarWhereInput[]
  }

  export type brandsUpdateManyWithoutUserNestedInput = {
    create?: XOR<brandsCreateWithoutUserInput, brandsUncheckedCreateWithoutUserInput> | brandsCreateWithoutUserInput[] | brandsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: brandsCreateOrConnectWithoutUserInput | brandsCreateOrConnectWithoutUserInput[]
    upsert?: brandsUpsertWithWhereUniqueWithoutUserInput | brandsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: brandsCreateManyUserInputEnvelope
    set?: brandsWhereUniqueInput | brandsWhereUniqueInput[]
    disconnect?: brandsWhereUniqueInput | brandsWhereUniqueInput[]
    delete?: brandsWhereUniqueInput | brandsWhereUniqueInput[]
    connect?: brandsWhereUniqueInput | brandsWhereUniqueInput[]
    update?: brandsUpdateWithWhereUniqueWithoutUserInput | brandsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: brandsUpdateManyWithWhereWithoutUserInput | brandsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: brandsScalarWhereInput | brandsScalarWhereInput[]
  }

  export type productsUpdateManyWithoutUserNestedInput = {
    create?: XOR<productsCreateWithoutUserInput, productsUncheckedCreateWithoutUserInput> | productsCreateWithoutUserInput[] | productsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: productsCreateOrConnectWithoutUserInput | productsCreateOrConnectWithoutUserInput[]
    upsert?: productsUpsertWithWhereUniqueWithoutUserInput | productsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: productsCreateManyUserInputEnvelope
    set?: productsWhereUniqueInput | productsWhereUniqueInput[]
    disconnect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    delete?: productsWhereUniqueInput | productsWhereUniqueInput[]
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    update?: productsUpdateWithWhereUniqueWithoutUserInput | productsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: productsUpdateManyWithWhereWithoutUserInput | productsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: productsScalarWhereInput | productsScalarWhereInput[]
  }

  export type commentsUpdateManyWithoutUserNestedInput = {
    create?: XOR<commentsCreateWithoutUserInput, commentsUncheckedCreateWithoutUserInput> | commentsCreateWithoutUserInput[] | commentsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: commentsCreateOrConnectWithoutUserInput | commentsCreateOrConnectWithoutUserInput[]
    upsert?: commentsUpsertWithWhereUniqueWithoutUserInput | commentsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: commentsCreateManyUserInputEnvelope
    set?: commentsWhereUniqueInput | commentsWhereUniqueInput[]
    disconnect?: commentsWhereUniqueInput | commentsWhereUniqueInput[]
    delete?: commentsWhereUniqueInput | commentsWhereUniqueInput[]
    connect?: commentsWhereUniqueInput | commentsWhereUniqueInput[]
    update?: commentsUpdateWithWhereUniqueWithoutUserInput | commentsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: commentsUpdateManyWithWhereWithoutUserInput | commentsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: commentsScalarWhereInput | commentsScalarWhereInput[]
  }

  export type reviewsUpdateManyWithoutUserNestedInput = {
    create?: XOR<reviewsCreateWithoutUserInput, reviewsUncheckedCreateWithoutUserInput> | reviewsCreateWithoutUserInput[] | reviewsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: reviewsCreateOrConnectWithoutUserInput | reviewsCreateOrConnectWithoutUserInput[]
    upsert?: reviewsUpsertWithWhereUniqueWithoutUserInput | reviewsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: reviewsCreateManyUserInputEnvelope
    set?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    disconnect?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    delete?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    connect?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    update?: reviewsUpdateWithWhereUniqueWithoutUserInput | reviewsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: reviewsUpdateManyWithWhereWithoutUserInput | reviewsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: reviewsScalarWhereInput | reviewsScalarWhereInput[]
  }

  export type notificationsUpdateManyWithoutUserNestedInput = {
    create?: XOR<notificationsCreateWithoutUserInput, notificationsUncheckedCreateWithoutUserInput> | notificationsCreateWithoutUserInput[] | notificationsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: notificationsCreateOrConnectWithoutUserInput | notificationsCreateOrConnectWithoutUserInput[]
    upsert?: notificationsUpsertWithWhereUniqueWithoutUserInput | notificationsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: notificationsCreateManyUserInputEnvelope
    set?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    disconnect?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    delete?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    connect?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    update?: notificationsUpdateWithWhereUniqueWithoutUserInput | notificationsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: notificationsUpdateManyWithWhereWithoutUserInput | notificationsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: notificationsScalarWhereInput | notificationsScalarWhereInput[]
  }

  export type sellerUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<sellerCreateWithoutUserInput, sellerUncheckedCreateWithoutUserInput> | sellerCreateWithoutUserInput[] | sellerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: sellerCreateOrConnectWithoutUserInput | sellerCreateOrConnectWithoutUserInput[]
    upsert?: sellerUpsertWithWhereUniqueWithoutUserInput | sellerUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: sellerCreateManyUserInputEnvelope
    set?: sellerWhereUniqueInput | sellerWhereUniqueInput[]
    disconnect?: sellerWhereUniqueInput | sellerWhereUniqueInput[]
    delete?: sellerWhereUniqueInput | sellerWhereUniqueInput[]
    connect?: sellerWhereUniqueInput | sellerWhereUniqueInput[]
    update?: sellerUpdateWithWhereUniqueWithoutUserInput | sellerUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: sellerUpdateManyWithWhereWithoutUserInput | sellerUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: sellerScalarWhereInput | sellerScalarWhereInput[]
  }

  export type brandsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<brandsCreateWithoutUserInput, brandsUncheckedCreateWithoutUserInput> | brandsCreateWithoutUserInput[] | brandsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: brandsCreateOrConnectWithoutUserInput | brandsCreateOrConnectWithoutUserInput[]
    upsert?: brandsUpsertWithWhereUniqueWithoutUserInput | brandsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: brandsCreateManyUserInputEnvelope
    set?: brandsWhereUniqueInput | brandsWhereUniqueInput[]
    disconnect?: brandsWhereUniqueInput | brandsWhereUniqueInput[]
    delete?: brandsWhereUniqueInput | brandsWhereUniqueInput[]
    connect?: brandsWhereUniqueInput | brandsWhereUniqueInput[]
    update?: brandsUpdateWithWhereUniqueWithoutUserInput | brandsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: brandsUpdateManyWithWhereWithoutUserInput | brandsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: brandsScalarWhereInput | brandsScalarWhereInput[]
  }

  export type productsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<productsCreateWithoutUserInput, productsUncheckedCreateWithoutUserInput> | productsCreateWithoutUserInput[] | productsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: productsCreateOrConnectWithoutUserInput | productsCreateOrConnectWithoutUserInput[]
    upsert?: productsUpsertWithWhereUniqueWithoutUserInput | productsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: productsCreateManyUserInputEnvelope
    set?: productsWhereUniqueInput | productsWhereUniqueInput[]
    disconnect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    delete?: productsWhereUniqueInput | productsWhereUniqueInput[]
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    update?: productsUpdateWithWhereUniqueWithoutUserInput | productsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: productsUpdateManyWithWhereWithoutUserInput | productsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: productsScalarWhereInput | productsScalarWhereInput[]
  }

  export type commentsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<commentsCreateWithoutUserInput, commentsUncheckedCreateWithoutUserInput> | commentsCreateWithoutUserInput[] | commentsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: commentsCreateOrConnectWithoutUserInput | commentsCreateOrConnectWithoutUserInput[]
    upsert?: commentsUpsertWithWhereUniqueWithoutUserInput | commentsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: commentsCreateManyUserInputEnvelope
    set?: commentsWhereUniqueInput | commentsWhereUniqueInput[]
    disconnect?: commentsWhereUniqueInput | commentsWhereUniqueInput[]
    delete?: commentsWhereUniqueInput | commentsWhereUniqueInput[]
    connect?: commentsWhereUniqueInput | commentsWhereUniqueInput[]
    update?: commentsUpdateWithWhereUniqueWithoutUserInput | commentsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: commentsUpdateManyWithWhereWithoutUserInput | commentsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: commentsScalarWhereInput | commentsScalarWhereInput[]
  }

  export type reviewsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<reviewsCreateWithoutUserInput, reviewsUncheckedCreateWithoutUserInput> | reviewsCreateWithoutUserInput[] | reviewsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: reviewsCreateOrConnectWithoutUserInput | reviewsCreateOrConnectWithoutUserInput[]
    upsert?: reviewsUpsertWithWhereUniqueWithoutUserInput | reviewsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: reviewsCreateManyUserInputEnvelope
    set?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    disconnect?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    delete?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    connect?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    update?: reviewsUpdateWithWhereUniqueWithoutUserInput | reviewsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: reviewsUpdateManyWithWhereWithoutUserInput | reviewsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: reviewsScalarWhereInput | reviewsScalarWhereInput[]
  }

  export type notificationsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<notificationsCreateWithoutUserInput, notificationsUncheckedCreateWithoutUserInput> | notificationsCreateWithoutUserInput[] | notificationsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: notificationsCreateOrConnectWithoutUserInput | notificationsCreateOrConnectWithoutUserInput[]
    upsert?: notificationsUpsertWithWhereUniqueWithoutUserInput | notificationsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: notificationsCreateManyUserInputEnvelope
    set?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    disconnect?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    delete?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    connect?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    update?: notificationsUpdateWithWhereUniqueWithoutUserInput | notificationsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: notificationsUpdateManyWithWhereWithoutUserInput | notificationsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: notificationsScalarWhereInput | notificationsScalarWhereInput[]
  }

  export type subCategoryCreateNestedManyWithoutCategoryInput = {
    create?: XOR<subCategoryCreateWithoutCategoryInput, subCategoryUncheckedCreateWithoutCategoryInput> | subCategoryCreateWithoutCategoryInput[] | subCategoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: subCategoryCreateOrConnectWithoutCategoryInput | subCategoryCreateOrConnectWithoutCategoryInput[]
    createMany?: subCategoryCreateManyCategoryInputEnvelope
    connect?: subCategoryWhereUniqueInput | subCategoryWhereUniqueInput[]
  }

  export type productsCreateNestedManyWithoutCategoryInput = {
    create?: XOR<productsCreateWithoutCategoryInput, productsUncheckedCreateWithoutCategoryInput> | productsCreateWithoutCategoryInput[] | productsUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: productsCreateOrConnectWithoutCategoryInput | productsCreateOrConnectWithoutCategoryInput[]
    createMany?: productsCreateManyCategoryInputEnvelope
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
  }

  export type subCategoryUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<subCategoryCreateWithoutCategoryInput, subCategoryUncheckedCreateWithoutCategoryInput> | subCategoryCreateWithoutCategoryInput[] | subCategoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: subCategoryCreateOrConnectWithoutCategoryInput | subCategoryCreateOrConnectWithoutCategoryInput[]
    createMany?: subCategoryCreateManyCategoryInputEnvelope
    connect?: subCategoryWhereUniqueInput | subCategoryWhereUniqueInput[]
  }

  export type productsUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<productsCreateWithoutCategoryInput, productsUncheckedCreateWithoutCategoryInput> | productsCreateWithoutCategoryInput[] | productsUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: productsCreateOrConnectWithoutCategoryInput | productsCreateOrConnectWithoutCategoryInput[]
    createMany?: productsCreateManyCategoryInputEnvelope
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
  }

  export type subCategoryUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<subCategoryCreateWithoutCategoryInput, subCategoryUncheckedCreateWithoutCategoryInput> | subCategoryCreateWithoutCategoryInput[] | subCategoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: subCategoryCreateOrConnectWithoutCategoryInput | subCategoryCreateOrConnectWithoutCategoryInput[]
    upsert?: subCategoryUpsertWithWhereUniqueWithoutCategoryInput | subCategoryUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: subCategoryCreateManyCategoryInputEnvelope
    set?: subCategoryWhereUniqueInput | subCategoryWhereUniqueInput[]
    disconnect?: subCategoryWhereUniqueInput | subCategoryWhereUniqueInput[]
    delete?: subCategoryWhereUniqueInput | subCategoryWhereUniqueInput[]
    connect?: subCategoryWhereUniqueInput | subCategoryWhereUniqueInput[]
    update?: subCategoryUpdateWithWhereUniqueWithoutCategoryInput | subCategoryUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: subCategoryUpdateManyWithWhereWithoutCategoryInput | subCategoryUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: subCategoryScalarWhereInput | subCategoryScalarWhereInput[]
  }

  export type productsUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<productsCreateWithoutCategoryInput, productsUncheckedCreateWithoutCategoryInput> | productsCreateWithoutCategoryInput[] | productsUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: productsCreateOrConnectWithoutCategoryInput | productsCreateOrConnectWithoutCategoryInput[]
    upsert?: productsUpsertWithWhereUniqueWithoutCategoryInput | productsUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: productsCreateManyCategoryInputEnvelope
    set?: productsWhereUniqueInput | productsWhereUniqueInput[]
    disconnect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    delete?: productsWhereUniqueInput | productsWhereUniqueInput[]
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    update?: productsUpdateWithWhereUniqueWithoutCategoryInput | productsUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: productsUpdateManyWithWhereWithoutCategoryInput | productsUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: productsScalarWhereInput | productsScalarWhereInput[]
  }

  export type subCategoryUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<subCategoryCreateWithoutCategoryInput, subCategoryUncheckedCreateWithoutCategoryInput> | subCategoryCreateWithoutCategoryInput[] | subCategoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: subCategoryCreateOrConnectWithoutCategoryInput | subCategoryCreateOrConnectWithoutCategoryInput[]
    upsert?: subCategoryUpsertWithWhereUniqueWithoutCategoryInput | subCategoryUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: subCategoryCreateManyCategoryInputEnvelope
    set?: subCategoryWhereUniqueInput | subCategoryWhereUniqueInput[]
    disconnect?: subCategoryWhereUniqueInput | subCategoryWhereUniqueInput[]
    delete?: subCategoryWhereUniqueInput | subCategoryWhereUniqueInput[]
    connect?: subCategoryWhereUniqueInput | subCategoryWhereUniqueInput[]
    update?: subCategoryUpdateWithWhereUniqueWithoutCategoryInput | subCategoryUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: subCategoryUpdateManyWithWhereWithoutCategoryInput | subCategoryUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: subCategoryScalarWhereInput | subCategoryScalarWhereInput[]
  }

  export type productsUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<productsCreateWithoutCategoryInput, productsUncheckedCreateWithoutCategoryInput> | productsCreateWithoutCategoryInput[] | productsUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: productsCreateOrConnectWithoutCategoryInput | productsCreateOrConnectWithoutCategoryInput[]
    upsert?: productsUpsertWithWhereUniqueWithoutCategoryInput | productsUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: productsCreateManyCategoryInputEnvelope
    set?: productsWhereUniqueInput | productsWhereUniqueInput[]
    disconnect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    delete?: productsWhereUniqueInput | productsWhereUniqueInput[]
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    update?: productsUpdateWithWhereUniqueWithoutCategoryInput | productsUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: productsUpdateManyWithWhereWithoutCategoryInput | productsUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: productsScalarWhereInput | productsScalarWhereInput[]
  }

  export type categoryCreateNestedOneWithoutSubCategoryInput = {
    create?: XOR<categoryCreateWithoutSubCategoryInput, categoryUncheckedCreateWithoutSubCategoryInput>
    connectOrCreate?: categoryCreateOrConnectWithoutSubCategoryInput
    connect?: categoryWhereUniqueInput
  }

  export type optionsCreateNestedManyWithoutSubCategoryInput = {
    create?: XOR<optionsCreateWithoutSubCategoryInput, optionsUncheckedCreateWithoutSubCategoryInput> | optionsCreateWithoutSubCategoryInput[] | optionsUncheckedCreateWithoutSubCategoryInput[]
    connectOrCreate?: optionsCreateOrConnectWithoutSubCategoryInput | optionsCreateOrConnectWithoutSubCategoryInput[]
    createMany?: optionsCreateManySubCategoryInputEnvelope
    connect?: optionsWhereUniqueInput | optionsWhereUniqueInput[]
  }

  export type productsCreateNestedManyWithoutSubCategoryInput = {
    create?: XOR<productsCreateWithoutSubCategoryInput, productsUncheckedCreateWithoutSubCategoryInput> | productsCreateWithoutSubCategoryInput[] | productsUncheckedCreateWithoutSubCategoryInput[]
    connectOrCreate?: productsCreateOrConnectWithoutSubCategoryInput | productsCreateOrConnectWithoutSubCategoryInput[]
    createMany?: productsCreateManySubCategoryInputEnvelope
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
  }

  export type optionsUncheckedCreateNestedManyWithoutSubCategoryInput = {
    create?: XOR<optionsCreateWithoutSubCategoryInput, optionsUncheckedCreateWithoutSubCategoryInput> | optionsCreateWithoutSubCategoryInput[] | optionsUncheckedCreateWithoutSubCategoryInput[]
    connectOrCreate?: optionsCreateOrConnectWithoutSubCategoryInput | optionsCreateOrConnectWithoutSubCategoryInput[]
    createMany?: optionsCreateManySubCategoryInputEnvelope
    connect?: optionsWhereUniqueInput | optionsWhereUniqueInput[]
  }

  export type productsUncheckedCreateNestedManyWithoutSubCategoryInput = {
    create?: XOR<productsCreateWithoutSubCategoryInput, productsUncheckedCreateWithoutSubCategoryInput> | productsCreateWithoutSubCategoryInput[] | productsUncheckedCreateWithoutSubCategoryInput[]
    connectOrCreate?: productsCreateOrConnectWithoutSubCategoryInput | productsCreateOrConnectWithoutSubCategoryInput[]
    createMany?: productsCreateManySubCategoryInputEnvelope
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
  }

  export type categoryUpdateOneWithoutSubCategoryNestedInput = {
    create?: XOR<categoryCreateWithoutSubCategoryInput, categoryUncheckedCreateWithoutSubCategoryInput>
    connectOrCreate?: categoryCreateOrConnectWithoutSubCategoryInput
    upsert?: categoryUpsertWithoutSubCategoryInput
    disconnect?: boolean
    delete?: categoryWhereInput | boolean
    connect?: categoryWhereUniqueInput
    update?: XOR<XOR<categoryUpdateToOneWithWhereWithoutSubCategoryInput, categoryUpdateWithoutSubCategoryInput>, categoryUncheckedUpdateWithoutSubCategoryInput>
  }

  export type optionsUpdateManyWithoutSubCategoryNestedInput = {
    create?: XOR<optionsCreateWithoutSubCategoryInput, optionsUncheckedCreateWithoutSubCategoryInput> | optionsCreateWithoutSubCategoryInput[] | optionsUncheckedCreateWithoutSubCategoryInput[]
    connectOrCreate?: optionsCreateOrConnectWithoutSubCategoryInput | optionsCreateOrConnectWithoutSubCategoryInput[]
    upsert?: optionsUpsertWithWhereUniqueWithoutSubCategoryInput | optionsUpsertWithWhereUniqueWithoutSubCategoryInput[]
    createMany?: optionsCreateManySubCategoryInputEnvelope
    set?: optionsWhereUniqueInput | optionsWhereUniqueInput[]
    disconnect?: optionsWhereUniqueInput | optionsWhereUniqueInput[]
    delete?: optionsWhereUniqueInput | optionsWhereUniqueInput[]
    connect?: optionsWhereUniqueInput | optionsWhereUniqueInput[]
    update?: optionsUpdateWithWhereUniqueWithoutSubCategoryInput | optionsUpdateWithWhereUniqueWithoutSubCategoryInput[]
    updateMany?: optionsUpdateManyWithWhereWithoutSubCategoryInput | optionsUpdateManyWithWhereWithoutSubCategoryInput[]
    deleteMany?: optionsScalarWhereInput | optionsScalarWhereInput[]
  }

  export type productsUpdateManyWithoutSubCategoryNestedInput = {
    create?: XOR<productsCreateWithoutSubCategoryInput, productsUncheckedCreateWithoutSubCategoryInput> | productsCreateWithoutSubCategoryInput[] | productsUncheckedCreateWithoutSubCategoryInput[]
    connectOrCreate?: productsCreateOrConnectWithoutSubCategoryInput | productsCreateOrConnectWithoutSubCategoryInput[]
    upsert?: productsUpsertWithWhereUniqueWithoutSubCategoryInput | productsUpsertWithWhereUniqueWithoutSubCategoryInput[]
    createMany?: productsCreateManySubCategoryInputEnvelope
    set?: productsWhereUniqueInput | productsWhereUniqueInput[]
    disconnect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    delete?: productsWhereUniqueInput | productsWhereUniqueInput[]
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    update?: productsUpdateWithWhereUniqueWithoutSubCategoryInput | productsUpdateWithWhereUniqueWithoutSubCategoryInput[]
    updateMany?: productsUpdateManyWithWhereWithoutSubCategoryInput | productsUpdateManyWithWhereWithoutSubCategoryInput[]
    deleteMany?: productsScalarWhereInput | productsScalarWhereInput[]
  }

  export type optionsUncheckedUpdateManyWithoutSubCategoryNestedInput = {
    create?: XOR<optionsCreateWithoutSubCategoryInput, optionsUncheckedCreateWithoutSubCategoryInput> | optionsCreateWithoutSubCategoryInput[] | optionsUncheckedCreateWithoutSubCategoryInput[]
    connectOrCreate?: optionsCreateOrConnectWithoutSubCategoryInput | optionsCreateOrConnectWithoutSubCategoryInput[]
    upsert?: optionsUpsertWithWhereUniqueWithoutSubCategoryInput | optionsUpsertWithWhereUniqueWithoutSubCategoryInput[]
    createMany?: optionsCreateManySubCategoryInputEnvelope
    set?: optionsWhereUniqueInput | optionsWhereUniqueInput[]
    disconnect?: optionsWhereUniqueInput | optionsWhereUniqueInput[]
    delete?: optionsWhereUniqueInput | optionsWhereUniqueInput[]
    connect?: optionsWhereUniqueInput | optionsWhereUniqueInput[]
    update?: optionsUpdateWithWhereUniqueWithoutSubCategoryInput | optionsUpdateWithWhereUniqueWithoutSubCategoryInput[]
    updateMany?: optionsUpdateManyWithWhereWithoutSubCategoryInput | optionsUpdateManyWithWhereWithoutSubCategoryInput[]
    deleteMany?: optionsScalarWhereInput | optionsScalarWhereInput[]
  }

  export type productsUncheckedUpdateManyWithoutSubCategoryNestedInput = {
    create?: XOR<productsCreateWithoutSubCategoryInput, productsUncheckedCreateWithoutSubCategoryInput> | productsCreateWithoutSubCategoryInput[] | productsUncheckedCreateWithoutSubCategoryInput[]
    connectOrCreate?: productsCreateOrConnectWithoutSubCategoryInput | productsCreateOrConnectWithoutSubCategoryInput[]
    upsert?: productsUpsertWithWhereUniqueWithoutSubCategoryInput | productsUpsertWithWhereUniqueWithoutSubCategoryInput[]
    createMany?: productsCreateManySubCategoryInputEnvelope
    set?: productsWhereUniqueInput | productsWhereUniqueInput[]
    disconnect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    delete?: productsWhereUniqueInput | productsWhereUniqueInput[]
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    update?: productsUpdateWithWhereUniqueWithoutSubCategoryInput | productsUpdateWithWhereUniqueWithoutSubCategoryInput[]
    updateMany?: productsUpdateManyWithWhereWithoutSubCategoryInput | productsUpdateManyWithWhereWithoutSubCategoryInput[]
    deleteMany?: productsScalarWhereInput | productsScalarWhereInput[]
  }

  export type subCategoryCreateNestedOneWithoutOptionsInput = {
    create?: XOR<subCategoryCreateWithoutOptionsInput, subCategoryUncheckedCreateWithoutOptionsInput>
    connectOrCreate?: subCategoryCreateOrConnectWithoutOptionsInput
    connect?: subCategoryWhereUniqueInput
  }

  export type productsCreateNestedManyWithoutOptionInput = {
    create?: XOR<productsCreateWithoutOptionInput, productsUncheckedCreateWithoutOptionInput> | productsCreateWithoutOptionInput[] | productsUncheckedCreateWithoutOptionInput[]
    connectOrCreate?: productsCreateOrConnectWithoutOptionInput | productsCreateOrConnectWithoutOptionInput[]
    createMany?: productsCreateManyOptionInputEnvelope
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
  }

  export type productsUncheckedCreateNestedManyWithoutOptionInput = {
    create?: XOR<productsCreateWithoutOptionInput, productsUncheckedCreateWithoutOptionInput> | productsCreateWithoutOptionInput[] | productsUncheckedCreateWithoutOptionInput[]
    connectOrCreate?: productsCreateOrConnectWithoutOptionInput | productsCreateOrConnectWithoutOptionInput[]
    createMany?: productsCreateManyOptionInputEnvelope
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
  }

  export type subCategoryUpdateOneWithoutOptionsNestedInput = {
    create?: XOR<subCategoryCreateWithoutOptionsInput, subCategoryUncheckedCreateWithoutOptionsInput>
    connectOrCreate?: subCategoryCreateOrConnectWithoutOptionsInput
    upsert?: subCategoryUpsertWithoutOptionsInput
    disconnect?: boolean
    delete?: subCategoryWhereInput | boolean
    connect?: subCategoryWhereUniqueInput
    update?: XOR<XOR<subCategoryUpdateToOneWithWhereWithoutOptionsInput, subCategoryUpdateWithoutOptionsInput>, subCategoryUncheckedUpdateWithoutOptionsInput>
  }

  export type productsUpdateManyWithoutOptionNestedInput = {
    create?: XOR<productsCreateWithoutOptionInput, productsUncheckedCreateWithoutOptionInput> | productsCreateWithoutOptionInput[] | productsUncheckedCreateWithoutOptionInput[]
    connectOrCreate?: productsCreateOrConnectWithoutOptionInput | productsCreateOrConnectWithoutOptionInput[]
    upsert?: productsUpsertWithWhereUniqueWithoutOptionInput | productsUpsertWithWhereUniqueWithoutOptionInput[]
    createMany?: productsCreateManyOptionInputEnvelope
    set?: productsWhereUniqueInput | productsWhereUniqueInput[]
    disconnect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    delete?: productsWhereUniqueInput | productsWhereUniqueInput[]
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    update?: productsUpdateWithWhereUniqueWithoutOptionInput | productsUpdateWithWhereUniqueWithoutOptionInput[]
    updateMany?: productsUpdateManyWithWhereWithoutOptionInput | productsUpdateManyWithWhereWithoutOptionInput[]
    deleteMany?: productsScalarWhereInput | productsScalarWhereInput[]
  }

  export type productsUncheckedUpdateManyWithoutOptionNestedInput = {
    create?: XOR<productsCreateWithoutOptionInput, productsUncheckedCreateWithoutOptionInput> | productsCreateWithoutOptionInput[] | productsUncheckedCreateWithoutOptionInput[]
    connectOrCreate?: productsCreateOrConnectWithoutOptionInput | productsCreateOrConnectWithoutOptionInput[]
    upsert?: productsUpsertWithWhereUniqueWithoutOptionInput | productsUpsertWithWhereUniqueWithoutOptionInput[]
    createMany?: productsCreateManyOptionInputEnvelope
    set?: productsWhereUniqueInput | productsWhereUniqueInput[]
    disconnect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    delete?: productsWhereUniqueInput | productsWhereUniqueInput[]
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    update?: productsUpdateWithWhereUniqueWithoutOptionInput | productsUpdateWithWhereUniqueWithoutOptionInput[]
    updateMany?: productsUpdateManyWithWhereWithoutOptionInput | productsUpdateManyWithWhereWithoutOptionInput[]
    deleteMany?: productsScalarWhereInput | productsScalarWhereInput[]
  }

  export type usersCreateNestedOneWithoutSellerInput = {
    create?: XOR<usersCreateWithoutSellerInput, usersUncheckedCreateWithoutSellerInput>
    connectOrCreate?: usersCreateOrConnectWithoutSellerInput
    connect?: usersWhereUniqueInput
  }

  export type productsCreateNestedManyWithoutSellerInput = {
    create?: XOR<productsCreateWithoutSellerInput, productsUncheckedCreateWithoutSellerInput> | productsCreateWithoutSellerInput[] | productsUncheckedCreateWithoutSellerInput[]
    connectOrCreate?: productsCreateOrConnectWithoutSellerInput | productsCreateOrConnectWithoutSellerInput[]
    createMany?: productsCreateManySellerInputEnvelope
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
  }

  export type productsUncheckedCreateNestedManyWithoutSellerInput = {
    create?: XOR<productsCreateWithoutSellerInput, productsUncheckedCreateWithoutSellerInput> | productsCreateWithoutSellerInput[] | productsUncheckedCreateWithoutSellerInput[]
    connectOrCreate?: productsCreateOrConnectWithoutSellerInput | productsCreateOrConnectWithoutSellerInput[]
    createMany?: productsCreateManySellerInputEnvelope
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
  }

  export type usersUpdateOneWithoutSellerNestedInput = {
    create?: XOR<usersCreateWithoutSellerInput, usersUncheckedCreateWithoutSellerInput>
    connectOrCreate?: usersCreateOrConnectWithoutSellerInput
    upsert?: usersUpsertWithoutSellerInput
    disconnect?: boolean
    delete?: usersWhereInput | boolean
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutSellerInput, usersUpdateWithoutSellerInput>, usersUncheckedUpdateWithoutSellerInput>
  }

  export type productsUpdateManyWithoutSellerNestedInput = {
    create?: XOR<productsCreateWithoutSellerInput, productsUncheckedCreateWithoutSellerInput> | productsCreateWithoutSellerInput[] | productsUncheckedCreateWithoutSellerInput[]
    connectOrCreate?: productsCreateOrConnectWithoutSellerInput | productsCreateOrConnectWithoutSellerInput[]
    upsert?: productsUpsertWithWhereUniqueWithoutSellerInput | productsUpsertWithWhereUniqueWithoutSellerInput[]
    createMany?: productsCreateManySellerInputEnvelope
    set?: productsWhereUniqueInput | productsWhereUniqueInput[]
    disconnect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    delete?: productsWhereUniqueInput | productsWhereUniqueInput[]
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    update?: productsUpdateWithWhereUniqueWithoutSellerInput | productsUpdateWithWhereUniqueWithoutSellerInput[]
    updateMany?: productsUpdateManyWithWhereWithoutSellerInput | productsUpdateManyWithWhereWithoutSellerInput[]
    deleteMany?: productsScalarWhereInput | productsScalarWhereInput[]
  }

  export type productsUncheckedUpdateManyWithoutSellerNestedInput = {
    create?: XOR<productsCreateWithoutSellerInput, productsUncheckedCreateWithoutSellerInput> | productsCreateWithoutSellerInput[] | productsUncheckedCreateWithoutSellerInput[]
    connectOrCreate?: productsCreateOrConnectWithoutSellerInput | productsCreateOrConnectWithoutSellerInput[]
    upsert?: productsUpsertWithWhereUniqueWithoutSellerInput | productsUpsertWithWhereUniqueWithoutSellerInput[]
    createMany?: productsCreateManySellerInputEnvelope
    set?: productsWhereUniqueInput | productsWhereUniqueInput[]
    disconnect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    delete?: productsWhereUniqueInput | productsWhereUniqueInput[]
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    update?: productsUpdateWithWhereUniqueWithoutSellerInput | productsUpdateWithWhereUniqueWithoutSellerInput[]
    updateMany?: productsUpdateManyWithWhereWithoutSellerInput | productsUpdateManyWithWhereWithoutSellerInput[]
    deleteMany?: productsScalarWhereInput | productsScalarWhereInput[]
  }

  export type usersCreateNestedOneWithoutBrandInput = {
    create?: XOR<usersCreateWithoutBrandInput, usersUncheckedCreateWithoutBrandInput>
    connectOrCreate?: usersCreateOrConnectWithoutBrandInput
    connect?: usersWhereUniqueInput
  }

  export type productsCreateNestedManyWithoutBrandInput = {
    create?: XOR<productsCreateWithoutBrandInput, productsUncheckedCreateWithoutBrandInput> | productsCreateWithoutBrandInput[] | productsUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: productsCreateOrConnectWithoutBrandInput | productsCreateOrConnectWithoutBrandInput[]
    createMany?: productsCreateManyBrandInputEnvelope
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
  }

  export type productsUncheckedCreateNestedManyWithoutBrandInput = {
    create?: XOR<productsCreateWithoutBrandInput, productsUncheckedCreateWithoutBrandInput> | productsCreateWithoutBrandInput[] | productsUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: productsCreateOrConnectWithoutBrandInput | productsCreateOrConnectWithoutBrandInput[]
    createMany?: productsCreateManyBrandInputEnvelope
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
  }

  export type usersUpdateOneWithoutBrandNestedInput = {
    create?: XOR<usersCreateWithoutBrandInput, usersUncheckedCreateWithoutBrandInput>
    connectOrCreate?: usersCreateOrConnectWithoutBrandInput
    upsert?: usersUpsertWithoutBrandInput
    disconnect?: boolean
    delete?: usersWhereInput | boolean
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutBrandInput, usersUpdateWithoutBrandInput>, usersUncheckedUpdateWithoutBrandInput>
  }

  export type productsUpdateManyWithoutBrandNestedInput = {
    create?: XOR<productsCreateWithoutBrandInput, productsUncheckedCreateWithoutBrandInput> | productsCreateWithoutBrandInput[] | productsUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: productsCreateOrConnectWithoutBrandInput | productsCreateOrConnectWithoutBrandInput[]
    upsert?: productsUpsertWithWhereUniqueWithoutBrandInput | productsUpsertWithWhereUniqueWithoutBrandInput[]
    createMany?: productsCreateManyBrandInputEnvelope
    set?: productsWhereUniqueInput | productsWhereUniqueInput[]
    disconnect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    delete?: productsWhereUniqueInput | productsWhereUniqueInput[]
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    update?: productsUpdateWithWhereUniqueWithoutBrandInput | productsUpdateWithWhereUniqueWithoutBrandInput[]
    updateMany?: productsUpdateManyWithWhereWithoutBrandInput | productsUpdateManyWithWhereWithoutBrandInput[]
    deleteMany?: productsScalarWhereInput | productsScalarWhereInput[]
  }

  export type productsUncheckedUpdateManyWithoutBrandNestedInput = {
    create?: XOR<productsCreateWithoutBrandInput, productsUncheckedCreateWithoutBrandInput> | productsCreateWithoutBrandInput[] | productsUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: productsCreateOrConnectWithoutBrandInput | productsCreateOrConnectWithoutBrandInput[]
    upsert?: productsUpsertWithWhereUniqueWithoutBrandInput | productsUpsertWithWhereUniqueWithoutBrandInput[]
    createMany?: productsCreateManyBrandInputEnvelope
    set?: productsWhereUniqueInput | productsWhereUniqueInput[]
    disconnect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    delete?: productsWhereUniqueInput | productsWhereUniqueInput[]
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    update?: productsUpdateWithWhereUniqueWithoutBrandInput | productsUpdateWithWhereUniqueWithoutBrandInput[]
    updateMany?: productsUpdateManyWithWhereWithoutBrandInput | productsUpdateManyWithWhereWithoutBrandInput[]
    deleteMany?: productsScalarWhereInput | productsScalarWhereInput[]
  }

  export type offersCreateNestedManyWithoutProductInput = {
    create?: XOR<offersCreateWithoutProductInput, offersUncheckedCreateWithoutProductInput> | offersCreateWithoutProductInput[] | offersUncheckedCreateWithoutProductInput[]
    connectOrCreate?: offersCreateOrConnectWithoutProductInput | offersCreateOrConnectWithoutProductInput[]
    createMany?: offersCreateManyProductInputEnvelope
    connect?: offersWhereUniqueInput | offersWhereUniqueInput[]
  }

  export type coinsCreateNestedManyWithoutProductInput = {
    create?: XOR<coinsCreateWithoutProductInput, coinsUncheckedCreateWithoutProductInput> | coinsCreateWithoutProductInput[] | coinsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: coinsCreateOrConnectWithoutProductInput | coinsCreateOrConnectWithoutProductInput[]
    createMany?: coinsCreateManyProductInputEnvelope
    connect?: coinsWhereUniqueInput | coinsWhereUniqueInput[]
  }

  export type variantsCreateNestedManyWithoutProductInput = {
    create?: XOR<variantsCreateWithoutProductInput, variantsUncheckedCreateWithoutProductInput> | variantsCreateWithoutProductInput[] | variantsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: variantsCreateOrConnectWithoutProductInput | variantsCreateOrConnectWithoutProductInput[]
    createMany?: variantsCreateManyProductInputEnvelope
    connect?: variantsWhereUniqueInput | variantsWhereUniqueInput[]
  }

  export type commentsCreateNestedManyWithoutProductInput = {
    create?: XOR<commentsCreateWithoutProductInput, commentsUncheckedCreateWithoutProductInput> | commentsCreateWithoutProductInput[] | commentsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: commentsCreateOrConnectWithoutProductInput | commentsCreateOrConnectWithoutProductInput[]
    createMany?: commentsCreateManyProductInputEnvelope
    connect?: commentsWhereUniqueInput | commentsWhereUniqueInput[]
  }

  export type reviewsCreateNestedManyWithoutProductInput = {
    create?: XOR<reviewsCreateWithoutProductInput, reviewsUncheckedCreateWithoutProductInput> | reviewsCreateWithoutProductInput[] | reviewsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: reviewsCreateOrConnectWithoutProductInput | reviewsCreateOrConnectWithoutProductInput[]
    createMany?: reviewsCreateManyProductInputEnvelope
    connect?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
  }

  export type sellerCreateNestedOneWithoutProductsInput = {
    create?: XOR<sellerCreateWithoutProductsInput, sellerUncheckedCreateWithoutProductsInput>
    connectOrCreate?: sellerCreateOrConnectWithoutProductsInput
    connect?: sellerWhereUniqueInput
  }

  export type brandsCreateNestedOneWithoutProductsInput = {
    create?: XOR<brandsCreateWithoutProductsInput, brandsUncheckedCreateWithoutProductsInput>
    connectOrCreate?: brandsCreateOrConnectWithoutProductsInput
    connect?: brandsWhereUniqueInput
  }

  export type categoryCreateNestedOneWithoutProductsInput = {
    create?: XOR<categoryCreateWithoutProductsInput, categoryUncheckedCreateWithoutProductsInput>
    connectOrCreate?: categoryCreateOrConnectWithoutProductsInput
    connect?: categoryWhereUniqueInput
  }

  export type subCategoryCreateNestedOneWithoutProductsInput = {
    create?: XOR<subCategoryCreateWithoutProductsInput, subCategoryUncheckedCreateWithoutProductsInput>
    connectOrCreate?: subCategoryCreateOrConnectWithoutProductsInput
    connect?: subCategoryWhereUniqueInput
  }

  export type optionsCreateNestedOneWithoutProductsInput = {
    create?: XOR<optionsCreateWithoutProductsInput, optionsUncheckedCreateWithoutProductsInput>
    connectOrCreate?: optionsCreateOrConnectWithoutProductsInput
    connect?: optionsWhereUniqueInput
  }

  export type usersCreateNestedOneWithoutProductsInput = {
    create?: XOR<usersCreateWithoutProductsInput, usersUncheckedCreateWithoutProductsInput>
    connectOrCreate?: usersCreateOrConnectWithoutProductsInput
    connect?: usersWhereUniqueInput
  }

  export type offersUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<offersCreateWithoutProductInput, offersUncheckedCreateWithoutProductInput> | offersCreateWithoutProductInput[] | offersUncheckedCreateWithoutProductInput[]
    connectOrCreate?: offersCreateOrConnectWithoutProductInput | offersCreateOrConnectWithoutProductInput[]
    createMany?: offersCreateManyProductInputEnvelope
    connect?: offersWhereUniqueInput | offersWhereUniqueInput[]
  }

  export type coinsUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<coinsCreateWithoutProductInput, coinsUncheckedCreateWithoutProductInput> | coinsCreateWithoutProductInput[] | coinsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: coinsCreateOrConnectWithoutProductInput | coinsCreateOrConnectWithoutProductInput[]
    createMany?: coinsCreateManyProductInputEnvelope
    connect?: coinsWhereUniqueInput | coinsWhereUniqueInput[]
  }

  export type variantsUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<variantsCreateWithoutProductInput, variantsUncheckedCreateWithoutProductInput> | variantsCreateWithoutProductInput[] | variantsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: variantsCreateOrConnectWithoutProductInput | variantsCreateOrConnectWithoutProductInput[]
    createMany?: variantsCreateManyProductInputEnvelope
    connect?: variantsWhereUniqueInput | variantsWhereUniqueInput[]
  }

  export type commentsUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<commentsCreateWithoutProductInput, commentsUncheckedCreateWithoutProductInput> | commentsCreateWithoutProductInput[] | commentsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: commentsCreateOrConnectWithoutProductInput | commentsCreateOrConnectWithoutProductInput[]
    createMany?: commentsCreateManyProductInputEnvelope
    connect?: commentsWhereUniqueInput | commentsWhereUniqueInput[]
  }

  export type reviewsUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<reviewsCreateWithoutProductInput, reviewsUncheckedCreateWithoutProductInput> | reviewsCreateWithoutProductInput[] | reviewsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: reviewsCreateOrConnectWithoutProductInput | reviewsCreateOrConnectWithoutProductInput[]
    createMany?: reviewsCreateManyProductInputEnvelope
    connect?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type offersUpdateManyWithoutProductNestedInput = {
    create?: XOR<offersCreateWithoutProductInput, offersUncheckedCreateWithoutProductInput> | offersCreateWithoutProductInput[] | offersUncheckedCreateWithoutProductInput[]
    connectOrCreate?: offersCreateOrConnectWithoutProductInput | offersCreateOrConnectWithoutProductInput[]
    upsert?: offersUpsertWithWhereUniqueWithoutProductInput | offersUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: offersCreateManyProductInputEnvelope
    set?: offersWhereUniqueInput | offersWhereUniqueInput[]
    disconnect?: offersWhereUniqueInput | offersWhereUniqueInput[]
    delete?: offersWhereUniqueInput | offersWhereUniqueInput[]
    connect?: offersWhereUniqueInput | offersWhereUniqueInput[]
    update?: offersUpdateWithWhereUniqueWithoutProductInput | offersUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: offersUpdateManyWithWhereWithoutProductInput | offersUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: offersScalarWhereInput | offersScalarWhereInput[]
  }

  export type coinsUpdateManyWithoutProductNestedInput = {
    create?: XOR<coinsCreateWithoutProductInput, coinsUncheckedCreateWithoutProductInput> | coinsCreateWithoutProductInput[] | coinsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: coinsCreateOrConnectWithoutProductInput | coinsCreateOrConnectWithoutProductInput[]
    upsert?: coinsUpsertWithWhereUniqueWithoutProductInput | coinsUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: coinsCreateManyProductInputEnvelope
    set?: coinsWhereUniqueInput | coinsWhereUniqueInput[]
    disconnect?: coinsWhereUniqueInput | coinsWhereUniqueInput[]
    delete?: coinsWhereUniqueInput | coinsWhereUniqueInput[]
    connect?: coinsWhereUniqueInput | coinsWhereUniqueInput[]
    update?: coinsUpdateWithWhereUniqueWithoutProductInput | coinsUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: coinsUpdateManyWithWhereWithoutProductInput | coinsUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: coinsScalarWhereInput | coinsScalarWhereInput[]
  }

  export type variantsUpdateManyWithoutProductNestedInput = {
    create?: XOR<variantsCreateWithoutProductInput, variantsUncheckedCreateWithoutProductInput> | variantsCreateWithoutProductInput[] | variantsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: variantsCreateOrConnectWithoutProductInput | variantsCreateOrConnectWithoutProductInput[]
    upsert?: variantsUpsertWithWhereUniqueWithoutProductInput | variantsUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: variantsCreateManyProductInputEnvelope
    set?: variantsWhereUniqueInput | variantsWhereUniqueInput[]
    disconnect?: variantsWhereUniqueInput | variantsWhereUniqueInput[]
    delete?: variantsWhereUniqueInput | variantsWhereUniqueInput[]
    connect?: variantsWhereUniqueInput | variantsWhereUniqueInput[]
    update?: variantsUpdateWithWhereUniqueWithoutProductInput | variantsUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: variantsUpdateManyWithWhereWithoutProductInput | variantsUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: variantsScalarWhereInput | variantsScalarWhereInput[]
  }

  export type commentsUpdateManyWithoutProductNestedInput = {
    create?: XOR<commentsCreateWithoutProductInput, commentsUncheckedCreateWithoutProductInput> | commentsCreateWithoutProductInput[] | commentsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: commentsCreateOrConnectWithoutProductInput | commentsCreateOrConnectWithoutProductInput[]
    upsert?: commentsUpsertWithWhereUniqueWithoutProductInput | commentsUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: commentsCreateManyProductInputEnvelope
    set?: commentsWhereUniqueInput | commentsWhereUniqueInput[]
    disconnect?: commentsWhereUniqueInput | commentsWhereUniqueInput[]
    delete?: commentsWhereUniqueInput | commentsWhereUniqueInput[]
    connect?: commentsWhereUniqueInput | commentsWhereUniqueInput[]
    update?: commentsUpdateWithWhereUniqueWithoutProductInput | commentsUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: commentsUpdateManyWithWhereWithoutProductInput | commentsUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: commentsScalarWhereInput | commentsScalarWhereInput[]
  }

  export type reviewsUpdateManyWithoutProductNestedInput = {
    create?: XOR<reviewsCreateWithoutProductInput, reviewsUncheckedCreateWithoutProductInput> | reviewsCreateWithoutProductInput[] | reviewsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: reviewsCreateOrConnectWithoutProductInput | reviewsCreateOrConnectWithoutProductInput[]
    upsert?: reviewsUpsertWithWhereUniqueWithoutProductInput | reviewsUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: reviewsCreateManyProductInputEnvelope
    set?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    disconnect?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    delete?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    connect?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    update?: reviewsUpdateWithWhereUniqueWithoutProductInput | reviewsUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: reviewsUpdateManyWithWhereWithoutProductInput | reviewsUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: reviewsScalarWhereInput | reviewsScalarWhereInput[]
  }

  export type sellerUpdateOneWithoutProductsNestedInput = {
    create?: XOR<sellerCreateWithoutProductsInput, sellerUncheckedCreateWithoutProductsInput>
    connectOrCreate?: sellerCreateOrConnectWithoutProductsInput
    upsert?: sellerUpsertWithoutProductsInput
    disconnect?: boolean
    delete?: sellerWhereInput | boolean
    connect?: sellerWhereUniqueInput
    update?: XOR<XOR<sellerUpdateToOneWithWhereWithoutProductsInput, sellerUpdateWithoutProductsInput>, sellerUncheckedUpdateWithoutProductsInput>
  }

  export type brandsUpdateOneWithoutProductsNestedInput = {
    create?: XOR<brandsCreateWithoutProductsInput, brandsUncheckedCreateWithoutProductsInput>
    connectOrCreate?: brandsCreateOrConnectWithoutProductsInput
    upsert?: brandsUpsertWithoutProductsInput
    disconnect?: boolean
    delete?: brandsWhereInput | boolean
    connect?: brandsWhereUniqueInput
    update?: XOR<XOR<brandsUpdateToOneWithWhereWithoutProductsInput, brandsUpdateWithoutProductsInput>, brandsUncheckedUpdateWithoutProductsInput>
  }

  export type categoryUpdateOneWithoutProductsNestedInput = {
    create?: XOR<categoryCreateWithoutProductsInput, categoryUncheckedCreateWithoutProductsInput>
    connectOrCreate?: categoryCreateOrConnectWithoutProductsInput
    upsert?: categoryUpsertWithoutProductsInput
    disconnect?: boolean
    delete?: categoryWhereInput | boolean
    connect?: categoryWhereUniqueInput
    update?: XOR<XOR<categoryUpdateToOneWithWhereWithoutProductsInput, categoryUpdateWithoutProductsInput>, categoryUncheckedUpdateWithoutProductsInput>
  }

  export type subCategoryUpdateOneWithoutProductsNestedInput = {
    create?: XOR<subCategoryCreateWithoutProductsInput, subCategoryUncheckedCreateWithoutProductsInput>
    connectOrCreate?: subCategoryCreateOrConnectWithoutProductsInput
    upsert?: subCategoryUpsertWithoutProductsInput
    disconnect?: boolean
    delete?: subCategoryWhereInput | boolean
    connect?: subCategoryWhereUniqueInput
    update?: XOR<XOR<subCategoryUpdateToOneWithWhereWithoutProductsInput, subCategoryUpdateWithoutProductsInput>, subCategoryUncheckedUpdateWithoutProductsInput>
  }

  export type optionsUpdateOneWithoutProductsNestedInput = {
    create?: XOR<optionsCreateWithoutProductsInput, optionsUncheckedCreateWithoutProductsInput>
    connectOrCreate?: optionsCreateOrConnectWithoutProductsInput
    upsert?: optionsUpsertWithoutProductsInput
    disconnect?: boolean
    delete?: optionsWhereInput | boolean
    connect?: optionsWhereUniqueInput
    update?: XOR<XOR<optionsUpdateToOneWithWhereWithoutProductsInput, optionsUpdateWithoutProductsInput>, optionsUncheckedUpdateWithoutProductsInput>
  }

  export type usersUpdateOneWithoutProductsNestedInput = {
    create?: XOR<usersCreateWithoutProductsInput, usersUncheckedCreateWithoutProductsInput>
    connectOrCreate?: usersCreateOrConnectWithoutProductsInput
    upsert?: usersUpsertWithoutProductsInput
    disconnect?: boolean
    delete?: usersWhereInput | boolean
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutProductsInput, usersUpdateWithoutProductsInput>, usersUncheckedUpdateWithoutProductsInput>
  }

  export type offersUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<offersCreateWithoutProductInput, offersUncheckedCreateWithoutProductInput> | offersCreateWithoutProductInput[] | offersUncheckedCreateWithoutProductInput[]
    connectOrCreate?: offersCreateOrConnectWithoutProductInput | offersCreateOrConnectWithoutProductInput[]
    upsert?: offersUpsertWithWhereUniqueWithoutProductInput | offersUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: offersCreateManyProductInputEnvelope
    set?: offersWhereUniqueInput | offersWhereUniqueInput[]
    disconnect?: offersWhereUniqueInput | offersWhereUniqueInput[]
    delete?: offersWhereUniqueInput | offersWhereUniqueInput[]
    connect?: offersWhereUniqueInput | offersWhereUniqueInput[]
    update?: offersUpdateWithWhereUniqueWithoutProductInput | offersUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: offersUpdateManyWithWhereWithoutProductInput | offersUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: offersScalarWhereInput | offersScalarWhereInput[]
  }

  export type coinsUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<coinsCreateWithoutProductInput, coinsUncheckedCreateWithoutProductInput> | coinsCreateWithoutProductInput[] | coinsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: coinsCreateOrConnectWithoutProductInput | coinsCreateOrConnectWithoutProductInput[]
    upsert?: coinsUpsertWithWhereUniqueWithoutProductInput | coinsUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: coinsCreateManyProductInputEnvelope
    set?: coinsWhereUniqueInput | coinsWhereUniqueInput[]
    disconnect?: coinsWhereUniqueInput | coinsWhereUniqueInput[]
    delete?: coinsWhereUniqueInput | coinsWhereUniqueInput[]
    connect?: coinsWhereUniqueInput | coinsWhereUniqueInput[]
    update?: coinsUpdateWithWhereUniqueWithoutProductInput | coinsUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: coinsUpdateManyWithWhereWithoutProductInput | coinsUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: coinsScalarWhereInput | coinsScalarWhereInput[]
  }

  export type variantsUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<variantsCreateWithoutProductInput, variantsUncheckedCreateWithoutProductInput> | variantsCreateWithoutProductInput[] | variantsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: variantsCreateOrConnectWithoutProductInput | variantsCreateOrConnectWithoutProductInput[]
    upsert?: variantsUpsertWithWhereUniqueWithoutProductInput | variantsUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: variantsCreateManyProductInputEnvelope
    set?: variantsWhereUniqueInput | variantsWhereUniqueInput[]
    disconnect?: variantsWhereUniqueInput | variantsWhereUniqueInput[]
    delete?: variantsWhereUniqueInput | variantsWhereUniqueInput[]
    connect?: variantsWhereUniqueInput | variantsWhereUniqueInput[]
    update?: variantsUpdateWithWhereUniqueWithoutProductInput | variantsUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: variantsUpdateManyWithWhereWithoutProductInput | variantsUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: variantsScalarWhereInput | variantsScalarWhereInput[]
  }

  export type commentsUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<commentsCreateWithoutProductInput, commentsUncheckedCreateWithoutProductInput> | commentsCreateWithoutProductInput[] | commentsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: commentsCreateOrConnectWithoutProductInput | commentsCreateOrConnectWithoutProductInput[]
    upsert?: commentsUpsertWithWhereUniqueWithoutProductInput | commentsUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: commentsCreateManyProductInputEnvelope
    set?: commentsWhereUniqueInput | commentsWhereUniqueInput[]
    disconnect?: commentsWhereUniqueInput | commentsWhereUniqueInput[]
    delete?: commentsWhereUniqueInput | commentsWhereUniqueInput[]
    connect?: commentsWhereUniqueInput | commentsWhereUniqueInput[]
    update?: commentsUpdateWithWhereUniqueWithoutProductInput | commentsUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: commentsUpdateManyWithWhereWithoutProductInput | commentsUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: commentsScalarWhereInput | commentsScalarWhereInput[]
  }

  export type reviewsUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<reviewsCreateWithoutProductInput, reviewsUncheckedCreateWithoutProductInput> | reviewsCreateWithoutProductInput[] | reviewsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: reviewsCreateOrConnectWithoutProductInput | reviewsCreateOrConnectWithoutProductInput[]
    upsert?: reviewsUpsertWithWhereUniqueWithoutProductInput | reviewsUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: reviewsCreateManyProductInputEnvelope
    set?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    disconnect?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    delete?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    connect?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    update?: reviewsUpdateWithWhereUniqueWithoutProductInput | reviewsUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: reviewsUpdateManyWithWhereWithoutProductInput | reviewsUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: reviewsScalarWhereInput | reviewsScalarWhereInput[]
  }

  export type productsCreateNestedOneWithoutOffersInput = {
    create?: XOR<productsCreateWithoutOffersInput, productsUncheckedCreateWithoutOffersInput>
    connectOrCreate?: productsCreateOrConnectWithoutOffersInput
    connect?: productsWhereUniqueInput
  }

  export type productsUpdateOneWithoutOffersNestedInput = {
    create?: XOR<productsCreateWithoutOffersInput, productsUncheckedCreateWithoutOffersInput>
    connectOrCreate?: productsCreateOrConnectWithoutOffersInput
    upsert?: productsUpsertWithoutOffersInput
    disconnect?: boolean
    delete?: productsWhereInput | boolean
    connect?: productsWhereUniqueInput
    update?: XOR<XOR<productsUpdateToOneWithWhereWithoutOffersInput, productsUpdateWithoutOffersInput>, productsUncheckedUpdateWithoutOffersInput>
  }

  export type productsCreateNestedOneWithoutCoinsInput = {
    create?: XOR<productsCreateWithoutCoinsInput, productsUncheckedCreateWithoutCoinsInput>
    connectOrCreate?: productsCreateOrConnectWithoutCoinsInput
    connect?: productsWhereUniqueInput
  }

  export type productsUpdateOneWithoutCoinsNestedInput = {
    create?: XOR<productsCreateWithoutCoinsInput, productsUncheckedCreateWithoutCoinsInput>
    connectOrCreate?: productsCreateOrConnectWithoutCoinsInput
    upsert?: productsUpsertWithoutCoinsInput
    disconnect?: boolean
    delete?: productsWhereInput | boolean
    connect?: productsWhereUniqueInput
    update?: XOR<XOR<productsUpdateToOneWithWhereWithoutCoinsInput, productsUpdateWithoutCoinsInput>, productsUncheckedUpdateWithoutCoinsInput>
  }

  export type productsCreateNestedOneWithoutVariantsInput = {
    create?: XOR<productsCreateWithoutVariantsInput, productsUncheckedCreateWithoutVariantsInput>
    connectOrCreate?: productsCreateOrConnectWithoutVariantsInput
    connect?: productsWhereUniqueInput
  }

  export type productsUpdateOneWithoutVariantsNestedInput = {
    create?: XOR<productsCreateWithoutVariantsInput, productsUncheckedCreateWithoutVariantsInput>
    connectOrCreate?: productsCreateOrConnectWithoutVariantsInput
    upsert?: productsUpsertWithoutVariantsInput
    disconnect?: boolean
    delete?: productsWhereInput | boolean
    connect?: productsWhereUniqueInput
    update?: XOR<XOR<productsUpdateToOneWithWhereWithoutVariantsInput, productsUpdateWithoutVariantsInput>, productsUncheckedUpdateWithoutVariantsInput>
  }

  export type usersCreateNestedOneWithoutCommentsInput = {
    create?: XOR<usersCreateWithoutCommentsInput, usersUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: usersCreateOrConnectWithoutCommentsInput
    connect?: usersWhereUniqueInput
  }

  export type productsCreateNestedOneWithoutCommentsInput = {
    create?: XOR<productsCreateWithoutCommentsInput, productsUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: productsCreateOrConnectWithoutCommentsInput
    connect?: productsWhereUniqueInput
  }

  export type notificationsCreateNestedManyWithoutCommentsInput = {
    create?: XOR<notificationsCreateWithoutCommentsInput, notificationsUncheckedCreateWithoutCommentsInput> | notificationsCreateWithoutCommentsInput[] | notificationsUncheckedCreateWithoutCommentsInput[]
    connectOrCreate?: notificationsCreateOrConnectWithoutCommentsInput | notificationsCreateOrConnectWithoutCommentsInput[]
    createMany?: notificationsCreateManyCommentsInputEnvelope
    connect?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
  }

  export type notificationsUncheckedCreateNestedManyWithoutCommentsInput = {
    create?: XOR<notificationsCreateWithoutCommentsInput, notificationsUncheckedCreateWithoutCommentsInput> | notificationsCreateWithoutCommentsInput[] | notificationsUncheckedCreateWithoutCommentsInput[]
    connectOrCreate?: notificationsCreateOrConnectWithoutCommentsInput | notificationsCreateOrConnectWithoutCommentsInput[]
    createMany?: notificationsCreateManyCommentsInputEnvelope
    connect?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
  }

  export type usersUpdateOneWithoutCommentsNestedInput = {
    create?: XOR<usersCreateWithoutCommentsInput, usersUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: usersCreateOrConnectWithoutCommentsInput
    upsert?: usersUpsertWithoutCommentsInput
    disconnect?: boolean
    delete?: usersWhereInput | boolean
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutCommentsInput, usersUpdateWithoutCommentsInput>, usersUncheckedUpdateWithoutCommentsInput>
  }

  export type productsUpdateOneWithoutCommentsNestedInput = {
    create?: XOR<productsCreateWithoutCommentsInput, productsUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: productsCreateOrConnectWithoutCommentsInput
    upsert?: productsUpsertWithoutCommentsInput
    disconnect?: boolean
    delete?: productsWhereInput | boolean
    connect?: productsWhereUniqueInput
    update?: XOR<XOR<productsUpdateToOneWithWhereWithoutCommentsInput, productsUpdateWithoutCommentsInput>, productsUncheckedUpdateWithoutCommentsInput>
  }

  export type notificationsUpdateManyWithoutCommentsNestedInput = {
    create?: XOR<notificationsCreateWithoutCommentsInput, notificationsUncheckedCreateWithoutCommentsInput> | notificationsCreateWithoutCommentsInput[] | notificationsUncheckedCreateWithoutCommentsInput[]
    connectOrCreate?: notificationsCreateOrConnectWithoutCommentsInput | notificationsCreateOrConnectWithoutCommentsInput[]
    upsert?: notificationsUpsertWithWhereUniqueWithoutCommentsInput | notificationsUpsertWithWhereUniqueWithoutCommentsInput[]
    createMany?: notificationsCreateManyCommentsInputEnvelope
    set?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    disconnect?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    delete?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    connect?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    update?: notificationsUpdateWithWhereUniqueWithoutCommentsInput | notificationsUpdateWithWhereUniqueWithoutCommentsInput[]
    updateMany?: notificationsUpdateManyWithWhereWithoutCommentsInput | notificationsUpdateManyWithWhereWithoutCommentsInput[]
    deleteMany?: notificationsScalarWhereInput | notificationsScalarWhereInput[]
  }

  export type notificationsUncheckedUpdateManyWithoutCommentsNestedInput = {
    create?: XOR<notificationsCreateWithoutCommentsInput, notificationsUncheckedCreateWithoutCommentsInput> | notificationsCreateWithoutCommentsInput[] | notificationsUncheckedCreateWithoutCommentsInput[]
    connectOrCreate?: notificationsCreateOrConnectWithoutCommentsInput | notificationsCreateOrConnectWithoutCommentsInput[]
    upsert?: notificationsUpsertWithWhereUniqueWithoutCommentsInput | notificationsUpsertWithWhereUniqueWithoutCommentsInput[]
    createMany?: notificationsCreateManyCommentsInputEnvelope
    set?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    disconnect?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    delete?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    connect?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    update?: notificationsUpdateWithWhereUniqueWithoutCommentsInput | notificationsUpdateWithWhereUniqueWithoutCommentsInput[]
    updateMany?: notificationsUpdateManyWithWhereWithoutCommentsInput | notificationsUpdateManyWithWhereWithoutCommentsInput[]
    deleteMany?: notificationsScalarWhereInput | notificationsScalarWhereInput[]
  }

  export type usersCreateNestedOneWithoutReviewsInput = {
    create?: XOR<usersCreateWithoutReviewsInput, usersUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: usersCreateOrConnectWithoutReviewsInput
    connect?: usersWhereUniqueInput
  }

  export type productsCreateNestedOneWithoutReviewsInput = {
    create?: XOR<productsCreateWithoutReviewsInput, productsUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: productsCreateOrConnectWithoutReviewsInput
    connect?: productsWhereUniqueInput
  }

  export type notificationsCreateNestedManyWithoutReviewsInput = {
    create?: XOR<notificationsCreateWithoutReviewsInput, notificationsUncheckedCreateWithoutReviewsInput> | notificationsCreateWithoutReviewsInput[] | notificationsUncheckedCreateWithoutReviewsInput[]
    connectOrCreate?: notificationsCreateOrConnectWithoutReviewsInput | notificationsCreateOrConnectWithoutReviewsInput[]
    createMany?: notificationsCreateManyReviewsInputEnvelope
    connect?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
  }

  export type notificationsUncheckedCreateNestedManyWithoutReviewsInput = {
    create?: XOR<notificationsCreateWithoutReviewsInput, notificationsUncheckedCreateWithoutReviewsInput> | notificationsCreateWithoutReviewsInput[] | notificationsUncheckedCreateWithoutReviewsInput[]
    connectOrCreate?: notificationsCreateOrConnectWithoutReviewsInput | notificationsCreateOrConnectWithoutReviewsInput[]
    createMany?: notificationsCreateManyReviewsInputEnvelope
    connect?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
  }

  export type usersUpdateOneWithoutReviewsNestedInput = {
    create?: XOR<usersCreateWithoutReviewsInput, usersUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: usersCreateOrConnectWithoutReviewsInput
    upsert?: usersUpsertWithoutReviewsInput
    disconnect?: boolean
    delete?: usersWhereInput | boolean
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutReviewsInput, usersUpdateWithoutReviewsInput>, usersUncheckedUpdateWithoutReviewsInput>
  }

  export type productsUpdateOneWithoutReviewsNestedInput = {
    create?: XOR<productsCreateWithoutReviewsInput, productsUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: productsCreateOrConnectWithoutReviewsInput
    upsert?: productsUpsertWithoutReviewsInput
    disconnect?: boolean
    delete?: productsWhereInput | boolean
    connect?: productsWhereUniqueInput
    update?: XOR<XOR<productsUpdateToOneWithWhereWithoutReviewsInput, productsUpdateWithoutReviewsInput>, productsUncheckedUpdateWithoutReviewsInput>
  }

  export type notificationsUpdateManyWithoutReviewsNestedInput = {
    create?: XOR<notificationsCreateWithoutReviewsInput, notificationsUncheckedCreateWithoutReviewsInput> | notificationsCreateWithoutReviewsInput[] | notificationsUncheckedCreateWithoutReviewsInput[]
    connectOrCreate?: notificationsCreateOrConnectWithoutReviewsInput | notificationsCreateOrConnectWithoutReviewsInput[]
    upsert?: notificationsUpsertWithWhereUniqueWithoutReviewsInput | notificationsUpsertWithWhereUniqueWithoutReviewsInput[]
    createMany?: notificationsCreateManyReviewsInputEnvelope
    set?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    disconnect?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    delete?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    connect?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    update?: notificationsUpdateWithWhereUniqueWithoutReviewsInput | notificationsUpdateWithWhereUniqueWithoutReviewsInput[]
    updateMany?: notificationsUpdateManyWithWhereWithoutReviewsInput | notificationsUpdateManyWithWhereWithoutReviewsInput[]
    deleteMany?: notificationsScalarWhereInput | notificationsScalarWhereInput[]
  }

  export type notificationsUncheckedUpdateManyWithoutReviewsNestedInput = {
    create?: XOR<notificationsCreateWithoutReviewsInput, notificationsUncheckedCreateWithoutReviewsInput> | notificationsCreateWithoutReviewsInput[] | notificationsUncheckedCreateWithoutReviewsInput[]
    connectOrCreate?: notificationsCreateOrConnectWithoutReviewsInput | notificationsCreateOrConnectWithoutReviewsInput[]
    upsert?: notificationsUpsertWithWhereUniqueWithoutReviewsInput | notificationsUpsertWithWhereUniqueWithoutReviewsInput[]
    createMany?: notificationsCreateManyReviewsInputEnvelope
    set?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    disconnect?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    delete?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    connect?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    update?: notificationsUpdateWithWhereUniqueWithoutReviewsInput | notificationsUpdateWithWhereUniqueWithoutReviewsInput[]
    updateMany?: notificationsUpdateManyWithWhereWithoutReviewsInput | notificationsUpdateManyWithWhereWithoutReviewsInput[]
    deleteMany?: notificationsScalarWhereInput | notificationsScalarWhereInput[]
  }

  export type usersCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<usersCreateWithoutNotificationsInput, usersUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: usersCreateOrConnectWithoutNotificationsInput
    connect?: usersWhereUniqueInput
  }

  export type commentsCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<commentsCreateWithoutNotificationsInput, commentsUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: commentsCreateOrConnectWithoutNotificationsInput
    connect?: commentsWhereUniqueInput
  }

  export type reviewsCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<reviewsCreateWithoutNotificationsInput, reviewsUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: reviewsCreateOrConnectWithoutNotificationsInput
    connect?: reviewsWhereUniqueInput
  }

  export type usersUpdateOneWithoutNotificationsNestedInput = {
    create?: XOR<usersCreateWithoutNotificationsInput, usersUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: usersCreateOrConnectWithoutNotificationsInput
    upsert?: usersUpsertWithoutNotificationsInput
    disconnect?: boolean
    delete?: usersWhereInput | boolean
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutNotificationsInput, usersUpdateWithoutNotificationsInput>, usersUncheckedUpdateWithoutNotificationsInput>
  }

  export type commentsUpdateOneWithoutNotificationsNestedInput = {
    create?: XOR<commentsCreateWithoutNotificationsInput, commentsUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: commentsCreateOrConnectWithoutNotificationsInput
    upsert?: commentsUpsertWithoutNotificationsInput
    disconnect?: boolean
    delete?: commentsWhereInput | boolean
    connect?: commentsWhereUniqueInput
    update?: XOR<XOR<commentsUpdateToOneWithWhereWithoutNotificationsInput, commentsUpdateWithoutNotificationsInput>, commentsUncheckedUpdateWithoutNotificationsInput>
  }

  export type reviewsUpdateOneWithoutNotificationsNestedInput = {
    create?: XOR<reviewsCreateWithoutNotificationsInput, reviewsUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: reviewsCreateOrConnectWithoutNotificationsInput
    upsert?: reviewsUpsertWithoutNotificationsInput
    disconnect?: boolean
    delete?: reviewsWhereInput | boolean
    connect?: reviewsWhereUniqueInput
    update?: XOR<XOR<reviewsUpdateToOneWithWhereWithoutNotificationsInput, reviewsUpdateWithoutNotificationsInput>, reviewsUncheckedUpdateWithoutNotificationsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
    isSet?: boolean
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
    isSet?: boolean
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    isSet?: boolean
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type sellerCreateWithoutUserInput = {
    id?: string
    shopName: string
    shopAddress: string
    products?: productsCreateNestedManyWithoutSellerInput
  }

  export type sellerUncheckedCreateWithoutUserInput = {
    id?: string
    shopName: string
    shopAddress: string
    products?: productsUncheckedCreateNestedManyWithoutSellerInput
  }

  export type sellerCreateOrConnectWithoutUserInput = {
    where: sellerWhereUniqueInput
    create: XOR<sellerCreateWithoutUserInput, sellerUncheckedCreateWithoutUserInput>
  }

  export type sellerCreateManyUserInputEnvelope = {
    data: sellerCreateManyUserInput | sellerCreateManyUserInput[]
  }

  export type brandsCreateWithoutUserInput = {
    id?: string
    brandName: string
    brandAddress: string
    brandIcon: string
    products?: productsCreateNestedManyWithoutBrandInput
  }

  export type brandsUncheckedCreateWithoutUserInput = {
    id?: string
    brandName: string
    brandAddress: string
    brandIcon: string
    products?: productsUncheckedCreateNestedManyWithoutBrandInput
  }

  export type brandsCreateOrConnectWithoutUserInput = {
    where: brandsWhereUniqueInput
    create: XOR<brandsCreateWithoutUserInput, brandsUncheckedCreateWithoutUserInput>
  }

  export type brandsCreateManyUserInputEnvelope = {
    data: brandsCreateManyUserInput | brandsCreateManyUserInput[]
  }

  export type productsCreateWithoutUserInput = {
    id?: string
    price: number
    title: string
    description: string
    thumbnail: string
    verified?: boolean
    offers?: offersCreateNestedManyWithoutProductInput
    coins?: coinsCreateNestedManyWithoutProductInput
    variants?: variantsCreateNestedManyWithoutProductInput
    comments?: commentsCreateNestedManyWithoutProductInput
    reviews?: reviewsCreateNestedManyWithoutProductInput
    seller?: sellerCreateNestedOneWithoutProductsInput
    brand?: brandsCreateNestedOneWithoutProductsInput
    category?: categoryCreateNestedOneWithoutProductsInput
    subCategory?: subCategoryCreateNestedOneWithoutProductsInput
    option?: optionsCreateNestedOneWithoutProductsInput
  }

  export type productsUncheckedCreateWithoutUserInput = {
    id?: string
    price: number
    title: string
    description: string
    thumbnail: string
    verified?: boolean
    sellerId?: string | null
    brandId?: string | null
    categoryId: string
    subCategoryId: string
    optionId: string
    offers?: offersUncheckedCreateNestedManyWithoutProductInput
    coins?: coinsUncheckedCreateNestedManyWithoutProductInput
    variants?: variantsUncheckedCreateNestedManyWithoutProductInput
    comments?: commentsUncheckedCreateNestedManyWithoutProductInput
    reviews?: reviewsUncheckedCreateNestedManyWithoutProductInput
  }

  export type productsCreateOrConnectWithoutUserInput = {
    where: productsWhereUniqueInput
    create: XOR<productsCreateWithoutUserInput, productsUncheckedCreateWithoutUserInput>
  }

  export type productsCreateManyUserInputEnvelope = {
    data: productsCreateManyUserInput | productsCreateManyUserInput[]
  }

  export type commentsCreateWithoutUserInput = {
    id?: string
    message: string
    replay: string
    product?: productsCreateNestedOneWithoutCommentsInput
    notifications?: notificationsCreateNestedManyWithoutCommentsInput
  }

  export type commentsUncheckedCreateWithoutUserInput = {
    id?: string
    message: string
    replay: string
    productId: string
    notifications?: notificationsUncheckedCreateNestedManyWithoutCommentsInput
  }

  export type commentsCreateOrConnectWithoutUserInput = {
    where: commentsWhereUniqueInput
    create: XOR<commentsCreateWithoutUserInput, commentsUncheckedCreateWithoutUserInput>
  }

  export type commentsCreateManyUserInputEnvelope = {
    data: commentsCreateManyUserInput | commentsCreateManyUserInput[]
  }

  export type reviewsCreateWithoutUserInput = {
    id?: string
    message: string
    rate?: number
    replay: string
    product?: productsCreateNestedOneWithoutReviewsInput
    notifications?: notificationsCreateNestedManyWithoutReviewsInput
  }

  export type reviewsUncheckedCreateWithoutUserInput = {
    id?: string
    message: string
    rate?: number
    replay: string
    productId: string
    notifications?: notificationsUncheckedCreateNestedManyWithoutReviewsInput
  }

  export type reviewsCreateOrConnectWithoutUserInput = {
    where: reviewsWhereUniqueInput
    create: XOR<reviewsCreateWithoutUserInput, reviewsUncheckedCreateWithoutUserInput>
  }

  export type reviewsCreateManyUserInputEnvelope = {
    data: reviewsCreateManyUserInput | reviewsCreateManyUserInput[]
  }

  export type notificationsCreateWithoutUserInput = {
    id?: string
    message: string
    title: string
    comments?: commentsCreateNestedOneWithoutNotificationsInput
    reviews?: reviewsCreateNestedOneWithoutNotificationsInput
  }

  export type notificationsUncheckedCreateWithoutUserInput = {
    id?: string
    message: string
    title: string
    commentId: string
    reviewId: string
  }

  export type notificationsCreateOrConnectWithoutUserInput = {
    where: notificationsWhereUniqueInput
    create: XOR<notificationsCreateWithoutUserInput, notificationsUncheckedCreateWithoutUserInput>
  }

  export type notificationsCreateManyUserInputEnvelope = {
    data: notificationsCreateManyUserInput | notificationsCreateManyUserInput[]
  }

  export type sellerUpsertWithWhereUniqueWithoutUserInput = {
    where: sellerWhereUniqueInput
    update: XOR<sellerUpdateWithoutUserInput, sellerUncheckedUpdateWithoutUserInput>
    create: XOR<sellerCreateWithoutUserInput, sellerUncheckedCreateWithoutUserInput>
  }

  export type sellerUpdateWithWhereUniqueWithoutUserInput = {
    where: sellerWhereUniqueInput
    data: XOR<sellerUpdateWithoutUserInput, sellerUncheckedUpdateWithoutUserInput>
  }

  export type sellerUpdateManyWithWhereWithoutUserInput = {
    where: sellerScalarWhereInput
    data: XOR<sellerUpdateManyMutationInput, sellerUncheckedUpdateManyWithoutUserInput>
  }

  export type sellerScalarWhereInput = {
    AND?: sellerScalarWhereInput | sellerScalarWhereInput[]
    OR?: sellerScalarWhereInput[]
    NOT?: sellerScalarWhereInput | sellerScalarWhereInput[]
    id?: StringFilter<"seller"> | string
    userId?: StringFilter<"seller"> | string
    shopName?: StringFilter<"seller"> | string
    shopAddress?: StringFilter<"seller"> | string
  }

  export type brandsUpsertWithWhereUniqueWithoutUserInput = {
    where: brandsWhereUniqueInput
    update: XOR<brandsUpdateWithoutUserInput, brandsUncheckedUpdateWithoutUserInput>
    create: XOR<brandsCreateWithoutUserInput, brandsUncheckedCreateWithoutUserInput>
  }

  export type brandsUpdateWithWhereUniqueWithoutUserInput = {
    where: brandsWhereUniqueInput
    data: XOR<brandsUpdateWithoutUserInput, brandsUncheckedUpdateWithoutUserInput>
  }

  export type brandsUpdateManyWithWhereWithoutUserInput = {
    where: brandsScalarWhereInput
    data: XOR<brandsUpdateManyMutationInput, brandsUncheckedUpdateManyWithoutUserInput>
  }

  export type brandsScalarWhereInput = {
    AND?: brandsScalarWhereInput | brandsScalarWhereInput[]
    OR?: brandsScalarWhereInput[]
    NOT?: brandsScalarWhereInput | brandsScalarWhereInput[]
    id?: StringFilter<"brands"> | string
    userId?: StringFilter<"brands"> | string
    brandName?: StringFilter<"brands"> | string
    brandAddress?: StringFilter<"brands"> | string
    brandIcon?: StringFilter<"brands"> | string
  }

  export type productsUpsertWithWhereUniqueWithoutUserInput = {
    where: productsWhereUniqueInput
    update: XOR<productsUpdateWithoutUserInput, productsUncheckedUpdateWithoutUserInput>
    create: XOR<productsCreateWithoutUserInput, productsUncheckedCreateWithoutUserInput>
  }

  export type productsUpdateWithWhereUniqueWithoutUserInput = {
    where: productsWhereUniqueInput
    data: XOR<productsUpdateWithoutUserInput, productsUncheckedUpdateWithoutUserInput>
  }

  export type productsUpdateManyWithWhereWithoutUserInput = {
    where: productsScalarWhereInput
    data: XOR<productsUpdateManyMutationInput, productsUncheckedUpdateManyWithoutUserInput>
  }

  export type productsScalarWhereInput = {
    AND?: productsScalarWhereInput | productsScalarWhereInput[]
    OR?: productsScalarWhereInput[]
    NOT?: productsScalarWhereInput | productsScalarWhereInput[]
    id?: StringFilter<"products"> | string
    price?: IntFilter<"products"> | number
    title?: StringFilter<"products"> | string
    description?: StringFilter<"products"> | string
    thumbnail?: StringFilter<"products"> | string
    verified?: BoolFilter<"products"> | boolean
    sellerId?: StringNullableFilter<"products"> | string | null
    brandId?: StringNullableFilter<"products"> | string | null
    categoryId?: StringFilter<"products"> | string
    subCategoryId?: StringFilter<"products"> | string
    optionId?: StringFilter<"products"> | string
    userId?: StringFilter<"products"> | string
  }

  export type commentsUpsertWithWhereUniqueWithoutUserInput = {
    where: commentsWhereUniqueInput
    update: XOR<commentsUpdateWithoutUserInput, commentsUncheckedUpdateWithoutUserInput>
    create: XOR<commentsCreateWithoutUserInput, commentsUncheckedCreateWithoutUserInput>
  }

  export type commentsUpdateWithWhereUniqueWithoutUserInput = {
    where: commentsWhereUniqueInput
    data: XOR<commentsUpdateWithoutUserInput, commentsUncheckedUpdateWithoutUserInput>
  }

  export type commentsUpdateManyWithWhereWithoutUserInput = {
    where: commentsScalarWhereInput
    data: XOR<commentsUpdateManyMutationInput, commentsUncheckedUpdateManyWithoutUserInput>
  }

  export type commentsScalarWhereInput = {
    AND?: commentsScalarWhereInput | commentsScalarWhereInput[]
    OR?: commentsScalarWhereInput[]
    NOT?: commentsScalarWhereInput | commentsScalarWhereInput[]
    id?: StringFilter<"comments"> | string
    message?: StringFilter<"comments"> | string
    replay?: StringFilter<"comments"> | string
    userId?: StringFilter<"comments"> | string
    productId?: StringFilter<"comments"> | string
  }

  export type reviewsUpsertWithWhereUniqueWithoutUserInput = {
    where: reviewsWhereUniqueInput
    update: XOR<reviewsUpdateWithoutUserInput, reviewsUncheckedUpdateWithoutUserInput>
    create: XOR<reviewsCreateWithoutUserInput, reviewsUncheckedCreateWithoutUserInput>
  }

  export type reviewsUpdateWithWhereUniqueWithoutUserInput = {
    where: reviewsWhereUniqueInput
    data: XOR<reviewsUpdateWithoutUserInput, reviewsUncheckedUpdateWithoutUserInput>
  }

  export type reviewsUpdateManyWithWhereWithoutUserInput = {
    where: reviewsScalarWhereInput
    data: XOR<reviewsUpdateManyMutationInput, reviewsUncheckedUpdateManyWithoutUserInput>
  }

  export type reviewsScalarWhereInput = {
    AND?: reviewsScalarWhereInput | reviewsScalarWhereInput[]
    OR?: reviewsScalarWhereInput[]
    NOT?: reviewsScalarWhereInput | reviewsScalarWhereInput[]
    id?: StringFilter<"reviews"> | string
    message?: StringFilter<"reviews"> | string
    rate?: IntFilter<"reviews"> | number
    replay?: StringFilter<"reviews"> | string
    userId?: StringFilter<"reviews"> | string
    productId?: StringFilter<"reviews"> | string
  }

  export type notificationsUpsertWithWhereUniqueWithoutUserInput = {
    where: notificationsWhereUniqueInput
    update: XOR<notificationsUpdateWithoutUserInput, notificationsUncheckedUpdateWithoutUserInput>
    create: XOR<notificationsCreateWithoutUserInput, notificationsUncheckedCreateWithoutUserInput>
  }

  export type notificationsUpdateWithWhereUniqueWithoutUserInput = {
    where: notificationsWhereUniqueInput
    data: XOR<notificationsUpdateWithoutUserInput, notificationsUncheckedUpdateWithoutUserInput>
  }

  export type notificationsUpdateManyWithWhereWithoutUserInput = {
    where: notificationsScalarWhereInput
    data: XOR<notificationsUpdateManyMutationInput, notificationsUncheckedUpdateManyWithoutUserInput>
  }

  export type notificationsScalarWhereInput = {
    AND?: notificationsScalarWhereInput | notificationsScalarWhereInput[]
    OR?: notificationsScalarWhereInput[]
    NOT?: notificationsScalarWhereInput | notificationsScalarWhereInput[]
    id?: StringFilter<"notifications"> | string
    message?: StringFilter<"notifications"> | string
    title?: StringFilter<"notifications"> | string
    userId?: StringFilter<"notifications"> | string
    commentId?: StringFilter<"notifications"> | string
    reviewId?: StringFilter<"notifications"> | string
  }

  export type subCategoryCreateWithoutCategoryInput = {
    id?: string
    name: string
    options?: optionsCreateNestedManyWithoutSubCategoryInput
    products?: productsCreateNestedManyWithoutSubCategoryInput
  }

  export type subCategoryUncheckedCreateWithoutCategoryInput = {
    id?: string
    name: string
    options?: optionsUncheckedCreateNestedManyWithoutSubCategoryInput
    products?: productsUncheckedCreateNestedManyWithoutSubCategoryInput
  }

  export type subCategoryCreateOrConnectWithoutCategoryInput = {
    where: subCategoryWhereUniqueInput
    create: XOR<subCategoryCreateWithoutCategoryInput, subCategoryUncheckedCreateWithoutCategoryInput>
  }

  export type subCategoryCreateManyCategoryInputEnvelope = {
    data: subCategoryCreateManyCategoryInput | subCategoryCreateManyCategoryInput[]
  }

  export type productsCreateWithoutCategoryInput = {
    id?: string
    price: number
    title: string
    description: string
    thumbnail: string
    verified?: boolean
    offers?: offersCreateNestedManyWithoutProductInput
    coins?: coinsCreateNestedManyWithoutProductInput
    variants?: variantsCreateNestedManyWithoutProductInput
    comments?: commentsCreateNestedManyWithoutProductInput
    reviews?: reviewsCreateNestedManyWithoutProductInput
    seller?: sellerCreateNestedOneWithoutProductsInput
    brand?: brandsCreateNestedOneWithoutProductsInput
    subCategory?: subCategoryCreateNestedOneWithoutProductsInput
    option?: optionsCreateNestedOneWithoutProductsInput
    user?: usersCreateNestedOneWithoutProductsInput
  }

  export type productsUncheckedCreateWithoutCategoryInput = {
    id?: string
    price: number
    title: string
    description: string
    thumbnail: string
    verified?: boolean
    sellerId?: string | null
    brandId?: string | null
    subCategoryId: string
    optionId: string
    userId: string
    offers?: offersUncheckedCreateNestedManyWithoutProductInput
    coins?: coinsUncheckedCreateNestedManyWithoutProductInput
    variants?: variantsUncheckedCreateNestedManyWithoutProductInput
    comments?: commentsUncheckedCreateNestedManyWithoutProductInput
    reviews?: reviewsUncheckedCreateNestedManyWithoutProductInput
  }

  export type productsCreateOrConnectWithoutCategoryInput = {
    where: productsWhereUniqueInput
    create: XOR<productsCreateWithoutCategoryInput, productsUncheckedCreateWithoutCategoryInput>
  }

  export type productsCreateManyCategoryInputEnvelope = {
    data: productsCreateManyCategoryInput | productsCreateManyCategoryInput[]
  }

  export type subCategoryUpsertWithWhereUniqueWithoutCategoryInput = {
    where: subCategoryWhereUniqueInput
    update: XOR<subCategoryUpdateWithoutCategoryInput, subCategoryUncheckedUpdateWithoutCategoryInput>
    create: XOR<subCategoryCreateWithoutCategoryInput, subCategoryUncheckedCreateWithoutCategoryInput>
  }

  export type subCategoryUpdateWithWhereUniqueWithoutCategoryInput = {
    where: subCategoryWhereUniqueInput
    data: XOR<subCategoryUpdateWithoutCategoryInput, subCategoryUncheckedUpdateWithoutCategoryInput>
  }

  export type subCategoryUpdateManyWithWhereWithoutCategoryInput = {
    where: subCategoryScalarWhereInput
    data: XOR<subCategoryUpdateManyMutationInput, subCategoryUncheckedUpdateManyWithoutCategoryInput>
  }

  export type subCategoryScalarWhereInput = {
    AND?: subCategoryScalarWhereInput | subCategoryScalarWhereInput[]
    OR?: subCategoryScalarWhereInput[]
    NOT?: subCategoryScalarWhereInput | subCategoryScalarWhereInput[]
    id?: StringFilter<"subCategory"> | string
    name?: StringFilter<"subCategory"> | string
    categoryId?: StringFilter<"subCategory"> | string
  }

  export type productsUpsertWithWhereUniqueWithoutCategoryInput = {
    where: productsWhereUniqueInput
    update: XOR<productsUpdateWithoutCategoryInput, productsUncheckedUpdateWithoutCategoryInput>
    create: XOR<productsCreateWithoutCategoryInput, productsUncheckedCreateWithoutCategoryInput>
  }

  export type productsUpdateWithWhereUniqueWithoutCategoryInput = {
    where: productsWhereUniqueInput
    data: XOR<productsUpdateWithoutCategoryInput, productsUncheckedUpdateWithoutCategoryInput>
  }

  export type productsUpdateManyWithWhereWithoutCategoryInput = {
    where: productsScalarWhereInput
    data: XOR<productsUpdateManyMutationInput, productsUncheckedUpdateManyWithoutCategoryInput>
  }

  export type categoryCreateWithoutSubCategoryInput = {
    id?: string
    name: string
    icon: string
    products?: productsCreateNestedManyWithoutCategoryInput
  }

  export type categoryUncheckedCreateWithoutSubCategoryInput = {
    id?: string
    name: string
    icon: string
    products?: productsUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type categoryCreateOrConnectWithoutSubCategoryInput = {
    where: categoryWhereUniqueInput
    create: XOR<categoryCreateWithoutSubCategoryInput, categoryUncheckedCreateWithoutSubCategoryInput>
  }

  export type optionsCreateWithoutSubCategoryInput = {
    id?: string
    name: string
    products?: productsCreateNestedManyWithoutOptionInput
  }

  export type optionsUncheckedCreateWithoutSubCategoryInput = {
    id?: string
    name: string
    products?: productsUncheckedCreateNestedManyWithoutOptionInput
  }

  export type optionsCreateOrConnectWithoutSubCategoryInput = {
    where: optionsWhereUniqueInput
    create: XOR<optionsCreateWithoutSubCategoryInput, optionsUncheckedCreateWithoutSubCategoryInput>
  }

  export type optionsCreateManySubCategoryInputEnvelope = {
    data: optionsCreateManySubCategoryInput | optionsCreateManySubCategoryInput[]
  }

  export type productsCreateWithoutSubCategoryInput = {
    id?: string
    price: number
    title: string
    description: string
    thumbnail: string
    verified?: boolean
    offers?: offersCreateNestedManyWithoutProductInput
    coins?: coinsCreateNestedManyWithoutProductInput
    variants?: variantsCreateNestedManyWithoutProductInput
    comments?: commentsCreateNestedManyWithoutProductInput
    reviews?: reviewsCreateNestedManyWithoutProductInput
    seller?: sellerCreateNestedOneWithoutProductsInput
    brand?: brandsCreateNestedOneWithoutProductsInput
    category?: categoryCreateNestedOneWithoutProductsInput
    option?: optionsCreateNestedOneWithoutProductsInput
    user?: usersCreateNestedOneWithoutProductsInput
  }

  export type productsUncheckedCreateWithoutSubCategoryInput = {
    id?: string
    price: number
    title: string
    description: string
    thumbnail: string
    verified?: boolean
    sellerId?: string | null
    brandId?: string | null
    categoryId: string
    optionId: string
    userId: string
    offers?: offersUncheckedCreateNestedManyWithoutProductInput
    coins?: coinsUncheckedCreateNestedManyWithoutProductInput
    variants?: variantsUncheckedCreateNestedManyWithoutProductInput
    comments?: commentsUncheckedCreateNestedManyWithoutProductInput
    reviews?: reviewsUncheckedCreateNestedManyWithoutProductInput
  }

  export type productsCreateOrConnectWithoutSubCategoryInput = {
    where: productsWhereUniqueInput
    create: XOR<productsCreateWithoutSubCategoryInput, productsUncheckedCreateWithoutSubCategoryInput>
  }

  export type productsCreateManySubCategoryInputEnvelope = {
    data: productsCreateManySubCategoryInput | productsCreateManySubCategoryInput[]
  }

  export type categoryUpsertWithoutSubCategoryInput = {
    update: XOR<categoryUpdateWithoutSubCategoryInput, categoryUncheckedUpdateWithoutSubCategoryInput>
    create: XOR<categoryCreateWithoutSubCategoryInput, categoryUncheckedCreateWithoutSubCategoryInput>
    where?: categoryWhereInput
  }

  export type categoryUpdateToOneWithWhereWithoutSubCategoryInput = {
    where?: categoryWhereInput
    data: XOR<categoryUpdateWithoutSubCategoryInput, categoryUncheckedUpdateWithoutSubCategoryInput>
  }

  export type categoryUpdateWithoutSubCategoryInput = {
    name?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    products?: productsUpdateManyWithoutCategoryNestedInput
  }

  export type categoryUncheckedUpdateWithoutSubCategoryInput = {
    name?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    products?: productsUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type optionsUpsertWithWhereUniqueWithoutSubCategoryInput = {
    where: optionsWhereUniqueInput
    update: XOR<optionsUpdateWithoutSubCategoryInput, optionsUncheckedUpdateWithoutSubCategoryInput>
    create: XOR<optionsCreateWithoutSubCategoryInput, optionsUncheckedCreateWithoutSubCategoryInput>
  }

  export type optionsUpdateWithWhereUniqueWithoutSubCategoryInput = {
    where: optionsWhereUniqueInput
    data: XOR<optionsUpdateWithoutSubCategoryInput, optionsUncheckedUpdateWithoutSubCategoryInput>
  }

  export type optionsUpdateManyWithWhereWithoutSubCategoryInput = {
    where: optionsScalarWhereInput
    data: XOR<optionsUpdateManyMutationInput, optionsUncheckedUpdateManyWithoutSubCategoryInput>
  }

  export type optionsScalarWhereInput = {
    AND?: optionsScalarWhereInput | optionsScalarWhereInput[]
    OR?: optionsScalarWhereInput[]
    NOT?: optionsScalarWhereInput | optionsScalarWhereInput[]
    id?: StringFilter<"options"> | string
    name?: StringFilter<"options"> | string
    subCategoryId?: StringFilter<"options"> | string
  }

  export type productsUpsertWithWhereUniqueWithoutSubCategoryInput = {
    where: productsWhereUniqueInput
    update: XOR<productsUpdateWithoutSubCategoryInput, productsUncheckedUpdateWithoutSubCategoryInput>
    create: XOR<productsCreateWithoutSubCategoryInput, productsUncheckedCreateWithoutSubCategoryInput>
  }

  export type productsUpdateWithWhereUniqueWithoutSubCategoryInput = {
    where: productsWhereUniqueInput
    data: XOR<productsUpdateWithoutSubCategoryInput, productsUncheckedUpdateWithoutSubCategoryInput>
  }

  export type productsUpdateManyWithWhereWithoutSubCategoryInput = {
    where: productsScalarWhereInput
    data: XOR<productsUpdateManyMutationInput, productsUncheckedUpdateManyWithoutSubCategoryInput>
  }

  export type subCategoryCreateWithoutOptionsInput = {
    id?: string
    name: string
    category?: categoryCreateNestedOneWithoutSubCategoryInput
    products?: productsCreateNestedManyWithoutSubCategoryInput
  }

  export type subCategoryUncheckedCreateWithoutOptionsInput = {
    id?: string
    name: string
    categoryId: string
    products?: productsUncheckedCreateNestedManyWithoutSubCategoryInput
  }

  export type subCategoryCreateOrConnectWithoutOptionsInput = {
    where: subCategoryWhereUniqueInput
    create: XOR<subCategoryCreateWithoutOptionsInput, subCategoryUncheckedCreateWithoutOptionsInput>
  }

  export type productsCreateWithoutOptionInput = {
    id?: string
    price: number
    title: string
    description: string
    thumbnail: string
    verified?: boolean
    offers?: offersCreateNestedManyWithoutProductInput
    coins?: coinsCreateNestedManyWithoutProductInput
    variants?: variantsCreateNestedManyWithoutProductInput
    comments?: commentsCreateNestedManyWithoutProductInput
    reviews?: reviewsCreateNestedManyWithoutProductInput
    seller?: sellerCreateNestedOneWithoutProductsInput
    brand?: brandsCreateNestedOneWithoutProductsInput
    category?: categoryCreateNestedOneWithoutProductsInput
    subCategory?: subCategoryCreateNestedOneWithoutProductsInput
    user?: usersCreateNestedOneWithoutProductsInput
  }

  export type productsUncheckedCreateWithoutOptionInput = {
    id?: string
    price: number
    title: string
    description: string
    thumbnail: string
    verified?: boolean
    sellerId?: string | null
    brandId?: string | null
    categoryId: string
    subCategoryId: string
    userId: string
    offers?: offersUncheckedCreateNestedManyWithoutProductInput
    coins?: coinsUncheckedCreateNestedManyWithoutProductInput
    variants?: variantsUncheckedCreateNestedManyWithoutProductInput
    comments?: commentsUncheckedCreateNestedManyWithoutProductInput
    reviews?: reviewsUncheckedCreateNestedManyWithoutProductInput
  }

  export type productsCreateOrConnectWithoutOptionInput = {
    where: productsWhereUniqueInput
    create: XOR<productsCreateWithoutOptionInput, productsUncheckedCreateWithoutOptionInput>
  }

  export type productsCreateManyOptionInputEnvelope = {
    data: productsCreateManyOptionInput | productsCreateManyOptionInput[]
  }

  export type subCategoryUpsertWithoutOptionsInput = {
    update: XOR<subCategoryUpdateWithoutOptionsInput, subCategoryUncheckedUpdateWithoutOptionsInput>
    create: XOR<subCategoryCreateWithoutOptionsInput, subCategoryUncheckedCreateWithoutOptionsInput>
    where?: subCategoryWhereInput
  }

  export type subCategoryUpdateToOneWithWhereWithoutOptionsInput = {
    where?: subCategoryWhereInput
    data: XOR<subCategoryUpdateWithoutOptionsInput, subCategoryUncheckedUpdateWithoutOptionsInput>
  }

  export type subCategoryUpdateWithoutOptionsInput = {
    name?: StringFieldUpdateOperationsInput | string
    category?: categoryUpdateOneWithoutSubCategoryNestedInput
    products?: productsUpdateManyWithoutSubCategoryNestedInput
  }

  export type subCategoryUncheckedUpdateWithoutOptionsInput = {
    name?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    products?: productsUncheckedUpdateManyWithoutSubCategoryNestedInput
  }

  export type productsUpsertWithWhereUniqueWithoutOptionInput = {
    where: productsWhereUniqueInput
    update: XOR<productsUpdateWithoutOptionInput, productsUncheckedUpdateWithoutOptionInput>
    create: XOR<productsCreateWithoutOptionInput, productsUncheckedCreateWithoutOptionInput>
  }

  export type productsUpdateWithWhereUniqueWithoutOptionInput = {
    where: productsWhereUniqueInput
    data: XOR<productsUpdateWithoutOptionInput, productsUncheckedUpdateWithoutOptionInput>
  }

  export type productsUpdateManyWithWhereWithoutOptionInput = {
    where: productsScalarWhereInput
    data: XOR<productsUpdateManyMutationInput, productsUncheckedUpdateManyWithoutOptionInput>
  }

  export type usersCreateWithoutSellerInput = {
    id?: string
    email?: string | null
    name: string
    image?: string | null
    phone?: string | null
    birthday?: string | null
    gender?: string | null
    role?: number
    uid: string
    address?: InputJsonValue | null
    createdAt?: Date | string
    brand?: brandsCreateNestedManyWithoutUserInput
    products?: productsCreateNestedManyWithoutUserInput
    comments?: commentsCreateNestedManyWithoutUserInput
    reviews?: reviewsCreateNestedManyWithoutUserInput
    notifications?: notificationsCreateNestedManyWithoutUserInput
  }

  export type usersUncheckedCreateWithoutSellerInput = {
    id?: string
    email?: string | null
    name: string
    image?: string | null
    phone?: string | null
    birthday?: string | null
    gender?: string | null
    role?: number
    uid: string
    address?: InputJsonValue | null
    createdAt?: Date | string
    brand?: brandsUncheckedCreateNestedManyWithoutUserInput
    products?: productsUncheckedCreateNestedManyWithoutUserInput
    comments?: commentsUncheckedCreateNestedManyWithoutUserInput
    reviews?: reviewsUncheckedCreateNestedManyWithoutUserInput
    notifications?: notificationsUncheckedCreateNestedManyWithoutUserInput
  }

  export type usersCreateOrConnectWithoutSellerInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutSellerInput, usersUncheckedCreateWithoutSellerInput>
  }

  export type productsCreateWithoutSellerInput = {
    id?: string
    price: number
    title: string
    description: string
    thumbnail: string
    verified?: boolean
    offers?: offersCreateNestedManyWithoutProductInput
    coins?: coinsCreateNestedManyWithoutProductInput
    variants?: variantsCreateNestedManyWithoutProductInput
    comments?: commentsCreateNestedManyWithoutProductInput
    reviews?: reviewsCreateNestedManyWithoutProductInput
    brand?: brandsCreateNestedOneWithoutProductsInput
    category?: categoryCreateNestedOneWithoutProductsInput
    subCategory?: subCategoryCreateNestedOneWithoutProductsInput
    option?: optionsCreateNestedOneWithoutProductsInput
    user?: usersCreateNestedOneWithoutProductsInput
  }

  export type productsUncheckedCreateWithoutSellerInput = {
    id?: string
    price: number
    title: string
    description: string
    thumbnail: string
    verified?: boolean
    brandId?: string | null
    categoryId: string
    subCategoryId: string
    optionId: string
    userId: string
    offers?: offersUncheckedCreateNestedManyWithoutProductInput
    coins?: coinsUncheckedCreateNestedManyWithoutProductInput
    variants?: variantsUncheckedCreateNestedManyWithoutProductInput
    comments?: commentsUncheckedCreateNestedManyWithoutProductInput
    reviews?: reviewsUncheckedCreateNestedManyWithoutProductInput
  }

  export type productsCreateOrConnectWithoutSellerInput = {
    where: productsWhereUniqueInput
    create: XOR<productsCreateWithoutSellerInput, productsUncheckedCreateWithoutSellerInput>
  }

  export type productsCreateManySellerInputEnvelope = {
    data: productsCreateManySellerInput | productsCreateManySellerInput[]
  }

  export type usersUpsertWithoutSellerInput = {
    update: XOR<usersUpdateWithoutSellerInput, usersUncheckedUpdateWithoutSellerInput>
    create: XOR<usersCreateWithoutSellerInput, usersUncheckedCreateWithoutSellerInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutSellerInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutSellerInput, usersUncheckedUpdateWithoutSellerInput>
  }

  export type usersUpdateWithoutSellerInput = {
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    role?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    address?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    brand?: brandsUpdateManyWithoutUserNestedInput
    products?: productsUpdateManyWithoutUserNestedInput
    comments?: commentsUpdateManyWithoutUserNestedInput
    reviews?: reviewsUpdateManyWithoutUserNestedInput
    notifications?: notificationsUpdateManyWithoutUserNestedInput
  }

  export type usersUncheckedUpdateWithoutSellerInput = {
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    role?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    address?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    brand?: brandsUncheckedUpdateManyWithoutUserNestedInput
    products?: productsUncheckedUpdateManyWithoutUserNestedInput
    comments?: commentsUncheckedUpdateManyWithoutUserNestedInput
    reviews?: reviewsUncheckedUpdateManyWithoutUserNestedInput
    notifications?: notificationsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type productsUpsertWithWhereUniqueWithoutSellerInput = {
    where: productsWhereUniqueInput
    update: XOR<productsUpdateWithoutSellerInput, productsUncheckedUpdateWithoutSellerInput>
    create: XOR<productsCreateWithoutSellerInput, productsUncheckedCreateWithoutSellerInput>
  }

  export type productsUpdateWithWhereUniqueWithoutSellerInput = {
    where: productsWhereUniqueInput
    data: XOR<productsUpdateWithoutSellerInput, productsUncheckedUpdateWithoutSellerInput>
  }

  export type productsUpdateManyWithWhereWithoutSellerInput = {
    where: productsScalarWhereInput
    data: XOR<productsUpdateManyMutationInput, productsUncheckedUpdateManyWithoutSellerInput>
  }

  export type usersCreateWithoutBrandInput = {
    id?: string
    email?: string | null
    name: string
    image?: string | null
    phone?: string | null
    birthday?: string | null
    gender?: string | null
    role?: number
    uid: string
    address?: InputJsonValue | null
    createdAt?: Date | string
    seller?: sellerCreateNestedManyWithoutUserInput
    products?: productsCreateNestedManyWithoutUserInput
    comments?: commentsCreateNestedManyWithoutUserInput
    reviews?: reviewsCreateNestedManyWithoutUserInput
    notifications?: notificationsCreateNestedManyWithoutUserInput
  }

  export type usersUncheckedCreateWithoutBrandInput = {
    id?: string
    email?: string | null
    name: string
    image?: string | null
    phone?: string | null
    birthday?: string | null
    gender?: string | null
    role?: number
    uid: string
    address?: InputJsonValue | null
    createdAt?: Date | string
    seller?: sellerUncheckedCreateNestedManyWithoutUserInput
    products?: productsUncheckedCreateNestedManyWithoutUserInput
    comments?: commentsUncheckedCreateNestedManyWithoutUserInput
    reviews?: reviewsUncheckedCreateNestedManyWithoutUserInput
    notifications?: notificationsUncheckedCreateNestedManyWithoutUserInput
  }

  export type usersCreateOrConnectWithoutBrandInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutBrandInput, usersUncheckedCreateWithoutBrandInput>
  }

  export type productsCreateWithoutBrandInput = {
    id?: string
    price: number
    title: string
    description: string
    thumbnail: string
    verified?: boolean
    offers?: offersCreateNestedManyWithoutProductInput
    coins?: coinsCreateNestedManyWithoutProductInput
    variants?: variantsCreateNestedManyWithoutProductInput
    comments?: commentsCreateNestedManyWithoutProductInput
    reviews?: reviewsCreateNestedManyWithoutProductInput
    seller?: sellerCreateNestedOneWithoutProductsInput
    category?: categoryCreateNestedOneWithoutProductsInput
    subCategory?: subCategoryCreateNestedOneWithoutProductsInput
    option?: optionsCreateNestedOneWithoutProductsInput
    user?: usersCreateNestedOneWithoutProductsInput
  }

  export type productsUncheckedCreateWithoutBrandInput = {
    id?: string
    price: number
    title: string
    description: string
    thumbnail: string
    verified?: boolean
    sellerId?: string | null
    categoryId: string
    subCategoryId: string
    optionId: string
    userId: string
    offers?: offersUncheckedCreateNestedManyWithoutProductInput
    coins?: coinsUncheckedCreateNestedManyWithoutProductInput
    variants?: variantsUncheckedCreateNestedManyWithoutProductInput
    comments?: commentsUncheckedCreateNestedManyWithoutProductInput
    reviews?: reviewsUncheckedCreateNestedManyWithoutProductInput
  }

  export type productsCreateOrConnectWithoutBrandInput = {
    where: productsWhereUniqueInput
    create: XOR<productsCreateWithoutBrandInput, productsUncheckedCreateWithoutBrandInput>
  }

  export type productsCreateManyBrandInputEnvelope = {
    data: productsCreateManyBrandInput | productsCreateManyBrandInput[]
  }

  export type usersUpsertWithoutBrandInput = {
    update: XOR<usersUpdateWithoutBrandInput, usersUncheckedUpdateWithoutBrandInput>
    create: XOR<usersCreateWithoutBrandInput, usersUncheckedCreateWithoutBrandInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutBrandInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutBrandInput, usersUncheckedUpdateWithoutBrandInput>
  }

  export type usersUpdateWithoutBrandInput = {
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    role?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    address?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    seller?: sellerUpdateManyWithoutUserNestedInput
    products?: productsUpdateManyWithoutUserNestedInput
    comments?: commentsUpdateManyWithoutUserNestedInput
    reviews?: reviewsUpdateManyWithoutUserNestedInput
    notifications?: notificationsUpdateManyWithoutUserNestedInput
  }

  export type usersUncheckedUpdateWithoutBrandInput = {
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    role?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    address?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    seller?: sellerUncheckedUpdateManyWithoutUserNestedInput
    products?: productsUncheckedUpdateManyWithoutUserNestedInput
    comments?: commentsUncheckedUpdateManyWithoutUserNestedInput
    reviews?: reviewsUncheckedUpdateManyWithoutUserNestedInput
    notifications?: notificationsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type productsUpsertWithWhereUniqueWithoutBrandInput = {
    where: productsWhereUniqueInput
    update: XOR<productsUpdateWithoutBrandInput, productsUncheckedUpdateWithoutBrandInput>
    create: XOR<productsCreateWithoutBrandInput, productsUncheckedCreateWithoutBrandInput>
  }

  export type productsUpdateWithWhereUniqueWithoutBrandInput = {
    where: productsWhereUniqueInput
    data: XOR<productsUpdateWithoutBrandInput, productsUncheckedUpdateWithoutBrandInput>
  }

  export type productsUpdateManyWithWhereWithoutBrandInput = {
    where: productsScalarWhereInput
    data: XOR<productsUpdateManyMutationInput, productsUncheckedUpdateManyWithoutBrandInput>
  }

  export type offersCreateWithoutProductInput = {
    id?: string
    money?: number
    percentage?: number
    name?: string | null
  }

  export type offersUncheckedCreateWithoutProductInput = {
    id?: string
    money?: number
    percentage?: number
    name?: string | null
  }

  export type offersCreateOrConnectWithoutProductInput = {
    where: offersWhereUniqueInput
    create: XOR<offersCreateWithoutProductInput, offersUncheckedCreateWithoutProductInput>
  }

  export type offersCreateManyProductInputEnvelope = {
    data: offersCreateManyProductInput | offersCreateManyProductInput[]
  }

  export type coinsCreateWithoutProductInput = {
    id?: string
    number?: number
    name?: string | null
  }

  export type coinsUncheckedCreateWithoutProductInput = {
    id?: string
    number?: number
    name?: string | null
  }

  export type coinsCreateOrConnectWithoutProductInput = {
    where: coinsWhereUniqueInput
    create: XOR<coinsCreateWithoutProductInput, coinsUncheckedCreateWithoutProductInput>
  }

  export type coinsCreateManyProductInputEnvelope = {
    data: coinsCreateManyProductInput | coinsCreateManyProductInput[]
  }

  export type variantsCreateWithoutProductInput = {
    id?: string
    size: string
    color: string
    image: string
  }

  export type variantsUncheckedCreateWithoutProductInput = {
    id?: string
    size: string
    color: string
    image: string
  }

  export type variantsCreateOrConnectWithoutProductInput = {
    where: variantsWhereUniqueInput
    create: XOR<variantsCreateWithoutProductInput, variantsUncheckedCreateWithoutProductInput>
  }

  export type variantsCreateManyProductInputEnvelope = {
    data: variantsCreateManyProductInput | variantsCreateManyProductInput[]
  }

  export type commentsCreateWithoutProductInput = {
    id?: string
    message: string
    replay: string
    user?: usersCreateNestedOneWithoutCommentsInput
    notifications?: notificationsCreateNestedManyWithoutCommentsInput
  }

  export type commentsUncheckedCreateWithoutProductInput = {
    id?: string
    message: string
    replay: string
    userId: string
    notifications?: notificationsUncheckedCreateNestedManyWithoutCommentsInput
  }

  export type commentsCreateOrConnectWithoutProductInput = {
    where: commentsWhereUniqueInput
    create: XOR<commentsCreateWithoutProductInput, commentsUncheckedCreateWithoutProductInput>
  }

  export type commentsCreateManyProductInputEnvelope = {
    data: commentsCreateManyProductInput | commentsCreateManyProductInput[]
  }

  export type reviewsCreateWithoutProductInput = {
    id?: string
    message: string
    rate?: number
    replay: string
    user?: usersCreateNestedOneWithoutReviewsInput
    notifications?: notificationsCreateNestedManyWithoutReviewsInput
  }

  export type reviewsUncheckedCreateWithoutProductInput = {
    id?: string
    message: string
    rate?: number
    replay: string
    userId: string
    notifications?: notificationsUncheckedCreateNestedManyWithoutReviewsInput
  }

  export type reviewsCreateOrConnectWithoutProductInput = {
    where: reviewsWhereUniqueInput
    create: XOR<reviewsCreateWithoutProductInput, reviewsUncheckedCreateWithoutProductInput>
  }

  export type reviewsCreateManyProductInputEnvelope = {
    data: reviewsCreateManyProductInput | reviewsCreateManyProductInput[]
  }

  export type sellerCreateWithoutProductsInput = {
    id?: string
    shopName: string
    shopAddress: string
    user?: usersCreateNestedOneWithoutSellerInput
  }

  export type sellerUncheckedCreateWithoutProductsInput = {
    id?: string
    userId: string
    shopName: string
    shopAddress: string
  }

  export type sellerCreateOrConnectWithoutProductsInput = {
    where: sellerWhereUniqueInput
    create: XOR<sellerCreateWithoutProductsInput, sellerUncheckedCreateWithoutProductsInput>
  }

  export type brandsCreateWithoutProductsInput = {
    id?: string
    brandName: string
    brandAddress: string
    brandIcon: string
    user?: usersCreateNestedOneWithoutBrandInput
  }

  export type brandsUncheckedCreateWithoutProductsInput = {
    id?: string
    userId: string
    brandName: string
    brandAddress: string
    brandIcon: string
  }

  export type brandsCreateOrConnectWithoutProductsInput = {
    where: brandsWhereUniqueInput
    create: XOR<brandsCreateWithoutProductsInput, brandsUncheckedCreateWithoutProductsInput>
  }

  export type categoryCreateWithoutProductsInput = {
    id?: string
    name: string
    icon: string
    subCategory?: subCategoryCreateNestedManyWithoutCategoryInput
  }

  export type categoryUncheckedCreateWithoutProductsInput = {
    id?: string
    name: string
    icon: string
    subCategory?: subCategoryUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type categoryCreateOrConnectWithoutProductsInput = {
    where: categoryWhereUniqueInput
    create: XOR<categoryCreateWithoutProductsInput, categoryUncheckedCreateWithoutProductsInput>
  }

  export type subCategoryCreateWithoutProductsInput = {
    id?: string
    name: string
    category?: categoryCreateNestedOneWithoutSubCategoryInput
    options?: optionsCreateNestedManyWithoutSubCategoryInput
  }

  export type subCategoryUncheckedCreateWithoutProductsInput = {
    id?: string
    name: string
    categoryId: string
    options?: optionsUncheckedCreateNestedManyWithoutSubCategoryInput
  }

  export type subCategoryCreateOrConnectWithoutProductsInput = {
    where: subCategoryWhereUniqueInput
    create: XOR<subCategoryCreateWithoutProductsInput, subCategoryUncheckedCreateWithoutProductsInput>
  }

  export type optionsCreateWithoutProductsInput = {
    id?: string
    name: string
    subCategory?: subCategoryCreateNestedOneWithoutOptionsInput
  }

  export type optionsUncheckedCreateWithoutProductsInput = {
    id?: string
    name: string
    subCategoryId: string
  }

  export type optionsCreateOrConnectWithoutProductsInput = {
    where: optionsWhereUniqueInput
    create: XOR<optionsCreateWithoutProductsInput, optionsUncheckedCreateWithoutProductsInput>
  }

  export type usersCreateWithoutProductsInput = {
    id?: string
    email?: string | null
    name: string
    image?: string | null
    phone?: string | null
    birthday?: string | null
    gender?: string | null
    role?: number
    uid: string
    address?: InputJsonValue | null
    createdAt?: Date | string
    seller?: sellerCreateNestedManyWithoutUserInput
    brand?: brandsCreateNestedManyWithoutUserInput
    comments?: commentsCreateNestedManyWithoutUserInput
    reviews?: reviewsCreateNestedManyWithoutUserInput
    notifications?: notificationsCreateNestedManyWithoutUserInput
  }

  export type usersUncheckedCreateWithoutProductsInput = {
    id?: string
    email?: string | null
    name: string
    image?: string | null
    phone?: string | null
    birthday?: string | null
    gender?: string | null
    role?: number
    uid: string
    address?: InputJsonValue | null
    createdAt?: Date | string
    seller?: sellerUncheckedCreateNestedManyWithoutUserInput
    brand?: brandsUncheckedCreateNestedManyWithoutUserInput
    comments?: commentsUncheckedCreateNestedManyWithoutUserInput
    reviews?: reviewsUncheckedCreateNestedManyWithoutUserInput
    notifications?: notificationsUncheckedCreateNestedManyWithoutUserInput
  }

  export type usersCreateOrConnectWithoutProductsInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutProductsInput, usersUncheckedCreateWithoutProductsInput>
  }

  export type offersUpsertWithWhereUniqueWithoutProductInput = {
    where: offersWhereUniqueInput
    update: XOR<offersUpdateWithoutProductInput, offersUncheckedUpdateWithoutProductInput>
    create: XOR<offersCreateWithoutProductInput, offersUncheckedCreateWithoutProductInput>
  }

  export type offersUpdateWithWhereUniqueWithoutProductInput = {
    where: offersWhereUniqueInput
    data: XOR<offersUpdateWithoutProductInput, offersUncheckedUpdateWithoutProductInput>
  }

  export type offersUpdateManyWithWhereWithoutProductInput = {
    where: offersScalarWhereInput
    data: XOR<offersUpdateManyMutationInput, offersUncheckedUpdateManyWithoutProductInput>
  }

  export type offersScalarWhereInput = {
    AND?: offersScalarWhereInput | offersScalarWhereInput[]
    OR?: offersScalarWhereInput[]
    NOT?: offersScalarWhereInput | offersScalarWhereInput[]
    id?: StringFilter<"offers"> | string
    money?: IntFilter<"offers"> | number
    percentage?: IntFilter<"offers"> | number
    name?: StringNullableFilter<"offers"> | string | null
    productId?: StringFilter<"offers"> | string
  }

  export type coinsUpsertWithWhereUniqueWithoutProductInput = {
    where: coinsWhereUniqueInput
    update: XOR<coinsUpdateWithoutProductInput, coinsUncheckedUpdateWithoutProductInput>
    create: XOR<coinsCreateWithoutProductInput, coinsUncheckedCreateWithoutProductInput>
  }

  export type coinsUpdateWithWhereUniqueWithoutProductInput = {
    where: coinsWhereUniqueInput
    data: XOR<coinsUpdateWithoutProductInput, coinsUncheckedUpdateWithoutProductInput>
  }

  export type coinsUpdateManyWithWhereWithoutProductInput = {
    where: coinsScalarWhereInput
    data: XOR<coinsUpdateManyMutationInput, coinsUncheckedUpdateManyWithoutProductInput>
  }

  export type coinsScalarWhereInput = {
    AND?: coinsScalarWhereInput | coinsScalarWhereInput[]
    OR?: coinsScalarWhereInput[]
    NOT?: coinsScalarWhereInput | coinsScalarWhereInput[]
    id?: StringFilter<"coins"> | string
    number?: IntFilter<"coins"> | number
    name?: StringNullableFilter<"coins"> | string | null
    productId?: StringFilter<"coins"> | string
  }

  export type variantsUpsertWithWhereUniqueWithoutProductInput = {
    where: variantsWhereUniqueInput
    update: XOR<variantsUpdateWithoutProductInput, variantsUncheckedUpdateWithoutProductInput>
    create: XOR<variantsCreateWithoutProductInput, variantsUncheckedCreateWithoutProductInput>
  }

  export type variantsUpdateWithWhereUniqueWithoutProductInput = {
    where: variantsWhereUniqueInput
    data: XOR<variantsUpdateWithoutProductInput, variantsUncheckedUpdateWithoutProductInput>
  }

  export type variantsUpdateManyWithWhereWithoutProductInput = {
    where: variantsScalarWhereInput
    data: XOR<variantsUpdateManyMutationInput, variantsUncheckedUpdateManyWithoutProductInput>
  }

  export type variantsScalarWhereInput = {
    AND?: variantsScalarWhereInput | variantsScalarWhereInput[]
    OR?: variantsScalarWhereInput[]
    NOT?: variantsScalarWhereInput | variantsScalarWhereInput[]
    id?: StringFilter<"variants"> | string
    size?: StringFilter<"variants"> | string
    color?: StringFilter<"variants"> | string
    image?: StringFilter<"variants"> | string
    productId?: StringFilter<"variants"> | string
  }

  export type commentsUpsertWithWhereUniqueWithoutProductInput = {
    where: commentsWhereUniqueInput
    update: XOR<commentsUpdateWithoutProductInput, commentsUncheckedUpdateWithoutProductInput>
    create: XOR<commentsCreateWithoutProductInput, commentsUncheckedCreateWithoutProductInput>
  }

  export type commentsUpdateWithWhereUniqueWithoutProductInput = {
    where: commentsWhereUniqueInput
    data: XOR<commentsUpdateWithoutProductInput, commentsUncheckedUpdateWithoutProductInput>
  }

  export type commentsUpdateManyWithWhereWithoutProductInput = {
    where: commentsScalarWhereInput
    data: XOR<commentsUpdateManyMutationInput, commentsUncheckedUpdateManyWithoutProductInput>
  }

  export type reviewsUpsertWithWhereUniqueWithoutProductInput = {
    where: reviewsWhereUniqueInput
    update: XOR<reviewsUpdateWithoutProductInput, reviewsUncheckedUpdateWithoutProductInput>
    create: XOR<reviewsCreateWithoutProductInput, reviewsUncheckedCreateWithoutProductInput>
  }

  export type reviewsUpdateWithWhereUniqueWithoutProductInput = {
    where: reviewsWhereUniqueInput
    data: XOR<reviewsUpdateWithoutProductInput, reviewsUncheckedUpdateWithoutProductInput>
  }

  export type reviewsUpdateManyWithWhereWithoutProductInput = {
    where: reviewsScalarWhereInput
    data: XOR<reviewsUpdateManyMutationInput, reviewsUncheckedUpdateManyWithoutProductInput>
  }

  export type sellerUpsertWithoutProductsInput = {
    update: XOR<sellerUpdateWithoutProductsInput, sellerUncheckedUpdateWithoutProductsInput>
    create: XOR<sellerCreateWithoutProductsInput, sellerUncheckedCreateWithoutProductsInput>
    where?: sellerWhereInput
  }

  export type sellerUpdateToOneWithWhereWithoutProductsInput = {
    where?: sellerWhereInput
    data: XOR<sellerUpdateWithoutProductsInput, sellerUncheckedUpdateWithoutProductsInput>
  }

  export type sellerUpdateWithoutProductsInput = {
    shopName?: StringFieldUpdateOperationsInput | string
    shopAddress?: StringFieldUpdateOperationsInput | string
    user?: usersUpdateOneWithoutSellerNestedInput
  }

  export type sellerUncheckedUpdateWithoutProductsInput = {
    userId?: StringFieldUpdateOperationsInput | string
    shopName?: StringFieldUpdateOperationsInput | string
    shopAddress?: StringFieldUpdateOperationsInput | string
  }

  export type brandsUpsertWithoutProductsInput = {
    update: XOR<brandsUpdateWithoutProductsInput, brandsUncheckedUpdateWithoutProductsInput>
    create: XOR<brandsCreateWithoutProductsInput, brandsUncheckedCreateWithoutProductsInput>
    where?: brandsWhereInput
  }

  export type brandsUpdateToOneWithWhereWithoutProductsInput = {
    where?: brandsWhereInput
    data: XOR<brandsUpdateWithoutProductsInput, brandsUncheckedUpdateWithoutProductsInput>
  }

  export type brandsUpdateWithoutProductsInput = {
    brandName?: StringFieldUpdateOperationsInput | string
    brandAddress?: StringFieldUpdateOperationsInput | string
    brandIcon?: StringFieldUpdateOperationsInput | string
    user?: usersUpdateOneWithoutBrandNestedInput
  }

  export type brandsUncheckedUpdateWithoutProductsInput = {
    userId?: StringFieldUpdateOperationsInput | string
    brandName?: StringFieldUpdateOperationsInput | string
    brandAddress?: StringFieldUpdateOperationsInput | string
    brandIcon?: StringFieldUpdateOperationsInput | string
  }

  export type categoryUpsertWithoutProductsInput = {
    update: XOR<categoryUpdateWithoutProductsInput, categoryUncheckedUpdateWithoutProductsInput>
    create: XOR<categoryCreateWithoutProductsInput, categoryUncheckedCreateWithoutProductsInput>
    where?: categoryWhereInput
  }

  export type categoryUpdateToOneWithWhereWithoutProductsInput = {
    where?: categoryWhereInput
    data: XOR<categoryUpdateWithoutProductsInput, categoryUncheckedUpdateWithoutProductsInput>
  }

  export type categoryUpdateWithoutProductsInput = {
    name?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    subCategory?: subCategoryUpdateManyWithoutCategoryNestedInput
  }

  export type categoryUncheckedUpdateWithoutProductsInput = {
    name?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    subCategory?: subCategoryUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type subCategoryUpsertWithoutProductsInput = {
    update: XOR<subCategoryUpdateWithoutProductsInput, subCategoryUncheckedUpdateWithoutProductsInput>
    create: XOR<subCategoryCreateWithoutProductsInput, subCategoryUncheckedCreateWithoutProductsInput>
    where?: subCategoryWhereInput
  }

  export type subCategoryUpdateToOneWithWhereWithoutProductsInput = {
    where?: subCategoryWhereInput
    data: XOR<subCategoryUpdateWithoutProductsInput, subCategoryUncheckedUpdateWithoutProductsInput>
  }

  export type subCategoryUpdateWithoutProductsInput = {
    name?: StringFieldUpdateOperationsInput | string
    category?: categoryUpdateOneWithoutSubCategoryNestedInput
    options?: optionsUpdateManyWithoutSubCategoryNestedInput
  }

  export type subCategoryUncheckedUpdateWithoutProductsInput = {
    name?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    options?: optionsUncheckedUpdateManyWithoutSubCategoryNestedInput
  }

  export type optionsUpsertWithoutProductsInput = {
    update: XOR<optionsUpdateWithoutProductsInput, optionsUncheckedUpdateWithoutProductsInput>
    create: XOR<optionsCreateWithoutProductsInput, optionsUncheckedCreateWithoutProductsInput>
    where?: optionsWhereInput
  }

  export type optionsUpdateToOneWithWhereWithoutProductsInput = {
    where?: optionsWhereInput
    data: XOR<optionsUpdateWithoutProductsInput, optionsUncheckedUpdateWithoutProductsInput>
  }

  export type optionsUpdateWithoutProductsInput = {
    name?: StringFieldUpdateOperationsInput | string
    subCategory?: subCategoryUpdateOneWithoutOptionsNestedInput
  }

  export type optionsUncheckedUpdateWithoutProductsInput = {
    name?: StringFieldUpdateOperationsInput | string
    subCategoryId?: StringFieldUpdateOperationsInput | string
  }

  export type usersUpsertWithoutProductsInput = {
    update: XOR<usersUpdateWithoutProductsInput, usersUncheckedUpdateWithoutProductsInput>
    create: XOR<usersCreateWithoutProductsInput, usersUncheckedCreateWithoutProductsInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutProductsInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutProductsInput, usersUncheckedUpdateWithoutProductsInput>
  }

  export type usersUpdateWithoutProductsInput = {
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    role?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    address?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    seller?: sellerUpdateManyWithoutUserNestedInput
    brand?: brandsUpdateManyWithoutUserNestedInput
    comments?: commentsUpdateManyWithoutUserNestedInput
    reviews?: reviewsUpdateManyWithoutUserNestedInput
    notifications?: notificationsUpdateManyWithoutUserNestedInput
  }

  export type usersUncheckedUpdateWithoutProductsInput = {
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    role?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    address?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    seller?: sellerUncheckedUpdateManyWithoutUserNestedInput
    brand?: brandsUncheckedUpdateManyWithoutUserNestedInput
    comments?: commentsUncheckedUpdateManyWithoutUserNestedInput
    reviews?: reviewsUncheckedUpdateManyWithoutUserNestedInput
    notifications?: notificationsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type productsCreateWithoutOffersInput = {
    id?: string
    price: number
    title: string
    description: string
    thumbnail: string
    verified?: boolean
    coins?: coinsCreateNestedManyWithoutProductInput
    variants?: variantsCreateNestedManyWithoutProductInput
    comments?: commentsCreateNestedManyWithoutProductInput
    reviews?: reviewsCreateNestedManyWithoutProductInput
    seller?: sellerCreateNestedOneWithoutProductsInput
    brand?: brandsCreateNestedOneWithoutProductsInput
    category?: categoryCreateNestedOneWithoutProductsInput
    subCategory?: subCategoryCreateNestedOneWithoutProductsInput
    option?: optionsCreateNestedOneWithoutProductsInput
    user?: usersCreateNestedOneWithoutProductsInput
  }

  export type productsUncheckedCreateWithoutOffersInput = {
    id?: string
    price: number
    title: string
    description: string
    thumbnail: string
    verified?: boolean
    sellerId?: string | null
    brandId?: string | null
    categoryId: string
    subCategoryId: string
    optionId: string
    userId: string
    coins?: coinsUncheckedCreateNestedManyWithoutProductInput
    variants?: variantsUncheckedCreateNestedManyWithoutProductInput
    comments?: commentsUncheckedCreateNestedManyWithoutProductInput
    reviews?: reviewsUncheckedCreateNestedManyWithoutProductInput
  }

  export type productsCreateOrConnectWithoutOffersInput = {
    where: productsWhereUniqueInput
    create: XOR<productsCreateWithoutOffersInput, productsUncheckedCreateWithoutOffersInput>
  }

  export type productsUpsertWithoutOffersInput = {
    update: XOR<productsUpdateWithoutOffersInput, productsUncheckedUpdateWithoutOffersInput>
    create: XOR<productsCreateWithoutOffersInput, productsUncheckedCreateWithoutOffersInput>
    where?: productsWhereInput
  }

  export type productsUpdateToOneWithWhereWithoutOffersInput = {
    where?: productsWhereInput
    data: XOR<productsUpdateWithoutOffersInput, productsUncheckedUpdateWithoutOffersInput>
  }

  export type productsUpdateWithoutOffersInput = {
    price?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    coins?: coinsUpdateManyWithoutProductNestedInput
    variants?: variantsUpdateManyWithoutProductNestedInput
    comments?: commentsUpdateManyWithoutProductNestedInput
    reviews?: reviewsUpdateManyWithoutProductNestedInput
    seller?: sellerUpdateOneWithoutProductsNestedInput
    brand?: brandsUpdateOneWithoutProductsNestedInput
    category?: categoryUpdateOneWithoutProductsNestedInput
    subCategory?: subCategoryUpdateOneWithoutProductsNestedInput
    option?: optionsUpdateOneWithoutProductsNestedInput
    user?: usersUpdateOneWithoutProductsNestedInput
  }

  export type productsUncheckedUpdateWithoutOffersInput = {
    price?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    sellerId?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    subCategoryId?: StringFieldUpdateOperationsInput | string
    optionId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    coins?: coinsUncheckedUpdateManyWithoutProductNestedInput
    variants?: variantsUncheckedUpdateManyWithoutProductNestedInput
    comments?: commentsUncheckedUpdateManyWithoutProductNestedInput
    reviews?: reviewsUncheckedUpdateManyWithoutProductNestedInput
  }

  export type productsCreateWithoutCoinsInput = {
    id?: string
    price: number
    title: string
    description: string
    thumbnail: string
    verified?: boolean
    offers?: offersCreateNestedManyWithoutProductInput
    variants?: variantsCreateNestedManyWithoutProductInput
    comments?: commentsCreateNestedManyWithoutProductInput
    reviews?: reviewsCreateNestedManyWithoutProductInput
    seller?: sellerCreateNestedOneWithoutProductsInput
    brand?: brandsCreateNestedOneWithoutProductsInput
    category?: categoryCreateNestedOneWithoutProductsInput
    subCategory?: subCategoryCreateNestedOneWithoutProductsInput
    option?: optionsCreateNestedOneWithoutProductsInput
    user?: usersCreateNestedOneWithoutProductsInput
  }

  export type productsUncheckedCreateWithoutCoinsInput = {
    id?: string
    price: number
    title: string
    description: string
    thumbnail: string
    verified?: boolean
    sellerId?: string | null
    brandId?: string | null
    categoryId: string
    subCategoryId: string
    optionId: string
    userId: string
    offers?: offersUncheckedCreateNestedManyWithoutProductInput
    variants?: variantsUncheckedCreateNestedManyWithoutProductInput
    comments?: commentsUncheckedCreateNestedManyWithoutProductInput
    reviews?: reviewsUncheckedCreateNestedManyWithoutProductInput
  }

  export type productsCreateOrConnectWithoutCoinsInput = {
    where: productsWhereUniqueInput
    create: XOR<productsCreateWithoutCoinsInput, productsUncheckedCreateWithoutCoinsInput>
  }

  export type productsUpsertWithoutCoinsInput = {
    update: XOR<productsUpdateWithoutCoinsInput, productsUncheckedUpdateWithoutCoinsInput>
    create: XOR<productsCreateWithoutCoinsInput, productsUncheckedCreateWithoutCoinsInput>
    where?: productsWhereInput
  }

  export type productsUpdateToOneWithWhereWithoutCoinsInput = {
    where?: productsWhereInput
    data: XOR<productsUpdateWithoutCoinsInput, productsUncheckedUpdateWithoutCoinsInput>
  }

  export type productsUpdateWithoutCoinsInput = {
    price?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    offers?: offersUpdateManyWithoutProductNestedInput
    variants?: variantsUpdateManyWithoutProductNestedInput
    comments?: commentsUpdateManyWithoutProductNestedInput
    reviews?: reviewsUpdateManyWithoutProductNestedInput
    seller?: sellerUpdateOneWithoutProductsNestedInput
    brand?: brandsUpdateOneWithoutProductsNestedInput
    category?: categoryUpdateOneWithoutProductsNestedInput
    subCategory?: subCategoryUpdateOneWithoutProductsNestedInput
    option?: optionsUpdateOneWithoutProductsNestedInput
    user?: usersUpdateOneWithoutProductsNestedInput
  }

  export type productsUncheckedUpdateWithoutCoinsInput = {
    price?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    sellerId?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    subCategoryId?: StringFieldUpdateOperationsInput | string
    optionId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    offers?: offersUncheckedUpdateManyWithoutProductNestedInput
    variants?: variantsUncheckedUpdateManyWithoutProductNestedInput
    comments?: commentsUncheckedUpdateManyWithoutProductNestedInput
    reviews?: reviewsUncheckedUpdateManyWithoutProductNestedInput
  }

  export type productsCreateWithoutVariantsInput = {
    id?: string
    price: number
    title: string
    description: string
    thumbnail: string
    verified?: boolean
    offers?: offersCreateNestedManyWithoutProductInput
    coins?: coinsCreateNestedManyWithoutProductInput
    comments?: commentsCreateNestedManyWithoutProductInput
    reviews?: reviewsCreateNestedManyWithoutProductInput
    seller?: sellerCreateNestedOneWithoutProductsInput
    brand?: brandsCreateNestedOneWithoutProductsInput
    category?: categoryCreateNestedOneWithoutProductsInput
    subCategory?: subCategoryCreateNestedOneWithoutProductsInput
    option?: optionsCreateNestedOneWithoutProductsInput
    user?: usersCreateNestedOneWithoutProductsInput
  }

  export type productsUncheckedCreateWithoutVariantsInput = {
    id?: string
    price: number
    title: string
    description: string
    thumbnail: string
    verified?: boolean
    sellerId?: string | null
    brandId?: string | null
    categoryId: string
    subCategoryId: string
    optionId: string
    userId: string
    offers?: offersUncheckedCreateNestedManyWithoutProductInput
    coins?: coinsUncheckedCreateNestedManyWithoutProductInput
    comments?: commentsUncheckedCreateNestedManyWithoutProductInput
    reviews?: reviewsUncheckedCreateNestedManyWithoutProductInput
  }

  export type productsCreateOrConnectWithoutVariantsInput = {
    where: productsWhereUniqueInput
    create: XOR<productsCreateWithoutVariantsInput, productsUncheckedCreateWithoutVariantsInput>
  }

  export type productsUpsertWithoutVariantsInput = {
    update: XOR<productsUpdateWithoutVariantsInput, productsUncheckedUpdateWithoutVariantsInput>
    create: XOR<productsCreateWithoutVariantsInput, productsUncheckedCreateWithoutVariantsInput>
    where?: productsWhereInput
  }

  export type productsUpdateToOneWithWhereWithoutVariantsInput = {
    where?: productsWhereInput
    data: XOR<productsUpdateWithoutVariantsInput, productsUncheckedUpdateWithoutVariantsInput>
  }

  export type productsUpdateWithoutVariantsInput = {
    price?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    offers?: offersUpdateManyWithoutProductNestedInput
    coins?: coinsUpdateManyWithoutProductNestedInput
    comments?: commentsUpdateManyWithoutProductNestedInput
    reviews?: reviewsUpdateManyWithoutProductNestedInput
    seller?: sellerUpdateOneWithoutProductsNestedInput
    brand?: brandsUpdateOneWithoutProductsNestedInput
    category?: categoryUpdateOneWithoutProductsNestedInput
    subCategory?: subCategoryUpdateOneWithoutProductsNestedInput
    option?: optionsUpdateOneWithoutProductsNestedInput
    user?: usersUpdateOneWithoutProductsNestedInput
  }

  export type productsUncheckedUpdateWithoutVariantsInput = {
    price?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    sellerId?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    subCategoryId?: StringFieldUpdateOperationsInput | string
    optionId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    offers?: offersUncheckedUpdateManyWithoutProductNestedInput
    coins?: coinsUncheckedUpdateManyWithoutProductNestedInput
    comments?: commentsUncheckedUpdateManyWithoutProductNestedInput
    reviews?: reviewsUncheckedUpdateManyWithoutProductNestedInput
  }

  export type usersCreateWithoutCommentsInput = {
    id?: string
    email?: string | null
    name: string
    image?: string | null
    phone?: string | null
    birthday?: string | null
    gender?: string | null
    role?: number
    uid: string
    address?: InputJsonValue | null
    createdAt?: Date | string
    seller?: sellerCreateNestedManyWithoutUserInput
    brand?: brandsCreateNestedManyWithoutUserInput
    products?: productsCreateNestedManyWithoutUserInput
    reviews?: reviewsCreateNestedManyWithoutUserInput
    notifications?: notificationsCreateNestedManyWithoutUserInput
  }

  export type usersUncheckedCreateWithoutCommentsInput = {
    id?: string
    email?: string | null
    name: string
    image?: string | null
    phone?: string | null
    birthday?: string | null
    gender?: string | null
    role?: number
    uid: string
    address?: InputJsonValue | null
    createdAt?: Date | string
    seller?: sellerUncheckedCreateNestedManyWithoutUserInput
    brand?: brandsUncheckedCreateNestedManyWithoutUserInput
    products?: productsUncheckedCreateNestedManyWithoutUserInput
    reviews?: reviewsUncheckedCreateNestedManyWithoutUserInput
    notifications?: notificationsUncheckedCreateNestedManyWithoutUserInput
  }

  export type usersCreateOrConnectWithoutCommentsInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutCommentsInput, usersUncheckedCreateWithoutCommentsInput>
  }

  export type productsCreateWithoutCommentsInput = {
    id?: string
    price: number
    title: string
    description: string
    thumbnail: string
    verified?: boolean
    offers?: offersCreateNestedManyWithoutProductInput
    coins?: coinsCreateNestedManyWithoutProductInput
    variants?: variantsCreateNestedManyWithoutProductInput
    reviews?: reviewsCreateNestedManyWithoutProductInput
    seller?: sellerCreateNestedOneWithoutProductsInput
    brand?: brandsCreateNestedOneWithoutProductsInput
    category?: categoryCreateNestedOneWithoutProductsInput
    subCategory?: subCategoryCreateNestedOneWithoutProductsInput
    option?: optionsCreateNestedOneWithoutProductsInput
    user?: usersCreateNestedOneWithoutProductsInput
  }

  export type productsUncheckedCreateWithoutCommentsInput = {
    id?: string
    price: number
    title: string
    description: string
    thumbnail: string
    verified?: boolean
    sellerId?: string | null
    brandId?: string | null
    categoryId: string
    subCategoryId: string
    optionId: string
    userId: string
    offers?: offersUncheckedCreateNestedManyWithoutProductInput
    coins?: coinsUncheckedCreateNestedManyWithoutProductInput
    variants?: variantsUncheckedCreateNestedManyWithoutProductInput
    reviews?: reviewsUncheckedCreateNestedManyWithoutProductInput
  }

  export type productsCreateOrConnectWithoutCommentsInput = {
    where: productsWhereUniqueInput
    create: XOR<productsCreateWithoutCommentsInput, productsUncheckedCreateWithoutCommentsInput>
  }

  export type notificationsCreateWithoutCommentsInput = {
    id?: string
    message: string
    title: string
    user?: usersCreateNestedOneWithoutNotificationsInput
    reviews?: reviewsCreateNestedOneWithoutNotificationsInput
  }

  export type notificationsUncheckedCreateWithoutCommentsInput = {
    id?: string
    message: string
    title: string
    userId: string
    reviewId: string
  }

  export type notificationsCreateOrConnectWithoutCommentsInput = {
    where: notificationsWhereUniqueInput
    create: XOR<notificationsCreateWithoutCommentsInput, notificationsUncheckedCreateWithoutCommentsInput>
  }

  export type notificationsCreateManyCommentsInputEnvelope = {
    data: notificationsCreateManyCommentsInput | notificationsCreateManyCommentsInput[]
  }

  export type usersUpsertWithoutCommentsInput = {
    update: XOR<usersUpdateWithoutCommentsInput, usersUncheckedUpdateWithoutCommentsInput>
    create: XOR<usersCreateWithoutCommentsInput, usersUncheckedCreateWithoutCommentsInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutCommentsInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutCommentsInput, usersUncheckedUpdateWithoutCommentsInput>
  }

  export type usersUpdateWithoutCommentsInput = {
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    role?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    address?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    seller?: sellerUpdateManyWithoutUserNestedInput
    brand?: brandsUpdateManyWithoutUserNestedInput
    products?: productsUpdateManyWithoutUserNestedInput
    reviews?: reviewsUpdateManyWithoutUserNestedInput
    notifications?: notificationsUpdateManyWithoutUserNestedInput
  }

  export type usersUncheckedUpdateWithoutCommentsInput = {
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    role?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    address?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    seller?: sellerUncheckedUpdateManyWithoutUserNestedInput
    brand?: brandsUncheckedUpdateManyWithoutUserNestedInput
    products?: productsUncheckedUpdateManyWithoutUserNestedInput
    reviews?: reviewsUncheckedUpdateManyWithoutUserNestedInput
    notifications?: notificationsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type productsUpsertWithoutCommentsInput = {
    update: XOR<productsUpdateWithoutCommentsInput, productsUncheckedUpdateWithoutCommentsInput>
    create: XOR<productsCreateWithoutCommentsInput, productsUncheckedCreateWithoutCommentsInput>
    where?: productsWhereInput
  }

  export type productsUpdateToOneWithWhereWithoutCommentsInput = {
    where?: productsWhereInput
    data: XOR<productsUpdateWithoutCommentsInput, productsUncheckedUpdateWithoutCommentsInput>
  }

  export type productsUpdateWithoutCommentsInput = {
    price?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    offers?: offersUpdateManyWithoutProductNestedInput
    coins?: coinsUpdateManyWithoutProductNestedInput
    variants?: variantsUpdateManyWithoutProductNestedInput
    reviews?: reviewsUpdateManyWithoutProductNestedInput
    seller?: sellerUpdateOneWithoutProductsNestedInput
    brand?: brandsUpdateOneWithoutProductsNestedInput
    category?: categoryUpdateOneWithoutProductsNestedInput
    subCategory?: subCategoryUpdateOneWithoutProductsNestedInput
    option?: optionsUpdateOneWithoutProductsNestedInput
    user?: usersUpdateOneWithoutProductsNestedInput
  }

  export type productsUncheckedUpdateWithoutCommentsInput = {
    price?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    sellerId?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    subCategoryId?: StringFieldUpdateOperationsInput | string
    optionId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    offers?: offersUncheckedUpdateManyWithoutProductNestedInput
    coins?: coinsUncheckedUpdateManyWithoutProductNestedInput
    variants?: variantsUncheckedUpdateManyWithoutProductNestedInput
    reviews?: reviewsUncheckedUpdateManyWithoutProductNestedInput
  }

  export type notificationsUpsertWithWhereUniqueWithoutCommentsInput = {
    where: notificationsWhereUniqueInput
    update: XOR<notificationsUpdateWithoutCommentsInput, notificationsUncheckedUpdateWithoutCommentsInput>
    create: XOR<notificationsCreateWithoutCommentsInput, notificationsUncheckedCreateWithoutCommentsInput>
  }

  export type notificationsUpdateWithWhereUniqueWithoutCommentsInput = {
    where: notificationsWhereUniqueInput
    data: XOR<notificationsUpdateWithoutCommentsInput, notificationsUncheckedUpdateWithoutCommentsInput>
  }

  export type notificationsUpdateManyWithWhereWithoutCommentsInput = {
    where: notificationsScalarWhereInput
    data: XOR<notificationsUpdateManyMutationInput, notificationsUncheckedUpdateManyWithoutCommentsInput>
  }

  export type usersCreateWithoutReviewsInput = {
    id?: string
    email?: string | null
    name: string
    image?: string | null
    phone?: string | null
    birthday?: string | null
    gender?: string | null
    role?: number
    uid: string
    address?: InputJsonValue | null
    createdAt?: Date | string
    seller?: sellerCreateNestedManyWithoutUserInput
    brand?: brandsCreateNestedManyWithoutUserInput
    products?: productsCreateNestedManyWithoutUserInput
    comments?: commentsCreateNestedManyWithoutUserInput
    notifications?: notificationsCreateNestedManyWithoutUserInput
  }

  export type usersUncheckedCreateWithoutReviewsInput = {
    id?: string
    email?: string | null
    name: string
    image?: string | null
    phone?: string | null
    birthday?: string | null
    gender?: string | null
    role?: number
    uid: string
    address?: InputJsonValue | null
    createdAt?: Date | string
    seller?: sellerUncheckedCreateNestedManyWithoutUserInput
    brand?: brandsUncheckedCreateNestedManyWithoutUserInput
    products?: productsUncheckedCreateNestedManyWithoutUserInput
    comments?: commentsUncheckedCreateNestedManyWithoutUserInput
    notifications?: notificationsUncheckedCreateNestedManyWithoutUserInput
  }

  export type usersCreateOrConnectWithoutReviewsInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutReviewsInput, usersUncheckedCreateWithoutReviewsInput>
  }

  export type productsCreateWithoutReviewsInput = {
    id?: string
    price: number
    title: string
    description: string
    thumbnail: string
    verified?: boolean
    offers?: offersCreateNestedManyWithoutProductInput
    coins?: coinsCreateNestedManyWithoutProductInput
    variants?: variantsCreateNestedManyWithoutProductInput
    comments?: commentsCreateNestedManyWithoutProductInput
    seller?: sellerCreateNestedOneWithoutProductsInput
    brand?: brandsCreateNestedOneWithoutProductsInput
    category?: categoryCreateNestedOneWithoutProductsInput
    subCategory?: subCategoryCreateNestedOneWithoutProductsInput
    option?: optionsCreateNestedOneWithoutProductsInput
    user?: usersCreateNestedOneWithoutProductsInput
  }

  export type productsUncheckedCreateWithoutReviewsInput = {
    id?: string
    price: number
    title: string
    description: string
    thumbnail: string
    verified?: boolean
    sellerId?: string | null
    brandId?: string | null
    categoryId: string
    subCategoryId: string
    optionId: string
    userId: string
    offers?: offersUncheckedCreateNestedManyWithoutProductInput
    coins?: coinsUncheckedCreateNestedManyWithoutProductInput
    variants?: variantsUncheckedCreateNestedManyWithoutProductInput
    comments?: commentsUncheckedCreateNestedManyWithoutProductInput
  }

  export type productsCreateOrConnectWithoutReviewsInput = {
    where: productsWhereUniqueInput
    create: XOR<productsCreateWithoutReviewsInput, productsUncheckedCreateWithoutReviewsInput>
  }

  export type notificationsCreateWithoutReviewsInput = {
    id?: string
    message: string
    title: string
    user?: usersCreateNestedOneWithoutNotificationsInput
    comments?: commentsCreateNestedOneWithoutNotificationsInput
  }

  export type notificationsUncheckedCreateWithoutReviewsInput = {
    id?: string
    message: string
    title: string
    userId: string
    commentId: string
  }

  export type notificationsCreateOrConnectWithoutReviewsInput = {
    where: notificationsWhereUniqueInput
    create: XOR<notificationsCreateWithoutReviewsInput, notificationsUncheckedCreateWithoutReviewsInput>
  }

  export type notificationsCreateManyReviewsInputEnvelope = {
    data: notificationsCreateManyReviewsInput | notificationsCreateManyReviewsInput[]
  }

  export type usersUpsertWithoutReviewsInput = {
    update: XOR<usersUpdateWithoutReviewsInput, usersUncheckedUpdateWithoutReviewsInput>
    create: XOR<usersCreateWithoutReviewsInput, usersUncheckedCreateWithoutReviewsInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutReviewsInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutReviewsInput, usersUncheckedUpdateWithoutReviewsInput>
  }

  export type usersUpdateWithoutReviewsInput = {
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    role?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    address?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    seller?: sellerUpdateManyWithoutUserNestedInput
    brand?: brandsUpdateManyWithoutUserNestedInput
    products?: productsUpdateManyWithoutUserNestedInput
    comments?: commentsUpdateManyWithoutUserNestedInput
    notifications?: notificationsUpdateManyWithoutUserNestedInput
  }

  export type usersUncheckedUpdateWithoutReviewsInput = {
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    role?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    address?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    seller?: sellerUncheckedUpdateManyWithoutUserNestedInput
    brand?: brandsUncheckedUpdateManyWithoutUserNestedInput
    products?: productsUncheckedUpdateManyWithoutUserNestedInput
    comments?: commentsUncheckedUpdateManyWithoutUserNestedInput
    notifications?: notificationsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type productsUpsertWithoutReviewsInput = {
    update: XOR<productsUpdateWithoutReviewsInput, productsUncheckedUpdateWithoutReviewsInput>
    create: XOR<productsCreateWithoutReviewsInput, productsUncheckedCreateWithoutReviewsInput>
    where?: productsWhereInput
  }

  export type productsUpdateToOneWithWhereWithoutReviewsInput = {
    where?: productsWhereInput
    data: XOR<productsUpdateWithoutReviewsInput, productsUncheckedUpdateWithoutReviewsInput>
  }

  export type productsUpdateWithoutReviewsInput = {
    price?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    offers?: offersUpdateManyWithoutProductNestedInput
    coins?: coinsUpdateManyWithoutProductNestedInput
    variants?: variantsUpdateManyWithoutProductNestedInput
    comments?: commentsUpdateManyWithoutProductNestedInput
    seller?: sellerUpdateOneWithoutProductsNestedInput
    brand?: brandsUpdateOneWithoutProductsNestedInput
    category?: categoryUpdateOneWithoutProductsNestedInput
    subCategory?: subCategoryUpdateOneWithoutProductsNestedInput
    option?: optionsUpdateOneWithoutProductsNestedInput
    user?: usersUpdateOneWithoutProductsNestedInput
  }

  export type productsUncheckedUpdateWithoutReviewsInput = {
    price?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    sellerId?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    subCategoryId?: StringFieldUpdateOperationsInput | string
    optionId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    offers?: offersUncheckedUpdateManyWithoutProductNestedInput
    coins?: coinsUncheckedUpdateManyWithoutProductNestedInput
    variants?: variantsUncheckedUpdateManyWithoutProductNestedInput
    comments?: commentsUncheckedUpdateManyWithoutProductNestedInput
  }

  export type notificationsUpsertWithWhereUniqueWithoutReviewsInput = {
    where: notificationsWhereUniqueInput
    update: XOR<notificationsUpdateWithoutReviewsInput, notificationsUncheckedUpdateWithoutReviewsInput>
    create: XOR<notificationsCreateWithoutReviewsInput, notificationsUncheckedCreateWithoutReviewsInput>
  }

  export type notificationsUpdateWithWhereUniqueWithoutReviewsInput = {
    where: notificationsWhereUniqueInput
    data: XOR<notificationsUpdateWithoutReviewsInput, notificationsUncheckedUpdateWithoutReviewsInput>
  }

  export type notificationsUpdateManyWithWhereWithoutReviewsInput = {
    where: notificationsScalarWhereInput
    data: XOR<notificationsUpdateManyMutationInput, notificationsUncheckedUpdateManyWithoutReviewsInput>
  }

  export type usersCreateWithoutNotificationsInput = {
    id?: string
    email?: string | null
    name: string
    image?: string | null
    phone?: string | null
    birthday?: string | null
    gender?: string | null
    role?: number
    uid: string
    address?: InputJsonValue | null
    createdAt?: Date | string
    seller?: sellerCreateNestedManyWithoutUserInput
    brand?: brandsCreateNestedManyWithoutUserInput
    products?: productsCreateNestedManyWithoutUserInput
    comments?: commentsCreateNestedManyWithoutUserInput
    reviews?: reviewsCreateNestedManyWithoutUserInput
  }

  export type usersUncheckedCreateWithoutNotificationsInput = {
    id?: string
    email?: string | null
    name: string
    image?: string | null
    phone?: string | null
    birthday?: string | null
    gender?: string | null
    role?: number
    uid: string
    address?: InputJsonValue | null
    createdAt?: Date | string
    seller?: sellerUncheckedCreateNestedManyWithoutUserInput
    brand?: brandsUncheckedCreateNestedManyWithoutUserInput
    products?: productsUncheckedCreateNestedManyWithoutUserInput
    comments?: commentsUncheckedCreateNestedManyWithoutUserInput
    reviews?: reviewsUncheckedCreateNestedManyWithoutUserInput
  }

  export type usersCreateOrConnectWithoutNotificationsInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutNotificationsInput, usersUncheckedCreateWithoutNotificationsInput>
  }

  export type commentsCreateWithoutNotificationsInput = {
    id?: string
    message: string
    replay: string
    user?: usersCreateNestedOneWithoutCommentsInput
    product?: productsCreateNestedOneWithoutCommentsInput
  }

  export type commentsUncheckedCreateWithoutNotificationsInput = {
    id?: string
    message: string
    replay: string
    userId: string
    productId: string
  }

  export type commentsCreateOrConnectWithoutNotificationsInput = {
    where: commentsWhereUniqueInput
    create: XOR<commentsCreateWithoutNotificationsInput, commentsUncheckedCreateWithoutNotificationsInput>
  }

  export type reviewsCreateWithoutNotificationsInput = {
    id?: string
    message: string
    rate?: number
    replay: string
    user?: usersCreateNestedOneWithoutReviewsInput
    product?: productsCreateNestedOneWithoutReviewsInput
  }

  export type reviewsUncheckedCreateWithoutNotificationsInput = {
    id?: string
    message: string
    rate?: number
    replay: string
    userId: string
    productId: string
  }

  export type reviewsCreateOrConnectWithoutNotificationsInput = {
    where: reviewsWhereUniqueInput
    create: XOR<reviewsCreateWithoutNotificationsInput, reviewsUncheckedCreateWithoutNotificationsInput>
  }

  export type usersUpsertWithoutNotificationsInput = {
    update: XOR<usersUpdateWithoutNotificationsInput, usersUncheckedUpdateWithoutNotificationsInput>
    create: XOR<usersCreateWithoutNotificationsInput, usersUncheckedCreateWithoutNotificationsInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutNotificationsInput, usersUncheckedUpdateWithoutNotificationsInput>
  }

  export type usersUpdateWithoutNotificationsInput = {
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    role?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    address?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    seller?: sellerUpdateManyWithoutUserNestedInput
    brand?: brandsUpdateManyWithoutUserNestedInput
    products?: productsUpdateManyWithoutUserNestedInput
    comments?: commentsUpdateManyWithoutUserNestedInput
    reviews?: reviewsUpdateManyWithoutUserNestedInput
  }

  export type usersUncheckedUpdateWithoutNotificationsInput = {
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    role?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    address?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    seller?: sellerUncheckedUpdateManyWithoutUserNestedInput
    brand?: brandsUncheckedUpdateManyWithoutUserNestedInput
    products?: productsUncheckedUpdateManyWithoutUserNestedInput
    comments?: commentsUncheckedUpdateManyWithoutUserNestedInput
    reviews?: reviewsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type commentsUpsertWithoutNotificationsInput = {
    update: XOR<commentsUpdateWithoutNotificationsInput, commentsUncheckedUpdateWithoutNotificationsInput>
    create: XOR<commentsCreateWithoutNotificationsInput, commentsUncheckedCreateWithoutNotificationsInput>
    where?: commentsWhereInput
  }

  export type commentsUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: commentsWhereInput
    data: XOR<commentsUpdateWithoutNotificationsInput, commentsUncheckedUpdateWithoutNotificationsInput>
  }

  export type commentsUpdateWithoutNotificationsInput = {
    message?: StringFieldUpdateOperationsInput | string
    replay?: StringFieldUpdateOperationsInput | string
    user?: usersUpdateOneWithoutCommentsNestedInput
    product?: productsUpdateOneWithoutCommentsNestedInput
  }

  export type commentsUncheckedUpdateWithoutNotificationsInput = {
    message?: StringFieldUpdateOperationsInput | string
    replay?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
  }

  export type reviewsUpsertWithoutNotificationsInput = {
    update: XOR<reviewsUpdateWithoutNotificationsInput, reviewsUncheckedUpdateWithoutNotificationsInput>
    create: XOR<reviewsCreateWithoutNotificationsInput, reviewsUncheckedCreateWithoutNotificationsInput>
    where?: reviewsWhereInput
  }

  export type reviewsUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: reviewsWhereInput
    data: XOR<reviewsUpdateWithoutNotificationsInput, reviewsUncheckedUpdateWithoutNotificationsInput>
  }

  export type reviewsUpdateWithoutNotificationsInput = {
    message?: StringFieldUpdateOperationsInput | string
    rate?: IntFieldUpdateOperationsInput | number
    replay?: StringFieldUpdateOperationsInput | string
    user?: usersUpdateOneWithoutReviewsNestedInput
    product?: productsUpdateOneWithoutReviewsNestedInput
  }

  export type reviewsUncheckedUpdateWithoutNotificationsInput = {
    message?: StringFieldUpdateOperationsInput | string
    rate?: IntFieldUpdateOperationsInput | number
    replay?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
  }

  export type sellerCreateManyUserInput = {
    id?: string
    shopName: string
    shopAddress: string
  }

  export type brandsCreateManyUserInput = {
    id?: string
    brandName: string
    brandAddress: string
    brandIcon: string
  }

  export type productsCreateManyUserInput = {
    id?: string
    price: number
    title: string
    description: string
    thumbnail: string
    verified?: boolean
    sellerId?: string | null
    brandId?: string | null
    categoryId: string
    subCategoryId: string
    optionId: string
  }

  export type commentsCreateManyUserInput = {
    id?: string
    message: string
    replay: string
    productId: string
  }

  export type reviewsCreateManyUserInput = {
    id?: string
    message: string
    rate?: number
    replay: string
    productId: string
  }

  export type notificationsCreateManyUserInput = {
    id?: string
    message: string
    title: string
    commentId: string
    reviewId: string
  }

  export type sellerUpdateWithoutUserInput = {
    shopName?: StringFieldUpdateOperationsInput | string
    shopAddress?: StringFieldUpdateOperationsInput | string
    products?: productsUpdateManyWithoutSellerNestedInput
  }

  export type sellerUncheckedUpdateWithoutUserInput = {
    shopName?: StringFieldUpdateOperationsInput | string
    shopAddress?: StringFieldUpdateOperationsInput | string
    products?: productsUncheckedUpdateManyWithoutSellerNestedInput
  }

  export type sellerUncheckedUpdateManyWithoutUserInput = {
    shopName?: StringFieldUpdateOperationsInput | string
    shopAddress?: StringFieldUpdateOperationsInput | string
  }

  export type brandsUpdateWithoutUserInput = {
    brandName?: StringFieldUpdateOperationsInput | string
    brandAddress?: StringFieldUpdateOperationsInput | string
    brandIcon?: StringFieldUpdateOperationsInput | string
    products?: productsUpdateManyWithoutBrandNestedInput
  }

  export type brandsUncheckedUpdateWithoutUserInput = {
    brandName?: StringFieldUpdateOperationsInput | string
    brandAddress?: StringFieldUpdateOperationsInput | string
    brandIcon?: StringFieldUpdateOperationsInput | string
    products?: productsUncheckedUpdateManyWithoutBrandNestedInput
  }

  export type brandsUncheckedUpdateManyWithoutUserInput = {
    brandName?: StringFieldUpdateOperationsInput | string
    brandAddress?: StringFieldUpdateOperationsInput | string
    brandIcon?: StringFieldUpdateOperationsInput | string
  }

  export type productsUpdateWithoutUserInput = {
    price?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    offers?: offersUpdateManyWithoutProductNestedInput
    coins?: coinsUpdateManyWithoutProductNestedInput
    variants?: variantsUpdateManyWithoutProductNestedInput
    comments?: commentsUpdateManyWithoutProductNestedInput
    reviews?: reviewsUpdateManyWithoutProductNestedInput
    seller?: sellerUpdateOneWithoutProductsNestedInput
    brand?: brandsUpdateOneWithoutProductsNestedInput
    category?: categoryUpdateOneWithoutProductsNestedInput
    subCategory?: subCategoryUpdateOneWithoutProductsNestedInput
    option?: optionsUpdateOneWithoutProductsNestedInput
  }

  export type productsUncheckedUpdateWithoutUserInput = {
    price?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    sellerId?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    subCategoryId?: StringFieldUpdateOperationsInput | string
    optionId?: StringFieldUpdateOperationsInput | string
    offers?: offersUncheckedUpdateManyWithoutProductNestedInput
    coins?: coinsUncheckedUpdateManyWithoutProductNestedInput
    variants?: variantsUncheckedUpdateManyWithoutProductNestedInput
    comments?: commentsUncheckedUpdateManyWithoutProductNestedInput
    reviews?: reviewsUncheckedUpdateManyWithoutProductNestedInput
  }

  export type productsUncheckedUpdateManyWithoutUserInput = {
    price?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    sellerId?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    subCategoryId?: StringFieldUpdateOperationsInput | string
    optionId?: StringFieldUpdateOperationsInput | string
  }

  export type commentsUpdateWithoutUserInput = {
    message?: StringFieldUpdateOperationsInput | string
    replay?: StringFieldUpdateOperationsInput | string
    product?: productsUpdateOneWithoutCommentsNestedInput
    notifications?: notificationsUpdateManyWithoutCommentsNestedInput
  }

  export type commentsUncheckedUpdateWithoutUserInput = {
    message?: StringFieldUpdateOperationsInput | string
    replay?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    notifications?: notificationsUncheckedUpdateManyWithoutCommentsNestedInput
  }

  export type commentsUncheckedUpdateManyWithoutUserInput = {
    message?: StringFieldUpdateOperationsInput | string
    replay?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
  }

  export type reviewsUpdateWithoutUserInput = {
    message?: StringFieldUpdateOperationsInput | string
    rate?: IntFieldUpdateOperationsInput | number
    replay?: StringFieldUpdateOperationsInput | string
    product?: productsUpdateOneWithoutReviewsNestedInput
    notifications?: notificationsUpdateManyWithoutReviewsNestedInput
  }

  export type reviewsUncheckedUpdateWithoutUserInput = {
    message?: StringFieldUpdateOperationsInput | string
    rate?: IntFieldUpdateOperationsInput | number
    replay?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    notifications?: notificationsUncheckedUpdateManyWithoutReviewsNestedInput
  }

  export type reviewsUncheckedUpdateManyWithoutUserInput = {
    message?: StringFieldUpdateOperationsInput | string
    rate?: IntFieldUpdateOperationsInput | number
    replay?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
  }

  export type notificationsUpdateWithoutUserInput = {
    message?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    comments?: commentsUpdateOneWithoutNotificationsNestedInput
    reviews?: reviewsUpdateOneWithoutNotificationsNestedInput
  }

  export type notificationsUncheckedUpdateWithoutUserInput = {
    message?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    commentId?: StringFieldUpdateOperationsInput | string
    reviewId?: StringFieldUpdateOperationsInput | string
  }

  export type notificationsUncheckedUpdateManyWithoutUserInput = {
    message?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    commentId?: StringFieldUpdateOperationsInput | string
    reviewId?: StringFieldUpdateOperationsInput | string
  }

  export type subCategoryCreateManyCategoryInput = {
    id?: string
    name: string
  }

  export type productsCreateManyCategoryInput = {
    id?: string
    price: number
    title: string
    description: string
    thumbnail: string
    verified?: boolean
    sellerId?: string | null
    brandId?: string | null
    subCategoryId: string
    optionId: string
    userId: string
  }

  export type subCategoryUpdateWithoutCategoryInput = {
    name?: StringFieldUpdateOperationsInput | string
    options?: optionsUpdateManyWithoutSubCategoryNestedInput
    products?: productsUpdateManyWithoutSubCategoryNestedInput
  }

  export type subCategoryUncheckedUpdateWithoutCategoryInput = {
    name?: StringFieldUpdateOperationsInput | string
    options?: optionsUncheckedUpdateManyWithoutSubCategoryNestedInput
    products?: productsUncheckedUpdateManyWithoutSubCategoryNestedInput
  }

  export type subCategoryUncheckedUpdateManyWithoutCategoryInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type productsUpdateWithoutCategoryInput = {
    price?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    offers?: offersUpdateManyWithoutProductNestedInput
    coins?: coinsUpdateManyWithoutProductNestedInput
    variants?: variantsUpdateManyWithoutProductNestedInput
    comments?: commentsUpdateManyWithoutProductNestedInput
    reviews?: reviewsUpdateManyWithoutProductNestedInput
    seller?: sellerUpdateOneWithoutProductsNestedInput
    brand?: brandsUpdateOneWithoutProductsNestedInput
    subCategory?: subCategoryUpdateOneWithoutProductsNestedInput
    option?: optionsUpdateOneWithoutProductsNestedInput
    user?: usersUpdateOneWithoutProductsNestedInput
  }

  export type productsUncheckedUpdateWithoutCategoryInput = {
    price?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    sellerId?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    subCategoryId?: StringFieldUpdateOperationsInput | string
    optionId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    offers?: offersUncheckedUpdateManyWithoutProductNestedInput
    coins?: coinsUncheckedUpdateManyWithoutProductNestedInput
    variants?: variantsUncheckedUpdateManyWithoutProductNestedInput
    comments?: commentsUncheckedUpdateManyWithoutProductNestedInput
    reviews?: reviewsUncheckedUpdateManyWithoutProductNestedInput
  }

  export type productsUncheckedUpdateManyWithoutCategoryInput = {
    price?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    sellerId?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    subCategoryId?: StringFieldUpdateOperationsInput | string
    optionId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type optionsCreateManySubCategoryInput = {
    id?: string
    name: string
  }

  export type productsCreateManySubCategoryInput = {
    id?: string
    price: number
    title: string
    description: string
    thumbnail: string
    verified?: boolean
    sellerId?: string | null
    brandId?: string | null
    categoryId: string
    optionId: string
    userId: string
  }

  export type optionsUpdateWithoutSubCategoryInput = {
    name?: StringFieldUpdateOperationsInput | string
    products?: productsUpdateManyWithoutOptionNestedInput
  }

  export type optionsUncheckedUpdateWithoutSubCategoryInput = {
    name?: StringFieldUpdateOperationsInput | string
    products?: productsUncheckedUpdateManyWithoutOptionNestedInput
  }

  export type optionsUncheckedUpdateManyWithoutSubCategoryInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type productsUpdateWithoutSubCategoryInput = {
    price?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    offers?: offersUpdateManyWithoutProductNestedInput
    coins?: coinsUpdateManyWithoutProductNestedInput
    variants?: variantsUpdateManyWithoutProductNestedInput
    comments?: commentsUpdateManyWithoutProductNestedInput
    reviews?: reviewsUpdateManyWithoutProductNestedInput
    seller?: sellerUpdateOneWithoutProductsNestedInput
    brand?: brandsUpdateOneWithoutProductsNestedInput
    category?: categoryUpdateOneWithoutProductsNestedInput
    option?: optionsUpdateOneWithoutProductsNestedInput
    user?: usersUpdateOneWithoutProductsNestedInput
  }

  export type productsUncheckedUpdateWithoutSubCategoryInput = {
    price?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    sellerId?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    optionId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    offers?: offersUncheckedUpdateManyWithoutProductNestedInput
    coins?: coinsUncheckedUpdateManyWithoutProductNestedInput
    variants?: variantsUncheckedUpdateManyWithoutProductNestedInput
    comments?: commentsUncheckedUpdateManyWithoutProductNestedInput
    reviews?: reviewsUncheckedUpdateManyWithoutProductNestedInput
  }

  export type productsUncheckedUpdateManyWithoutSubCategoryInput = {
    price?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    sellerId?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    optionId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type productsCreateManyOptionInput = {
    id?: string
    price: number
    title: string
    description: string
    thumbnail: string
    verified?: boolean
    sellerId?: string | null
    brandId?: string | null
    categoryId: string
    subCategoryId: string
    userId: string
  }

  export type productsUpdateWithoutOptionInput = {
    price?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    offers?: offersUpdateManyWithoutProductNestedInput
    coins?: coinsUpdateManyWithoutProductNestedInput
    variants?: variantsUpdateManyWithoutProductNestedInput
    comments?: commentsUpdateManyWithoutProductNestedInput
    reviews?: reviewsUpdateManyWithoutProductNestedInput
    seller?: sellerUpdateOneWithoutProductsNestedInput
    brand?: brandsUpdateOneWithoutProductsNestedInput
    category?: categoryUpdateOneWithoutProductsNestedInput
    subCategory?: subCategoryUpdateOneWithoutProductsNestedInput
    user?: usersUpdateOneWithoutProductsNestedInput
  }

  export type productsUncheckedUpdateWithoutOptionInput = {
    price?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    sellerId?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    subCategoryId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    offers?: offersUncheckedUpdateManyWithoutProductNestedInput
    coins?: coinsUncheckedUpdateManyWithoutProductNestedInput
    variants?: variantsUncheckedUpdateManyWithoutProductNestedInput
    comments?: commentsUncheckedUpdateManyWithoutProductNestedInput
    reviews?: reviewsUncheckedUpdateManyWithoutProductNestedInput
  }

  export type productsUncheckedUpdateManyWithoutOptionInput = {
    price?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    sellerId?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    subCategoryId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type productsCreateManySellerInput = {
    id?: string
    price: number
    title: string
    description: string
    thumbnail: string
    verified?: boolean
    brandId?: string | null
    categoryId: string
    subCategoryId: string
    optionId: string
    userId: string
  }

  export type productsUpdateWithoutSellerInput = {
    price?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    offers?: offersUpdateManyWithoutProductNestedInput
    coins?: coinsUpdateManyWithoutProductNestedInput
    variants?: variantsUpdateManyWithoutProductNestedInput
    comments?: commentsUpdateManyWithoutProductNestedInput
    reviews?: reviewsUpdateManyWithoutProductNestedInput
    brand?: brandsUpdateOneWithoutProductsNestedInput
    category?: categoryUpdateOneWithoutProductsNestedInput
    subCategory?: subCategoryUpdateOneWithoutProductsNestedInput
    option?: optionsUpdateOneWithoutProductsNestedInput
    user?: usersUpdateOneWithoutProductsNestedInput
  }

  export type productsUncheckedUpdateWithoutSellerInput = {
    price?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    subCategoryId?: StringFieldUpdateOperationsInput | string
    optionId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    offers?: offersUncheckedUpdateManyWithoutProductNestedInput
    coins?: coinsUncheckedUpdateManyWithoutProductNestedInput
    variants?: variantsUncheckedUpdateManyWithoutProductNestedInput
    comments?: commentsUncheckedUpdateManyWithoutProductNestedInput
    reviews?: reviewsUncheckedUpdateManyWithoutProductNestedInput
  }

  export type productsUncheckedUpdateManyWithoutSellerInput = {
    price?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    subCategoryId?: StringFieldUpdateOperationsInput | string
    optionId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type productsCreateManyBrandInput = {
    id?: string
    price: number
    title: string
    description: string
    thumbnail: string
    verified?: boolean
    sellerId?: string | null
    categoryId: string
    subCategoryId: string
    optionId: string
    userId: string
  }

  export type productsUpdateWithoutBrandInput = {
    price?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    offers?: offersUpdateManyWithoutProductNestedInput
    coins?: coinsUpdateManyWithoutProductNestedInput
    variants?: variantsUpdateManyWithoutProductNestedInput
    comments?: commentsUpdateManyWithoutProductNestedInput
    reviews?: reviewsUpdateManyWithoutProductNestedInput
    seller?: sellerUpdateOneWithoutProductsNestedInput
    category?: categoryUpdateOneWithoutProductsNestedInput
    subCategory?: subCategoryUpdateOneWithoutProductsNestedInput
    option?: optionsUpdateOneWithoutProductsNestedInput
    user?: usersUpdateOneWithoutProductsNestedInput
  }

  export type productsUncheckedUpdateWithoutBrandInput = {
    price?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    sellerId?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    subCategoryId?: StringFieldUpdateOperationsInput | string
    optionId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    offers?: offersUncheckedUpdateManyWithoutProductNestedInput
    coins?: coinsUncheckedUpdateManyWithoutProductNestedInput
    variants?: variantsUncheckedUpdateManyWithoutProductNestedInput
    comments?: commentsUncheckedUpdateManyWithoutProductNestedInput
    reviews?: reviewsUncheckedUpdateManyWithoutProductNestedInput
  }

  export type productsUncheckedUpdateManyWithoutBrandInput = {
    price?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    sellerId?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    subCategoryId?: StringFieldUpdateOperationsInput | string
    optionId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type offersCreateManyProductInput = {
    id?: string
    money?: number
    percentage?: number
    name?: string | null
  }

  export type coinsCreateManyProductInput = {
    id?: string
    number?: number
    name?: string | null
  }

  export type variantsCreateManyProductInput = {
    id?: string
    size: string
    color: string
    image: string
  }

  export type commentsCreateManyProductInput = {
    id?: string
    message: string
    replay: string
    userId: string
  }

  export type reviewsCreateManyProductInput = {
    id?: string
    message: string
    rate?: number
    replay: string
    userId: string
  }

  export type offersUpdateWithoutProductInput = {
    money?: IntFieldUpdateOperationsInput | number
    percentage?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type offersUncheckedUpdateWithoutProductInput = {
    money?: IntFieldUpdateOperationsInput | number
    percentage?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type offersUncheckedUpdateManyWithoutProductInput = {
    money?: IntFieldUpdateOperationsInput | number
    percentage?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type coinsUpdateWithoutProductInput = {
    number?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type coinsUncheckedUpdateWithoutProductInput = {
    number?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type coinsUncheckedUpdateManyWithoutProductInput = {
    number?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type variantsUpdateWithoutProductInput = {
    size?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type variantsUncheckedUpdateWithoutProductInput = {
    size?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type variantsUncheckedUpdateManyWithoutProductInput = {
    size?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type commentsUpdateWithoutProductInput = {
    message?: StringFieldUpdateOperationsInput | string
    replay?: StringFieldUpdateOperationsInput | string
    user?: usersUpdateOneWithoutCommentsNestedInput
    notifications?: notificationsUpdateManyWithoutCommentsNestedInput
  }

  export type commentsUncheckedUpdateWithoutProductInput = {
    message?: StringFieldUpdateOperationsInput | string
    replay?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    notifications?: notificationsUncheckedUpdateManyWithoutCommentsNestedInput
  }

  export type commentsUncheckedUpdateManyWithoutProductInput = {
    message?: StringFieldUpdateOperationsInput | string
    replay?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type reviewsUpdateWithoutProductInput = {
    message?: StringFieldUpdateOperationsInput | string
    rate?: IntFieldUpdateOperationsInput | number
    replay?: StringFieldUpdateOperationsInput | string
    user?: usersUpdateOneWithoutReviewsNestedInput
    notifications?: notificationsUpdateManyWithoutReviewsNestedInput
  }

  export type reviewsUncheckedUpdateWithoutProductInput = {
    message?: StringFieldUpdateOperationsInput | string
    rate?: IntFieldUpdateOperationsInput | number
    replay?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    notifications?: notificationsUncheckedUpdateManyWithoutReviewsNestedInput
  }

  export type reviewsUncheckedUpdateManyWithoutProductInput = {
    message?: StringFieldUpdateOperationsInput | string
    rate?: IntFieldUpdateOperationsInput | number
    replay?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type notificationsCreateManyCommentsInput = {
    id?: string
    message: string
    title: string
    userId: string
    reviewId: string
  }

  export type notificationsUpdateWithoutCommentsInput = {
    message?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    user?: usersUpdateOneWithoutNotificationsNestedInput
    reviews?: reviewsUpdateOneWithoutNotificationsNestedInput
  }

  export type notificationsUncheckedUpdateWithoutCommentsInput = {
    message?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    reviewId?: StringFieldUpdateOperationsInput | string
  }

  export type notificationsUncheckedUpdateManyWithoutCommentsInput = {
    message?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    reviewId?: StringFieldUpdateOperationsInput | string
  }

  export type notificationsCreateManyReviewsInput = {
    id?: string
    message: string
    title: string
    userId: string
    commentId: string
  }

  export type notificationsUpdateWithoutReviewsInput = {
    message?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    user?: usersUpdateOneWithoutNotificationsNestedInput
    comments?: commentsUpdateOneWithoutNotificationsNestedInput
  }

  export type notificationsUncheckedUpdateWithoutReviewsInput = {
    message?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    commentId?: StringFieldUpdateOperationsInput | string
  }

  export type notificationsUncheckedUpdateManyWithoutReviewsInput = {
    message?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    commentId?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}
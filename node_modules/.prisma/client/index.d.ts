
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions

export type PrismaPromise<T> = $Public.PrismaPromise<T>


export type usersPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "users"
  objects: {
    seller: sellerPayload<ExtArgs>[]
    brand: brandsPayload<ExtArgs>[]
    products: productsPayload<ExtArgs>[]
    comments: commentsPayload<ExtArgs>[]
    reviews: reviewsPayload<ExtArgs>[]
    notifications: notificationsPayload<ExtArgs>[]
    flashSellProduct: flashSellProductPayload<ExtArgs>[]
    conversations: conversationsPayload<ExtArgs>[]
    orders: ordersPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: string
    email: string | null
    name: string
    image: string | null
    phone: string | null
    birthday: string | null
    gender: string | null
    role: number
    uid: string
    address: Prisma.JsonValue | null
    createdAt: Date
    pushToken: string | null
    verified: boolean
  }, ExtArgs["result"]["users"]>
  composites: {}
}

/**
 * Model users
 * 
 */
export type users = runtime.Types.DefaultSelection<usersPayload>
export type categoryPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "category"
  objects: {
    subCategory: subCategoryPayload<ExtArgs>[]
    products: productsPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: string
    name: string
    icon: string
  }, ExtArgs["result"]["category"]>
  composites: {}
}

/**
 * Model category
 * 
 */
export type category = runtime.Types.DefaultSelection<categoryPayload>
export type subCategoryPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "subCategory"
  objects: {
    category: categoryPayload<ExtArgs> | null
    options: optionsPayload<ExtArgs>[]
    products: productsPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: string
    name: string
    categoryId: string
  }, ExtArgs["result"]["subCategory"]>
  composites: {}
}

/**
 * Model subCategory
 * 
 */
export type subCategory = runtime.Types.DefaultSelection<subCategoryPayload>
export type optionsPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "options"
  objects: {
    subCategory: subCategoryPayload<ExtArgs> | null
    products: productsPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: string
    name: string
    subCategoryId: string
  }, ExtArgs["result"]["options"]>
  composites: {}
}

/**
 * Model options
 * 
 */
export type options = runtime.Types.DefaultSelection<optionsPayload>
export type sellerPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "seller"
  objects: {
    user: usersPayload<ExtArgs> | null
    products: productsPayload<ExtArgs>[]
    reviews: reviewsPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: string
    userId: string
    shopName: string
    shopAddress: string
    categories: Prisma.JsonValue | null
    logo: string
    verified: boolean
  }, ExtArgs["result"]["seller"]>
  composites: {}
}

/**
 * Model seller
 * 
 */
export type seller = runtime.Types.DefaultSelection<sellerPayload>
export type brandsPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "brands"
  objects: {
    user: usersPayload<ExtArgs> | null
    products: productsPayload<ExtArgs>[]
    reviews: reviewsPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: string
    userId: string
    brandName: string
    brandAddress: string
    brandIcon: string
    categories: Prisma.JsonValue | null
    verified: boolean
  }, ExtArgs["result"]["brands"]>
  composites: {}
}

/**
 * Model brands
 * 
 */
export type brands = runtime.Types.DefaultSelection<brandsPayload>
export type productsPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "products"
  objects: {
    colors: colorsPayload<ExtArgs> | null
    size: sizePayload<ExtArgs> | null
    specification: specificationsPayload<ExtArgs> | null
    comments: commentsPayload<ExtArgs>[]
    reviews: reviewsPayload<ExtArgs>[]
    flashSellProduct: flashSellProductPayload<ExtArgs>[]
    seller: sellerPayload<ExtArgs> | null
    brand: brandsPayload<ExtArgs> | null
    category: categoryPayload<ExtArgs> | null
    subCategory: subCategoryPayload<ExtArgs> | null
    option: optionsPayload<ExtArgs> | null
    user: usersPayload<ExtArgs> | null
    banner: bannerPayload<ExtArgs>[]
    adds: addsPayload<ExtArgs>[]
    messages: messagesPayload<ExtArgs>[]
    orders: ordersPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: string
    price: number
    coin: boolean
    title: string
    description: string
    thumbnail: string
    quantity: number
    minOrder: number
    freeCoin: number
    offer: number
    percentage: boolean
    freeDelivery: boolean
    fixedPrice: boolean
    createdAt: Date
    colorId: string
    sizeId: string
    specificationsId: string
    images: Prisma.JsonValue | null
    verified: boolean
    sellerId: string | null
    brandId: string | null
    categoryId: string
    subCategoryId: string
    optionId: string
    userId: string
  }, ExtArgs["result"]["products"]>
  composites: {}
}

/**
 * Model products
 * 
 */
export type products = runtime.Types.DefaultSelection<productsPayload>
export type colorsPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "colors"
  objects: {
    products: productsPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: string
    title: string
    color: string
  }, ExtArgs["result"]["colors"]>
  composites: {}
}

/**
 * Model colors
 * 
 */
export type colors = runtime.Types.DefaultSelection<colorsPayload>
export type sizePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "size"
  objects: {
    products: productsPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: string
    title: string
    cm: string
  }, ExtArgs["result"]["size"]>
  composites: {}
}

/**
 * Model size
 * 
 */
export type size = runtime.Types.DefaultSelection<sizePayload>
export type specificationsPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "specifications"
  objects: {
    products: productsPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: string
    title: string
    details: string
  }, ExtArgs["result"]["specifications"]>
  composites: {}
}

/**
 * Model specifications
 * 
 */
export type specifications = runtime.Types.DefaultSelection<specificationsPayload>
export type commentsPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "comments"
  objects: {
    user: usersPayload<ExtArgs> | null
    product: productsPayload<ExtArgs> | null
    notifications: notificationsPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: string
    message: string
    image: string | null
    replay: string | null
    userId: string
    productId: string
    receiverId: string
  }, ExtArgs["result"]["comments"]>
  composites: {}
}

/**
 * Model comments
 * 
 */
export type comments = runtime.Types.DefaultSelection<commentsPayload>
export type reviewsPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "reviews"
  objects: {
    user: usersPayload<ExtArgs> | null
    product: productsPayload<ExtArgs> | null
    notifications: notificationsPayload<ExtArgs>[]
    seller: sellerPayload<ExtArgs> | null
    brand: brandsPayload<ExtArgs> | null
  }
  scalars: $Extensions.GetResult<{
    id: string
    message: string
    rate: number
    userId: string
    productId: string
    sellerId: string | null
    brandId: string | null
  }, ExtArgs["result"]["reviews"]>
  composites: {}
}

/**
 * Model reviews
 * 
 */
export type reviews = runtime.Types.DefaultSelection<reviewsPayload>
export type notificationsPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "notifications"
  objects: {
    user: usersPayload<ExtArgs> | null
    comments: commentsPayload<ExtArgs> | null
    reviews: reviewsPayload<ExtArgs> | null
  }
  scalars: $Extensions.GetResult<{
    id: string
    message: string
    title: string
    userId: string
    commentId: string
    reviewId: string
  }, ExtArgs["result"]["notifications"]>
  composites: {}
}

/**
 * Model notifications
 * 
 */
export type notifications = runtime.Types.DefaultSelection<notificationsPayload>
export type flashSellPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "flashSell"
  objects: {
    product: flashSellProductPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: string
    startAt: Date
    endAt: Date
    banner: string
    title: string
  }, ExtArgs["result"]["flashSell"]>
  composites: {}
}

/**
 * Model flashSell
 * 
 */
export type flashSell = runtime.Types.DefaultSelection<flashSellPayload>
export type flashSellProductPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "flashSellProduct"
  objects: {
    flashSell: flashSellPayload<ExtArgs> | null
    product: productsPayload<ExtArgs> | null
    user: usersPayload<ExtArgs> | null
  }
  scalars: $Extensions.GetResult<{
    id: string
    offer: number
    percentage: boolean
    minSell: number
    quantity: number
    deliveryFree: boolean
    flashSellId: string
    productId: string
    userId: string
    createdAt: Date
  }, ExtArgs["result"]["flashSellProduct"]>
  composites: {}
}

/**
 * Model flashSellProduct
 * 
 */
export type flashSellProduct = runtime.Types.DefaultSelection<flashSellProductPayload>
export type contactsPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "contacts"
  objects: {}
  scalars: $Extensions.GetResult<{
    id: string
    title: string
    description: string
    name: string
    phone: string
    email: string
    date: Date
  }, ExtArgs["result"]["contacts"]>
  composites: {}
}

/**
 * Model contacts
 * 
 */
export type contacts = runtime.Types.DefaultSelection<contactsPayload>
export type conversationsPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "conversations"
  objects: {
    sender: usersPayload<ExtArgs> | null
  }
  scalars: $Extensions.GetResult<{
    id: string
    senderId: string
    receiverId: string
    date: Date
  }, ExtArgs["result"]["conversations"]>
  composites: {}
}

/**
 * Model conversations
 * 
 */
export type conversations = runtime.Types.DefaultSelection<conversationsPayload>
export type messagesPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "messages"
  objects: {
    product: productsPayload<ExtArgs> | null
  }
  scalars: $Extensions.GetResult<{
    id: string
    message: string | null
    image: string | null
    date: Date
    productId: string
  }, ExtArgs["result"]["messages"]>
  composites: {}
}

/**
 * Model messages
 * 
 */
export type messages = runtime.Types.DefaultSelection<messagesPayload>
export type ordersPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "orders"
  objects: {
    buyer: usersPayload<ExtArgs>
    product: productsPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: string
    buyerid: string
    productId: string
    offerPrice: number
    date: Date
  }, ExtArgs["result"]["orders"]>
  composites: {}
}

/**
 * Model orders
 * 
 */
export type orders = runtime.Types.DefaultSelection<ordersPayload>
export type bannerPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "banner"
  objects: {
    product: productsPayload<ExtArgs> | null
  }
  scalars: $Extensions.GetResult<{
    id: string
    title: string
    image: string
    productId: string
  }, ExtArgs["result"]["banner"]>
  composites: {}
}

/**
 * Model banner
 * 
 */
export type banner = runtime.Types.DefaultSelection<bannerPayload>
export type addsPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "adds"
  objects: {
    product: productsPayload<ExtArgs> | null
    visitors: visitorsPayload<ExtArgs> | null
  }
  scalars: $Extensions.GetResult<{
    id: string
    title: string
    image: string
    productId: string
    visitorId: string | null
    date: Date
  }, ExtArgs["result"]["adds"]>
  composites: {}
}

/**
 * Model adds
 * 
 */
export type adds = runtime.Types.DefaultSelection<addsPayload>
export type visitorsPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "visitors"
  objects: {
    adds: addsPayload<ExtArgs> | null
  }
  scalars: $Extensions.GetResult<{
    id: string
    ip: string
    deviceName: string
    randomId: string
    date: Date
  }, ExtArgs["result"]["visitors"]>
  composites: {}
}

/**
 * Model visitors
 * 
 */
export type visitors = runtime.Types.DefaultSelection<visitorsPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.users.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.users.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.users`: Exposes CRUD operations for the **users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.usersDelegate<ExtArgs>;

  /**
   * `prisma.category`: Exposes CRUD operations for the **category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.categoryDelegate<ExtArgs>;

  /**
   * `prisma.subCategory`: Exposes CRUD operations for the **subCategory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SubCategories
    * const subCategories = await prisma.subCategory.findMany()
    * ```
    */
  get subCategory(): Prisma.subCategoryDelegate<ExtArgs>;

  /**
   * `prisma.options`: Exposes CRUD operations for the **options** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Options
    * const options = await prisma.options.findMany()
    * ```
    */
  get options(): Prisma.optionsDelegate<ExtArgs>;

  /**
   * `prisma.seller`: Exposes CRUD operations for the **seller** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sellers
    * const sellers = await prisma.seller.findMany()
    * ```
    */
  get seller(): Prisma.sellerDelegate<ExtArgs>;

  /**
   * `prisma.brands`: Exposes CRUD operations for the **brands** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Brands
    * const brands = await prisma.brands.findMany()
    * ```
    */
  get brands(): Prisma.brandsDelegate<ExtArgs>;

  /**
   * `prisma.products`: Exposes CRUD operations for the **products** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products
    * const products = await prisma.products.findMany()
    * ```
    */
  get products(): Prisma.productsDelegate<ExtArgs>;

  /**
   * `prisma.colors`: Exposes CRUD operations for the **colors** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Colors
    * const colors = await prisma.colors.findMany()
    * ```
    */
  get colors(): Prisma.colorsDelegate<ExtArgs>;

  /**
   * `prisma.size`: Exposes CRUD operations for the **size** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sizes
    * const sizes = await prisma.size.findMany()
    * ```
    */
  get size(): Prisma.sizeDelegate<ExtArgs>;

  /**
   * `prisma.specifications`: Exposes CRUD operations for the **specifications** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Specifications
    * const specifications = await prisma.specifications.findMany()
    * ```
    */
  get specifications(): Prisma.specificationsDelegate<ExtArgs>;

  /**
   * `prisma.comments`: Exposes CRUD operations for the **comments** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Comments
    * const comments = await prisma.comments.findMany()
    * ```
    */
  get comments(): Prisma.commentsDelegate<ExtArgs>;

  /**
   * `prisma.reviews`: Exposes CRUD operations for the **reviews** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reviews
    * const reviews = await prisma.reviews.findMany()
    * ```
    */
  get reviews(): Prisma.reviewsDelegate<ExtArgs>;

  /**
   * `prisma.notifications`: Exposes CRUD operations for the **notifications** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notifications.findMany()
    * ```
    */
  get notifications(): Prisma.notificationsDelegate<ExtArgs>;

  /**
   * `prisma.flashSell`: Exposes CRUD operations for the **flashSell** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FlashSells
    * const flashSells = await prisma.flashSell.findMany()
    * ```
    */
  get flashSell(): Prisma.flashSellDelegate<ExtArgs>;

  /**
   * `prisma.flashSellProduct`: Exposes CRUD operations for the **flashSellProduct** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FlashSellProducts
    * const flashSellProducts = await prisma.flashSellProduct.findMany()
    * ```
    */
  get flashSellProduct(): Prisma.flashSellProductDelegate<ExtArgs>;

  /**
   * `prisma.contacts`: Exposes CRUD operations for the **contacts** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Contacts
    * const contacts = await prisma.contacts.findMany()
    * ```
    */
  get contacts(): Prisma.contactsDelegate<ExtArgs>;

  /**
   * `prisma.conversations`: Exposes CRUD operations for the **conversations** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Conversations
    * const conversations = await prisma.conversations.findMany()
    * ```
    */
  get conversations(): Prisma.conversationsDelegate<ExtArgs>;

  /**
   * `prisma.messages`: Exposes CRUD operations for the **messages** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Messages
    * const messages = await prisma.messages.findMany()
    * ```
    */
  get messages(): Prisma.messagesDelegate<ExtArgs>;

  /**
   * `prisma.orders`: Exposes CRUD operations for the **orders** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Orders
    * const orders = await prisma.orders.findMany()
    * ```
    */
  get orders(): Prisma.ordersDelegate<ExtArgs>;

  /**
   * `prisma.banner`: Exposes CRUD operations for the **banner** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Banners
    * const banners = await prisma.banner.findMany()
    * ```
    */
  get banner(): Prisma.bannerDelegate<ExtArgs>;

  /**
   * `prisma.adds`: Exposes CRUD operations for the **adds** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Adds
    * const adds = await prisma.adds.findMany()
    * ```
    */
  get adds(): Prisma.addsDelegate<ExtArgs>;

  /**
   * `prisma.visitors`: Exposes CRUD operations for the **visitors** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Visitors
    * const visitors = await prisma.visitors.findMany()
    * ```
    */
  get visitors(): Prisma.visitorsDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export type Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export type Args<T, F extends $Public.Operation> = $Public.Args<T, F>
  export type Payload<T, F extends $Public.Operation> = $Public.Payload<T, F>
  export type Result<T, A, F extends $Public.Operation> = $Public.Result<T, A, F>
  export type Exact<T, W> = $Public.Exact<T, W>

  /**
   * Prisma Client JS version: 5.0.0
   * Query Engine version: 6b0aef69b7cdfc787f822ecd7cdc76d5f1991584
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    users: 'users',
    category: 'category',
    subCategory: 'subCategory',
    options: 'options',
    seller: 'seller',
    brands: 'brands',
    products: 'products',
    colors: 'colors',
    size: 'size',
    specifications: 'specifications',
    comments: 'comments',
    reviews: 'reviews',
    notifications: 'notifications',
    flashSell: 'flashSell',
    flashSellProduct: 'flashSellProduct',
    contacts: 'contacts',
    conversations: 'conversations',
    messages: 'messages',
    orders: 'orders',
    banner: 'banner',
    adds: 'adds',
    visitors: 'visitors'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.Args}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'users' | 'category' | 'subCategory' | 'options' | 'seller' | 'brands' | 'products' | 'colors' | 'size' | 'specifications' | 'comments' | 'reviews' | 'notifications' | 'flashSell' | 'flashSellProduct' | 'contacts' | 'conversations' | 'messages' | 'orders' | 'banner' | 'adds' | 'visitors'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      users: {
        payload: usersPayload<ExtArgs>
        fields: Prisma.usersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.usersFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<usersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.usersFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<usersPayload>
          }
          findFirst: {
            args: Prisma.usersFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<usersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.usersFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<usersPayload>
          }
          findMany: {
            args: Prisma.usersFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<usersPayload>[]
          }
          create: {
            args: Prisma.usersCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<usersPayload>
          }
          createMany: {
            args: Prisma.usersCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.usersDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<usersPayload>
          }
          update: {
            args: Prisma.usersUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<usersPayload>
          }
          deleteMany: {
            args: Prisma.usersDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.usersUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.usersUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<usersPayload>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUsers>
          }
          groupBy: {
            args: Prisma.usersGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.usersCountArgs<ExtArgs>,
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
          }
        }
      }
      category: {
        payload: categoryPayload<ExtArgs>
        fields: Prisma.categoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.categoryFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<categoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.categoryFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<categoryPayload>
          }
          findFirst: {
            args: Prisma.categoryFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<categoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.categoryFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<categoryPayload>
          }
          findMany: {
            args: Prisma.categoryFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<categoryPayload>[]
          }
          create: {
            args: Prisma.categoryCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<categoryPayload>
          }
          createMany: {
            args: Prisma.categoryCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.categoryDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<categoryPayload>
          }
          update: {
            args: Prisma.categoryUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<categoryPayload>
          }
          deleteMany: {
            args: Prisma.categoryDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.categoryUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.categoryUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<categoryPayload>
          }
          aggregate: {
            args: Prisma.CategoryAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCategory>
          }
          groupBy: {
            args: Prisma.categoryGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.categoryCountArgs<ExtArgs>,
            result: $Utils.Optional<CategoryCountAggregateOutputType> | number
          }
        }
      }
      subCategory: {
        payload: subCategoryPayload<ExtArgs>
        fields: Prisma.subCategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.subCategoryFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<subCategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.subCategoryFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<subCategoryPayload>
          }
          findFirst: {
            args: Prisma.subCategoryFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<subCategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.subCategoryFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<subCategoryPayload>
          }
          findMany: {
            args: Prisma.subCategoryFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<subCategoryPayload>[]
          }
          create: {
            args: Prisma.subCategoryCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<subCategoryPayload>
          }
          createMany: {
            args: Prisma.subCategoryCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.subCategoryDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<subCategoryPayload>
          }
          update: {
            args: Prisma.subCategoryUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<subCategoryPayload>
          }
          deleteMany: {
            args: Prisma.subCategoryDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.subCategoryUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.subCategoryUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<subCategoryPayload>
          }
          aggregate: {
            args: Prisma.SubCategoryAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSubCategory>
          }
          groupBy: {
            args: Prisma.subCategoryGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SubCategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.subCategoryCountArgs<ExtArgs>,
            result: $Utils.Optional<SubCategoryCountAggregateOutputType> | number
          }
        }
      }
      options: {
        payload: optionsPayload<ExtArgs>
        fields: Prisma.optionsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.optionsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<optionsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.optionsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<optionsPayload>
          }
          findFirst: {
            args: Prisma.optionsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<optionsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.optionsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<optionsPayload>
          }
          findMany: {
            args: Prisma.optionsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<optionsPayload>[]
          }
          create: {
            args: Prisma.optionsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<optionsPayload>
          }
          createMany: {
            args: Prisma.optionsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.optionsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<optionsPayload>
          }
          update: {
            args: Prisma.optionsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<optionsPayload>
          }
          deleteMany: {
            args: Prisma.optionsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.optionsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.optionsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<optionsPayload>
          }
          aggregate: {
            args: Prisma.OptionsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateOptions>
          }
          groupBy: {
            args: Prisma.optionsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<OptionsGroupByOutputType>[]
          }
          count: {
            args: Prisma.optionsCountArgs<ExtArgs>,
            result: $Utils.Optional<OptionsCountAggregateOutputType> | number
          }
        }
      }
      seller: {
        payload: sellerPayload<ExtArgs>
        fields: Prisma.sellerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.sellerFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<sellerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.sellerFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<sellerPayload>
          }
          findFirst: {
            args: Prisma.sellerFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<sellerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.sellerFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<sellerPayload>
          }
          findMany: {
            args: Prisma.sellerFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<sellerPayload>[]
          }
          create: {
            args: Prisma.sellerCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<sellerPayload>
          }
          createMany: {
            args: Prisma.sellerCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.sellerDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<sellerPayload>
          }
          update: {
            args: Prisma.sellerUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<sellerPayload>
          }
          deleteMany: {
            args: Prisma.sellerDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.sellerUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.sellerUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<sellerPayload>
          }
          aggregate: {
            args: Prisma.SellerAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSeller>
          }
          groupBy: {
            args: Prisma.sellerGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SellerGroupByOutputType>[]
          }
          count: {
            args: Prisma.sellerCountArgs<ExtArgs>,
            result: $Utils.Optional<SellerCountAggregateOutputType> | number
          }
        }
      }
      brands: {
        payload: brandsPayload<ExtArgs>
        fields: Prisma.brandsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.brandsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<brandsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.brandsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<brandsPayload>
          }
          findFirst: {
            args: Prisma.brandsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<brandsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.brandsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<brandsPayload>
          }
          findMany: {
            args: Prisma.brandsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<brandsPayload>[]
          }
          create: {
            args: Prisma.brandsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<brandsPayload>
          }
          createMany: {
            args: Prisma.brandsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.brandsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<brandsPayload>
          }
          update: {
            args: Prisma.brandsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<brandsPayload>
          }
          deleteMany: {
            args: Prisma.brandsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.brandsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.brandsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<brandsPayload>
          }
          aggregate: {
            args: Prisma.BrandsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateBrands>
          }
          groupBy: {
            args: Prisma.brandsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<BrandsGroupByOutputType>[]
          }
          count: {
            args: Prisma.brandsCountArgs<ExtArgs>,
            result: $Utils.Optional<BrandsCountAggregateOutputType> | number
          }
        }
      }
      products: {
        payload: productsPayload<ExtArgs>
        fields: Prisma.productsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.productsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<productsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.productsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<productsPayload>
          }
          findFirst: {
            args: Prisma.productsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<productsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.productsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<productsPayload>
          }
          findMany: {
            args: Prisma.productsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<productsPayload>[]
          }
          create: {
            args: Prisma.productsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<productsPayload>
          }
          createMany: {
            args: Prisma.productsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.productsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<productsPayload>
          }
          update: {
            args: Prisma.productsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<productsPayload>
          }
          deleteMany: {
            args: Prisma.productsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.productsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.productsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<productsPayload>
          }
          aggregate: {
            args: Prisma.ProductsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProducts>
          }
          groupBy: {
            args: Prisma.productsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ProductsGroupByOutputType>[]
          }
          count: {
            args: Prisma.productsCountArgs<ExtArgs>,
            result: $Utils.Optional<ProductsCountAggregateOutputType> | number
          }
        }
      }
      colors: {
        payload: colorsPayload<ExtArgs>
        fields: Prisma.colorsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.colorsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<colorsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.colorsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<colorsPayload>
          }
          findFirst: {
            args: Prisma.colorsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<colorsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.colorsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<colorsPayload>
          }
          findMany: {
            args: Prisma.colorsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<colorsPayload>[]
          }
          create: {
            args: Prisma.colorsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<colorsPayload>
          }
          createMany: {
            args: Prisma.colorsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.colorsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<colorsPayload>
          }
          update: {
            args: Prisma.colorsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<colorsPayload>
          }
          deleteMany: {
            args: Prisma.colorsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.colorsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.colorsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<colorsPayload>
          }
          aggregate: {
            args: Prisma.ColorsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateColors>
          }
          groupBy: {
            args: Prisma.colorsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ColorsGroupByOutputType>[]
          }
          count: {
            args: Prisma.colorsCountArgs<ExtArgs>,
            result: $Utils.Optional<ColorsCountAggregateOutputType> | number
          }
        }
      }
      size: {
        payload: sizePayload<ExtArgs>
        fields: Prisma.sizeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.sizeFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<sizePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.sizeFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<sizePayload>
          }
          findFirst: {
            args: Prisma.sizeFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<sizePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.sizeFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<sizePayload>
          }
          findMany: {
            args: Prisma.sizeFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<sizePayload>[]
          }
          create: {
            args: Prisma.sizeCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<sizePayload>
          }
          createMany: {
            args: Prisma.sizeCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.sizeDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<sizePayload>
          }
          update: {
            args: Prisma.sizeUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<sizePayload>
          }
          deleteMany: {
            args: Prisma.sizeDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.sizeUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.sizeUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<sizePayload>
          }
          aggregate: {
            args: Prisma.SizeAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSize>
          }
          groupBy: {
            args: Prisma.sizeGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SizeGroupByOutputType>[]
          }
          count: {
            args: Prisma.sizeCountArgs<ExtArgs>,
            result: $Utils.Optional<SizeCountAggregateOutputType> | number
          }
        }
      }
      specifications: {
        payload: specificationsPayload<ExtArgs>
        fields: Prisma.specificationsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.specificationsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<specificationsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.specificationsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<specificationsPayload>
          }
          findFirst: {
            args: Prisma.specificationsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<specificationsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.specificationsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<specificationsPayload>
          }
          findMany: {
            args: Prisma.specificationsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<specificationsPayload>[]
          }
          create: {
            args: Prisma.specificationsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<specificationsPayload>
          }
          createMany: {
            args: Prisma.specificationsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.specificationsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<specificationsPayload>
          }
          update: {
            args: Prisma.specificationsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<specificationsPayload>
          }
          deleteMany: {
            args: Prisma.specificationsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.specificationsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.specificationsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<specificationsPayload>
          }
          aggregate: {
            args: Prisma.SpecificationsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSpecifications>
          }
          groupBy: {
            args: Prisma.specificationsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SpecificationsGroupByOutputType>[]
          }
          count: {
            args: Prisma.specificationsCountArgs<ExtArgs>,
            result: $Utils.Optional<SpecificationsCountAggregateOutputType> | number
          }
        }
      }
      comments: {
        payload: commentsPayload<ExtArgs>
        fields: Prisma.commentsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.commentsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<commentsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.commentsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<commentsPayload>
          }
          findFirst: {
            args: Prisma.commentsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<commentsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.commentsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<commentsPayload>
          }
          findMany: {
            args: Prisma.commentsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<commentsPayload>[]
          }
          create: {
            args: Prisma.commentsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<commentsPayload>
          }
          createMany: {
            args: Prisma.commentsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.commentsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<commentsPayload>
          }
          update: {
            args: Prisma.commentsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<commentsPayload>
          }
          deleteMany: {
            args: Prisma.commentsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.commentsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.commentsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<commentsPayload>
          }
          aggregate: {
            args: Prisma.CommentsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateComments>
          }
          groupBy: {
            args: Prisma.commentsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CommentsGroupByOutputType>[]
          }
          count: {
            args: Prisma.commentsCountArgs<ExtArgs>,
            result: $Utils.Optional<CommentsCountAggregateOutputType> | number
          }
        }
      }
      reviews: {
        payload: reviewsPayload<ExtArgs>
        fields: Prisma.reviewsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.reviewsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<reviewsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.reviewsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<reviewsPayload>
          }
          findFirst: {
            args: Prisma.reviewsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<reviewsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.reviewsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<reviewsPayload>
          }
          findMany: {
            args: Prisma.reviewsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<reviewsPayload>[]
          }
          create: {
            args: Prisma.reviewsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<reviewsPayload>
          }
          createMany: {
            args: Prisma.reviewsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.reviewsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<reviewsPayload>
          }
          update: {
            args: Prisma.reviewsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<reviewsPayload>
          }
          deleteMany: {
            args: Prisma.reviewsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.reviewsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.reviewsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<reviewsPayload>
          }
          aggregate: {
            args: Prisma.ReviewsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateReviews>
          }
          groupBy: {
            args: Prisma.reviewsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ReviewsGroupByOutputType>[]
          }
          count: {
            args: Prisma.reviewsCountArgs<ExtArgs>,
            result: $Utils.Optional<ReviewsCountAggregateOutputType> | number
          }
        }
      }
      notifications: {
        payload: notificationsPayload<ExtArgs>
        fields: Prisma.notificationsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.notificationsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<notificationsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.notificationsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<notificationsPayload>
          }
          findFirst: {
            args: Prisma.notificationsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<notificationsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.notificationsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<notificationsPayload>
          }
          findMany: {
            args: Prisma.notificationsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<notificationsPayload>[]
          }
          create: {
            args: Prisma.notificationsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<notificationsPayload>
          }
          createMany: {
            args: Prisma.notificationsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.notificationsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<notificationsPayload>
          }
          update: {
            args: Prisma.notificationsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<notificationsPayload>
          }
          deleteMany: {
            args: Prisma.notificationsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.notificationsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.notificationsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<notificationsPayload>
          }
          aggregate: {
            args: Prisma.NotificationsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateNotifications>
          }
          groupBy: {
            args: Prisma.notificationsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<NotificationsGroupByOutputType>[]
          }
          count: {
            args: Prisma.notificationsCountArgs<ExtArgs>,
            result: $Utils.Optional<NotificationsCountAggregateOutputType> | number
          }
        }
      }
      flashSell: {
        payload: flashSellPayload<ExtArgs>
        fields: Prisma.flashSellFieldRefs
        operations: {
          findUnique: {
            args: Prisma.flashSellFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<flashSellPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.flashSellFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<flashSellPayload>
          }
          findFirst: {
            args: Prisma.flashSellFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<flashSellPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.flashSellFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<flashSellPayload>
          }
          findMany: {
            args: Prisma.flashSellFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<flashSellPayload>[]
          }
          create: {
            args: Prisma.flashSellCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<flashSellPayload>
          }
          createMany: {
            args: Prisma.flashSellCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.flashSellDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<flashSellPayload>
          }
          update: {
            args: Prisma.flashSellUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<flashSellPayload>
          }
          deleteMany: {
            args: Prisma.flashSellDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.flashSellUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.flashSellUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<flashSellPayload>
          }
          aggregate: {
            args: Prisma.FlashSellAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateFlashSell>
          }
          groupBy: {
            args: Prisma.flashSellGroupByArgs<ExtArgs>,
            result: $Utils.Optional<FlashSellGroupByOutputType>[]
          }
          count: {
            args: Prisma.flashSellCountArgs<ExtArgs>,
            result: $Utils.Optional<FlashSellCountAggregateOutputType> | number
          }
        }
      }
      flashSellProduct: {
        payload: flashSellProductPayload<ExtArgs>
        fields: Prisma.flashSellProductFieldRefs
        operations: {
          findUnique: {
            args: Prisma.flashSellProductFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<flashSellProductPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.flashSellProductFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<flashSellProductPayload>
          }
          findFirst: {
            args: Prisma.flashSellProductFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<flashSellProductPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.flashSellProductFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<flashSellProductPayload>
          }
          findMany: {
            args: Prisma.flashSellProductFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<flashSellProductPayload>[]
          }
          create: {
            args: Prisma.flashSellProductCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<flashSellProductPayload>
          }
          createMany: {
            args: Prisma.flashSellProductCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.flashSellProductDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<flashSellProductPayload>
          }
          update: {
            args: Prisma.flashSellProductUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<flashSellProductPayload>
          }
          deleteMany: {
            args: Prisma.flashSellProductDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.flashSellProductUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.flashSellProductUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<flashSellProductPayload>
          }
          aggregate: {
            args: Prisma.FlashSellProductAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateFlashSellProduct>
          }
          groupBy: {
            args: Prisma.flashSellProductGroupByArgs<ExtArgs>,
            result: $Utils.Optional<FlashSellProductGroupByOutputType>[]
          }
          count: {
            args: Prisma.flashSellProductCountArgs<ExtArgs>,
            result: $Utils.Optional<FlashSellProductCountAggregateOutputType> | number
          }
        }
      }
      contacts: {
        payload: contactsPayload<ExtArgs>
        fields: Prisma.contactsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.contactsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<contactsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.contactsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<contactsPayload>
          }
          findFirst: {
            args: Prisma.contactsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<contactsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.contactsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<contactsPayload>
          }
          findMany: {
            args: Prisma.contactsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<contactsPayload>[]
          }
          create: {
            args: Prisma.contactsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<contactsPayload>
          }
          createMany: {
            args: Prisma.contactsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.contactsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<contactsPayload>
          }
          update: {
            args: Prisma.contactsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<contactsPayload>
          }
          deleteMany: {
            args: Prisma.contactsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.contactsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.contactsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<contactsPayload>
          }
          aggregate: {
            args: Prisma.ContactsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateContacts>
          }
          groupBy: {
            args: Prisma.contactsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ContactsGroupByOutputType>[]
          }
          count: {
            args: Prisma.contactsCountArgs<ExtArgs>,
            result: $Utils.Optional<ContactsCountAggregateOutputType> | number
          }
        }
      }
      conversations: {
        payload: conversationsPayload<ExtArgs>
        fields: Prisma.conversationsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.conversationsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<conversationsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.conversationsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<conversationsPayload>
          }
          findFirst: {
            args: Prisma.conversationsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<conversationsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.conversationsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<conversationsPayload>
          }
          findMany: {
            args: Prisma.conversationsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<conversationsPayload>[]
          }
          create: {
            args: Prisma.conversationsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<conversationsPayload>
          }
          createMany: {
            args: Prisma.conversationsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.conversationsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<conversationsPayload>
          }
          update: {
            args: Prisma.conversationsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<conversationsPayload>
          }
          deleteMany: {
            args: Prisma.conversationsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.conversationsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.conversationsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<conversationsPayload>
          }
          aggregate: {
            args: Prisma.ConversationsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateConversations>
          }
          groupBy: {
            args: Prisma.conversationsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ConversationsGroupByOutputType>[]
          }
          count: {
            args: Prisma.conversationsCountArgs<ExtArgs>,
            result: $Utils.Optional<ConversationsCountAggregateOutputType> | number
          }
        }
      }
      messages: {
        payload: messagesPayload<ExtArgs>
        fields: Prisma.messagesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.messagesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<messagesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.messagesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<messagesPayload>
          }
          findFirst: {
            args: Prisma.messagesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<messagesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.messagesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<messagesPayload>
          }
          findMany: {
            args: Prisma.messagesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<messagesPayload>[]
          }
          create: {
            args: Prisma.messagesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<messagesPayload>
          }
          createMany: {
            args: Prisma.messagesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.messagesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<messagesPayload>
          }
          update: {
            args: Prisma.messagesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<messagesPayload>
          }
          deleteMany: {
            args: Prisma.messagesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.messagesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.messagesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<messagesPayload>
          }
          aggregate: {
            args: Prisma.MessagesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMessages>
          }
          groupBy: {
            args: Prisma.messagesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MessagesGroupByOutputType>[]
          }
          count: {
            args: Prisma.messagesCountArgs<ExtArgs>,
            result: $Utils.Optional<MessagesCountAggregateOutputType> | number
          }
        }
      }
      orders: {
        payload: ordersPayload<ExtArgs>
        fields: Prisma.ordersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ordersFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ordersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ordersFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ordersPayload>
          }
          findFirst: {
            args: Prisma.ordersFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ordersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ordersFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ordersPayload>
          }
          findMany: {
            args: Prisma.ordersFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ordersPayload>[]
          }
          create: {
            args: Prisma.ordersCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ordersPayload>
          }
          createMany: {
            args: Prisma.ordersCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ordersDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ordersPayload>
          }
          update: {
            args: Prisma.ordersUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ordersPayload>
          }
          deleteMany: {
            args: Prisma.ordersDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ordersUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ordersUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ordersPayload>
          }
          aggregate: {
            args: Prisma.OrdersAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateOrders>
          }
          groupBy: {
            args: Prisma.ordersGroupByArgs<ExtArgs>,
            result: $Utils.Optional<OrdersGroupByOutputType>[]
          }
          count: {
            args: Prisma.ordersCountArgs<ExtArgs>,
            result: $Utils.Optional<OrdersCountAggregateOutputType> | number
          }
        }
      }
      banner: {
        payload: bannerPayload<ExtArgs>
        fields: Prisma.bannerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.bannerFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<bannerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.bannerFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<bannerPayload>
          }
          findFirst: {
            args: Prisma.bannerFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<bannerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.bannerFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<bannerPayload>
          }
          findMany: {
            args: Prisma.bannerFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<bannerPayload>[]
          }
          create: {
            args: Prisma.bannerCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<bannerPayload>
          }
          createMany: {
            args: Prisma.bannerCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.bannerDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<bannerPayload>
          }
          update: {
            args: Prisma.bannerUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<bannerPayload>
          }
          deleteMany: {
            args: Prisma.bannerDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.bannerUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.bannerUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<bannerPayload>
          }
          aggregate: {
            args: Prisma.BannerAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateBanner>
          }
          groupBy: {
            args: Prisma.bannerGroupByArgs<ExtArgs>,
            result: $Utils.Optional<BannerGroupByOutputType>[]
          }
          count: {
            args: Prisma.bannerCountArgs<ExtArgs>,
            result: $Utils.Optional<BannerCountAggregateOutputType> | number
          }
        }
      }
      adds: {
        payload: addsPayload<ExtArgs>
        fields: Prisma.addsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.addsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<addsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.addsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<addsPayload>
          }
          findFirst: {
            args: Prisma.addsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<addsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.addsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<addsPayload>
          }
          findMany: {
            args: Prisma.addsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<addsPayload>[]
          }
          create: {
            args: Prisma.addsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<addsPayload>
          }
          createMany: {
            args: Prisma.addsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.addsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<addsPayload>
          }
          update: {
            args: Prisma.addsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<addsPayload>
          }
          deleteMany: {
            args: Prisma.addsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.addsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.addsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<addsPayload>
          }
          aggregate: {
            args: Prisma.AddsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAdds>
          }
          groupBy: {
            args: Prisma.addsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AddsGroupByOutputType>[]
          }
          count: {
            args: Prisma.addsCountArgs<ExtArgs>,
            result: $Utils.Optional<AddsCountAggregateOutputType> | number
          }
        }
      }
      visitors: {
        payload: visitorsPayload<ExtArgs>
        fields: Prisma.visitorsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.visitorsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<visitorsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.visitorsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<visitorsPayload>
          }
          findFirst: {
            args: Prisma.visitorsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<visitorsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.visitorsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<visitorsPayload>
          }
          findMany: {
            args: Prisma.visitorsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<visitorsPayload>[]
          }
          create: {
            args: Prisma.visitorsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<visitorsPayload>
          }
          createMany: {
            args: Prisma.visitorsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.visitorsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<visitorsPayload>
          }
          update: {
            args: Prisma.visitorsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<visitorsPayload>
          }
          deleteMany: {
            args: Prisma.visitorsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.visitorsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.visitorsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<visitorsPayload>
          }
          aggregate: {
            args: Prisma.VisitorsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateVisitors>
          }
          groupBy: {
            args: Prisma.visitorsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<VisitorsGroupByOutputType>[]
          }
          count: {
            args: Prisma.visitorsCountArgs<ExtArgs>,
            result: $Utils.Optional<VisitorsCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsersCountOutputType
   */


  export type UsersCountOutputType = {
    seller: number
    brand: number
    products: number
    comments: number
    reviews: number
    notifications: number
    flashSellProduct: number
    conversations: number
    orders: number
  }

  export type UsersCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    seller?: boolean | UsersCountOutputTypeCountSellerArgs
    brand?: boolean | UsersCountOutputTypeCountBrandArgs
    products?: boolean | UsersCountOutputTypeCountProductsArgs
    comments?: boolean | UsersCountOutputTypeCountCommentsArgs
    reviews?: boolean | UsersCountOutputTypeCountReviewsArgs
    notifications?: boolean | UsersCountOutputTypeCountNotificationsArgs
    flashSellProduct?: boolean | UsersCountOutputTypeCountFlashSellProductArgs
    conversations?: boolean | UsersCountOutputTypeCountConversationsArgs
    orders?: boolean | UsersCountOutputTypeCountOrdersArgs
  }

  // Custom InputTypes

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     */
    select?: UsersCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountSellerArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: sellerWhereInput
  }


  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountBrandArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: brandsWhereInput
  }


  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountProductsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: productsWhereInput
  }


  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: commentsWhereInput
  }


  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountReviewsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: reviewsWhereInput
  }


  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: notificationsWhereInput
  }


  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountFlashSellProductArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: flashSellProductWhereInput
  }


  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountConversationsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: conversationsWhereInput
  }


  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountOrdersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ordersWhereInput
  }



  /**
   * Count Type CategoryCountOutputType
   */


  export type CategoryCountOutputType = {
    subCategory: number
    products: number
  }

  export type CategoryCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    subCategory?: boolean | CategoryCountOutputTypeCountSubCategoryArgs
    products?: boolean | CategoryCountOutputTypeCountProductsArgs
  }

  // Custom InputTypes

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryCountOutputType
     */
    select?: CategoryCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountSubCategoryArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: subCategoryWhereInput
  }


  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountProductsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: productsWhereInput
  }



  /**
   * Count Type SubCategoryCountOutputType
   */


  export type SubCategoryCountOutputType = {
    options: number
    products: number
  }

  export type SubCategoryCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    options?: boolean | SubCategoryCountOutputTypeCountOptionsArgs
    products?: boolean | SubCategoryCountOutputTypeCountProductsArgs
  }

  // Custom InputTypes

  /**
   * SubCategoryCountOutputType without action
   */
  export type SubCategoryCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubCategoryCountOutputType
     */
    select?: SubCategoryCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * SubCategoryCountOutputType without action
   */
  export type SubCategoryCountOutputTypeCountOptionsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: optionsWhereInput
  }


  /**
   * SubCategoryCountOutputType without action
   */
  export type SubCategoryCountOutputTypeCountProductsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: productsWhereInput
  }



  /**
   * Count Type OptionsCountOutputType
   */


  export type OptionsCountOutputType = {
    products: number
  }

  export type OptionsCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    products?: boolean | OptionsCountOutputTypeCountProductsArgs
  }

  // Custom InputTypes

  /**
   * OptionsCountOutputType without action
   */
  export type OptionsCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OptionsCountOutputType
     */
    select?: OptionsCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * OptionsCountOutputType without action
   */
  export type OptionsCountOutputTypeCountProductsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: productsWhereInput
  }



  /**
   * Count Type SellerCountOutputType
   */


  export type SellerCountOutputType = {
    products: number
    reviews: number
  }

  export type SellerCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    products?: boolean | SellerCountOutputTypeCountProductsArgs
    reviews?: boolean | SellerCountOutputTypeCountReviewsArgs
  }

  // Custom InputTypes

  /**
   * SellerCountOutputType without action
   */
  export type SellerCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SellerCountOutputType
     */
    select?: SellerCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * SellerCountOutputType without action
   */
  export type SellerCountOutputTypeCountProductsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: productsWhereInput
  }


  /**
   * SellerCountOutputType without action
   */
  export type SellerCountOutputTypeCountReviewsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: reviewsWhereInput
  }



  /**
   * Count Type BrandsCountOutputType
   */


  export type BrandsCountOutputType = {
    products: number
    reviews: number
  }

  export type BrandsCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    products?: boolean | BrandsCountOutputTypeCountProductsArgs
    reviews?: boolean | BrandsCountOutputTypeCountReviewsArgs
  }

  // Custom InputTypes

  /**
   * BrandsCountOutputType without action
   */
  export type BrandsCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BrandsCountOutputType
     */
    select?: BrandsCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * BrandsCountOutputType without action
   */
  export type BrandsCountOutputTypeCountProductsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: productsWhereInput
  }


  /**
   * BrandsCountOutputType without action
   */
  export type BrandsCountOutputTypeCountReviewsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: reviewsWhereInput
  }



  /**
   * Count Type ProductsCountOutputType
   */


  export type ProductsCountOutputType = {
    comments: number
    reviews: number
    flashSellProduct: number
    banner: number
    adds: number
    messages: number
    orders: number
  }

  export type ProductsCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    comments?: boolean | ProductsCountOutputTypeCountCommentsArgs
    reviews?: boolean | ProductsCountOutputTypeCountReviewsArgs
    flashSellProduct?: boolean | ProductsCountOutputTypeCountFlashSellProductArgs
    banner?: boolean | ProductsCountOutputTypeCountBannerArgs
    adds?: boolean | ProductsCountOutputTypeCountAddsArgs
    messages?: boolean | ProductsCountOutputTypeCountMessagesArgs
    orders?: boolean | ProductsCountOutputTypeCountOrdersArgs
  }

  // Custom InputTypes

  /**
   * ProductsCountOutputType without action
   */
  export type ProductsCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductsCountOutputType
     */
    select?: ProductsCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ProductsCountOutputType without action
   */
  export type ProductsCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: commentsWhereInput
  }


  /**
   * ProductsCountOutputType without action
   */
  export type ProductsCountOutputTypeCountReviewsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: reviewsWhereInput
  }


  /**
   * ProductsCountOutputType without action
   */
  export type ProductsCountOutputTypeCountFlashSellProductArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: flashSellProductWhereInput
  }


  /**
   * ProductsCountOutputType without action
   */
  export type ProductsCountOutputTypeCountBannerArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: bannerWhereInput
  }


  /**
   * ProductsCountOutputType without action
   */
  export type ProductsCountOutputTypeCountAddsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: addsWhereInput
  }


  /**
   * ProductsCountOutputType without action
   */
  export type ProductsCountOutputTypeCountMessagesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: messagesWhereInput
  }


  /**
   * ProductsCountOutputType without action
   */
  export type ProductsCountOutputTypeCountOrdersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ordersWhereInput
  }



  /**
   * Count Type ColorsCountOutputType
   */


  export type ColorsCountOutputType = {
    products: number
  }

  export type ColorsCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    products?: boolean | ColorsCountOutputTypeCountProductsArgs
  }

  // Custom InputTypes

  /**
   * ColorsCountOutputType without action
   */
  export type ColorsCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ColorsCountOutputType
     */
    select?: ColorsCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ColorsCountOutputType without action
   */
  export type ColorsCountOutputTypeCountProductsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: productsWhereInput
  }



  /**
   * Count Type SizeCountOutputType
   */


  export type SizeCountOutputType = {
    products: number
  }

  export type SizeCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    products?: boolean | SizeCountOutputTypeCountProductsArgs
  }

  // Custom InputTypes

  /**
   * SizeCountOutputType without action
   */
  export type SizeCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SizeCountOutputType
     */
    select?: SizeCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * SizeCountOutputType without action
   */
  export type SizeCountOutputTypeCountProductsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: productsWhereInput
  }



  /**
   * Count Type SpecificationsCountOutputType
   */


  export type SpecificationsCountOutputType = {
    products: number
  }

  export type SpecificationsCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    products?: boolean | SpecificationsCountOutputTypeCountProductsArgs
  }

  // Custom InputTypes

  /**
   * SpecificationsCountOutputType without action
   */
  export type SpecificationsCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpecificationsCountOutputType
     */
    select?: SpecificationsCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * SpecificationsCountOutputType without action
   */
  export type SpecificationsCountOutputTypeCountProductsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: productsWhereInput
  }



  /**
   * Count Type CommentsCountOutputType
   */


  export type CommentsCountOutputType = {
    notifications: number
  }

  export type CommentsCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    notifications?: boolean | CommentsCountOutputTypeCountNotificationsArgs
  }

  // Custom InputTypes

  /**
   * CommentsCountOutputType without action
   */
  export type CommentsCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommentsCountOutputType
     */
    select?: CommentsCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CommentsCountOutputType without action
   */
  export type CommentsCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: notificationsWhereInput
  }



  /**
   * Count Type ReviewsCountOutputType
   */


  export type ReviewsCountOutputType = {
    notifications: number
  }

  export type ReviewsCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    notifications?: boolean | ReviewsCountOutputTypeCountNotificationsArgs
  }

  // Custom InputTypes

  /**
   * ReviewsCountOutputType without action
   */
  export type ReviewsCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewsCountOutputType
     */
    select?: ReviewsCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ReviewsCountOutputType without action
   */
  export type ReviewsCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: notificationsWhereInput
  }



  /**
   * Count Type FlashSellCountOutputType
   */


  export type FlashSellCountOutputType = {
    product: number
  }

  export type FlashSellCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    product?: boolean | FlashSellCountOutputTypeCountProductArgs
  }

  // Custom InputTypes

  /**
   * FlashSellCountOutputType without action
   */
  export type FlashSellCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlashSellCountOutputType
     */
    select?: FlashSellCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * FlashSellCountOutputType without action
   */
  export type FlashSellCountOutputTypeCountProductArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: flashSellProductWhereInput
  }



  /**
   * Models
   */

  /**
   * Model users
   */


  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    role: number | null
  }

  export type UsersSumAggregateOutputType = {
    role: number | null
  }

  export type UsersMinAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    image: string | null
    phone: string | null
    birthday: string | null
    gender: string | null
    role: number | null
    uid: string | null
    createdAt: Date | null
    pushToken: string | null
    verified: boolean | null
  }

  export type UsersMaxAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    image: string | null
    phone: string | null
    birthday: string | null
    gender: string | null
    role: number | null
    uid: string | null
    createdAt: Date | null
    pushToken: string | null
    verified: boolean | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    email: number
    name: number
    image: number
    phone: number
    birthday: number
    gender: number
    role: number
    uid: number
    address: number
    createdAt: number
    pushToken: number
    verified: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    role?: true
  }

  export type UsersSumAggregateInputType = {
    role?: true
  }

  export type UsersMinAggregateInputType = {
    id?: true
    email?: true
    name?: true
    image?: true
    phone?: true
    birthday?: true
    gender?: true
    role?: true
    uid?: true
    createdAt?: true
    pushToken?: true
    verified?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    email?: true
    name?: true
    image?: true
    phone?: true
    birthday?: true
    gender?: true
    role?: true
    uid?: true
    createdAt?: true
    pushToken?: true
    verified?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    email?: true
    name?: true
    image?: true
    phone?: true
    birthday?: true
    gender?: true
    role?: true
    uid?: true
    address?: true
    createdAt?: true
    pushToken?: true
    verified?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to aggregate.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type usersGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: usersWhereInput
    orderBy?: usersOrderByWithAggregationInput | usersOrderByWithAggregationInput[]
    by: UsersScalarFieldEnum[] | UsersScalarFieldEnum
    having?: usersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }


  export type UsersGroupByOutputType = {
    id: string
    email: string | null
    name: string
    image: string | null
    phone: string | null
    birthday: string | null
    gender: string | null
    role: number
    uid: string
    address: JsonValue | null
    createdAt: Date
    pushToken: string | null
    verified: boolean
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends usersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type usersSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    image?: boolean
    phone?: boolean
    birthday?: boolean
    gender?: boolean
    role?: boolean
    uid?: boolean
    address?: boolean
    createdAt?: boolean
    pushToken?: boolean
    verified?: boolean
    seller?: boolean | users$sellerArgs<ExtArgs>
    brand?: boolean | users$brandArgs<ExtArgs>
    products?: boolean | users$productsArgs<ExtArgs>
    comments?: boolean | users$commentsArgs<ExtArgs>
    reviews?: boolean | users$reviewsArgs<ExtArgs>
    notifications?: boolean | users$notificationsArgs<ExtArgs>
    flashSellProduct?: boolean | users$flashSellProductArgs<ExtArgs>
    conversations?: boolean | users$conversationsArgs<ExtArgs>
    orders?: boolean | users$ordersArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>

  export type usersSelectScalar = {
    id?: boolean
    email?: boolean
    name?: boolean
    image?: boolean
    phone?: boolean
    birthday?: boolean
    gender?: boolean
    role?: boolean
    uid?: boolean
    address?: boolean
    createdAt?: boolean
    pushToken?: boolean
    verified?: boolean
  }

  export type usersInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    seller?: boolean | users$sellerArgs<ExtArgs>
    brand?: boolean | users$brandArgs<ExtArgs>
    products?: boolean | users$productsArgs<ExtArgs>
    comments?: boolean | users$commentsArgs<ExtArgs>
    reviews?: boolean | users$reviewsArgs<ExtArgs>
    notifications?: boolean | users$notificationsArgs<ExtArgs>
    flashSellProduct?: boolean | users$flashSellProductArgs<ExtArgs>
    conversations?: boolean | users$conversationsArgs<ExtArgs>
    orders?: boolean | users$ordersArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeArgs<ExtArgs>
  }


  type usersGetPayload<S extends boolean | null | undefined | usersArgs> = $Types.GetResult<usersPayload, S>

  type usersCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<usersFindManyArgs, 'select' | 'include'> & {
      select?: UsersCountAggregateInputType | true
    }

  export interface usersDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['users'], meta: { name: 'users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {usersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends usersFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, usersFindUniqueArgs<ExtArgs>>
    ): Prisma__usersClient<$Types.GetResult<usersPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Users that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {usersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends usersFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, usersFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__usersClient<$Types.GetResult<usersPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends usersFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, usersFindFirstArgs<ExtArgs>>
    ): Prisma__usersClient<$Types.GetResult<usersPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends usersFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, usersFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__usersClient<$Types.GetResult<usersPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends usersFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usersFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<usersPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Users.
     * @param {usersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
    **/
    create<T extends usersCreateArgs<ExtArgs>>(
      args: SelectSubset<T, usersCreateArgs<ExtArgs>>
    ): Prisma__usersClient<$Types.GetResult<usersPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {usersCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const users = await prisma.users.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends usersCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usersCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {usersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
    **/
    delete<T extends usersDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, usersDeleteArgs<ExtArgs>>
    ): Prisma__usersClient<$Types.GetResult<usersPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Users.
     * @param {usersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends usersUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, usersUpdateArgs<ExtArgs>>
    ): Prisma__usersClient<$Types.GetResult<usersPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {usersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends usersDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usersDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends usersUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, usersUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {usersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
    **/
    upsert<T extends usersUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, usersUpsertArgs<ExtArgs>>
    ): Prisma__usersClient<$Types.GetResult<usersPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends usersCountArgs>(
      args?: Subset<T, usersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends usersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: usersGroupByArgs['orderBy'] }
        : { orderBy?: usersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, usersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the users model
   */
  readonly fields: usersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__usersClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    seller<T extends users$sellerArgs<ExtArgs> = {}>(args?: Subset<T, users$sellerArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<sellerPayload<ExtArgs>, T, 'findMany'>| Null>;

    brand<T extends users$brandArgs<ExtArgs> = {}>(args?: Subset<T, users$brandArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<brandsPayload<ExtArgs>, T, 'findMany'>| Null>;

    products<T extends users$productsArgs<ExtArgs> = {}>(args?: Subset<T, users$productsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<productsPayload<ExtArgs>, T, 'findMany'>| Null>;

    comments<T extends users$commentsArgs<ExtArgs> = {}>(args?: Subset<T, users$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<commentsPayload<ExtArgs>, T, 'findMany'>| Null>;

    reviews<T extends users$reviewsArgs<ExtArgs> = {}>(args?: Subset<T, users$reviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<reviewsPayload<ExtArgs>, T, 'findMany'>| Null>;

    notifications<T extends users$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, users$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<notificationsPayload<ExtArgs>, T, 'findMany'>| Null>;

    flashSellProduct<T extends users$flashSellProductArgs<ExtArgs> = {}>(args?: Subset<T, users$flashSellProductArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<flashSellProductPayload<ExtArgs>, T, 'findMany'>| Null>;

    conversations<T extends users$conversationsArgs<ExtArgs> = {}>(args?: Subset<T, users$conversationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<conversationsPayload<ExtArgs>, T, 'findMany'>| Null>;

    orders<T extends users$ordersArgs<ExtArgs> = {}>(args?: Subset<T, users$ordersArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<ordersPayload<ExtArgs>, T, 'findMany'>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the users model
   */ 
  interface usersFieldRefs {
    readonly id: FieldRef<"users", 'String'>
    readonly email: FieldRef<"users", 'String'>
    readonly name: FieldRef<"users", 'String'>
    readonly image: FieldRef<"users", 'String'>
    readonly phone: FieldRef<"users", 'String'>
    readonly birthday: FieldRef<"users", 'String'>
    readonly gender: FieldRef<"users", 'String'>
    readonly role: FieldRef<"users", 'Int'>
    readonly uid: FieldRef<"users", 'String'>
    readonly address: FieldRef<"users", 'Json'>
    readonly createdAt: FieldRef<"users", 'DateTime'>
    readonly pushToken: FieldRef<"users", 'String'>
    readonly verified: FieldRef<"users", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * users findUnique
   */
  export type usersFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }


  /**
   * users findUniqueOrThrow
   */
  export type usersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }


  /**
   * users findFirst
   */
  export type usersFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * users findFirstOrThrow
   */
  export type usersFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * users findMany
   */
  export type usersFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * users create
   */
  export type usersCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The data needed to create a users.
     */
    data: XOR<usersCreateInput, usersUncheckedCreateInput>
  }


  /**
   * users createMany
   */
  export type usersCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many users.
     */
    data: usersCreateManyInput | usersCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * users update
   */
  export type usersUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The data needed to update a users.
     */
    data: XOR<usersUpdateInput, usersUncheckedUpdateInput>
    /**
     * Choose, which users to update.
     */
    where: usersWhereUniqueInput
  }


  /**
   * users updateMany
   */
  export type usersUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update users.
     */
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: usersWhereInput
  }


  /**
   * users upsert
   */
  export type usersUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The filter to search for the users to update in case it exists.
     */
    where: usersWhereUniqueInput
    /**
     * In case the users found by the `where` argument doesn't exist, create a new users with this data.
     */
    create: XOR<usersCreateInput, usersUncheckedCreateInput>
    /**
     * In case the users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<usersUpdateInput, usersUncheckedUpdateInput>
  }


  /**
   * users delete
   */
  export type usersDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter which users to delete.
     */
    where: usersWhereUniqueInput
  }


  /**
   * users deleteMany
   */
  export type usersDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to delete
     */
    where?: usersWhereInput
  }


  /**
   * users.seller
   */
  export type users$sellerArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the seller
     */
    select?: sellerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sellerInclude<ExtArgs> | null
    where?: sellerWhereInput
    orderBy?: sellerOrderByWithRelationInput | sellerOrderByWithRelationInput[]
    cursor?: sellerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SellerScalarFieldEnum | SellerScalarFieldEnum[]
  }


  /**
   * users.brand
   */
  export type users$brandArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the brands
     */
    select?: brandsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: brandsInclude<ExtArgs> | null
    where?: brandsWhereInput
    orderBy?: brandsOrderByWithRelationInput | brandsOrderByWithRelationInput[]
    cursor?: brandsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BrandsScalarFieldEnum | BrandsScalarFieldEnum[]
  }


  /**
   * users.products
   */
  export type users$productsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productsInclude<ExtArgs> | null
    where?: productsWhereInput
    orderBy?: productsOrderByWithRelationInput | productsOrderByWithRelationInput[]
    cursor?: productsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductsScalarFieldEnum | ProductsScalarFieldEnum[]
  }


  /**
   * users.comments
   */
  export type users$commentsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comments
     */
    select?: commentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: commentsInclude<ExtArgs> | null
    where?: commentsWhereInput
    orderBy?: commentsOrderByWithRelationInput | commentsOrderByWithRelationInput[]
    cursor?: commentsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentsScalarFieldEnum | CommentsScalarFieldEnum[]
  }


  /**
   * users.reviews
   */
  export type users$reviewsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reviews
     */
    select?: reviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: reviewsInclude<ExtArgs> | null
    where?: reviewsWhereInput
    orderBy?: reviewsOrderByWithRelationInput | reviewsOrderByWithRelationInput[]
    cursor?: reviewsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReviewsScalarFieldEnum | ReviewsScalarFieldEnum[]
  }


  /**
   * users.notifications
   */
  export type users$notificationsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notifications
     */
    select?: notificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: notificationsInclude<ExtArgs> | null
    where?: notificationsWhereInput
    orderBy?: notificationsOrderByWithRelationInput | notificationsOrderByWithRelationInput[]
    cursor?: notificationsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationsScalarFieldEnum | NotificationsScalarFieldEnum[]
  }


  /**
   * users.flashSellProduct
   */
  export type users$flashSellProductArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the flashSellProduct
     */
    select?: flashSellProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: flashSellProductInclude<ExtArgs> | null
    where?: flashSellProductWhereInput
    orderBy?: flashSellProductOrderByWithRelationInput | flashSellProductOrderByWithRelationInput[]
    cursor?: flashSellProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FlashSellProductScalarFieldEnum | FlashSellProductScalarFieldEnum[]
  }


  /**
   * users.conversations
   */
  export type users$conversationsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the conversations
     */
    select?: conversationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: conversationsInclude<ExtArgs> | null
    where?: conversationsWhereInput
    orderBy?: conversationsOrderByWithRelationInput | conversationsOrderByWithRelationInput[]
    cursor?: conversationsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ConversationsScalarFieldEnum | ConversationsScalarFieldEnum[]
  }


  /**
   * users.orders
   */
  export type users$ordersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ordersInclude<ExtArgs> | null
    where?: ordersWhereInput
    orderBy?: ordersOrderByWithRelationInput | ordersOrderByWithRelationInput[]
    cursor?: ordersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrdersScalarFieldEnum | OrdersScalarFieldEnum[]
  }


  /**
   * users without action
   */
  export type usersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
  }



  /**
   * Model category
   */


  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryMinAggregateOutputType = {
    id: string | null
    name: string | null
    icon: string | null
  }

  export type CategoryMaxAggregateOutputType = {
    id: string | null
    name: string | null
    icon: string | null
  }

  export type CategoryCountAggregateOutputType = {
    id: number
    name: number
    icon: number
    _all: number
  }


  export type CategoryMinAggregateInputType = {
    id?: true
    name?: true
    icon?: true
  }

  export type CategoryMaxAggregateInputType = {
    id?: true
    name?: true
    icon?: true
  }

  export type CategoryCountAggregateInputType = {
    id?: true
    name?: true
    icon?: true
    _all?: true
  }

  export type CategoryAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which category to aggregate.
     */
    where?: categoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     */
    orderBy?: categoryOrderByWithRelationInput | categoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: categoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned categories
    **/
    _count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }




  export type categoryGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: categoryWhereInput
    orderBy?: categoryOrderByWithAggregationInput | categoryOrderByWithAggregationInput[]
    by: CategoryScalarFieldEnum[] | CategoryScalarFieldEnum
    having?: categoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryCountAggregateInputType | true
    _min?: CategoryMinAggregateInputType
    _max?: CategoryMaxAggregateInputType
  }


  export type CategoryGroupByOutputType = {
    id: string
    name: string
    icon: string
    _count: CategoryCountAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends categoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>
        }
      >
    >


  export type categorySelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    icon?: boolean
    subCategory?: boolean | category$subCategoryArgs<ExtArgs>
    products?: boolean | category$productsArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>

  export type categorySelectScalar = {
    id?: boolean
    name?: boolean
    icon?: boolean
  }

  export type categoryInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    subCategory?: boolean | category$subCategoryArgs<ExtArgs>
    products?: boolean | category$productsArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeArgs<ExtArgs>
  }


  type categoryGetPayload<S extends boolean | null | undefined | categoryArgs> = $Types.GetResult<categoryPayload, S>

  type categoryCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<categoryFindManyArgs, 'select' | 'include'> & {
      select?: CategoryCountAggregateInputType | true
    }

  export interface categoryDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['category'], meta: { name: 'category' } }
    /**
     * Find zero or one Category that matches the filter.
     * @param {categoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends categoryFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, categoryFindUniqueArgs<ExtArgs>>
    ): Prisma__categoryClient<$Types.GetResult<categoryPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Category that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {categoryFindUniqueOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends categoryFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, categoryFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__categoryClient<$Types.GetResult<categoryPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends categoryFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, categoryFindFirstArgs<ExtArgs>>
    ): Prisma__categoryClient<$Types.GetResult<categoryPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Category that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoryFindFirstOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends categoryFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, categoryFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__categoryClient<$Types.GetResult<categoryPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoryWithIdOnly = await prisma.category.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends categoryFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, categoryFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<categoryPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Category.
     * @param {categoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
    **/
    create<T extends categoryCreateArgs<ExtArgs>>(
      args: SelectSubset<T, categoryCreateArgs<ExtArgs>>
    ): Prisma__categoryClient<$Types.GetResult<categoryPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Categories.
     *     @param {categoryCreateManyArgs} args - Arguments to create many Categories.
     *     @example
     *     // Create many Categories
     *     const category = await prisma.category.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends categoryCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, categoryCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Category.
     * @param {categoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
    **/
    delete<T extends categoryDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, categoryDeleteArgs<ExtArgs>>
    ): Prisma__categoryClient<$Types.GetResult<categoryPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Category.
     * @param {categoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends categoryUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, categoryUpdateArgs<ExtArgs>>
    ): Prisma__categoryClient<$Types.GetResult<categoryPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Categories.
     * @param {categoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends categoryDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, categoryDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends categoryUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, categoryUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Category.
     * @param {categoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
    **/
    upsert<T extends categoryUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, categoryUpsertArgs<ExtArgs>>
    ): Prisma__categoryClient<$Types.GetResult<categoryPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends categoryCountArgs>(
      args?: Subset<T, categoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): Prisma.PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends categoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: categoryGroupByArgs['orderBy'] }
        : { orderBy?: categoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, categoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the category model
   */
  readonly fields: categoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__categoryClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    subCategory<T extends category$subCategoryArgs<ExtArgs> = {}>(args?: Subset<T, category$subCategoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<subCategoryPayload<ExtArgs>, T, 'findMany'>| Null>;

    products<T extends category$productsArgs<ExtArgs> = {}>(args?: Subset<T, category$productsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<productsPayload<ExtArgs>, T, 'findMany'>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the category model
   */ 
  interface categoryFieldRefs {
    readonly id: FieldRef<"category", 'String'>
    readonly name: FieldRef<"category", 'String'>
    readonly icon: FieldRef<"category", 'String'>
  }
    

  // Custom InputTypes

  /**
   * category findUnique
   */
  export type categoryFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoryInclude<ExtArgs> | null
    /**
     * Filter, which category to fetch.
     */
    where: categoryWhereUniqueInput
  }


  /**
   * category findUniqueOrThrow
   */
  export type categoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoryInclude<ExtArgs> | null
    /**
     * Filter, which category to fetch.
     */
    where: categoryWhereUniqueInput
  }


  /**
   * category findFirst
   */
  export type categoryFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoryInclude<ExtArgs> | null
    /**
     * Filter, which category to fetch.
     */
    where?: categoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     */
    orderBy?: categoryOrderByWithRelationInput | categoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for categories.
     */
    cursor?: categoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }


  /**
   * category findFirstOrThrow
   */
  export type categoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoryInclude<ExtArgs> | null
    /**
     * Filter, which category to fetch.
     */
    where?: categoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     */
    orderBy?: categoryOrderByWithRelationInput | categoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for categories.
     */
    cursor?: categoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }


  /**
   * category findMany
   */
  export type categoryFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoryInclude<ExtArgs> | null
    /**
     * Filter, which categories to fetch.
     */
    where?: categoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     */
    orderBy?: categoryOrderByWithRelationInput | categoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing categories.
     */
    cursor?: categoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     */
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }


  /**
   * category create
   */
  export type categoryCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoryInclude<ExtArgs> | null
    /**
     * The data needed to create a category.
     */
    data: XOR<categoryCreateInput, categoryUncheckedCreateInput>
  }


  /**
   * category createMany
   */
  export type categoryCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many categories.
     */
    data: categoryCreateManyInput | categoryCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * category update
   */
  export type categoryUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoryInclude<ExtArgs> | null
    /**
     * The data needed to update a category.
     */
    data: XOR<categoryUpdateInput, categoryUncheckedUpdateInput>
    /**
     * Choose, which category to update.
     */
    where: categoryWhereUniqueInput
  }


  /**
   * category updateMany
   */
  export type categoryUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update categories.
     */
    data: XOR<categoryUpdateManyMutationInput, categoryUncheckedUpdateManyInput>
    /**
     * Filter which categories to update
     */
    where?: categoryWhereInput
  }


  /**
   * category upsert
   */
  export type categoryUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoryInclude<ExtArgs> | null
    /**
     * The filter to search for the category to update in case it exists.
     */
    where: categoryWhereUniqueInput
    /**
     * In case the category found by the `where` argument doesn't exist, create a new category with this data.
     */
    create: XOR<categoryCreateInput, categoryUncheckedCreateInput>
    /**
     * In case the category was found with the provided `where` argument, update it with this data.
     */
    update: XOR<categoryUpdateInput, categoryUncheckedUpdateInput>
  }


  /**
   * category delete
   */
  export type categoryDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoryInclude<ExtArgs> | null
    /**
     * Filter which category to delete.
     */
    where: categoryWhereUniqueInput
  }


  /**
   * category deleteMany
   */
  export type categoryDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which categories to delete
     */
    where?: categoryWhereInput
  }


  /**
   * category.subCategory
   */
  export type category$subCategoryArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subCategory
     */
    select?: subCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: subCategoryInclude<ExtArgs> | null
    where?: subCategoryWhereInput
    orderBy?: subCategoryOrderByWithRelationInput | subCategoryOrderByWithRelationInput[]
    cursor?: subCategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubCategoryScalarFieldEnum | SubCategoryScalarFieldEnum[]
  }


  /**
   * category.products
   */
  export type category$productsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productsInclude<ExtArgs> | null
    where?: productsWhereInput
    orderBy?: productsOrderByWithRelationInput | productsOrderByWithRelationInput[]
    cursor?: productsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductsScalarFieldEnum | ProductsScalarFieldEnum[]
  }


  /**
   * category without action
   */
  export type categoryArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoryInclude<ExtArgs> | null
  }



  /**
   * Model subCategory
   */


  export type AggregateSubCategory = {
    _count: SubCategoryCountAggregateOutputType | null
    _min: SubCategoryMinAggregateOutputType | null
    _max: SubCategoryMaxAggregateOutputType | null
  }

  export type SubCategoryMinAggregateOutputType = {
    id: string | null
    name: string | null
    categoryId: string | null
  }

  export type SubCategoryMaxAggregateOutputType = {
    id: string | null
    name: string | null
    categoryId: string | null
  }

  export type SubCategoryCountAggregateOutputType = {
    id: number
    name: number
    categoryId: number
    _all: number
  }


  export type SubCategoryMinAggregateInputType = {
    id?: true
    name?: true
    categoryId?: true
  }

  export type SubCategoryMaxAggregateInputType = {
    id?: true
    name?: true
    categoryId?: true
  }

  export type SubCategoryCountAggregateInputType = {
    id?: true
    name?: true
    categoryId?: true
    _all?: true
  }

  export type SubCategoryAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which subCategory to aggregate.
     */
    where?: subCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of subCategories to fetch.
     */
    orderBy?: subCategoryOrderByWithRelationInput | subCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: subCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` subCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` subCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned subCategories
    **/
    _count?: true | SubCategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubCategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubCategoryMaxAggregateInputType
  }

  export type GetSubCategoryAggregateType<T extends SubCategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateSubCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubCategory[P]>
      : GetScalarType<T[P], AggregateSubCategory[P]>
  }




  export type subCategoryGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: subCategoryWhereInput
    orderBy?: subCategoryOrderByWithAggregationInput | subCategoryOrderByWithAggregationInput[]
    by: SubCategoryScalarFieldEnum[] | SubCategoryScalarFieldEnum
    having?: subCategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubCategoryCountAggregateInputType | true
    _min?: SubCategoryMinAggregateInputType
    _max?: SubCategoryMaxAggregateInputType
  }


  export type SubCategoryGroupByOutputType = {
    id: string
    name: string
    categoryId: string
    _count: SubCategoryCountAggregateOutputType | null
    _min: SubCategoryMinAggregateOutputType | null
    _max: SubCategoryMaxAggregateOutputType | null
  }

  type GetSubCategoryGroupByPayload<T extends subCategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubCategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubCategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubCategoryGroupByOutputType[P]>
            : GetScalarType<T[P], SubCategoryGroupByOutputType[P]>
        }
      >
    >


  export type subCategorySelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    categoryId?: boolean
    category?: boolean | subCategory$categoryArgs<ExtArgs>
    options?: boolean | subCategory$optionsArgs<ExtArgs>
    products?: boolean | subCategory$productsArgs<ExtArgs>
    _count?: boolean | SubCategoryCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["subCategory"]>

  export type subCategorySelectScalar = {
    id?: boolean
    name?: boolean
    categoryId?: boolean
  }

  export type subCategoryInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    category?: boolean | subCategory$categoryArgs<ExtArgs>
    options?: boolean | subCategory$optionsArgs<ExtArgs>
    products?: boolean | subCategory$productsArgs<ExtArgs>
    _count?: boolean | SubCategoryCountOutputTypeArgs<ExtArgs>
  }


  type subCategoryGetPayload<S extends boolean | null | undefined | subCategoryArgs> = $Types.GetResult<subCategoryPayload, S>

  type subCategoryCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<subCategoryFindManyArgs, 'select' | 'include'> & {
      select?: SubCategoryCountAggregateInputType | true
    }

  export interface subCategoryDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['subCategory'], meta: { name: 'subCategory' } }
    /**
     * Find zero or one SubCategory that matches the filter.
     * @param {subCategoryFindUniqueArgs} args - Arguments to find a SubCategory
     * @example
     * // Get one SubCategory
     * const subCategory = await prisma.subCategory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends subCategoryFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, subCategoryFindUniqueArgs<ExtArgs>>
    ): Prisma__subCategoryClient<$Types.GetResult<subCategoryPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one SubCategory that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {subCategoryFindUniqueOrThrowArgs} args - Arguments to find a SubCategory
     * @example
     * // Get one SubCategory
     * const subCategory = await prisma.subCategory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends subCategoryFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, subCategoryFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__subCategoryClient<$Types.GetResult<subCategoryPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first SubCategory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {subCategoryFindFirstArgs} args - Arguments to find a SubCategory
     * @example
     * // Get one SubCategory
     * const subCategory = await prisma.subCategory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends subCategoryFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, subCategoryFindFirstArgs<ExtArgs>>
    ): Prisma__subCategoryClient<$Types.GetResult<subCategoryPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first SubCategory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {subCategoryFindFirstOrThrowArgs} args - Arguments to find a SubCategory
     * @example
     * // Get one SubCategory
     * const subCategory = await prisma.subCategory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends subCategoryFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, subCategoryFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__subCategoryClient<$Types.GetResult<subCategoryPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more SubCategories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {subCategoryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SubCategories
     * const subCategories = await prisma.subCategory.findMany()
     * 
     * // Get first 10 SubCategories
     * const subCategories = await prisma.subCategory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const subCategoryWithIdOnly = await prisma.subCategory.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends subCategoryFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, subCategoryFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<subCategoryPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a SubCategory.
     * @param {subCategoryCreateArgs} args - Arguments to create a SubCategory.
     * @example
     * // Create one SubCategory
     * const SubCategory = await prisma.subCategory.create({
     *   data: {
     *     // ... data to create a SubCategory
     *   }
     * })
     * 
    **/
    create<T extends subCategoryCreateArgs<ExtArgs>>(
      args: SelectSubset<T, subCategoryCreateArgs<ExtArgs>>
    ): Prisma__subCategoryClient<$Types.GetResult<subCategoryPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many SubCategories.
     *     @param {subCategoryCreateManyArgs} args - Arguments to create many SubCategories.
     *     @example
     *     // Create many SubCategories
     *     const subCategory = await prisma.subCategory.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends subCategoryCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, subCategoryCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SubCategory.
     * @param {subCategoryDeleteArgs} args - Arguments to delete one SubCategory.
     * @example
     * // Delete one SubCategory
     * const SubCategory = await prisma.subCategory.delete({
     *   where: {
     *     // ... filter to delete one SubCategory
     *   }
     * })
     * 
    **/
    delete<T extends subCategoryDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, subCategoryDeleteArgs<ExtArgs>>
    ): Prisma__subCategoryClient<$Types.GetResult<subCategoryPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one SubCategory.
     * @param {subCategoryUpdateArgs} args - Arguments to update one SubCategory.
     * @example
     * // Update one SubCategory
     * const subCategory = await prisma.subCategory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends subCategoryUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, subCategoryUpdateArgs<ExtArgs>>
    ): Prisma__subCategoryClient<$Types.GetResult<subCategoryPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more SubCategories.
     * @param {subCategoryDeleteManyArgs} args - Arguments to filter SubCategories to delete.
     * @example
     * // Delete a few SubCategories
     * const { count } = await prisma.subCategory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends subCategoryDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, subCategoryDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SubCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {subCategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SubCategories
     * const subCategory = await prisma.subCategory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends subCategoryUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, subCategoryUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SubCategory.
     * @param {subCategoryUpsertArgs} args - Arguments to update or create a SubCategory.
     * @example
     * // Update or create a SubCategory
     * const subCategory = await prisma.subCategory.upsert({
     *   create: {
     *     // ... data to create a SubCategory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SubCategory we want to update
     *   }
     * })
    **/
    upsert<T extends subCategoryUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, subCategoryUpsertArgs<ExtArgs>>
    ): Prisma__subCategoryClient<$Types.GetResult<subCategoryPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of SubCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {subCategoryCountArgs} args - Arguments to filter SubCategories to count.
     * @example
     * // Count the number of SubCategories
     * const count = await prisma.subCategory.count({
     *   where: {
     *     // ... the filter for the SubCategories we want to count
     *   }
     * })
    **/
    count<T extends subCategoryCountArgs>(
      args?: Subset<T, subCategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubCategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SubCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubCategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubCategoryAggregateArgs>(args: Subset<T, SubCategoryAggregateArgs>): Prisma.PrismaPromise<GetSubCategoryAggregateType<T>>

    /**
     * Group by SubCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {subCategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends subCategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: subCategoryGroupByArgs['orderBy'] }
        : { orderBy?: subCategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, subCategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the subCategory model
   */
  readonly fields: subCategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for subCategory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__subCategoryClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    category<T extends subCategory$categoryArgs<ExtArgs> = {}>(args?: Subset<T, subCategory$categoryArgs<ExtArgs>>): Prisma__categoryClient<$Types.GetResult<categoryPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    options<T extends subCategory$optionsArgs<ExtArgs> = {}>(args?: Subset<T, subCategory$optionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<optionsPayload<ExtArgs>, T, 'findMany'>| Null>;

    products<T extends subCategory$productsArgs<ExtArgs> = {}>(args?: Subset<T, subCategory$productsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<productsPayload<ExtArgs>, T, 'findMany'>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the subCategory model
   */ 
  interface subCategoryFieldRefs {
    readonly id: FieldRef<"subCategory", 'String'>
    readonly name: FieldRef<"subCategory", 'String'>
    readonly categoryId: FieldRef<"subCategory", 'String'>
  }
    

  // Custom InputTypes

  /**
   * subCategory findUnique
   */
  export type subCategoryFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subCategory
     */
    select?: subCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: subCategoryInclude<ExtArgs> | null
    /**
     * Filter, which subCategory to fetch.
     */
    where: subCategoryWhereUniqueInput
  }


  /**
   * subCategory findUniqueOrThrow
   */
  export type subCategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subCategory
     */
    select?: subCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: subCategoryInclude<ExtArgs> | null
    /**
     * Filter, which subCategory to fetch.
     */
    where: subCategoryWhereUniqueInput
  }


  /**
   * subCategory findFirst
   */
  export type subCategoryFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subCategory
     */
    select?: subCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: subCategoryInclude<ExtArgs> | null
    /**
     * Filter, which subCategory to fetch.
     */
    where?: subCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of subCategories to fetch.
     */
    orderBy?: subCategoryOrderByWithRelationInput | subCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for subCategories.
     */
    cursor?: subCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` subCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` subCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of subCategories.
     */
    distinct?: SubCategoryScalarFieldEnum | SubCategoryScalarFieldEnum[]
  }


  /**
   * subCategory findFirstOrThrow
   */
  export type subCategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subCategory
     */
    select?: subCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: subCategoryInclude<ExtArgs> | null
    /**
     * Filter, which subCategory to fetch.
     */
    where?: subCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of subCategories to fetch.
     */
    orderBy?: subCategoryOrderByWithRelationInput | subCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for subCategories.
     */
    cursor?: subCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` subCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` subCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of subCategories.
     */
    distinct?: SubCategoryScalarFieldEnum | SubCategoryScalarFieldEnum[]
  }


  /**
   * subCategory findMany
   */
  export type subCategoryFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subCategory
     */
    select?: subCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: subCategoryInclude<ExtArgs> | null
    /**
     * Filter, which subCategories to fetch.
     */
    where?: subCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of subCategories to fetch.
     */
    orderBy?: subCategoryOrderByWithRelationInput | subCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing subCategories.
     */
    cursor?: subCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` subCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` subCategories.
     */
    skip?: number
    distinct?: SubCategoryScalarFieldEnum | SubCategoryScalarFieldEnum[]
  }


  /**
   * subCategory create
   */
  export type subCategoryCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subCategory
     */
    select?: subCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: subCategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a subCategory.
     */
    data: XOR<subCategoryCreateInput, subCategoryUncheckedCreateInput>
  }


  /**
   * subCategory createMany
   */
  export type subCategoryCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many subCategories.
     */
    data: subCategoryCreateManyInput | subCategoryCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * subCategory update
   */
  export type subCategoryUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subCategory
     */
    select?: subCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: subCategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a subCategory.
     */
    data: XOR<subCategoryUpdateInput, subCategoryUncheckedUpdateInput>
    /**
     * Choose, which subCategory to update.
     */
    where: subCategoryWhereUniqueInput
  }


  /**
   * subCategory updateMany
   */
  export type subCategoryUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update subCategories.
     */
    data: XOR<subCategoryUpdateManyMutationInput, subCategoryUncheckedUpdateManyInput>
    /**
     * Filter which subCategories to update
     */
    where?: subCategoryWhereInput
  }


  /**
   * subCategory upsert
   */
  export type subCategoryUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subCategory
     */
    select?: subCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: subCategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the subCategory to update in case it exists.
     */
    where: subCategoryWhereUniqueInput
    /**
     * In case the subCategory found by the `where` argument doesn't exist, create a new subCategory with this data.
     */
    create: XOR<subCategoryCreateInput, subCategoryUncheckedCreateInput>
    /**
     * In case the subCategory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<subCategoryUpdateInput, subCategoryUncheckedUpdateInput>
  }


  /**
   * subCategory delete
   */
  export type subCategoryDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subCategory
     */
    select?: subCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: subCategoryInclude<ExtArgs> | null
    /**
     * Filter which subCategory to delete.
     */
    where: subCategoryWhereUniqueInput
  }


  /**
   * subCategory deleteMany
   */
  export type subCategoryDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which subCategories to delete
     */
    where?: subCategoryWhereInput
  }


  /**
   * subCategory.category
   */
  export type subCategory$categoryArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoryInclude<ExtArgs> | null
    where?: categoryWhereInput
  }


  /**
   * subCategory.options
   */
  export type subCategory$optionsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the options
     */
    select?: optionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: optionsInclude<ExtArgs> | null
    where?: optionsWhereInput
    orderBy?: optionsOrderByWithRelationInput | optionsOrderByWithRelationInput[]
    cursor?: optionsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OptionsScalarFieldEnum | OptionsScalarFieldEnum[]
  }


  /**
   * subCategory.products
   */
  export type subCategory$productsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productsInclude<ExtArgs> | null
    where?: productsWhereInput
    orderBy?: productsOrderByWithRelationInput | productsOrderByWithRelationInput[]
    cursor?: productsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductsScalarFieldEnum | ProductsScalarFieldEnum[]
  }


  /**
   * subCategory without action
   */
  export type subCategoryArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subCategory
     */
    select?: subCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: subCategoryInclude<ExtArgs> | null
  }



  /**
   * Model options
   */


  export type AggregateOptions = {
    _count: OptionsCountAggregateOutputType | null
    _min: OptionsMinAggregateOutputType | null
    _max: OptionsMaxAggregateOutputType | null
  }

  export type OptionsMinAggregateOutputType = {
    id: string | null
    name: string | null
    subCategoryId: string | null
  }

  export type OptionsMaxAggregateOutputType = {
    id: string | null
    name: string | null
    subCategoryId: string | null
  }

  export type OptionsCountAggregateOutputType = {
    id: number
    name: number
    subCategoryId: number
    _all: number
  }


  export type OptionsMinAggregateInputType = {
    id?: true
    name?: true
    subCategoryId?: true
  }

  export type OptionsMaxAggregateInputType = {
    id?: true
    name?: true
    subCategoryId?: true
  }

  export type OptionsCountAggregateInputType = {
    id?: true
    name?: true
    subCategoryId?: true
    _all?: true
  }

  export type OptionsAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which options to aggregate.
     */
    where?: optionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of options to fetch.
     */
    orderBy?: optionsOrderByWithRelationInput | optionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: optionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` options from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` options.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned options
    **/
    _count?: true | OptionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OptionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OptionsMaxAggregateInputType
  }

  export type GetOptionsAggregateType<T extends OptionsAggregateArgs> = {
        [P in keyof T & keyof AggregateOptions]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOptions[P]>
      : GetScalarType<T[P], AggregateOptions[P]>
  }




  export type optionsGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: optionsWhereInput
    orderBy?: optionsOrderByWithAggregationInput | optionsOrderByWithAggregationInput[]
    by: OptionsScalarFieldEnum[] | OptionsScalarFieldEnum
    having?: optionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OptionsCountAggregateInputType | true
    _min?: OptionsMinAggregateInputType
    _max?: OptionsMaxAggregateInputType
  }


  export type OptionsGroupByOutputType = {
    id: string
    name: string
    subCategoryId: string
    _count: OptionsCountAggregateOutputType | null
    _min: OptionsMinAggregateOutputType | null
    _max: OptionsMaxAggregateOutputType | null
  }

  type GetOptionsGroupByPayload<T extends optionsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OptionsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OptionsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OptionsGroupByOutputType[P]>
            : GetScalarType<T[P], OptionsGroupByOutputType[P]>
        }
      >
    >


  export type optionsSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    subCategoryId?: boolean
    subCategory?: boolean | options$subCategoryArgs<ExtArgs>
    products?: boolean | options$productsArgs<ExtArgs>
    _count?: boolean | OptionsCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["options"]>

  export type optionsSelectScalar = {
    id?: boolean
    name?: boolean
    subCategoryId?: boolean
  }

  export type optionsInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    subCategory?: boolean | options$subCategoryArgs<ExtArgs>
    products?: boolean | options$productsArgs<ExtArgs>
    _count?: boolean | OptionsCountOutputTypeArgs<ExtArgs>
  }


  type optionsGetPayload<S extends boolean | null | undefined | optionsArgs> = $Types.GetResult<optionsPayload, S>

  type optionsCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<optionsFindManyArgs, 'select' | 'include'> & {
      select?: OptionsCountAggregateInputType | true
    }

  export interface optionsDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['options'], meta: { name: 'options' } }
    /**
     * Find zero or one Options that matches the filter.
     * @param {optionsFindUniqueArgs} args - Arguments to find a Options
     * @example
     * // Get one Options
     * const options = await prisma.options.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends optionsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, optionsFindUniqueArgs<ExtArgs>>
    ): Prisma__optionsClient<$Types.GetResult<optionsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Options that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {optionsFindUniqueOrThrowArgs} args - Arguments to find a Options
     * @example
     * // Get one Options
     * const options = await prisma.options.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends optionsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, optionsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__optionsClient<$Types.GetResult<optionsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Options that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {optionsFindFirstArgs} args - Arguments to find a Options
     * @example
     * // Get one Options
     * const options = await prisma.options.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends optionsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, optionsFindFirstArgs<ExtArgs>>
    ): Prisma__optionsClient<$Types.GetResult<optionsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Options that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {optionsFindFirstOrThrowArgs} args - Arguments to find a Options
     * @example
     * // Get one Options
     * const options = await prisma.options.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends optionsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, optionsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__optionsClient<$Types.GetResult<optionsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Options that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {optionsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Options
     * const options = await prisma.options.findMany()
     * 
     * // Get first 10 Options
     * const options = await prisma.options.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const optionsWithIdOnly = await prisma.options.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends optionsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, optionsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<optionsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Options.
     * @param {optionsCreateArgs} args - Arguments to create a Options.
     * @example
     * // Create one Options
     * const Options = await prisma.options.create({
     *   data: {
     *     // ... data to create a Options
     *   }
     * })
     * 
    **/
    create<T extends optionsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, optionsCreateArgs<ExtArgs>>
    ): Prisma__optionsClient<$Types.GetResult<optionsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Options.
     *     @param {optionsCreateManyArgs} args - Arguments to create many Options.
     *     @example
     *     // Create many Options
     *     const options = await prisma.options.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends optionsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, optionsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Options.
     * @param {optionsDeleteArgs} args - Arguments to delete one Options.
     * @example
     * // Delete one Options
     * const Options = await prisma.options.delete({
     *   where: {
     *     // ... filter to delete one Options
     *   }
     * })
     * 
    **/
    delete<T extends optionsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, optionsDeleteArgs<ExtArgs>>
    ): Prisma__optionsClient<$Types.GetResult<optionsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Options.
     * @param {optionsUpdateArgs} args - Arguments to update one Options.
     * @example
     * // Update one Options
     * const options = await prisma.options.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends optionsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, optionsUpdateArgs<ExtArgs>>
    ): Prisma__optionsClient<$Types.GetResult<optionsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Options.
     * @param {optionsDeleteManyArgs} args - Arguments to filter Options to delete.
     * @example
     * // Delete a few Options
     * const { count } = await prisma.options.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends optionsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, optionsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Options.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {optionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Options
     * const options = await prisma.options.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends optionsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, optionsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Options.
     * @param {optionsUpsertArgs} args - Arguments to update or create a Options.
     * @example
     * // Update or create a Options
     * const options = await prisma.options.upsert({
     *   create: {
     *     // ... data to create a Options
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Options we want to update
     *   }
     * })
    **/
    upsert<T extends optionsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, optionsUpsertArgs<ExtArgs>>
    ): Prisma__optionsClient<$Types.GetResult<optionsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Options.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {optionsCountArgs} args - Arguments to filter Options to count.
     * @example
     * // Count the number of Options
     * const count = await prisma.options.count({
     *   where: {
     *     // ... the filter for the Options we want to count
     *   }
     * })
    **/
    count<T extends optionsCountArgs>(
      args?: Subset<T, optionsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OptionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Options.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OptionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OptionsAggregateArgs>(args: Subset<T, OptionsAggregateArgs>): Prisma.PrismaPromise<GetOptionsAggregateType<T>>

    /**
     * Group by Options.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {optionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends optionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: optionsGroupByArgs['orderBy'] }
        : { orderBy?: optionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, optionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOptionsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the options model
   */
  readonly fields: optionsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for options.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__optionsClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    subCategory<T extends options$subCategoryArgs<ExtArgs> = {}>(args?: Subset<T, options$subCategoryArgs<ExtArgs>>): Prisma__subCategoryClient<$Types.GetResult<subCategoryPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    products<T extends options$productsArgs<ExtArgs> = {}>(args?: Subset<T, options$productsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<productsPayload<ExtArgs>, T, 'findMany'>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the options model
   */ 
  interface optionsFieldRefs {
    readonly id: FieldRef<"options", 'String'>
    readonly name: FieldRef<"options", 'String'>
    readonly subCategoryId: FieldRef<"options", 'String'>
  }
    

  // Custom InputTypes

  /**
   * options findUnique
   */
  export type optionsFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the options
     */
    select?: optionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: optionsInclude<ExtArgs> | null
    /**
     * Filter, which options to fetch.
     */
    where: optionsWhereUniqueInput
  }


  /**
   * options findUniqueOrThrow
   */
  export type optionsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the options
     */
    select?: optionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: optionsInclude<ExtArgs> | null
    /**
     * Filter, which options to fetch.
     */
    where: optionsWhereUniqueInput
  }


  /**
   * options findFirst
   */
  export type optionsFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the options
     */
    select?: optionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: optionsInclude<ExtArgs> | null
    /**
     * Filter, which options to fetch.
     */
    where?: optionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of options to fetch.
     */
    orderBy?: optionsOrderByWithRelationInput | optionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for options.
     */
    cursor?: optionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` options from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` options.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of options.
     */
    distinct?: OptionsScalarFieldEnum | OptionsScalarFieldEnum[]
  }


  /**
   * options findFirstOrThrow
   */
  export type optionsFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the options
     */
    select?: optionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: optionsInclude<ExtArgs> | null
    /**
     * Filter, which options to fetch.
     */
    where?: optionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of options to fetch.
     */
    orderBy?: optionsOrderByWithRelationInput | optionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for options.
     */
    cursor?: optionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` options from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` options.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of options.
     */
    distinct?: OptionsScalarFieldEnum | OptionsScalarFieldEnum[]
  }


  /**
   * options findMany
   */
  export type optionsFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the options
     */
    select?: optionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: optionsInclude<ExtArgs> | null
    /**
     * Filter, which options to fetch.
     */
    where?: optionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of options to fetch.
     */
    orderBy?: optionsOrderByWithRelationInput | optionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing options.
     */
    cursor?: optionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` options from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` options.
     */
    skip?: number
    distinct?: OptionsScalarFieldEnum | OptionsScalarFieldEnum[]
  }


  /**
   * options create
   */
  export type optionsCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the options
     */
    select?: optionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: optionsInclude<ExtArgs> | null
    /**
     * The data needed to create a options.
     */
    data: XOR<optionsCreateInput, optionsUncheckedCreateInput>
  }


  /**
   * options createMany
   */
  export type optionsCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many options.
     */
    data: optionsCreateManyInput | optionsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * options update
   */
  export type optionsUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the options
     */
    select?: optionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: optionsInclude<ExtArgs> | null
    /**
     * The data needed to update a options.
     */
    data: XOR<optionsUpdateInput, optionsUncheckedUpdateInput>
    /**
     * Choose, which options to update.
     */
    where: optionsWhereUniqueInput
  }


  /**
   * options updateMany
   */
  export type optionsUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update options.
     */
    data: XOR<optionsUpdateManyMutationInput, optionsUncheckedUpdateManyInput>
    /**
     * Filter which options to update
     */
    where?: optionsWhereInput
  }


  /**
   * options upsert
   */
  export type optionsUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the options
     */
    select?: optionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: optionsInclude<ExtArgs> | null
    /**
     * The filter to search for the options to update in case it exists.
     */
    where: optionsWhereUniqueInput
    /**
     * In case the options found by the `where` argument doesn't exist, create a new options with this data.
     */
    create: XOR<optionsCreateInput, optionsUncheckedCreateInput>
    /**
     * In case the options was found with the provided `where` argument, update it with this data.
     */
    update: XOR<optionsUpdateInput, optionsUncheckedUpdateInput>
  }


  /**
   * options delete
   */
  export type optionsDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the options
     */
    select?: optionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: optionsInclude<ExtArgs> | null
    /**
     * Filter which options to delete.
     */
    where: optionsWhereUniqueInput
  }


  /**
   * options deleteMany
   */
  export type optionsDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which options to delete
     */
    where?: optionsWhereInput
  }


  /**
   * options.subCategory
   */
  export type options$subCategoryArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subCategory
     */
    select?: subCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: subCategoryInclude<ExtArgs> | null
    where?: subCategoryWhereInput
  }


  /**
   * options.products
   */
  export type options$productsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productsInclude<ExtArgs> | null
    where?: productsWhereInput
    orderBy?: productsOrderByWithRelationInput | productsOrderByWithRelationInput[]
    cursor?: productsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductsScalarFieldEnum | ProductsScalarFieldEnum[]
  }


  /**
   * options without action
   */
  export type optionsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the options
     */
    select?: optionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: optionsInclude<ExtArgs> | null
  }



  /**
   * Model seller
   */


  export type AggregateSeller = {
    _count: SellerCountAggregateOutputType | null
    _min: SellerMinAggregateOutputType | null
    _max: SellerMaxAggregateOutputType | null
  }

  export type SellerMinAggregateOutputType = {
    id: string | null
    userId: string | null
    shopName: string | null
    shopAddress: string | null
    logo: string | null
    verified: boolean | null
  }

  export type SellerMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    shopName: string | null
    shopAddress: string | null
    logo: string | null
    verified: boolean | null
  }

  export type SellerCountAggregateOutputType = {
    id: number
    userId: number
    shopName: number
    shopAddress: number
    categories: number
    logo: number
    verified: number
    _all: number
  }


  export type SellerMinAggregateInputType = {
    id?: true
    userId?: true
    shopName?: true
    shopAddress?: true
    logo?: true
    verified?: true
  }

  export type SellerMaxAggregateInputType = {
    id?: true
    userId?: true
    shopName?: true
    shopAddress?: true
    logo?: true
    verified?: true
  }

  export type SellerCountAggregateInputType = {
    id?: true
    userId?: true
    shopName?: true
    shopAddress?: true
    categories?: true
    logo?: true
    verified?: true
    _all?: true
  }

  export type SellerAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which seller to aggregate.
     */
    where?: sellerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sellers to fetch.
     */
    orderBy?: sellerOrderByWithRelationInput | sellerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: sellerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sellers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sellers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned sellers
    **/
    _count?: true | SellerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SellerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SellerMaxAggregateInputType
  }

  export type GetSellerAggregateType<T extends SellerAggregateArgs> = {
        [P in keyof T & keyof AggregateSeller]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSeller[P]>
      : GetScalarType<T[P], AggregateSeller[P]>
  }




  export type sellerGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: sellerWhereInput
    orderBy?: sellerOrderByWithAggregationInput | sellerOrderByWithAggregationInput[]
    by: SellerScalarFieldEnum[] | SellerScalarFieldEnum
    having?: sellerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SellerCountAggregateInputType | true
    _min?: SellerMinAggregateInputType
    _max?: SellerMaxAggregateInputType
  }


  export type SellerGroupByOutputType = {
    id: string
    userId: string
    shopName: string
    shopAddress: string
    categories: JsonValue | null
    logo: string
    verified: boolean
    _count: SellerCountAggregateOutputType | null
    _min: SellerMinAggregateOutputType | null
    _max: SellerMaxAggregateOutputType | null
  }

  type GetSellerGroupByPayload<T extends sellerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SellerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SellerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SellerGroupByOutputType[P]>
            : GetScalarType<T[P], SellerGroupByOutputType[P]>
        }
      >
    >


  export type sellerSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    shopName?: boolean
    shopAddress?: boolean
    categories?: boolean
    logo?: boolean
    verified?: boolean
    user?: boolean | seller$userArgs<ExtArgs>
    products?: boolean | seller$productsArgs<ExtArgs>
    reviews?: boolean | seller$reviewsArgs<ExtArgs>
    _count?: boolean | SellerCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["seller"]>

  export type sellerSelectScalar = {
    id?: boolean
    userId?: boolean
    shopName?: boolean
    shopAddress?: boolean
    categories?: boolean
    logo?: boolean
    verified?: boolean
  }

  export type sellerInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | seller$userArgs<ExtArgs>
    products?: boolean | seller$productsArgs<ExtArgs>
    reviews?: boolean | seller$reviewsArgs<ExtArgs>
    _count?: boolean | SellerCountOutputTypeArgs<ExtArgs>
  }


  type sellerGetPayload<S extends boolean | null | undefined | sellerArgs> = $Types.GetResult<sellerPayload, S>

  type sellerCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<sellerFindManyArgs, 'select' | 'include'> & {
      select?: SellerCountAggregateInputType | true
    }

  export interface sellerDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['seller'], meta: { name: 'seller' } }
    /**
     * Find zero or one Seller that matches the filter.
     * @param {sellerFindUniqueArgs} args - Arguments to find a Seller
     * @example
     * // Get one Seller
     * const seller = await prisma.seller.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends sellerFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, sellerFindUniqueArgs<ExtArgs>>
    ): Prisma__sellerClient<$Types.GetResult<sellerPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Seller that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {sellerFindUniqueOrThrowArgs} args - Arguments to find a Seller
     * @example
     * // Get one Seller
     * const seller = await prisma.seller.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends sellerFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, sellerFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__sellerClient<$Types.GetResult<sellerPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Seller that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sellerFindFirstArgs} args - Arguments to find a Seller
     * @example
     * // Get one Seller
     * const seller = await prisma.seller.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends sellerFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, sellerFindFirstArgs<ExtArgs>>
    ): Prisma__sellerClient<$Types.GetResult<sellerPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Seller that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sellerFindFirstOrThrowArgs} args - Arguments to find a Seller
     * @example
     * // Get one Seller
     * const seller = await prisma.seller.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends sellerFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, sellerFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__sellerClient<$Types.GetResult<sellerPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Sellers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sellerFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sellers
     * const sellers = await prisma.seller.findMany()
     * 
     * // Get first 10 Sellers
     * const sellers = await prisma.seller.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sellerWithIdOnly = await prisma.seller.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends sellerFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, sellerFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<sellerPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Seller.
     * @param {sellerCreateArgs} args - Arguments to create a Seller.
     * @example
     * // Create one Seller
     * const Seller = await prisma.seller.create({
     *   data: {
     *     // ... data to create a Seller
     *   }
     * })
     * 
    **/
    create<T extends sellerCreateArgs<ExtArgs>>(
      args: SelectSubset<T, sellerCreateArgs<ExtArgs>>
    ): Prisma__sellerClient<$Types.GetResult<sellerPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Sellers.
     *     @param {sellerCreateManyArgs} args - Arguments to create many Sellers.
     *     @example
     *     // Create many Sellers
     *     const seller = await prisma.seller.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends sellerCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, sellerCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Seller.
     * @param {sellerDeleteArgs} args - Arguments to delete one Seller.
     * @example
     * // Delete one Seller
     * const Seller = await prisma.seller.delete({
     *   where: {
     *     // ... filter to delete one Seller
     *   }
     * })
     * 
    **/
    delete<T extends sellerDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, sellerDeleteArgs<ExtArgs>>
    ): Prisma__sellerClient<$Types.GetResult<sellerPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Seller.
     * @param {sellerUpdateArgs} args - Arguments to update one Seller.
     * @example
     * // Update one Seller
     * const seller = await prisma.seller.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends sellerUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, sellerUpdateArgs<ExtArgs>>
    ): Prisma__sellerClient<$Types.GetResult<sellerPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Sellers.
     * @param {sellerDeleteManyArgs} args - Arguments to filter Sellers to delete.
     * @example
     * // Delete a few Sellers
     * const { count } = await prisma.seller.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends sellerDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, sellerDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sellers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sellerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sellers
     * const seller = await prisma.seller.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends sellerUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, sellerUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Seller.
     * @param {sellerUpsertArgs} args - Arguments to update or create a Seller.
     * @example
     * // Update or create a Seller
     * const seller = await prisma.seller.upsert({
     *   create: {
     *     // ... data to create a Seller
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Seller we want to update
     *   }
     * })
    **/
    upsert<T extends sellerUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, sellerUpsertArgs<ExtArgs>>
    ): Prisma__sellerClient<$Types.GetResult<sellerPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Sellers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sellerCountArgs} args - Arguments to filter Sellers to count.
     * @example
     * // Count the number of Sellers
     * const count = await prisma.seller.count({
     *   where: {
     *     // ... the filter for the Sellers we want to count
     *   }
     * })
    **/
    count<T extends sellerCountArgs>(
      args?: Subset<T, sellerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SellerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Seller.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SellerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SellerAggregateArgs>(args: Subset<T, SellerAggregateArgs>): Prisma.PrismaPromise<GetSellerAggregateType<T>>

    /**
     * Group by Seller.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sellerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends sellerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: sellerGroupByArgs['orderBy'] }
        : { orderBy?: sellerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, sellerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSellerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the seller model
   */
  readonly fields: sellerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for seller.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__sellerClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends seller$userArgs<ExtArgs> = {}>(args?: Subset<T, seller$userArgs<ExtArgs>>): Prisma__usersClient<$Types.GetResult<usersPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    products<T extends seller$productsArgs<ExtArgs> = {}>(args?: Subset<T, seller$productsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<productsPayload<ExtArgs>, T, 'findMany'>| Null>;

    reviews<T extends seller$reviewsArgs<ExtArgs> = {}>(args?: Subset<T, seller$reviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<reviewsPayload<ExtArgs>, T, 'findMany'>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the seller model
   */ 
  interface sellerFieldRefs {
    readonly id: FieldRef<"seller", 'String'>
    readonly userId: FieldRef<"seller", 'String'>
    readonly shopName: FieldRef<"seller", 'String'>
    readonly shopAddress: FieldRef<"seller", 'String'>
    readonly categories: FieldRef<"seller", 'Json'>
    readonly logo: FieldRef<"seller", 'String'>
    readonly verified: FieldRef<"seller", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * seller findUnique
   */
  export type sellerFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the seller
     */
    select?: sellerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sellerInclude<ExtArgs> | null
    /**
     * Filter, which seller to fetch.
     */
    where: sellerWhereUniqueInput
  }


  /**
   * seller findUniqueOrThrow
   */
  export type sellerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the seller
     */
    select?: sellerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sellerInclude<ExtArgs> | null
    /**
     * Filter, which seller to fetch.
     */
    where: sellerWhereUniqueInput
  }


  /**
   * seller findFirst
   */
  export type sellerFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the seller
     */
    select?: sellerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sellerInclude<ExtArgs> | null
    /**
     * Filter, which seller to fetch.
     */
    where?: sellerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sellers to fetch.
     */
    orderBy?: sellerOrderByWithRelationInput | sellerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for sellers.
     */
    cursor?: sellerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sellers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sellers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of sellers.
     */
    distinct?: SellerScalarFieldEnum | SellerScalarFieldEnum[]
  }


  /**
   * seller findFirstOrThrow
   */
  export type sellerFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the seller
     */
    select?: sellerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sellerInclude<ExtArgs> | null
    /**
     * Filter, which seller to fetch.
     */
    where?: sellerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sellers to fetch.
     */
    orderBy?: sellerOrderByWithRelationInput | sellerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for sellers.
     */
    cursor?: sellerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sellers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sellers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of sellers.
     */
    distinct?: SellerScalarFieldEnum | SellerScalarFieldEnum[]
  }


  /**
   * seller findMany
   */
  export type sellerFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the seller
     */
    select?: sellerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sellerInclude<ExtArgs> | null
    /**
     * Filter, which sellers to fetch.
     */
    where?: sellerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sellers to fetch.
     */
    orderBy?: sellerOrderByWithRelationInput | sellerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing sellers.
     */
    cursor?: sellerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sellers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sellers.
     */
    skip?: number
    distinct?: SellerScalarFieldEnum | SellerScalarFieldEnum[]
  }


  /**
   * seller create
   */
  export type sellerCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the seller
     */
    select?: sellerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sellerInclude<ExtArgs> | null
    /**
     * The data needed to create a seller.
     */
    data: XOR<sellerCreateInput, sellerUncheckedCreateInput>
  }


  /**
   * seller createMany
   */
  export type sellerCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many sellers.
     */
    data: sellerCreateManyInput | sellerCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * seller update
   */
  export type sellerUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the seller
     */
    select?: sellerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sellerInclude<ExtArgs> | null
    /**
     * The data needed to update a seller.
     */
    data: XOR<sellerUpdateInput, sellerUncheckedUpdateInput>
    /**
     * Choose, which seller to update.
     */
    where: sellerWhereUniqueInput
  }


  /**
   * seller updateMany
   */
  export type sellerUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update sellers.
     */
    data: XOR<sellerUpdateManyMutationInput, sellerUncheckedUpdateManyInput>
    /**
     * Filter which sellers to update
     */
    where?: sellerWhereInput
  }


  /**
   * seller upsert
   */
  export type sellerUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the seller
     */
    select?: sellerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sellerInclude<ExtArgs> | null
    /**
     * The filter to search for the seller to update in case it exists.
     */
    where: sellerWhereUniqueInput
    /**
     * In case the seller found by the `where` argument doesn't exist, create a new seller with this data.
     */
    create: XOR<sellerCreateInput, sellerUncheckedCreateInput>
    /**
     * In case the seller was found with the provided `where` argument, update it with this data.
     */
    update: XOR<sellerUpdateInput, sellerUncheckedUpdateInput>
  }


  /**
   * seller delete
   */
  export type sellerDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the seller
     */
    select?: sellerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sellerInclude<ExtArgs> | null
    /**
     * Filter which seller to delete.
     */
    where: sellerWhereUniqueInput
  }


  /**
   * seller deleteMany
   */
  export type sellerDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which sellers to delete
     */
    where?: sellerWhereInput
  }


  /**
   * seller.user
   */
  export type seller$userArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    where?: usersWhereInput
  }


  /**
   * seller.products
   */
  export type seller$productsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productsInclude<ExtArgs> | null
    where?: productsWhereInput
    orderBy?: productsOrderByWithRelationInput | productsOrderByWithRelationInput[]
    cursor?: productsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductsScalarFieldEnum | ProductsScalarFieldEnum[]
  }


  /**
   * seller.reviews
   */
  export type seller$reviewsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reviews
     */
    select?: reviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: reviewsInclude<ExtArgs> | null
    where?: reviewsWhereInput
    orderBy?: reviewsOrderByWithRelationInput | reviewsOrderByWithRelationInput[]
    cursor?: reviewsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReviewsScalarFieldEnum | ReviewsScalarFieldEnum[]
  }


  /**
   * seller without action
   */
  export type sellerArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the seller
     */
    select?: sellerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sellerInclude<ExtArgs> | null
  }



  /**
   * Model brands
   */


  export type AggregateBrands = {
    _count: BrandsCountAggregateOutputType | null
    _min: BrandsMinAggregateOutputType | null
    _max: BrandsMaxAggregateOutputType | null
  }

  export type BrandsMinAggregateOutputType = {
    id: string | null
    userId: string | null
    brandName: string | null
    brandAddress: string | null
    brandIcon: string | null
    verified: boolean | null
  }

  export type BrandsMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    brandName: string | null
    brandAddress: string | null
    brandIcon: string | null
    verified: boolean | null
  }

  export type BrandsCountAggregateOutputType = {
    id: number
    userId: number
    brandName: number
    brandAddress: number
    brandIcon: number
    categories: number
    verified: number
    _all: number
  }


  export type BrandsMinAggregateInputType = {
    id?: true
    userId?: true
    brandName?: true
    brandAddress?: true
    brandIcon?: true
    verified?: true
  }

  export type BrandsMaxAggregateInputType = {
    id?: true
    userId?: true
    brandName?: true
    brandAddress?: true
    brandIcon?: true
    verified?: true
  }

  export type BrandsCountAggregateInputType = {
    id?: true
    userId?: true
    brandName?: true
    brandAddress?: true
    brandIcon?: true
    categories?: true
    verified?: true
    _all?: true
  }

  export type BrandsAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which brands to aggregate.
     */
    where?: brandsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of brands to fetch.
     */
    orderBy?: brandsOrderByWithRelationInput | brandsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: brandsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` brands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` brands.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned brands
    **/
    _count?: true | BrandsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BrandsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BrandsMaxAggregateInputType
  }

  export type GetBrandsAggregateType<T extends BrandsAggregateArgs> = {
        [P in keyof T & keyof AggregateBrands]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBrands[P]>
      : GetScalarType<T[P], AggregateBrands[P]>
  }




  export type brandsGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: brandsWhereInput
    orderBy?: brandsOrderByWithAggregationInput | brandsOrderByWithAggregationInput[]
    by: BrandsScalarFieldEnum[] | BrandsScalarFieldEnum
    having?: brandsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BrandsCountAggregateInputType | true
    _min?: BrandsMinAggregateInputType
    _max?: BrandsMaxAggregateInputType
  }


  export type BrandsGroupByOutputType = {
    id: string
    userId: string
    brandName: string
    brandAddress: string
    brandIcon: string
    categories: JsonValue | null
    verified: boolean
    _count: BrandsCountAggregateOutputType | null
    _min: BrandsMinAggregateOutputType | null
    _max: BrandsMaxAggregateOutputType | null
  }

  type GetBrandsGroupByPayload<T extends brandsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BrandsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BrandsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BrandsGroupByOutputType[P]>
            : GetScalarType<T[P], BrandsGroupByOutputType[P]>
        }
      >
    >


  export type brandsSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    brandName?: boolean
    brandAddress?: boolean
    brandIcon?: boolean
    categories?: boolean
    verified?: boolean
    user?: boolean | brands$userArgs<ExtArgs>
    products?: boolean | brands$productsArgs<ExtArgs>
    reviews?: boolean | brands$reviewsArgs<ExtArgs>
    _count?: boolean | BrandsCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["brands"]>

  export type brandsSelectScalar = {
    id?: boolean
    userId?: boolean
    brandName?: boolean
    brandAddress?: boolean
    brandIcon?: boolean
    categories?: boolean
    verified?: boolean
  }

  export type brandsInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | brands$userArgs<ExtArgs>
    products?: boolean | brands$productsArgs<ExtArgs>
    reviews?: boolean | brands$reviewsArgs<ExtArgs>
    _count?: boolean | BrandsCountOutputTypeArgs<ExtArgs>
  }


  type brandsGetPayload<S extends boolean | null | undefined | brandsArgs> = $Types.GetResult<brandsPayload, S>

  type brandsCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<brandsFindManyArgs, 'select' | 'include'> & {
      select?: BrandsCountAggregateInputType | true
    }

  export interface brandsDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['brands'], meta: { name: 'brands' } }
    /**
     * Find zero or one Brands that matches the filter.
     * @param {brandsFindUniqueArgs} args - Arguments to find a Brands
     * @example
     * // Get one Brands
     * const brands = await prisma.brands.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends brandsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, brandsFindUniqueArgs<ExtArgs>>
    ): Prisma__brandsClient<$Types.GetResult<brandsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Brands that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {brandsFindUniqueOrThrowArgs} args - Arguments to find a Brands
     * @example
     * // Get one Brands
     * const brands = await prisma.brands.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends brandsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, brandsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__brandsClient<$Types.GetResult<brandsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Brands that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {brandsFindFirstArgs} args - Arguments to find a Brands
     * @example
     * // Get one Brands
     * const brands = await prisma.brands.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends brandsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, brandsFindFirstArgs<ExtArgs>>
    ): Prisma__brandsClient<$Types.GetResult<brandsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Brands that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {brandsFindFirstOrThrowArgs} args - Arguments to find a Brands
     * @example
     * // Get one Brands
     * const brands = await prisma.brands.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends brandsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, brandsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__brandsClient<$Types.GetResult<brandsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Brands that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {brandsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Brands
     * const brands = await prisma.brands.findMany()
     * 
     * // Get first 10 Brands
     * const brands = await prisma.brands.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const brandsWithIdOnly = await prisma.brands.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends brandsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, brandsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<brandsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Brands.
     * @param {brandsCreateArgs} args - Arguments to create a Brands.
     * @example
     * // Create one Brands
     * const Brands = await prisma.brands.create({
     *   data: {
     *     // ... data to create a Brands
     *   }
     * })
     * 
    **/
    create<T extends brandsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, brandsCreateArgs<ExtArgs>>
    ): Prisma__brandsClient<$Types.GetResult<brandsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Brands.
     *     @param {brandsCreateManyArgs} args - Arguments to create many Brands.
     *     @example
     *     // Create many Brands
     *     const brands = await prisma.brands.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends brandsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, brandsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Brands.
     * @param {brandsDeleteArgs} args - Arguments to delete one Brands.
     * @example
     * // Delete one Brands
     * const Brands = await prisma.brands.delete({
     *   where: {
     *     // ... filter to delete one Brands
     *   }
     * })
     * 
    **/
    delete<T extends brandsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, brandsDeleteArgs<ExtArgs>>
    ): Prisma__brandsClient<$Types.GetResult<brandsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Brands.
     * @param {brandsUpdateArgs} args - Arguments to update one Brands.
     * @example
     * // Update one Brands
     * const brands = await prisma.brands.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends brandsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, brandsUpdateArgs<ExtArgs>>
    ): Prisma__brandsClient<$Types.GetResult<brandsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Brands.
     * @param {brandsDeleteManyArgs} args - Arguments to filter Brands to delete.
     * @example
     * // Delete a few Brands
     * const { count } = await prisma.brands.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends brandsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, brandsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Brands.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {brandsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Brands
     * const brands = await prisma.brands.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends brandsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, brandsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Brands.
     * @param {brandsUpsertArgs} args - Arguments to update or create a Brands.
     * @example
     * // Update or create a Brands
     * const brands = await prisma.brands.upsert({
     *   create: {
     *     // ... data to create a Brands
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Brands we want to update
     *   }
     * })
    **/
    upsert<T extends brandsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, brandsUpsertArgs<ExtArgs>>
    ): Prisma__brandsClient<$Types.GetResult<brandsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Brands.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {brandsCountArgs} args - Arguments to filter Brands to count.
     * @example
     * // Count the number of Brands
     * const count = await prisma.brands.count({
     *   where: {
     *     // ... the filter for the Brands we want to count
     *   }
     * })
    **/
    count<T extends brandsCountArgs>(
      args?: Subset<T, brandsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BrandsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Brands.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BrandsAggregateArgs>(args: Subset<T, BrandsAggregateArgs>): Prisma.PrismaPromise<GetBrandsAggregateType<T>>

    /**
     * Group by Brands.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {brandsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends brandsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: brandsGroupByArgs['orderBy'] }
        : { orderBy?: brandsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, brandsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBrandsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the brands model
   */
  readonly fields: brandsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for brands.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__brandsClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends brands$userArgs<ExtArgs> = {}>(args?: Subset<T, brands$userArgs<ExtArgs>>): Prisma__usersClient<$Types.GetResult<usersPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    products<T extends brands$productsArgs<ExtArgs> = {}>(args?: Subset<T, brands$productsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<productsPayload<ExtArgs>, T, 'findMany'>| Null>;

    reviews<T extends brands$reviewsArgs<ExtArgs> = {}>(args?: Subset<T, brands$reviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<reviewsPayload<ExtArgs>, T, 'findMany'>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the brands model
   */ 
  interface brandsFieldRefs {
    readonly id: FieldRef<"brands", 'String'>
    readonly userId: FieldRef<"brands", 'String'>
    readonly brandName: FieldRef<"brands", 'String'>
    readonly brandAddress: FieldRef<"brands", 'String'>
    readonly brandIcon: FieldRef<"brands", 'String'>
    readonly categories: FieldRef<"brands", 'Json'>
    readonly verified: FieldRef<"brands", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * brands findUnique
   */
  export type brandsFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the brands
     */
    select?: brandsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: brandsInclude<ExtArgs> | null
    /**
     * Filter, which brands to fetch.
     */
    where: brandsWhereUniqueInput
  }


  /**
   * brands findUniqueOrThrow
   */
  export type brandsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the brands
     */
    select?: brandsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: brandsInclude<ExtArgs> | null
    /**
     * Filter, which brands to fetch.
     */
    where: brandsWhereUniqueInput
  }


  /**
   * brands findFirst
   */
  export type brandsFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the brands
     */
    select?: brandsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: brandsInclude<ExtArgs> | null
    /**
     * Filter, which brands to fetch.
     */
    where?: brandsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of brands to fetch.
     */
    orderBy?: brandsOrderByWithRelationInput | brandsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for brands.
     */
    cursor?: brandsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` brands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` brands.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of brands.
     */
    distinct?: BrandsScalarFieldEnum | BrandsScalarFieldEnum[]
  }


  /**
   * brands findFirstOrThrow
   */
  export type brandsFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the brands
     */
    select?: brandsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: brandsInclude<ExtArgs> | null
    /**
     * Filter, which brands to fetch.
     */
    where?: brandsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of brands to fetch.
     */
    orderBy?: brandsOrderByWithRelationInput | brandsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for brands.
     */
    cursor?: brandsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` brands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` brands.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of brands.
     */
    distinct?: BrandsScalarFieldEnum | BrandsScalarFieldEnum[]
  }


  /**
   * brands findMany
   */
  export type brandsFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the brands
     */
    select?: brandsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: brandsInclude<ExtArgs> | null
    /**
     * Filter, which brands to fetch.
     */
    where?: brandsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of brands to fetch.
     */
    orderBy?: brandsOrderByWithRelationInput | brandsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing brands.
     */
    cursor?: brandsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` brands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` brands.
     */
    skip?: number
    distinct?: BrandsScalarFieldEnum | BrandsScalarFieldEnum[]
  }


  /**
   * brands create
   */
  export type brandsCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the brands
     */
    select?: brandsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: brandsInclude<ExtArgs> | null
    /**
     * The data needed to create a brands.
     */
    data: XOR<brandsCreateInput, brandsUncheckedCreateInput>
  }


  /**
   * brands createMany
   */
  export type brandsCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many brands.
     */
    data: brandsCreateManyInput | brandsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * brands update
   */
  export type brandsUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the brands
     */
    select?: brandsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: brandsInclude<ExtArgs> | null
    /**
     * The data needed to update a brands.
     */
    data: XOR<brandsUpdateInput, brandsUncheckedUpdateInput>
    /**
     * Choose, which brands to update.
     */
    where: brandsWhereUniqueInput
  }


  /**
   * brands updateMany
   */
  export type brandsUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update brands.
     */
    data: XOR<brandsUpdateManyMutationInput, brandsUncheckedUpdateManyInput>
    /**
     * Filter which brands to update
     */
    where?: brandsWhereInput
  }


  /**
   * brands upsert
   */
  export type brandsUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the brands
     */
    select?: brandsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: brandsInclude<ExtArgs> | null
    /**
     * The filter to search for the brands to update in case it exists.
     */
    where: brandsWhereUniqueInput
    /**
     * In case the brands found by the `where` argument doesn't exist, create a new brands with this data.
     */
    create: XOR<brandsCreateInput, brandsUncheckedCreateInput>
    /**
     * In case the brands was found with the provided `where` argument, update it with this data.
     */
    update: XOR<brandsUpdateInput, brandsUncheckedUpdateInput>
  }


  /**
   * brands delete
   */
  export type brandsDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the brands
     */
    select?: brandsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: brandsInclude<ExtArgs> | null
    /**
     * Filter which brands to delete.
     */
    where: brandsWhereUniqueInput
  }


  /**
   * brands deleteMany
   */
  export type brandsDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which brands to delete
     */
    where?: brandsWhereInput
  }


  /**
   * brands.user
   */
  export type brands$userArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    where?: usersWhereInput
  }


  /**
   * brands.products
   */
  export type brands$productsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productsInclude<ExtArgs> | null
    where?: productsWhereInput
    orderBy?: productsOrderByWithRelationInput | productsOrderByWithRelationInput[]
    cursor?: productsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductsScalarFieldEnum | ProductsScalarFieldEnum[]
  }


  /**
   * brands.reviews
   */
  export type brands$reviewsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reviews
     */
    select?: reviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: reviewsInclude<ExtArgs> | null
    where?: reviewsWhereInput
    orderBy?: reviewsOrderByWithRelationInput | reviewsOrderByWithRelationInput[]
    cursor?: reviewsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReviewsScalarFieldEnum | ReviewsScalarFieldEnum[]
  }


  /**
   * brands without action
   */
  export type brandsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the brands
     */
    select?: brandsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: brandsInclude<ExtArgs> | null
  }



  /**
   * Model products
   */


  export type AggregateProducts = {
    _count: ProductsCountAggregateOutputType | null
    _avg: ProductsAvgAggregateOutputType | null
    _sum: ProductsSumAggregateOutputType | null
    _min: ProductsMinAggregateOutputType | null
    _max: ProductsMaxAggregateOutputType | null
  }

  export type ProductsAvgAggregateOutputType = {
    price: number | null
    quantity: number | null
    minOrder: number | null
    freeCoin: number | null
    offer: number | null
  }

  export type ProductsSumAggregateOutputType = {
    price: number | null
    quantity: number | null
    minOrder: number | null
    freeCoin: number | null
    offer: number | null
  }

  export type ProductsMinAggregateOutputType = {
    id: string | null
    price: number | null
    coin: boolean | null
    title: string | null
    description: string | null
    thumbnail: string | null
    quantity: number | null
    minOrder: number | null
    freeCoin: number | null
    offer: number | null
    percentage: boolean | null
    freeDelivery: boolean | null
    fixedPrice: boolean | null
    createdAt: Date | null
    colorId: string | null
    sizeId: string | null
    specificationsId: string | null
    verified: boolean | null
    sellerId: string | null
    brandId: string | null
    categoryId: string | null
    subCategoryId: string | null
    optionId: string | null
    userId: string | null
  }

  export type ProductsMaxAggregateOutputType = {
    id: string | null
    price: number | null
    coin: boolean | null
    title: string | null
    description: string | null
    thumbnail: string | null
    quantity: number | null
    minOrder: number | null
    freeCoin: number | null
    offer: number | null
    percentage: boolean | null
    freeDelivery: boolean | null
    fixedPrice: boolean | null
    createdAt: Date | null
    colorId: string | null
    sizeId: string | null
    specificationsId: string | null
    verified: boolean | null
    sellerId: string | null
    brandId: string | null
    categoryId: string | null
    subCategoryId: string | null
    optionId: string | null
    userId: string | null
  }

  export type ProductsCountAggregateOutputType = {
    id: number
    price: number
    coin: number
    title: number
    description: number
    thumbnail: number
    quantity: number
    minOrder: number
    freeCoin: number
    offer: number
    percentage: number
    freeDelivery: number
    fixedPrice: number
    createdAt: number
    colorId: number
    sizeId: number
    specificationsId: number
    images: number
    verified: number
    sellerId: number
    brandId: number
    categoryId: number
    subCategoryId: number
    optionId: number
    userId: number
    _all: number
  }


  export type ProductsAvgAggregateInputType = {
    price?: true
    quantity?: true
    minOrder?: true
    freeCoin?: true
    offer?: true
  }

  export type ProductsSumAggregateInputType = {
    price?: true
    quantity?: true
    minOrder?: true
    freeCoin?: true
    offer?: true
  }

  export type ProductsMinAggregateInputType = {
    id?: true
    price?: true
    coin?: true
    title?: true
    description?: true
    thumbnail?: true
    quantity?: true
    minOrder?: true
    freeCoin?: true
    offer?: true
    percentage?: true
    freeDelivery?: true
    fixedPrice?: true
    createdAt?: true
    colorId?: true
    sizeId?: true
    specificationsId?: true
    verified?: true
    sellerId?: true
    brandId?: true
    categoryId?: true
    subCategoryId?: true
    optionId?: true
    userId?: true
  }

  export type ProductsMaxAggregateInputType = {
    id?: true
    price?: true
    coin?: true
    title?: true
    description?: true
    thumbnail?: true
    quantity?: true
    minOrder?: true
    freeCoin?: true
    offer?: true
    percentage?: true
    freeDelivery?: true
    fixedPrice?: true
    createdAt?: true
    colorId?: true
    sizeId?: true
    specificationsId?: true
    verified?: true
    sellerId?: true
    brandId?: true
    categoryId?: true
    subCategoryId?: true
    optionId?: true
    userId?: true
  }

  export type ProductsCountAggregateInputType = {
    id?: true
    price?: true
    coin?: true
    title?: true
    description?: true
    thumbnail?: true
    quantity?: true
    minOrder?: true
    freeCoin?: true
    offer?: true
    percentage?: true
    freeDelivery?: true
    fixedPrice?: true
    createdAt?: true
    colorId?: true
    sizeId?: true
    specificationsId?: true
    images?: true
    verified?: true
    sellerId?: true
    brandId?: true
    categoryId?: true
    subCategoryId?: true
    optionId?: true
    userId?: true
    _all?: true
  }

  export type ProductsAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which products to aggregate.
     */
    where?: productsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     */
    orderBy?: productsOrderByWithRelationInput | productsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: productsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned products
    **/
    _count?: true | ProductsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductsMaxAggregateInputType
  }

  export type GetProductsAggregateType<T extends ProductsAggregateArgs> = {
        [P in keyof T & keyof AggregateProducts]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProducts[P]>
      : GetScalarType<T[P], AggregateProducts[P]>
  }




  export type productsGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: productsWhereInput
    orderBy?: productsOrderByWithAggregationInput | productsOrderByWithAggregationInput[]
    by: ProductsScalarFieldEnum[] | ProductsScalarFieldEnum
    having?: productsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductsCountAggregateInputType | true
    _avg?: ProductsAvgAggregateInputType
    _sum?: ProductsSumAggregateInputType
    _min?: ProductsMinAggregateInputType
    _max?: ProductsMaxAggregateInputType
  }


  export type ProductsGroupByOutputType = {
    id: string
    price: number
    coin: boolean
    title: string
    description: string
    thumbnail: string
    quantity: number
    minOrder: number
    freeCoin: number
    offer: number
    percentage: boolean
    freeDelivery: boolean
    fixedPrice: boolean
    createdAt: Date
    colorId: string
    sizeId: string
    specificationsId: string
    images: JsonValue | null
    verified: boolean
    sellerId: string | null
    brandId: string | null
    categoryId: string
    subCategoryId: string
    optionId: string
    userId: string
    _count: ProductsCountAggregateOutputType | null
    _avg: ProductsAvgAggregateOutputType | null
    _sum: ProductsSumAggregateOutputType | null
    _min: ProductsMinAggregateOutputType | null
    _max: ProductsMaxAggregateOutputType | null
  }

  type GetProductsGroupByPayload<T extends productsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductsGroupByOutputType[P]>
            : GetScalarType<T[P], ProductsGroupByOutputType[P]>
        }
      >
    >


  export type productsSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    price?: boolean
    coin?: boolean
    title?: boolean
    description?: boolean
    thumbnail?: boolean
    quantity?: boolean
    minOrder?: boolean
    freeCoin?: boolean
    offer?: boolean
    percentage?: boolean
    freeDelivery?: boolean
    fixedPrice?: boolean
    createdAt?: boolean
    colorId?: boolean
    sizeId?: boolean
    specificationsId?: boolean
    images?: boolean
    verified?: boolean
    sellerId?: boolean
    brandId?: boolean
    categoryId?: boolean
    subCategoryId?: boolean
    optionId?: boolean
    userId?: boolean
    colors?: boolean | products$colorsArgs<ExtArgs>
    size?: boolean | products$sizeArgs<ExtArgs>
    specification?: boolean | products$specificationArgs<ExtArgs>
    comments?: boolean | products$commentsArgs<ExtArgs>
    reviews?: boolean | products$reviewsArgs<ExtArgs>
    flashSellProduct?: boolean | products$flashSellProductArgs<ExtArgs>
    seller?: boolean | products$sellerArgs<ExtArgs>
    brand?: boolean | products$brandArgs<ExtArgs>
    category?: boolean | products$categoryArgs<ExtArgs>
    subCategory?: boolean | products$subCategoryArgs<ExtArgs>
    option?: boolean | products$optionArgs<ExtArgs>
    user?: boolean | products$userArgs<ExtArgs>
    banner?: boolean | products$bannerArgs<ExtArgs>
    adds?: boolean | products$addsArgs<ExtArgs>
    messages?: boolean | products$messagesArgs<ExtArgs>
    orders?: boolean | products$ordersArgs<ExtArgs>
    _count?: boolean | ProductsCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["products"]>

  export type productsSelectScalar = {
    id?: boolean
    price?: boolean
    coin?: boolean
    title?: boolean
    description?: boolean
    thumbnail?: boolean
    quantity?: boolean
    minOrder?: boolean
    freeCoin?: boolean
    offer?: boolean
    percentage?: boolean
    freeDelivery?: boolean
    fixedPrice?: boolean
    createdAt?: boolean
    colorId?: boolean
    sizeId?: boolean
    specificationsId?: boolean
    images?: boolean
    verified?: boolean
    sellerId?: boolean
    brandId?: boolean
    categoryId?: boolean
    subCategoryId?: boolean
    optionId?: boolean
    userId?: boolean
  }

  export type productsInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    colors?: boolean | products$colorsArgs<ExtArgs>
    size?: boolean | products$sizeArgs<ExtArgs>
    specification?: boolean | products$specificationArgs<ExtArgs>
    comments?: boolean | products$commentsArgs<ExtArgs>
    reviews?: boolean | products$reviewsArgs<ExtArgs>
    flashSellProduct?: boolean | products$flashSellProductArgs<ExtArgs>
    seller?: boolean | products$sellerArgs<ExtArgs>
    brand?: boolean | products$brandArgs<ExtArgs>
    category?: boolean | products$categoryArgs<ExtArgs>
    subCategory?: boolean | products$subCategoryArgs<ExtArgs>
    option?: boolean | products$optionArgs<ExtArgs>
    user?: boolean | products$userArgs<ExtArgs>
    banner?: boolean | products$bannerArgs<ExtArgs>
    adds?: boolean | products$addsArgs<ExtArgs>
    messages?: boolean | products$messagesArgs<ExtArgs>
    orders?: boolean | products$ordersArgs<ExtArgs>
    _count?: boolean | ProductsCountOutputTypeArgs<ExtArgs>
  }


  type productsGetPayload<S extends boolean | null | undefined | productsArgs> = $Types.GetResult<productsPayload, S>

  type productsCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<productsFindManyArgs, 'select' | 'include'> & {
      select?: ProductsCountAggregateInputType | true
    }

  export interface productsDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['products'], meta: { name: 'products' } }
    /**
     * Find zero or one Products that matches the filter.
     * @param {productsFindUniqueArgs} args - Arguments to find a Products
     * @example
     * // Get one Products
     * const products = await prisma.products.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends productsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, productsFindUniqueArgs<ExtArgs>>
    ): Prisma__productsClient<$Types.GetResult<productsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Products that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {productsFindUniqueOrThrowArgs} args - Arguments to find a Products
     * @example
     * // Get one Products
     * const products = await prisma.products.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends productsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, productsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__productsClient<$Types.GetResult<productsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productsFindFirstArgs} args - Arguments to find a Products
     * @example
     * // Get one Products
     * const products = await prisma.products.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends productsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, productsFindFirstArgs<ExtArgs>>
    ): Prisma__productsClient<$Types.GetResult<productsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Products that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productsFindFirstOrThrowArgs} args - Arguments to find a Products
     * @example
     * // Get one Products
     * const products = await prisma.products.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends productsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, productsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__productsClient<$Types.GetResult<productsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.products.findMany()
     * 
     * // Get first 10 Products
     * const products = await prisma.products.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productsWithIdOnly = await prisma.products.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends productsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, productsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<productsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Products.
     * @param {productsCreateArgs} args - Arguments to create a Products.
     * @example
     * // Create one Products
     * const Products = await prisma.products.create({
     *   data: {
     *     // ... data to create a Products
     *   }
     * })
     * 
    **/
    create<T extends productsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, productsCreateArgs<ExtArgs>>
    ): Prisma__productsClient<$Types.GetResult<productsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Products.
     *     @param {productsCreateManyArgs} args - Arguments to create many Products.
     *     @example
     *     // Create many Products
     *     const products = await prisma.products.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends productsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, productsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Products.
     * @param {productsDeleteArgs} args - Arguments to delete one Products.
     * @example
     * // Delete one Products
     * const Products = await prisma.products.delete({
     *   where: {
     *     // ... filter to delete one Products
     *   }
     * })
     * 
    **/
    delete<T extends productsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, productsDeleteArgs<ExtArgs>>
    ): Prisma__productsClient<$Types.GetResult<productsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Products.
     * @param {productsUpdateArgs} args - Arguments to update one Products.
     * @example
     * // Update one Products
     * const products = await prisma.products.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends productsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, productsUpdateArgs<ExtArgs>>
    ): Prisma__productsClient<$Types.GetResult<productsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Products.
     * @param {productsDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.products.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends productsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, productsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const products = await prisma.products.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends productsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, productsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Products.
     * @param {productsUpsertArgs} args - Arguments to update or create a Products.
     * @example
     * // Update or create a Products
     * const products = await prisma.products.upsert({
     *   create: {
     *     // ... data to create a Products
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Products we want to update
     *   }
     * })
    **/
    upsert<T extends productsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, productsUpsertArgs<ExtArgs>>
    ): Prisma__productsClient<$Types.GetResult<productsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productsCountArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.products.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
    **/
    count<T extends productsCountArgs>(
      args?: Subset<T, productsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductsAggregateArgs>(args: Subset<T, ProductsAggregateArgs>): Prisma.PrismaPromise<GetProductsAggregateType<T>>

    /**
     * Group by Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends productsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: productsGroupByArgs['orderBy'] }
        : { orderBy?: productsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, productsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the products model
   */
  readonly fields: productsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for products.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__productsClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    colors<T extends products$colorsArgs<ExtArgs> = {}>(args?: Subset<T, products$colorsArgs<ExtArgs>>): Prisma__colorsClient<$Types.GetResult<colorsPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    size<T extends products$sizeArgs<ExtArgs> = {}>(args?: Subset<T, products$sizeArgs<ExtArgs>>): Prisma__sizeClient<$Types.GetResult<sizePayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    specification<T extends products$specificationArgs<ExtArgs> = {}>(args?: Subset<T, products$specificationArgs<ExtArgs>>): Prisma__specificationsClient<$Types.GetResult<specificationsPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    comments<T extends products$commentsArgs<ExtArgs> = {}>(args?: Subset<T, products$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<commentsPayload<ExtArgs>, T, 'findMany'>| Null>;

    reviews<T extends products$reviewsArgs<ExtArgs> = {}>(args?: Subset<T, products$reviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<reviewsPayload<ExtArgs>, T, 'findMany'>| Null>;

    flashSellProduct<T extends products$flashSellProductArgs<ExtArgs> = {}>(args?: Subset<T, products$flashSellProductArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<flashSellProductPayload<ExtArgs>, T, 'findMany'>| Null>;

    seller<T extends products$sellerArgs<ExtArgs> = {}>(args?: Subset<T, products$sellerArgs<ExtArgs>>): Prisma__sellerClient<$Types.GetResult<sellerPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    brand<T extends products$brandArgs<ExtArgs> = {}>(args?: Subset<T, products$brandArgs<ExtArgs>>): Prisma__brandsClient<$Types.GetResult<brandsPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    category<T extends products$categoryArgs<ExtArgs> = {}>(args?: Subset<T, products$categoryArgs<ExtArgs>>): Prisma__categoryClient<$Types.GetResult<categoryPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    subCategory<T extends products$subCategoryArgs<ExtArgs> = {}>(args?: Subset<T, products$subCategoryArgs<ExtArgs>>): Prisma__subCategoryClient<$Types.GetResult<subCategoryPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    option<T extends products$optionArgs<ExtArgs> = {}>(args?: Subset<T, products$optionArgs<ExtArgs>>): Prisma__optionsClient<$Types.GetResult<optionsPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    user<T extends products$userArgs<ExtArgs> = {}>(args?: Subset<T, products$userArgs<ExtArgs>>): Prisma__usersClient<$Types.GetResult<usersPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    banner<T extends products$bannerArgs<ExtArgs> = {}>(args?: Subset<T, products$bannerArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<bannerPayload<ExtArgs>, T, 'findMany'>| Null>;

    adds<T extends products$addsArgs<ExtArgs> = {}>(args?: Subset<T, products$addsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<addsPayload<ExtArgs>, T, 'findMany'>| Null>;

    messages<T extends products$messagesArgs<ExtArgs> = {}>(args?: Subset<T, products$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<messagesPayload<ExtArgs>, T, 'findMany'>| Null>;

    orders<T extends products$ordersArgs<ExtArgs> = {}>(args?: Subset<T, products$ordersArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<ordersPayload<ExtArgs>, T, 'findMany'>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the products model
   */ 
  interface productsFieldRefs {
    readonly id: FieldRef<"products", 'String'>
    readonly price: FieldRef<"products", 'Int'>
    readonly coin: FieldRef<"products", 'Boolean'>
    readonly title: FieldRef<"products", 'String'>
    readonly description: FieldRef<"products", 'String'>
    readonly thumbnail: FieldRef<"products", 'String'>
    readonly quantity: FieldRef<"products", 'Int'>
    readonly minOrder: FieldRef<"products", 'Int'>
    readonly freeCoin: FieldRef<"products", 'Int'>
    readonly offer: FieldRef<"products", 'Int'>
    readonly percentage: FieldRef<"products", 'Boolean'>
    readonly freeDelivery: FieldRef<"products", 'Boolean'>
    readonly fixedPrice: FieldRef<"products", 'Boolean'>
    readonly createdAt: FieldRef<"products", 'DateTime'>
    readonly colorId: FieldRef<"products", 'String'>
    readonly sizeId: FieldRef<"products", 'String'>
    readonly specificationsId: FieldRef<"products", 'String'>
    readonly images: FieldRef<"products", 'Json'>
    readonly verified: FieldRef<"products", 'Boolean'>
    readonly sellerId: FieldRef<"products", 'String'>
    readonly brandId: FieldRef<"products", 'String'>
    readonly categoryId: FieldRef<"products", 'String'>
    readonly subCategoryId: FieldRef<"products", 'String'>
    readonly optionId: FieldRef<"products", 'String'>
    readonly userId: FieldRef<"products", 'String'>
  }
    

  // Custom InputTypes

  /**
   * products findUnique
   */
  export type productsFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productsInclude<ExtArgs> | null
    /**
     * Filter, which products to fetch.
     */
    where: productsWhereUniqueInput
  }


  /**
   * products findUniqueOrThrow
   */
  export type productsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productsInclude<ExtArgs> | null
    /**
     * Filter, which products to fetch.
     */
    where: productsWhereUniqueInput
  }


  /**
   * products findFirst
   */
  export type productsFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productsInclude<ExtArgs> | null
    /**
     * Filter, which products to fetch.
     */
    where?: productsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     */
    orderBy?: productsOrderByWithRelationInput | productsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for products.
     */
    cursor?: productsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of products.
     */
    distinct?: ProductsScalarFieldEnum | ProductsScalarFieldEnum[]
  }


  /**
   * products findFirstOrThrow
   */
  export type productsFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productsInclude<ExtArgs> | null
    /**
     * Filter, which products to fetch.
     */
    where?: productsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     */
    orderBy?: productsOrderByWithRelationInput | productsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for products.
     */
    cursor?: productsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of products.
     */
    distinct?: ProductsScalarFieldEnum | ProductsScalarFieldEnum[]
  }


  /**
   * products findMany
   */
  export type productsFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productsInclude<ExtArgs> | null
    /**
     * Filter, which products to fetch.
     */
    where?: productsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     */
    orderBy?: productsOrderByWithRelationInput | productsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing products.
     */
    cursor?: productsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     */
    skip?: number
    distinct?: ProductsScalarFieldEnum | ProductsScalarFieldEnum[]
  }


  /**
   * products create
   */
  export type productsCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productsInclude<ExtArgs> | null
    /**
     * The data needed to create a products.
     */
    data: XOR<productsCreateInput, productsUncheckedCreateInput>
  }


  /**
   * products createMany
   */
  export type productsCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many products.
     */
    data: productsCreateManyInput | productsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * products update
   */
  export type productsUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productsInclude<ExtArgs> | null
    /**
     * The data needed to update a products.
     */
    data: XOR<productsUpdateInput, productsUncheckedUpdateInput>
    /**
     * Choose, which products to update.
     */
    where: productsWhereUniqueInput
  }


  /**
   * products updateMany
   */
  export type productsUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update products.
     */
    data: XOR<productsUpdateManyMutationInput, productsUncheckedUpdateManyInput>
    /**
     * Filter which products to update
     */
    where?: productsWhereInput
  }


  /**
   * products upsert
   */
  export type productsUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productsInclude<ExtArgs> | null
    /**
     * The filter to search for the products to update in case it exists.
     */
    where: productsWhereUniqueInput
    /**
     * In case the products found by the `where` argument doesn't exist, create a new products with this data.
     */
    create: XOR<productsCreateInput, productsUncheckedCreateInput>
    /**
     * In case the products was found with the provided `where` argument, update it with this data.
     */
    update: XOR<productsUpdateInput, productsUncheckedUpdateInput>
  }


  /**
   * products delete
   */
  export type productsDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productsInclude<ExtArgs> | null
    /**
     * Filter which products to delete.
     */
    where: productsWhereUniqueInput
  }


  /**
   * products deleteMany
   */
  export type productsDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which products to delete
     */
    where?: productsWhereInput
  }


  /**
   * products.colors
   */
  export type products$colorsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the colors
     */
    select?: colorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: colorsInclude<ExtArgs> | null
    where?: colorsWhereInput
  }


  /**
   * products.size
   */
  export type products$sizeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the size
     */
    select?: sizeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sizeInclude<ExtArgs> | null
    where?: sizeWhereInput
  }


  /**
   * products.specification
   */
  export type products$specificationArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the specifications
     */
    select?: specificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: specificationsInclude<ExtArgs> | null
    where?: specificationsWhereInput
  }


  /**
   * products.comments
   */
  export type products$commentsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comments
     */
    select?: commentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: commentsInclude<ExtArgs> | null
    where?: commentsWhereInput
    orderBy?: commentsOrderByWithRelationInput | commentsOrderByWithRelationInput[]
    cursor?: commentsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentsScalarFieldEnum | CommentsScalarFieldEnum[]
  }


  /**
   * products.reviews
   */
  export type products$reviewsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reviews
     */
    select?: reviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: reviewsInclude<ExtArgs> | null
    where?: reviewsWhereInput
    orderBy?: reviewsOrderByWithRelationInput | reviewsOrderByWithRelationInput[]
    cursor?: reviewsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReviewsScalarFieldEnum | ReviewsScalarFieldEnum[]
  }


  /**
   * products.flashSellProduct
   */
  export type products$flashSellProductArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the flashSellProduct
     */
    select?: flashSellProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: flashSellProductInclude<ExtArgs> | null
    where?: flashSellProductWhereInput
    orderBy?: flashSellProductOrderByWithRelationInput | flashSellProductOrderByWithRelationInput[]
    cursor?: flashSellProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FlashSellProductScalarFieldEnum | FlashSellProductScalarFieldEnum[]
  }


  /**
   * products.seller
   */
  export type products$sellerArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the seller
     */
    select?: sellerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sellerInclude<ExtArgs> | null
    where?: sellerWhereInput
  }


  /**
   * products.brand
   */
  export type products$brandArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the brands
     */
    select?: brandsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: brandsInclude<ExtArgs> | null
    where?: brandsWhereInput
  }


  /**
   * products.category
   */
  export type products$categoryArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoryInclude<ExtArgs> | null
    where?: categoryWhereInput
  }


  /**
   * products.subCategory
   */
  export type products$subCategoryArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subCategory
     */
    select?: subCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: subCategoryInclude<ExtArgs> | null
    where?: subCategoryWhereInput
  }


  /**
   * products.option
   */
  export type products$optionArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the options
     */
    select?: optionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: optionsInclude<ExtArgs> | null
    where?: optionsWhereInput
  }


  /**
   * products.user
   */
  export type products$userArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    where?: usersWhereInput
  }


  /**
   * products.banner
   */
  export type products$bannerArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the banner
     */
    select?: bannerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: bannerInclude<ExtArgs> | null
    where?: bannerWhereInput
    orderBy?: bannerOrderByWithRelationInput | bannerOrderByWithRelationInput[]
    cursor?: bannerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BannerScalarFieldEnum | BannerScalarFieldEnum[]
  }


  /**
   * products.adds
   */
  export type products$addsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the adds
     */
    select?: addsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: addsInclude<ExtArgs> | null
    where?: addsWhereInput
    orderBy?: addsOrderByWithRelationInput | addsOrderByWithRelationInput[]
    cursor?: addsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AddsScalarFieldEnum | AddsScalarFieldEnum[]
  }


  /**
   * products.messages
   */
  export type products$messagesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the messages
     */
    select?: messagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: messagesInclude<ExtArgs> | null
    where?: messagesWhereInput
    orderBy?: messagesOrderByWithRelationInput | messagesOrderByWithRelationInput[]
    cursor?: messagesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessagesScalarFieldEnum | MessagesScalarFieldEnum[]
  }


  /**
   * products.orders
   */
  export type products$ordersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ordersInclude<ExtArgs> | null
    where?: ordersWhereInput
    orderBy?: ordersOrderByWithRelationInput | ordersOrderByWithRelationInput[]
    cursor?: ordersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrdersScalarFieldEnum | OrdersScalarFieldEnum[]
  }


  /**
   * products without action
   */
  export type productsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productsInclude<ExtArgs> | null
  }



  /**
   * Model colors
   */


  export type AggregateColors = {
    _count: ColorsCountAggregateOutputType | null
    _min: ColorsMinAggregateOutputType | null
    _max: ColorsMaxAggregateOutputType | null
  }

  export type ColorsMinAggregateOutputType = {
    id: string | null
    title: string | null
    color: string | null
  }

  export type ColorsMaxAggregateOutputType = {
    id: string | null
    title: string | null
    color: string | null
  }

  export type ColorsCountAggregateOutputType = {
    id: number
    title: number
    color: number
    _all: number
  }


  export type ColorsMinAggregateInputType = {
    id?: true
    title?: true
    color?: true
  }

  export type ColorsMaxAggregateInputType = {
    id?: true
    title?: true
    color?: true
  }

  export type ColorsCountAggregateInputType = {
    id?: true
    title?: true
    color?: true
    _all?: true
  }

  export type ColorsAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which colors to aggregate.
     */
    where?: colorsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of colors to fetch.
     */
    orderBy?: colorsOrderByWithRelationInput | colorsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: colorsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` colors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` colors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned colors
    **/
    _count?: true | ColorsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ColorsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ColorsMaxAggregateInputType
  }

  export type GetColorsAggregateType<T extends ColorsAggregateArgs> = {
        [P in keyof T & keyof AggregateColors]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateColors[P]>
      : GetScalarType<T[P], AggregateColors[P]>
  }




  export type colorsGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: colorsWhereInput
    orderBy?: colorsOrderByWithAggregationInput | colorsOrderByWithAggregationInput[]
    by: ColorsScalarFieldEnum[] | ColorsScalarFieldEnum
    having?: colorsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ColorsCountAggregateInputType | true
    _min?: ColorsMinAggregateInputType
    _max?: ColorsMaxAggregateInputType
  }


  export type ColorsGroupByOutputType = {
    id: string
    title: string
    color: string
    _count: ColorsCountAggregateOutputType | null
    _min: ColorsMinAggregateOutputType | null
    _max: ColorsMaxAggregateOutputType | null
  }

  type GetColorsGroupByPayload<T extends colorsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ColorsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ColorsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ColorsGroupByOutputType[P]>
            : GetScalarType<T[P], ColorsGroupByOutputType[P]>
        }
      >
    >


  export type colorsSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    color?: boolean
    products?: boolean | colors$productsArgs<ExtArgs>
    _count?: boolean | ColorsCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["colors"]>

  export type colorsSelectScalar = {
    id?: boolean
    title?: boolean
    color?: boolean
  }

  export type colorsInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    products?: boolean | colors$productsArgs<ExtArgs>
    _count?: boolean | ColorsCountOutputTypeArgs<ExtArgs>
  }


  type colorsGetPayload<S extends boolean | null | undefined | colorsArgs> = $Types.GetResult<colorsPayload, S>

  type colorsCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<colorsFindManyArgs, 'select' | 'include'> & {
      select?: ColorsCountAggregateInputType | true
    }

  export interface colorsDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['colors'], meta: { name: 'colors' } }
    /**
     * Find zero or one Colors that matches the filter.
     * @param {colorsFindUniqueArgs} args - Arguments to find a Colors
     * @example
     * // Get one Colors
     * const colors = await prisma.colors.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends colorsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, colorsFindUniqueArgs<ExtArgs>>
    ): Prisma__colorsClient<$Types.GetResult<colorsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Colors that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {colorsFindUniqueOrThrowArgs} args - Arguments to find a Colors
     * @example
     * // Get one Colors
     * const colors = await prisma.colors.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends colorsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, colorsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__colorsClient<$Types.GetResult<colorsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Colors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {colorsFindFirstArgs} args - Arguments to find a Colors
     * @example
     * // Get one Colors
     * const colors = await prisma.colors.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends colorsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, colorsFindFirstArgs<ExtArgs>>
    ): Prisma__colorsClient<$Types.GetResult<colorsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Colors that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {colorsFindFirstOrThrowArgs} args - Arguments to find a Colors
     * @example
     * // Get one Colors
     * const colors = await prisma.colors.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends colorsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, colorsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__colorsClient<$Types.GetResult<colorsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Colors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {colorsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Colors
     * const colors = await prisma.colors.findMany()
     * 
     * // Get first 10 Colors
     * const colors = await prisma.colors.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const colorsWithIdOnly = await prisma.colors.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends colorsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, colorsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<colorsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Colors.
     * @param {colorsCreateArgs} args - Arguments to create a Colors.
     * @example
     * // Create one Colors
     * const Colors = await prisma.colors.create({
     *   data: {
     *     // ... data to create a Colors
     *   }
     * })
     * 
    **/
    create<T extends colorsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, colorsCreateArgs<ExtArgs>>
    ): Prisma__colorsClient<$Types.GetResult<colorsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Colors.
     *     @param {colorsCreateManyArgs} args - Arguments to create many Colors.
     *     @example
     *     // Create many Colors
     *     const colors = await prisma.colors.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends colorsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, colorsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Colors.
     * @param {colorsDeleteArgs} args - Arguments to delete one Colors.
     * @example
     * // Delete one Colors
     * const Colors = await prisma.colors.delete({
     *   where: {
     *     // ... filter to delete one Colors
     *   }
     * })
     * 
    **/
    delete<T extends colorsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, colorsDeleteArgs<ExtArgs>>
    ): Prisma__colorsClient<$Types.GetResult<colorsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Colors.
     * @param {colorsUpdateArgs} args - Arguments to update one Colors.
     * @example
     * // Update one Colors
     * const colors = await prisma.colors.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends colorsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, colorsUpdateArgs<ExtArgs>>
    ): Prisma__colorsClient<$Types.GetResult<colorsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Colors.
     * @param {colorsDeleteManyArgs} args - Arguments to filter Colors to delete.
     * @example
     * // Delete a few Colors
     * const { count } = await prisma.colors.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends colorsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, colorsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Colors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {colorsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Colors
     * const colors = await prisma.colors.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends colorsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, colorsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Colors.
     * @param {colorsUpsertArgs} args - Arguments to update or create a Colors.
     * @example
     * // Update or create a Colors
     * const colors = await prisma.colors.upsert({
     *   create: {
     *     // ... data to create a Colors
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Colors we want to update
     *   }
     * })
    **/
    upsert<T extends colorsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, colorsUpsertArgs<ExtArgs>>
    ): Prisma__colorsClient<$Types.GetResult<colorsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Colors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {colorsCountArgs} args - Arguments to filter Colors to count.
     * @example
     * // Count the number of Colors
     * const count = await prisma.colors.count({
     *   where: {
     *     // ... the filter for the Colors we want to count
     *   }
     * })
    **/
    count<T extends colorsCountArgs>(
      args?: Subset<T, colorsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ColorsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Colors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ColorsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ColorsAggregateArgs>(args: Subset<T, ColorsAggregateArgs>): Prisma.PrismaPromise<GetColorsAggregateType<T>>

    /**
     * Group by Colors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {colorsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends colorsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: colorsGroupByArgs['orderBy'] }
        : { orderBy?: colorsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, colorsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetColorsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the colors model
   */
  readonly fields: colorsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for colors.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__colorsClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    products<T extends colors$productsArgs<ExtArgs> = {}>(args?: Subset<T, colors$productsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<productsPayload<ExtArgs>, T, 'findMany'>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the colors model
   */ 
  interface colorsFieldRefs {
    readonly id: FieldRef<"colors", 'String'>
    readonly title: FieldRef<"colors", 'String'>
    readonly color: FieldRef<"colors", 'String'>
  }
    

  // Custom InputTypes

  /**
   * colors findUnique
   */
  export type colorsFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the colors
     */
    select?: colorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: colorsInclude<ExtArgs> | null
    /**
     * Filter, which colors to fetch.
     */
    where: colorsWhereUniqueInput
  }


  /**
   * colors findUniqueOrThrow
   */
  export type colorsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the colors
     */
    select?: colorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: colorsInclude<ExtArgs> | null
    /**
     * Filter, which colors to fetch.
     */
    where: colorsWhereUniqueInput
  }


  /**
   * colors findFirst
   */
  export type colorsFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the colors
     */
    select?: colorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: colorsInclude<ExtArgs> | null
    /**
     * Filter, which colors to fetch.
     */
    where?: colorsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of colors to fetch.
     */
    orderBy?: colorsOrderByWithRelationInput | colorsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for colors.
     */
    cursor?: colorsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` colors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` colors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of colors.
     */
    distinct?: ColorsScalarFieldEnum | ColorsScalarFieldEnum[]
  }


  /**
   * colors findFirstOrThrow
   */
  export type colorsFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the colors
     */
    select?: colorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: colorsInclude<ExtArgs> | null
    /**
     * Filter, which colors to fetch.
     */
    where?: colorsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of colors to fetch.
     */
    orderBy?: colorsOrderByWithRelationInput | colorsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for colors.
     */
    cursor?: colorsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` colors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` colors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of colors.
     */
    distinct?: ColorsScalarFieldEnum | ColorsScalarFieldEnum[]
  }


  /**
   * colors findMany
   */
  export type colorsFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the colors
     */
    select?: colorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: colorsInclude<ExtArgs> | null
    /**
     * Filter, which colors to fetch.
     */
    where?: colorsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of colors to fetch.
     */
    orderBy?: colorsOrderByWithRelationInput | colorsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing colors.
     */
    cursor?: colorsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` colors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` colors.
     */
    skip?: number
    distinct?: ColorsScalarFieldEnum | ColorsScalarFieldEnum[]
  }


  /**
   * colors create
   */
  export type colorsCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the colors
     */
    select?: colorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: colorsInclude<ExtArgs> | null
    /**
     * The data needed to create a colors.
     */
    data: XOR<colorsCreateInput, colorsUncheckedCreateInput>
  }


  /**
   * colors createMany
   */
  export type colorsCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many colors.
     */
    data: colorsCreateManyInput | colorsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * colors update
   */
  export type colorsUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the colors
     */
    select?: colorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: colorsInclude<ExtArgs> | null
    /**
     * The data needed to update a colors.
     */
    data: XOR<colorsUpdateInput, colorsUncheckedUpdateInput>
    /**
     * Choose, which colors to update.
     */
    where: colorsWhereUniqueInput
  }


  /**
   * colors updateMany
   */
  export type colorsUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update colors.
     */
    data: XOR<colorsUpdateManyMutationInput, colorsUncheckedUpdateManyInput>
    /**
     * Filter which colors to update
     */
    where?: colorsWhereInput
  }


  /**
   * colors upsert
   */
  export type colorsUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the colors
     */
    select?: colorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: colorsInclude<ExtArgs> | null
    /**
     * The filter to search for the colors to update in case it exists.
     */
    where: colorsWhereUniqueInput
    /**
     * In case the colors found by the `where` argument doesn't exist, create a new colors with this data.
     */
    create: XOR<colorsCreateInput, colorsUncheckedCreateInput>
    /**
     * In case the colors was found with the provided `where` argument, update it with this data.
     */
    update: XOR<colorsUpdateInput, colorsUncheckedUpdateInput>
  }


  /**
   * colors delete
   */
  export type colorsDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the colors
     */
    select?: colorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: colorsInclude<ExtArgs> | null
    /**
     * Filter which colors to delete.
     */
    where: colorsWhereUniqueInput
  }


  /**
   * colors deleteMany
   */
  export type colorsDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which colors to delete
     */
    where?: colorsWhereInput
  }


  /**
   * colors.products
   */
  export type colors$productsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productsInclude<ExtArgs> | null
    where?: productsWhereInput
    orderBy?: productsOrderByWithRelationInput | productsOrderByWithRelationInput[]
    cursor?: productsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductsScalarFieldEnum | ProductsScalarFieldEnum[]
  }


  /**
   * colors without action
   */
  export type colorsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the colors
     */
    select?: colorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: colorsInclude<ExtArgs> | null
  }



  /**
   * Model size
   */


  export type AggregateSize = {
    _count: SizeCountAggregateOutputType | null
    _min: SizeMinAggregateOutputType | null
    _max: SizeMaxAggregateOutputType | null
  }

  export type SizeMinAggregateOutputType = {
    id: string | null
    title: string | null
    cm: string | null
  }

  export type SizeMaxAggregateOutputType = {
    id: string | null
    title: string | null
    cm: string | null
  }

  export type SizeCountAggregateOutputType = {
    id: number
    title: number
    cm: number
    _all: number
  }


  export type SizeMinAggregateInputType = {
    id?: true
    title?: true
    cm?: true
  }

  export type SizeMaxAggregateInputType = {
    id?: true
    title?: true
    cm?: true
  }

  export type SizeCountAggregateInputType = {
    id?: true
    title?: true
    cm?: true
    _all?: true
  }

  export type SizeAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which size to aggregate.
     */
    where?: sizeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sizes to fetch.
     */
    orderBy?: sizeOrderByWithRelationInput | sizeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: sizeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sizes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sizes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned sizes
    **/
    _count?: true | SizeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SizeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SizeMaxAggregateInputType
  }

  export type GetSizeAggregateType<T extends SizeAggregateArgs> = {
        [P in keyof T & keyof AggregateSize]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSize[P]>
      : GetScalarType<T[P], AggregateSize[P]>
  }




  export type sizeGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: sizeWhereInput
    orderBy?: sizeOrderByWithAggregationInput | sizeOrderByWithAggregationInput[]
    by: SizeScalarFieldEnum[] | SizeScalarFieldEnum
    having?: sizeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SizeCountAggregateInputType | true
    _min?: SizeMinAggregateInputType
    _max?: SizeMaxAggregateInputType
  }


  export type SizeGroupByOutputType = {
    id: string
    title: string
    cm: string
    _count: SizeCountAggregateOutputType | null
    _min: SizeMinAggregateOutputType | null
    _max: SizeMaxAggregateOutputType | null
  }

  type GetSizeGroupByPayload<T extends sizeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SizeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SizeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SizeGroupByOutputType[P]>
            : GetScalarType<T[P], SizeGroupByOutputType[P]>
        }
      >
    >


  export type sizeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    cm?: boolean
    products?: boolean | size$productsArgs<ExtArgs>
    _count?: boolean | SizeCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["size"]>

  export type sizeSelectScalar = {
    id?: boolean
    title?: boolean
    cm?: boolean
  }

  export type sizeInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    products?: boolean | size$productsArgs<ExtArgs>
    _count?: boolean | SizeCountOutputTypeArgs<ExtArgs>
  }


  type sizeGetPayload<S extends boolean | null | undefined | sizeArgs> = $Types.GetResult<sizePayload, S>

  type sizeCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<sizeFindManyArgs, 'select' | 'include'> & {
      select?: SizeCountAggregateInputType | true
    }

  export interface sizeDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['size'], meta: { name: 'size' } }
    /**
     * Find zero or one Size that matches the filter.
     * @param {sizeFindUniqueArgs} args - Arguments to find a Size
     * @example
     * // Get one Size
     * const size = await prisma.size.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends sizeFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, sizeFindUniqueArgs<ExtArgs>>
    ): Prisma__sizeClient<$Types.GetResult<sizePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Size that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {sizeFindUniqueOrThrowArgs} args - Arguments to find a Size
     * @example
     * // Get one Size
     * const size = await prisma.size.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends sizeFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, sizeFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__sizeClient<$Types.GetResult<sizePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Size that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sizeFindFirstArgs} args - Arguments to find a Size
     * @example
     * // Get one Size
     * const size = await prisma.size.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends sizeFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, sizeFindFirstArgs<ExtArgs>>
    ): Prisma__sizeClient<$Types.GetResult<sizePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Size that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sizeFindFirstOrThrowArgs} args - Arguments to find a Size
     * @example
     * // Get one Size
     * const size = await prisma.size.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends sizeFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, sizeFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__sizeClient<$Types.GetResult<sizePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Sizes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sizeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sizes
     * const sizes = await prisma.size.findMany()
     * 
     * // Get first 10 Sizes
     * const sizes = await prisma.size.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sizeWithIdOnly = await prisma.size.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends sizeFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, sizeFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<sizePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Size.
     * @param {sizeCreateArgs} args - Arguments to create a Size.
     * @example
     * // Create one Size
     * const Size = await prisma.size.create({
     *   data: {
     *     // ... data to create a Size
     *   }
     * })
     * 
    **/
    create<T extends sizeCreateArgs<ExtArgs>>(
      args: SelectSubset<T, sizeCreateArgs<ExtArgs>>
    ): Prisma__sizeClient<$Types.GetResult<sizePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Sizes.
     *     @param {sizeCreateManyArgs} args - Arguments to create many Sizes.
     *     @example
     *     // Create many Sizes
     *     const size = await prisma.size.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends sizeCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, sizeCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Size.
     * @param {sizeDeleteArgs} args - Arguments to delete one Size.
     * @example
     * // Delete one Size
     * const Size = await prisma.size.delete({
     *   where: {
     *     // ... filter to delete one Size
     *   }
     * })
     * 
    **/
    delete<T extends sizeDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, sizeDeleteArgs<ExtArgs>>
    ): Prisma__sizeClient<$Types.GetResult<sizePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Size.
     * @param {sizeUpdateArgs} args - Arguments to update one Size.
     * @example
     * // Update one Size
     * const size = await prisma.size.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends sizeUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, sizeUpdateArgs<ExtArgs>>
    ): Prisma__sizeClient<$Types.GetResult<sizePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Sizes.
     * @param {sizeDeleteManyArgs} args - Arguments to filter Sizes to delete.
     * @example
     * // Delete a few Sizes
     * const { count } = await prisma.size.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends sizeDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, sizeDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sizes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sizeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sizes
     * const size = await prisma.size.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends sizeUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, sizeUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Size.
     * @param {sizeUpsertArgs} args - Arguments to update or create a Size.
     * @example
     * // Update or create a Size
     * const size = await prisma.size.upsert({
     *   create: {
     *     // ... data to create a Size
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Size we want to update
     *   }
     * })
    **/
    upsert<T extends sizeUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, sizeUpsertArgs<ExtArgs>>
    ): Prisma__sizeClient<$Types.GetResult<sizePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Sizes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sizeCountArgs} args - Arguments to filter Sizes to count.
     * @example
     * // Count the number of Sizes
     * const count = await prisma.size.count({
     *   where: {
     *     // ... the filter for the Sizes we want to count
     *   }
     * })
    **/
    count<T extends sizeCountArgs>(
      args?: Subset<T, sizeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SizeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Size.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SizeAggregateArgs>(args: Subset<T, SizeAggregateArgs>): Prisma.PrismaPromise<GetSizeAggregateType<T>>

    /**
     * Group by Size.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sizeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends sizeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: sizeGroupByArgs['orderBy'] }
        : { orderBy?: sizeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, sizeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSizeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the size model
   */
  readonly fields: sizeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for size.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__sizeClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    products<T extends size$productsArgs<ExtArgs> = {}>(args?: Subset<T, size$productsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<productsPayload<ExtArgs>, T, 'findMany'>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the size model
   */ 
  interface sizeFieldRefs {
    readonly id: FieldRef<"size", 'String'>
    readonly title: FieldRef<"size", 'String'>
    readonly cm: FieldRef<"size", 'String'>
  }
    

  // Custom InputTypes

  /**
   * size findUnique
   */
  export type sizeFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the size
     */
    select?: sizeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sizeInclude<ExtArgs> | null
    /**
     * Filter, which size to fetch.
     */
    where: sizeWhereUniqueInput
  }


  /**
   * size findUniqueOrThrow
   */
  export type sizeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the size
     */
    select?: sizeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sizeInclude<ExtArgs> | null
    /**
     * Filter, which size to fetch.
     */
    where: sizeWhereUniqueInput
  }


  /**
   * size findFirst
   */
  export type sizeFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the size
     */
    select?: sizeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sizeInclude<ExtArgs> | null
    /**
     * Filter, which size to fetch.
     */
    where?: sizeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sizes to fetch.
     */
    orderBy?: sizeOrderByWithRelationInput | sizeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for sizes.
     */
    cursor?: sizeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sizes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sizes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of sizes.
     */
    distinct?: SizeScalarFieldEnum | SizeScalarFieldEnum[]
  }


  /**
   * size findFirstOrThrow
   */
  export type sizeFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the size
     */
    select?: sizeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sizeInclude<ExtArgs> | null
    /**
     * Filter, which size to fetch.
     */
    where?: sizeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sizes to fetch.
     */
    orderBy?: sizeOrderByWithRelationInput | sizeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for sizes.
     */
    cursor?: sizeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sizes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sizes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of sizes.
     */
    distinct?: SizeScalarFieldEnum | SizeScalarFieldEnum[]
  }


  /**
   * size findMany
   */
  export type sizeFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the size
     */
    select?: sizeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sizeInclude<ExtArgs> | null
    /**
     * Filter, which sizes to fetch.
     */
    where?: sizeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sizes to fetch.
     */
    orderBy?: sizeOrderByWithRelationInput | sizeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing sizes.
     */
    cursor?: sizeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sizes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sizes.
     */
    skip?: number
    distinct?: SizeScalarFieldEnum | SizeScalarFieldEnum[]
  }


  /**
   * size create
   */
  export type sizeCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the size
     */
    select?: sizeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sizeInclude<ExtArgs> | null
    /**
     * The data needed to create a size.
     */
    data: XOR<sizeCreateInput, sizeUncheckedCreateInput>
  }


  /**
   * size createMany
   */
  export type sizeCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many sizes.
     */
    data: sizeCreateManyInput | sizeCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * size update
   */
  export type sizeUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the size
     */
    select?: sizeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sizeInclude<ExtArgs> | null
    /**
     * The data needed to update a size.
     */
    data: XOR<sizeUpdateInput, sizeUncheckedUpdateInput>
    /**
     * Choose, which size to update.
     */
    where: sizeWhereUniqueInput
  }


  /**
   * size updateMany
   */
  export type sizeUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update sizes.
     */
    data: XOR<sizeUpdateManyMutationInput, sizeUncheckedUpdateManyInput>
    /**
     * Filter which sizes to update
     */
    where?: sizeWhereInput
  }


  /**
   * size upsert
   */
  export type sizeUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the size
     */
    select?: sizeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sizeInclude<ExtArgs> | null
    /**
     * The filter to search for the size to update in case it exists.
     */
    where: sizeWhereUniqueInput
    /**
     * In case the size found by the `where` argument doesn't exist, create a new size with this data.
     */
    create: XOR<sizeCreateInput, sizeUncheckedCreateInput>
    /**
     * In case the size was found with the provided `where` argument, update it with this data.
     */
    update: XOR<sizeUpdateInput, sizeUncheckedUpdateInput>
  }


  /**
   * size delete
   */
  export type sizeDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the size
     */
    select?: sizeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sizeInclude<ExtArgs> | null
    /**
     * Filter which size to delete.
     */
    where: sizeWhereUniqueInput
  }


  /**
   * size deleteMany
   */
  export type sizeDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which sizes to delete
     */
    where?: sizeWhereInput
  }


  /**
   * size.products
   */
  export type size$productsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productsInclude<ExtArgs> | null
    where?: productsWhereInput
    orderBy?: productsOrderByWithRelationInput | productsOrderByWithRelationInput[]
    cursor?: productsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductsScalarFieldEnum | ProductsScalarFieldEnum[]
  }


  /**
   * size without action
   */
  export type sizeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the size
     */
    select?: sizeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sizeInclude<ExtArgs> | null
  }



  /**
   * Model specifications
   */


  export type AggregateSpecifications = {
    _count: SpecificationsCountAggregateOutputType | null
    _min: SpecificationsMinAggregateOutputType | null
    _max: SpecificationsMaxAggregateOutputType | null
  }

  export type SpecificationsMinAggregateOutputType = {
    id: string | null
    title: string | null
    details: string | null
  }

  export type SpecificationsMaxAggregateOutputType = {
    id: string | null
    title: string | null
    details: string | null
  }

  export type SpecificationsCountAggregateOutputType = {
    id: number
    title: number
    details: number
    _all: number
  }


  export type SpecificationsMinAggregateInputType = {
    id?: true
    title?: true
    details?: true
  }

  export type SpecificationsMaxAggregateInputType = {
    id?: true
    title?: true
    details?: true
  }

  export type SpecificationsCountAggregateInputType = {
    id?: true
    title?: true
    details?: true
    _all?: true
  }

  export type SpecificationsAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which specifications to aggregate.
     */
    where?: specificationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of specifications to fetch.
     */
    orderBy?: specificationsOrderByWithRelationInput | specificationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: specificationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` specifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` specifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned specifications
    **/
    _count?: true | SpecificationsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SpecificationsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SpecificationsMaxAggregateInputType
  }

  export type GetSpecificationsAggregateType<T extends SpecificationsAggregateArgs> = {
        [P in keyof T & keyof AggregateSpecifications]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSpecifications[P]>
      : GetScalarType<T[P], AggregateSpecifications[P]>
  }




  export type specificationsGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: specificationsWhereInput
    orderBy?: specificationsOrderByWithAggregationInput | specificationsOrderByWithAggregationInput[]
    by: SpecificationsScalarFieldEnum[] | SpecificationsScalarFieldEnum
    having?: specificationsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SpecificationsCountAggregateInputType | true
    _min?: SpecificationsMinAggregateInputType
    _max?: SpecificationsMaxAggregateInputType
  }


  export type SpecificationsGroupByOutputType = {
    id: string
    title: string
    details: string
    _count: SpecificationsCountAggregateOutputType | null
    _min: SpecificationsMinAggregateOutputType | null
    _max: SpecificationsMaxAggregateOutputType | null
  }

  type GetSpecificationsGroupByPayload<T extends specificationsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SpecificationsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SpecificationsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SpecificationsGroupByOutputType[P]>
            : GetScalarType<T[P], SpecificationsGroupByOutputType[P]>
        }
      >
    >


  export type specificationsSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    details?: boolean
    products?: boolean | specifications$productsArgs<ExtArgs>
    _count?: boolean | SpecificationsCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["specifications"]>

  export type specificationsSelectScalar = {
    id?: boolean
    title?: boolean
    details?: boolean
  }

  export type specificationsInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    products?: boolean | specifications$productsArgs<ExtArgs>
    _count?: boolean | SpecificationsCountOutputTypeArgs<ExtArgs>
  }


  type specificationsGetPayload<S extends boolean | null | undefined | specificationsArgs> = $Types.GetResult<specificationsPayload, S>

  type specificationsCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<specificationsFindManyArgs, 'select' | 'include'> & {
      select?: SpecificationsCountAggregateInputType | true
    }

  export interface specificationsDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['specifications'], meta: { name: 'specifications' } }
    /**
     * Find zero or one Specifications that matches the filter.
     * @param {specificationsFindUniqueArgs} args - Arguments to find a Specifications
     * @example
     * // Get one Specifications
     * const specifications = await prisma.specifications.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends specificationsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, specificationsFindUniqueArgs<ExtArgs>>
    ): Prisma__specificationsClient<$Types.GetResult<specificationsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Specifications that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {specificationsFindUniqueOrThrowArgs} args - Arguments to find a Specifications
     * @example
     * // Get one Specifications
     * const specifications = await prisma.specifications.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends specificationsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, specificationsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__specificationsClient<$Types.GetResult<specificationsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Specifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {specificationsFindFirstArgs} args - Arguments to find a Specifications
     * @example
     * // Get one Specifications
     * const specifications = await prisma.specifications.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends specificationsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, specificationsFindFirstArgs<ExtArgs>>
    ): Prisma__specificationsClient<$Types.GetResult<specificationsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Specifications that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {specificationsFindFirstOrThrowArgs} args - Arguments to find a Specifications
     * @example
     * // Get one Specifications
     * const specifications = await prisma.specifications.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends specificationsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, specificationsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__specificationsClient<$Types.GetResult<specificationsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Specifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {specificationsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Specifications
     * const specifications = await prisma.specifications.findMany()
     * 
     * // Get first 10 Specifications
     * const specifications = await prisma.specifications.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const specificationsWithIdOnly = await prisma.specifications.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends specificationsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, specificationsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<specificationsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Specifications.
     * @param {specificationsCreateArgs} args - Arguments to create a Specifications.
     * @example
     * // Create one Specifications
     * const Specifications = await prisma.specifications.create({
     *   data: {
     *     // ... data to create a Specifications
     *   }
     * })
     * 
    **/
    create<T extends specificationsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, specificationsCreateArgs<ExtArgs>>
    ): Prisma__specificationsClient<$Types.GetResult<specificationsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Specifications.
     *     @param {specificationsCreateManyArgs} args - Arguments to create many Specifications.
     *     @example
     *     // Create many Specifications
     *     const specifications = await prisma.specifications.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends specificationsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, specificationsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Specifications.
     * @param {specificationsDeleteArgs} args - Arguments to delete one Specifications.
     * @example
     * // Delete one Specifications
     * const Specifications = await prisma.specifications.delete({
     *   where: {
     *     // ... filter to delete one Specifications
     *   }
     * })
     * 
    **/
    delete<T extends specificationsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, specificationsDeleteArgs<ExtArgs>>
    ): Prisma__specificationsClient<$Types.GetResult<specificationsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Specifications.
     * @param {specificationsUpdateArgs} args - Arguments to update one Specifications.
     * @example
     * // Update one Specifications
     * const specifications = await prisma.specifications.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends specificationsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, specificationsUpdateArgs<ExtArgs>>
    ): Prisma__specificationsClient<$Types.GetResult<specificationsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Specifications.
     * @param {specificationsDeleteManyArgs} args - Arguments to filter Specifications to delete.
     * @example
     * // Delete a few Specifications
     * const { count } = await prisma.specifications.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends specificationsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, specificationsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Specifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {specificationsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Specifications
     * const specifications = await prisma.specifications.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends specificationsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, specificationsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Specifications.
     * @param {specificationsUpsertArgs} args - Arguments to update or create a Specifications.
     * @example
     * // Update or create a Specifications
     * const specifications = await prisma.specifications.upsert({
     *   create: {
     *     // ... data to create a Specifications
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Specifications we want to update
     *   }
     * })
    **/
    upsert<T extends specificationsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, specificationsUpsertArgs<ExtArgs>>
    ): Prisma__specificationsClient<$Types.GetResult<specificationsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Specifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {specificationsCountArgs} args - Arguments to filter Specifications to count.
     * @example
     * // Count the number of Specifications
     * const count = await prisma.specifications.count({
     *   where: {
     *     // ... the filter for the Specifications we want to count
     *   }
     * })
    **/
    count<T extends specificationsCountArgs>(
      args?: Subset<T, specificationsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SpecificationsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Specifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecificationsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SpecificationsAggregateArgs>(args: Subset<T, SpecificationsAggregateArgs>): Prisma.PrismaPromise<GetSpecificationsAggregateType<T>>

    /**
     * Group by Specifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {specificationsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends specificationsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: specificationsGroupByArgs['orderBy'] }
        : { orderBy?: specificationsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, specificationsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSpecificationsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the specifications model
   */
  readonly fields: specificationsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for specifications.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__specificationsClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    products<T extends specifications$productsArgs<ExtArgs> = {}>(args?: Subset<T, specifications$productsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<productsPayload<ExtArgs>, T, 'findMany'>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the specifications model
   */ 
  interface specificationsFieldRefs {
    readonly id: FieldRef<"specifications", 'String'>
    readonly title: FieldRef<"specifications", 'String'>
    readonly details: FieldRef<"specifications", 'String'>
  }
    

  // Custom InputTypes

  /**
   * specifications findUnique
   */
  export type specificationsFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the specifications
     */
    select?: specificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: specificationsInclude<ExtArgs> | null
    /**
     * Filter, which specifications to fetch.
     */
    where: specificationsWhereUniqueInput
  }


  /**
   * specifications findUniqueOrThrow
   */
  export type specificationsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the specifications
     */
    select?: specificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: specificationsInclude<ExtArgs> | null
    /**
     * Filter, which specifications to fetch.
     */
    where: specificationsWhereUniqueInput
  }


  /**
   * specifications findFirst
   */
  export type specificationsFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the specifications
     */
    select?: specificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: specificationsInclude<ExtArgs> | null
    /**
     * Filter, which specifications to fetch.
     */
    where?: specificationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of specifications to fetch.
     */
    orderBy?: specificationsOrderByWithRelationInput | specificationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for specifications.
     */
    cursor?: specificationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` specifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` specifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of specifications.
     */
    distinct?: SpecificationsScalarFieldEnum | SpecificationsScalarFieldEnum[]
  }


  /**
   * specifications findFirstOrThrow
   */
  export type specificationsFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the specifications
     */
    select?: specificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: specificationsInclude<ExtArgs> | null
    /**
     * Filter, which specifications to fetch.
     */
    where?: specificationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of specifications to fetch.
     */
    orderBy?: specificationsOrderByWithRelationInput | specificationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for specifications.
     */
    cursor?: specificationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` specifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` specifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of specifications.
     */
    distinct?: SpecificationsScalarFieldEnum | SpecificationsScalarFieldEnum[]
  }


  /**
   * specifications findMany
   */
  export type specificationsFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the specifications
     */
    select?: specificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: specificationsInclude<ExtArgs> | null
    /**
     * Filter, which specifications to fetch.
     */
    where?: specificationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of specifications to fetch.
     */
    orderBy?: specificationsOrderByWithRelationInput | specificationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing specifications.
     */
    cursor?: specificationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` specifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` specifications.
     */
    skip?: number
    distinct?: SpecificationsScalarFieldEnum | SpecificationsScalarFieldEnum[]
  }


  /**
   * specifications create
   */
  export type specificationsCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the specifications
     */
    select?: specificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: specificationsInclude<ExtArgs> | null
    /**
     * The data needed to create a specifications.
     */
    data: XOR<specificationsCreateInput, specificationsUncheckedCreateInput>
  }


  /**
   * specifications createMany
   */
  export type specificationsCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many specifications.
     */
    data: specificationsCreateManyInput | specificationsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * specifications update
   */
  export type specificationsUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the specifications
     */
    select?: specificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: specificationsInclude<ExtArgs> | null
    /**
     * The data needed to update a specifications.
     */
    data: XOR<specificationsUpdateInput, specificationsUncheckedUpdateInput>
    /**
     * Choose, which specifications to update.
     */
    where: specificationsWhereUniqueInput
  }


  /**
   * specifications updateMany
   */
  export type specificationsUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update specifications.
     */
    data: XOR<specificationsUpdateManyMutationInput, specificationsUncheckedUpdateManyInput>
    /**
     * Filter which specifications to update
     */
    where?: specificationsWhereInput
  }


  /**
   * specifications upsert
   */
  export type specificationsUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the specifications
     */
    select?: specificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: specificationsInclude<ExtArgs> | null
    /**
     * The filter to search for the specifications to update in case it exists.
     */
    where: specificationsWhereUniqueInput
    /**
     * In case the specifications found by the `where` argument doesn't exist, create a new specifications with this data.
     */
    create: XOR<specificationsCreateInput, specificationsUncheckedCreateInput>
    /**
     * In case the specifications was found with the provided `where` argument, update it with this data.
     */
    update: XOR<specificationsUpdateInput, specificationsUncheckedUpdateInput>
  }


  /**
   * specifications delete
   */
  export type specificationsDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the specifications
     */
    select?: specificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: specificationsInclude<ExtArgs> | null
    /**
     * Filter which specifications to delete.
     */
    where: specificationsWhereUniqueInput
  }


  /**
   * specifications deleteMany
   */
  export type specificationsDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which specifications to delete
     */
    where?: specificationsWhereInput
  }


  /**
   * specifications.products
   */
  export type specifications$productsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productsInclude<ExtArgs> | null
    where?: productsWhereInput
    orderBy?: productsOrderByWithRelationInput | productsOrderByWithRelationInput[]
    cursor?: productsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductsScalarFieldEnum | ProductsScalarFieldEnum[]
  }


  /**
   * specifications without action
   */
  export type specificationsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the specifications
     */
    select?: specificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: specificationsInclude<ExtArgs> | null
  }



  /**
   * Model comments
   */


  export type AggregateComments = {
    _count: CommentsCountAggregateOutputType | null
    _min: CommentsMinAggregateOutputType | null
    _max: CommentsMaxAggregateOutputType | null
  }

  export type CommentsMinAggregateOutputType = {
    id: string | null
    message: string | null
    image: string | null
    replay: string | null
    userId: string | null
    productId: string | null
    receiverId: string | null
  }

  export type CommentsMaxAggregateOutputType = {
    id: string | null
    message: string | null
    image: string | null
    replay: string | null
    userId: string | null
    productId: string | null
    receiverId: string | null
  }

  export type CommentsCountAggregateOutputType = {
    id: number
    message: number
    image: number
    replay: number
    userId: number
    productId: number
    receiverId: number
    _all: number
  }


  export type CommentsMinAggregateInputType = {
    id?: true
    message?: true
    image?: true
    replay?: true
    userId?: true
    productId?: true
    receiverId?: true
  }

  export type CommentsMaxAggregateInputType = {
    id?: true
    message?: true
    image?: true
    replay?: true
    userId?: true
    productId?: true
    receiverId?: true
  }

  export type CommentsCountAggregateInputType = {
    id?: true
    message?: true
    image?: true
    replay?: true
    userId?: true
    productId?: true
    receiverId?: true
    _all?: true
  }

  export type CommentsAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which comments to aggregate.
     */
    where?: commentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of comments to fetch.
     */
    orderBy?: commentsOrderByWithRelationInput | commentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: commentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned comments
    **/
    _count?: true | CommentsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommentsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommentsMaxAggregateInputType
  }

  export type GetCommentsAggregateType<T extends CommentsAggregateArgs> = {
        [P in keyof T & keyof AggregateComments]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComments[P]>
      : GetScalarType<T[P], AggregateComments[P]>
  }




  export type commentsGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: commentsWhereInput
    orderBy?: commentsOrderByWithAggregationInput | commentsOrderByWithAggregationInput[]
    by: CommentsScalarFieldEnum[] | CommentsScalarFieldEnum
    having?: commentsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommentsCountAggregateInputType | true
    _min?: CommentsMinAggregateInputType
    _max?: CommentsMaxAggregateInputType
  }


  export type CommentsGroupByOutputType = {
    id: string
    message: string
    image: string | null
    replay: string | null
    userId: string
    productId: string
    receiverId: string
    _count: CommentsCountAggregateOutputType | null
    _min: CommentsMinAggregateOutputType | null
    _max: CommentsMaxAggregateOutputType | null
  }

  type GetCommentsGroupByPayload<T extends commentsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommentsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommentsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommentsGroupByOutputType[P]>
            : GetScalarType<T[P], CommentsGroupByOutputType[P]>
        }
      >
    >


  export type commentsSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    message?: boolean
    image?: boolean
    replay?: boolean
    userId?: boolean
    productId?: boolean
    receiverId?: boolean
    user?: boolean | comments$userArgs<ExtArgs>
    product?: boolean | comments$productArgs<ExtArgs>
    notifications?: boolean | comments$notificationsArgs<ExtArgs>
    _count?: boolean | CommentsCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["comments"]>

  export type commentsSelectScalar = {
    id?: boolean
    message?: boolean
    image?: boolean
    replay?: boolean
    userId?: boolean
    productId?: boolean
    receiverId?: boolean
  }

  export type commentsInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | comments$userArgs<ExtArgs>
    product?: boolean | comments$productArgs<ExtArgs>
    notifications?: boolean | comments$notificationsArgs<ExtArgs>
    _count?: boolean | CommentsCountOutputTypeArgs<ExtArgs>
  }


  type commentsGetPayload<S extends boolean | null | undefined | commentsArgs> = $Types.GetResult<commentsPayload, S>

  type commentsCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<commentsFindManyArgs, 'select' | 'include'> & {
      select?: CommentsCountAggregateInputType | true
    }

  export interface commentsDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['comments'], meta: { name: 'comments' } }
    /**
     * Find zero or one Comments that matches the filter.
     * @param {commentsFindUniqueArgs} args - Arguments to find a Comments
     * @example
     * // Get one Comments
     * const comments = await prisma.comments.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends commentsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, commentsFindUniqueArgs<ExtArgs>>
    ): Prisma__commentsClient<$Types.GetResult<commentsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Comments that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {commentsFindUniqueOrThrowArgs} args - Arguments to find a Comments
     * @example
     * // Get one Comments
     * const comments = await prisma.comments.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends commentsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, commentsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__commentsClient<$Types.GetResult<commentsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commentsFindFirstArgs} args - Arguments to find a Comments
     * @example
     * // Get one Comments
     * const comments = await prisma.comments.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends commentsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, commentsFindFirstArgs<ExtArgs>>
    ): Prisma__commentsClient<$Types.GetResult<commentsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Comments that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commentsFindFirstOrThrowArgs} args - Arguments to find a Comments
     * @example
     * // Get one Comments
     * const comments = await prisma.comments.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends commentsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, commentsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__commentsClient<$Types.GetResult<commentsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commentsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Comments
     * const comments = await prisma.comments.findMany()
     * 
     * // Get first 10 Comments
     * const comments = await prisma.comments.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commentsWithIdOnly = await prisma.comments.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends commentsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, commentsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<commentsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Comments.
     * @param {commentsCreateArgs} args - Arguments to create a Comments.
     * @example
     * // Create one Comments
     * const Comments = await prisma.comments.create({
     *   data: {
     *     // ... data to create a Comments
     *   }
     * })
     * 
    **/
    create<T extends commentsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, commentsCreateArgs<ExtArgs>>
    ): Prisma__commentsClient<$Types.GetResult<commentsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Comments.
     *     @param {commentsCreateManyArgs} args - Arguments to create many Comments.
     *     @example
     *     // Create many Comments
     *     const comments = await prisma.comments.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends commentsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, commentsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Comments.
     * @param {commentsDeleteArgs} args - Arguments to delete one Comments.
     * @example
     * // Delete one Comments
     * const Comments = await prisma.comments.delete({
     *   where: {
     *     // ... filter to delete one Comments
     *   }
     * })
     * 
    **/
    delete<T extends commentsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, commentsDeleteArgs<ExtArgs>>
    ): Prisma__commentsClient<$Types.GetResult<commentsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Comments.
     * @param {commentsUpdateArgs} args - Arguments to update one Comments.
     * @example
     * // Update one Comments
     * const comments = await prisma.comments.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends commentsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, commentsUpdateArgs<ExtArgs>>
    ): Prisma__commentsClient<$Types.GetResult<commentsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Comments.
     * @param {commentsDeleteManyArgs} args - Arguments to filter Comments to delete.
     * @example
     * // Delete a few Comments
     * const { count } = await prisma.comments.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends commentsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, commentsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commentsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Comments
     * const comments = await prisma.comments.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends commentsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, commentsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Comments.
     * @param {commentsUpsertArgs} args - Arguments to update or create a Comments.
     * @example
     * // Update or create a Comments
     * const comments = await prisma.comments.upsert({
     *   create: {
     *     // ... data to create a Comments
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Comments we want to update
     *   }
     * })
    **/
    upsert<T extends commentsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, commentsUpsertArgs<ExtArgs>>
    ): Prisma__commentsClient<$Types.GetResult<commentsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commentsCountArgs} args - Arguments to filter Comments to count.
     * @example
     * // Count the number of Comments
     * const count = await prisma.comments.count({
     *   where: {
     *     // ... the filter for the Comments we want to count
     *   }
     * })
    **/
    count<T extends commentsCountArgs>(
      args?: Subset<T, commentsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommentsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommentsAggregateArgs>(args: Subset<T, CommentsAggregateArgs>): Prisma.PrismaPromise<GetCommentsAggregateType<T>>

    /**
     * Group by Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commentsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends commentsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: commentsGroupByArgs['orderBy'] }
        : { orderBy?: commentsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, commentsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommentsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the comments model
   */
  readonly fields: commentsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for comments.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__commentsClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends comments$userArgs<ExtArgs> = {}>(args?: Subset<T, comments$userArgs<ExtArgs>>): Prisma__usersClient<$Types.GetResult<usersPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    product<T extends comments$productArgs<ExtArgs> = {}>(args?: Subset<T, comments$productArgs<ExtArgs>>): Prisma__productsClient<$Types.GetResult<productsPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    notifications<T extends comments$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, comments$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<notificationsPayload<ExtArgs>, T, 'findMany'>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the comments model
   */ 
  interface commentsFieldRefs {
    readonly id: FieldRef<"comments", 'String'>
    readonly message: FieldRef<"comments", 'String'>
    readonly image: FieldRef<"comments", 'String'>
    readonly replay: FieldRef<"comments", 'String'>
    readonly userId: FieldRef<"comments", 'String'>
    readonly productId: FieldRef<"comments", 'String'>
    readonly receiverId: FieldRef<"comments", 'String'>
  }
    

  // Custom InputTypes

  /**
   * comments findUnique
   */
  export type commentsFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comments
     */
    select?: commentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: commentsInclude<ExtArgs> | null
    /**
     * Filter, which comments to fetch.
     */
    where: commentsWhereUniqueInput
  }


  /**
   * comments findUniqueOrThrow
   */
  export type commentsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comments
     */
    select?: commentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: commentsInclude<ExtArgs> | null
    /**
     * Filter, which comments to fetch.
     */
    where: commentsWhereUniqueInput
  }


  /**
   * comments findFirst
   */
  export type commentsFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comments
     */
    select?: commentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: commentsInclude<ExtArgs> | null
    /**
     * Filter, which comments to fetch.
     */
    where?: commentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of comments to fetch.
     */
    orderBy?: commentsOrderByWithRelationInput | commentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for comments.
     */
    cursor?: commentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of comments.
     */
    distinct?: CommentsScalarFieldEnum | CommentsScalarFieldEnum[]
  }


  /**
   * comments findFirstOrThrow
   */
  export type commentsFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comments
     */
    select?: commentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: commentsInclude<ExtArgs> | null
    /**
     * Filter, which comments to fetch.
     */
    where?: commentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of comments to fetch.
     */
    orderBy?: commentsOrderByWithRelationInput | commentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for comments.
     */
    cursor?: commentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of comments.
     */
    distinct?: CommentsScalarFieldEnum | CommentsScalarFieldEnum[]
  }


  /**
   * comments findMany
   */
  export type commentsFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comments
     */
    select?: commentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: commentsInclude<ExtArgs> | null
    /**
     * Filter, which comments to fetch.
     */
    where?: commentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of comments to fetch.
     */
    orderBy?: commentsOrderByWithRelationInput | commentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing comments.
     */
    cursor?: commentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` comments.
     */
    skip?: number
    distinct?: CommentsScalarFieldEnum | CommentsScalarFieldEnum[]
  }


  /**
   * comments create
   */
  export type commentsCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comments
     */
    select?: commentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: commentsInclude<ExtArgs> | null
    /**
     * The data needed to create a comments.
     */
    data: XOR<commentsCreateInput, commentsUncheckedCreateInput>
  }


  /**
   * comments createMany
   */
  export type commentsCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many comments.
     */
    data: commentsCreateManyInput | commentsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * comments update
   */
  export type commentsUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comments
     */
    select?: commentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: commentsInclude<ExtArgs> | null
    /**
     * The data needed to update a comments.
     */
    data: XOR<commentsUpdateInput, commentsUncheckedUpdateInput>
    /**
     * Choose, which comments to update.
     */
    where: commentsWhereUniqueInput
  }


  /**
   * comments updateMany
   */
  export type commentsUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update comments.
     */
    data: XOR<commentsUpdateManyMutationInput, commentsUncheckedUpdateManyInput>
    /**
     * Filter which comments to update
     */
    where?: commentsWhereInput
  }


  /**
   * comments upsert
   */
  export type commentsUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comments
     */
    select?: commentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: commentsInclude<ExtArgs> | null
    /**
     * The filter to search for the comments to update in case it exists.
     */
    where: commentsWhereUniqueInput
    /**
     * In case the comments found by the `where` argument doesn't exist, create a new comments with this data.
     */
    create: XOR<commentsCreateInput, commentsUncheckedCreateInput>
    /**
     * In case the comments was found with the provided `where` argument, update it with this data.
     */
    update: XOR<commentsUpdateInput, commentsUncheckedUpdateInput>
  }


  /**
   * comments delete
   */
  export type commentsDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comments
     */
    select?: commentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: commentsInclude<ExtArgs> | null
    /**
     * Filter which comments to delete.
     */
    where: commentsWhereUniqueInput
  }


  /**
   * comments deleteMany
   */
  export type commentsDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which comments to delete
     */
    where?: commentsWhereInput
  }


  /**
   * comments.user
   */
  export type comments$userArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    where?: usersWhereInput
  }


  /**
   * comments.product
   */
  export type comments$productArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productsInclude<ExtArgs> | null
    where?: productsWhereInput
  }


  /**
   * comments.notifications
   */
  export type comments$notificationsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notifications
     */
    select?: notificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: notificationsInclude<ExtArgs> | null
    where?: notificationsWhereInput
    orderBy?: notificationsOrderByWithRelationInput | notificationsOrderByWithRelationInput[]
    cursor?: notificationsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationsScalarFieldEnum | NotificationsScalarFieldEnum[]
  }


  /**
   * comments without action
   */
  export type commentsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comments
     */
    select?: commentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: commentsInclude<ExtArgs> | null
  }



  /**
   * Model reviews
   */


  export type AggregateReviews = {
    _count: ReviewsCountAggregateOutputType | null
    _avg: ReviewsAvgAggregateOutputType | null
    _sum: ReviewsSumAggregateOutputType | null
    _min: ReviewsMinAggregateOutputType | null
    _max: ReviewsMaxAggregateOutputType | null
  }

  export type ReviewsAvgAggregateOutputType = {
    rate: number | null
  }

  export type ReviewsSumAggregateOutputType = {
    rate: number | null
  }

  export type ReviewsMinAggregateOutputType = {
    id: string | null
    message: string | null
    rate: number | null
    userId: string | null
    productId: string | null
    sellerId: string | null
    brandId: string | null
  }

  export type ReviewsMaxAggregateOutputType = {
    id: string | null
    message: string | null
    rate: number | null
    userId: string | null
    productId: string | null
    sellerId: string | null
    brandId: string | null
  }

  export type ReviewsCountAggregateOutputType = {
    id: number
    message: number
    rate: number
    userId: number
    productId: number
    sellerId: number
    brandId: number
    _all: number
  }


  export type ReviewsAvgAggregateInputType = {
    rate?: true
  }

  export type ReviewsSumAggregateInputType = {
    rate?: true
  }

  export type ReviewsMinAggregateInputType = {
    id?: true
    message?: true
    rate?: true
    userId?: true
    productId?: true
    sellerId?: true
    brandId?: true
  }

  export type ReviewsMaxAggregateInputType = {
    id?: true
    message?: true
    rate?: true
    userId?: true
    productId?: true
    sellerId?: true
    brandId?: true
  }

  export type ReviewsCountAggregateInputType = {
    id?: true
    message?: true
    rate?: true
    userId?: true
    productId?: true
    sellerId?: true
    brandId?: true
    _all?: true
  }

  export type ReviewsAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which reviews to aggregate.
     */
    where?: reviewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reviews to fetch.
     */
    orderBy?: reviewsOrderByWithRelationInput | reviewsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: reviewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned reviews
    **/
    _count?: true | ReviewsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReviewsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReviewsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReviewsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReviewsMaxAggregateInputType
  }

  export type GetReviewsAggregateType<T extends ReviewsAggregateArgs> = {
        [P in keyof T & keyof AggregateReviews]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReviews[P]>
      : GetScalarType<T[P], AggregateReviews[P]>
  }




  export type reviewsGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: reviewsWhereInput
    orderBy?: reviewsOrderByWithAggregationInput | reviewsOrderByWithAggregationInput[]
    by: ReviewsScalarFieldEnum[] | ReviewsScalarFieldEnum
    having?: reviewsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReviewsCountAggregateInputType | true
    _avg?: ReviewsAvgAggregateInputType
    _sum?: ReviewsSumAggregateInputType
    _min?: ReviewsMinAggregateInputType
    _max?: ReviewsMaxAggregateInputType
  }


  export type ReviewsGroupByOutputType = {
    id: string
    message: string
    rate: number
    userId: string
    productId: string
    sellerId: string | null
    brandId: string | null
    _count: ReviewsCountAggregateOutputType | null
    _avg: ReviewsAvgAggregateOutputType | null
    _sum: ReviewsSumAggregateOutputType | null
    _min: ReviewsMinAggregateOutputType | null
    _max: ReviewsMaxAggregateOutputType | null
  }

  type GetReviewsGroupByPayload<T extends reviewsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReviewsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReviewsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReviewsGroupByOutputType[P]>
            : GetScalarType<T[P], ReviewsGroupByOutputType[P]>
        }
      >
    >


  export type reviewsSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    message?: boolean
    rate?: boolean
    userId?: boolean
    productId?: boolean
    sellerId?: boolean
    brandId?: boolean
    user?: boolean | reviews$userArgs<ExtArgs>
    product?: boolean | reviews$productArgs<ExtArgs>
    notifications?: boolean | reviews$notificationsArgs<ExtArgs>
    seller?: boolean | reviews$sellerArgs<ExtArgs>
    brand?: boolean | reviews$brandArgs<ExtArgs>
    _count?: boolean | ReviewsCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["reviews"]>

  export type reviewsSelectScalar = {
    id?: boolean
    message?: boolean
    rate?: boolean
    userId?: boolean
    productId?: boolean
    sellerId?: boolean
    brandId?: boolean
  }

  export type reviewsInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | reviews$userArgs<ExtArgs>
    product?: boolean | reviews$productArgs<ExtArgs>
    notifications?: boolean | reviews$notificationsArgs<ExtArgs>
    seller?: boolean | reviews$sellerArgs<ExtArgs>
    brand?: boolean | reviews$brandArgs<ExtArgs>
    _count?: boolean | ReviewsCountOutputTypeArgs<ExtArgs>
  }


  type reviewsGetPayload<S extends boolean | null | undefined | reviewsArgs> = $Types.GetResult<reviewsPayload, S>

  type reviewsCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<reviewsFindManyArgs, 'select' | 'include'> & {
      select?: ReviewsCountAggregateInputType | true
    }

  export interface reviewsDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['reviews'], meta: { name: 'reviews' } }
    /**
     * Find zero or one Reviews that matches the filter.
     * @param {reviewsFindUniqueArgs} args - Arguments to find a Reviews
     * @example
     * // Get one Reviews
     * const reviews = await prisma.reviews.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends reviewsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, reviewsFindUniqueArgs<ExtArgs>>
    ): Prisma__reviewsClient<$Types.GetResult<reviewsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Reviews that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {reviewsFindUniqueOrThrowArgs} args - Arguments to find a Reviews
     * @example
     * // Get one Reviews
     * const reviews = await prisma.reviews.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends reviewsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, reviewsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__reviewsClient<$Types.GetResult<reviewsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Reviews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reviewsFindFirstArgs} args - Arguments to find a Reviews
     * @example
     * // Get one Reviews
     * const reviews = await prisma.reviews.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends reviewsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, reviewsFindFirstArgs<ExtArgs>>
    ): Prisma__reviewsClient<$Types.GetResult<reviewsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Reviews that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reviewsFindFirstOrThrowArgs} args - Arguments to find a Reviews
     * @example
     * // Get one Reviews
     * const reviews = await prisma.reviews.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends reviewsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, reviewsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__reviewsClient<$Types.GetResult<reviewsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Reviews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reviewsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reviews
     * const reviews = await prisma.reviews.findMany()
     * 
     * // Get first 10 Reviews
     * const reviews = await prisma.reviews.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reviewsWithIdOnly = await prisma.reviews.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends reviewsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, reviewsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<reviewsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Reviews.
     * @param {reviewsCreateArgs} args - Arguments to create a Reviews.
     * @example
     * // Create one Reviews
     * const Reviews = await prisma.reviews.create({
     *   data: {
     *     // ... data to create a Reviews
     *   }
     * })
     * 
    **/
    create<T extends reviewsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, reviewsCreateArgs<ExtArgs>>
    ): Prisma__reviewsClient<$Types.GetResult<reviewsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Reviews.
     *     @param {reviewsCreateManyArgs} args - Arguments to create many Reviews.
     *     @example
     *     // Create many Reviews
     *     const reviews = await prisma.reviews.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends reviewsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, reviewsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Reviews.
     * @param {reviewsDeleteArgs} args - Arguments to delete one Reviews.
     * @example
     * // Delete one Reviews
     * const Reviews = await prisma.reviews.delete({
     *   where: {
     *     // ... filter to delete one Reviews
     *   }
     * })
     * 
    **/
    delete<T extends reviewsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, reviewsDeleteArgs<ExtArgs>>
    ): Prisma__reviewsClient<$Types.GetResult<reviewsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Reviews.
     * @param {reviewsUpdateArgs} args - Arguments to update one Reviews.
     * @example
     * // Update one Reviews
     * const reviews = await prisma.reviews.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends reviewsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, reviewsUpdateArgs<ExtArgs>>
    ): Prisma__reviewsClient<$Types.GetResult<reviewsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Reviews.
     * @param {reviewsDeleteManyArgs} args - Arguments to filter Reviews to delete.
     * @example
     * // Delete a few Reviews
     * const { count } = await prisma.reviews.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends reviewsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, reviewsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reviewsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reviews
     * const reviews = await prisma.reviews.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends reviewsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, reviewsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Reviews.
     * @param {reviewsUpsertArgs} args - Arguments to update or create a Reviews.
     * @example
     * // Update or create a Reviews
     * const reviews = await prisma.reviews.upsert({
     *   create: {
     *     // ... data to create a Reviews
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Reviews we want to update
     *   }
     * })
    **/
    upsert<T extends reviewsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, reviewsUpsertArgs<ExtArgs>>
    ): Prisma__reviewsClient<$Types.GetResult<reviewsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reviewsCountArgs} args - Arguments to filter Reviews to count.
     * @example
     * // Count the number of Reviews
     * const count = await prisma.reviews.count({
     *   where: {
     *     // ... the filter for the Reviews we want to count
     *   }
     * })
    **/
    count<T extends reviewsCountArgs>(
      args?: Subset<T, reviewsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReviewsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReviewsAggregateArgs>(args: Subset<T, ReviewsAggregateArgs>): Prisma.PrismaPromise<GetReviewsAggregateType<T>>

    /**
     * Group by Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reviewsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends reviewsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: reviewsGroupByArgs['orderBy'] }
        : { orderBy?: reviewsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, reviewsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReviewsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the reviews model
   */
  readonly fields: reviewsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for reviews.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__reviewsClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends reviews$userArgs<ExtArgs> = {}>(args?: Subset<T, reviews$userArgs<ExtArgs>>): Prisma__usersClient<$Types.GetResult<usersPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    product<T extends reviews$productArgs<ExtArgs> = {}>(args?: Subset<T, reviews$productArgs<ExtArgs>>): Prisma__productsClient<$Types.GetResult<productsPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    notifications<T extends reviews$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, reviews$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<notificationsPayload<ExtArgs>, T, 'findMany'>| Null>;

    seller<T extends reviews$sellerArgs<ExtArgs> = {}>(args?: Subset<T, reviews$sellerArgs<ExtArgs>>): Prisma__sellerClient<$Types.GetResult<sellerPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    brand<T extends reviews$brandArgs<ExtArgs> = {}>(args?: Subset<T, reviews$brandArgs<ExtArgs>>): Prisma__brandsClient<$Types.GetResult<brandsPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the reviews model
   */ 
  interface reviewsFieldRefs {
    readonly id: FieldRef<"reviews", 'String'>
    readonly message: FieldRef<"reviews", 'String'>
    readonly rate: FieldRef<"reviews", 'Int'>
    readonly userId: FieldRef<"reviews", 'String'>
    readonly productId: FieldRef<"reviews", 'String'>
    readonly sellerId: FieldRef<"reviews", 'String'>
    readonly brandId: FieldRef<"reviews", 'String'>
  }
    

  // Custom InputTypes

  /**
   * reviews findUnique
   */
  export type reviewsFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reviews
     */
    select?: reviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: reviewsInclude<ExtArgs> | null
    /**
     * Filter, which reviews to fetch.
     */
    where: reviewsWhereUniqueInput
  }


  /**
   * reviews findUniqueOrThrow
   */
  export type reviewsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reviews
     */
    select?: reviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: reviewsInclude<ExtArgs> | null
    /**
     * Filter, which reviews to fetch.
     */
    where: reviewsWhereUniqueInput
  }


  /**
   * reviews findFirst
   */
  export type reviewsFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reviews
     */
    select?: reviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: reviewsInclude<ExtArgs> | null
    /**
     * Filter, which reviews to fetch.
     */
    where?: reviewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reviews to fetch.
     */
    orderBy?: reviewsOrderByWithRelationInput | reviewsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for reviews.
     */
    cursor?: reviewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of reviews.
     */
    distinct?: ReviewsScalarFieldEnum | ReviewsScalarFieldEnum[]
  }


  /**
   * reviews findFirstOrThrow
   */
  export type reviewsFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reviews
     */
    select?: reviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: reviewsInclude<ExtArgs> | null
    /**
     * Filter, which reviews to fetch.
     */
    where?: reviewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reviews to fetch.
     */
    orderBy?: reviewsOrderByWithRelationInput | reviewsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for reviews.
     */
    cursor?: reviewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of reviews.
     */
    distinct?: ReviewsScalarFieldEnum | ReviewsScalarFieldEnum[]
  }


  /**
   * reviews findMany
   */
  export type reviewsFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reviews
     */
    select?: reviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: reviewsInclude<ExtArgs> | null
    /**
     * Filter, which reviews to fetch.
     */
    where?: reviewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reviews to fetch.
     */
    orderBy?: reviewsOrderByWithRelationInput | reviewsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing reviews.
     */
    cursor?: reviewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reviews.
     */
    skip?: number
    distinct?: ReviewsScalarFieldEnum | ReviewsScalarFieldEnum[]
  }


  /**
   * reviews create
   */
  export type reviewsCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reviews
     */
    select?: reviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: reviewsInclude<ExtArgs> | null
    /**
     * The data needed to create a reviews.
     */
    data: XOR<reviewsCreateInput, reviewsUncheckedCreateInput>
  }


  /**
   * reviews createMany
   */
  export type reviewsCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many reviews.
     */
    data: reviewsCreateManyInput | reviewsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * reviews update
   */
  export type reviewsUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reviews
     */
    select?: reviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: reviewsInclude<ExtArgs> | null
    /**
     * The data needed to update a reviews.
     */
    data: XOR<reviewsUpdateInput, reviewsUncheckedUpdateInput>
    /**
     * Choose, which reviews to update.
     */
    where: reviewsWhereUniqueInput
  }


  /**
   * reviews updateMany
   */
  export type reviewsUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update reviews.
     */
    data: XOR<reviewsUpdateManyMutationInput, reviewsUncheckedUpdateManyInput>
    /**
     * Filter which reviews to update
     */
    where?: reviewsWhereInput
  }


  /**
   * reviews upsert
   */
  export type reviewsUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reviews
     */
    select?: reviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: reviewsInclude<ExtArgs> | null
    /**
     * The filter to search for the reviews to update in case it exists.
     */
    where: reviewsWhereUniqueInput
    /**
     * In case the reviews found by the `where` argument doesn't exist, create a new reviews with this data.
     */
    create: XOR<reviewsCreateInput, reviewsUncheckedCreateInput>
    /**
     * In case the reviews was found with the provided `where` argument, update it with this data.
     */
    update: XOR<reviewsUpdateInput, reviewsUncheckedUpdateInput>
  }


  /**
   * reviews delete
   */
  export type reviewsDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reviews
     */
    select?: reviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: reviewsInclude<ExtArgs> | null
    /**
     * Filter which reviews to delete.
     */
    where: reviewsWhereUniqueInput
  }


  /**
   * reviews deleteMany
   */
  export type reviewsDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which reviews to delete
     */
    where?: reviewsWhereInput
  }


  /**
   * reviews.user
   */
  export type reviews$userArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    where?: usersWhereInput
  }


  /**
   * reviews.product
   */
  export type reviews$productArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productsInclude<ExtArgs> | null
    where?: productsWhereInput
  }


  /**
   * reviews.notifications
   */
  export type reviews$notificationsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notifications
     */
    select?: notificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: notificationsInclude<ExtArgs> | null
    where?: notificationsWhereInput
    orderBy?: notificationsOrderByWithRelationInput | notificationsOrderByWithRelationInput[]
    cursor?: notificationsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationsScalarFieldEnum | NotificationsScalarFieldEnum[]
  }


  /**
   * reviews.seller
   */
  export type reviews$sellerArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the seller
     */
    select?: sellerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sellerInclude<ExtArgs> | null
    where?: sellerWhereInput
  }


  /**
   * reviews.brand
   */
  export type reviews$brandArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the brands
     */
    select?: brandsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: brandsInclude<ExtArgs> | null
    where?: brandsWhereInput
  }


  /**
   * reviews without action
   */
  export type reviewsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reviews
     */
    select?: reviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: reviewsInclude<ExtArgs> | null
  }



  /**
   * Model notifications
   */


  export type AggregateNotifications = {
    _count: NotificationsCountAggregateOutputType | null
    _min: NotificationsMinAggregateOutputType | null
    _max: NotificationsMaxAggregateOutputType | null
  }

  export type NotificationsMinAggregateOutputType = {
    id: string | null
    message: string | null
    title: string | null
    userId: string | null
    commentId: string | null
    reviewId: string | null
  }

  export type NotificationsMaxAggregateOutputType = {
    id: string | null
    message: string | null
    title: string | null
    userId: string | null
    commentId: string | null
    reviewId: string | null
  }

  export type NotificationsCountAggregateOutputType = {
    id: number
    message: number
    title: number
    userId: number
    commentId: number
    reviewId: number
    _all: number
  }


  export type NotificationsMinAggregateInputType = {
    id?: true
    message?: true
    title?: true
    userId?: true
    commentId?: true
    reviewId?: true
  }

  export type NotificationsMaxAggregateInputType = {
    id?: true
    message?: true
    title?: true
    userId?: true
    commentId?: true
    reviewId?: true
  }

  export type NotificationsCountAggregateInputType = {
    id?: true
    message?: true
    title?: true
    userId?: true
    commentId?: true
    reviewId?: true
    _all?: true
  }

  export type NotificationsAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which notifications to aggregate.
     */
    where?: notificationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of notifications to fetch.
     */
    orderBy?: notificationsOrderByWithRelationInput | notificationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: notificationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned notifications
    **/
    _count?: true | NotificationsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationsMaxAggregateInputType
  }

  export type GetNotificationsAggregateType<T extends NotificationsAggregateArgs> = {
        [P in keyof T & keyof AggregateNotifications]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotifications[P]>
      : GetScalarType<T[P], AggregateNotifications[P]>
  }




  export type notificationsGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: notificationsWhereInput
    orderBy?: notificationsOrderByWithAggregationInput | notificationsOrderByWithAggregationInput[]
    by: NotificationsScalarFieldEnum[] | NotificationsScalarFieldEnum
    having?: notificationsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationsCountAggregateInputType | true
    _min?: NotificationsMinAggregateInputType
    _max?: NotificationsMaxAggregateInputType
  }


  export type NotificationsGroupByOutputType = {
    id: string
    message: string
    title: string
    userId: string
    commentId: string
    reviewId: string
    _count: NotificationsCountAggregateOutputType | null
    _min: NotificationsMinAggregateOutputType | null
    _max: NotificationsMaxAggregateOutputType | null
  }

  type GetNotificationsGroupByPayload<T extends notificationsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationsGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationsGroupByOutputType[P]>
        }
      >
    >


  export type notificationsSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    message?: boolean
    title?: boolean
    userId?: boolean
    commentId?: boolean
    reviewId?: boolean
    user?: boolean | notifications$userArgs<ExtArgs>
    comments?: boolean | notifications$commentsArgs<ExtArgs>
    reviews?: boolean | notifications$reviewsArgs<ExtArgs>
  }, ExtArgs["result"]["notifications"]>

  export type notificationsSelectScalar = {
    id?: boolean
    message?: boolean
    title?: boolean
    userId?: boolean
    commentId?: boolean
    reviewId?: boolean
  }

  export type notificationsInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | notifications$userArgs<ExtArgs>
    comments?: boolean | notifications$commentsArgs<ExtArgs>
    reviews?: boolean | notifications$reviewsArgs<ExtArgs>
  }


  type notificationsGetPayload<S extends boolean | null | undefined | notificationsArgs> = $Types.GetResult<notificationsPayload, S>

  type notificationsCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<notificationsFindManyArgs, 'select' | 'include'> & {
      select?: NotificationsCountAggregateInputType | true
    }

  export interface notificationsDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['notifications'], meta: { name: 'notifications' } }
    /**
     * Find zero or one Notifications that matches the filter.
     * @param {notificationsFindUniqueArgs} args - Arguments to find a Notifications
     * @example
     * // Get one Notifications
     * const notifications = await prisma.notifications.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends notificationsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, notificationsFindUniqueArgs<ExtArgs>>
    ): Prisma__notificationsClient<$Types.GetResult<notificationsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Notifications that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {notificationsFindUniqueOrThrowArgs} args - Arguments to find a Notifications
     * @example
     * // Get one Notifications
     * const notifications = await prisma.notifications.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends notificationsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, notificationsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__notificationsClient<$Types.GetResult<notificationsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {notificationsFindFirstArgs} args - Arguments to find a Notifications
     * @example
     * // Get one Notifications
     * const notifications = await prisma.notifications.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends notificationsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, notificationsFindFirstArgs<ExtArgs>>
    ): Prisma__notificationsClient<$Types.GetResult<notificationsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Notifications that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {notificationsFindFirstOrThrowArgs} args - Arguments to find a Notifications
     * @example
     * // Get one Notifications
     * const notifications = await prisma.notifications.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends notificationsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, notificationsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__notificationsClient<$Types.GetResult<notificationsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {notificationsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notifications.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notifications.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationsWithIdOnly = await prisma.notifications.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends notificationsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, notificationsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<notificationsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Notifications.
     * @param {notificationsCreateArgs} args - Arguments to create a Notifications.
     * @example
     * // Create one Notifications
     * const Notifications = await prisma.notifications.create({
     *   data: {
     *     // ... data to create a Notifications
     *   }
     * })
     * 
    **/
    create<T extends notificationsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, notificationsCreateArgs<ExtArgs>>
    ): Prisma__notificationsClient<$Types.GetResult<notificationsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Notifications.
     *     @param {notificationsCreateManyArgs} args - Arguments to create many Notifications.
     *     @example
     *     // Create many Notifications
     *     const notifications = await prisma.notifications.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends notificationsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, notificationsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Notifications.
     * @param {notificationsDeleteArgs} args - Arguments to delete one Notifications.
     * @example
     * // Delete one Notifications
     * const Notifications = await prisma.notifications.delete({
     *   where: {
     *     // ... filter to delete one Notifications
     *   }
     * })
     * 
    **/
    delete<T extends notificationsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, notificationsDeleteArgs<ExtArgs>>
    ): Prisma__notificationsClient<$Types.GetResult<notificationsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Notifications.
     * @param {notificationsUpdateArgs} args - Arguments to update one Notifications.
     * @example
     * // Update one Notifications
     * const notifications = await prisma.notifications.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends notificationsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, notificationsUpdateArgs<ExtArgs>>
    ): Prisma__notificationsClient<$Types.GetResult<notificationsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Notifications.
     * @param {notificationsDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notifications.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends notificationsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, notificationsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {notificationsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notifications = await prisma.notifications.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends notificationsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, notificationsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Notifications.
     * @param {notificationsUpsertArgs} args - Arguments to update or create a Notifications.
     * @example
     * // Update or create a Notifications
     * const notifications = await prisma.notifications.upsert({
     *   create: {
     *     // ... data to create a Notifications
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notifications we want to update
     *   }
     * })
    **/
    upsert<T extends notificationsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, notificationsUpsertArgs<ExtArgs>>
    ): Prisma__notificationsClient<$Types.GetResult<notificationsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {notificationsCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notifications.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends notificationsCountArgs>(
      args?: Subset<T, notificationsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationsAggregateArgs>(args: Subset<T, NotificationsAggregateArgs>): Prisma.PrismaPromise<GetNotificationsAggregateType<T>>

    /**
     * Group by Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {notificationsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends notificationsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: notificationsGroupByArgs['orderBy'] }
        : { orderBy?: notificationsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, notificationsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the notifications model
   */
  readonly fields: notificationsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for notifications.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__notificationsClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends notifications$userArgs<ExtArgs> = {}>(args?: Subset<T, notifications$userArgs<ExtArgs>>): Prisma__usersClient<$Types.GetResult<usersPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    comments<T extends notifications$commentsArgs<ExtArgs> = {}>(args?: Subset<T, notifications$commentsArgs<ExtArgs>>): Prisma__commentsClient<$Types.GetResult<commentsPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    reviews<T extends notifications$reviewsArgs<ExtArgs> = {}>(args?: Subset<T, notifications$reviewsArgs<ExtArgs>>): Prisma__reviewsClient<$Types.GetResult<reviewsPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the notifications model
   */ 
  interface notificationsFieldRefs {
    readonly id: FieldRef<"notifications", 'String'>
    readonly message: FieldRef<"notifications", 'String'>
    readonly title: FieldRef<"notifications", 'String'>
    readonly userId: FieldRef<"notifications", 'String'>
    readonly commentId: FieldRef<"notifications", 'String'>
    readonly reviewId: FieldRef<"notifications", 'String'>
  }
    

  // Custom InputTypes

  /**
   * notifications findUnique
   */
  export type notificationsFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notifications
     */
    select?: notificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: notificationsInclude<ExtArgs> | null
    /**
     * Filter, which notifications to fetch.
     */
    where: notificationsWhereUniqueInput
  }


  /**
   * notifications findUniqueOrThrow
   */
  export type notificationsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notifications
     */
    select?: notificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: notificationsInclude<ExtArgs> | null
    /**
     * Filter, which notifications to fetch.
     */
    where: notificationsWhereUniqueInput
  }


  /**
   * notifications findFirst
   */
  export type notificationsFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notifications
     */
    select?: notificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: notificationsInclude<ExtArgs> | null
    /**
     * Filter, which notifications to fetch.
     */
    where?: notificationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of notifications to fetch.
     */
    orderBy?: notificationsOrderByWithRelationInput | notificationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for notifications.
     */
    cursor?: notificationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of notifications.
     */
    distinct?: NotificationsScalarFieldEnum | NotificationsScalarFieldEnum[]
  }


  /**
   * notifications findFirstOrThrow
   */
  export type notificationsFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notifications
     */
    select?: notificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: notificationsInclude<ExtArgs> | null
    /**
     * Filter, which notifications to fetch.
     */
    where?: notificationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of notifications to fetch.
     */
    orderBy?: notificationsOrderByWithRelationInput | notificationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for notifications.
     */
    cursor?: notificationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of notifications.
     */
    distinct?: NotificationsScalarFieldEnum | NotificationsScalarFieldEnum[]
  }


  /**
   * notifications findMany
   */
  export type notificationsFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notifications
     */
    select?: notificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: notificationsInclude<ExtArgs> | null
    /**
     * Filter, which notifications to fetch.
     */
    where?: notificationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of notifications to fetch.
     */
    orderBy?: notificationsOrderByWithRelationInput | notificationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing notifications.
     */
    cursor?: notificationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` notifications.
     */
    skip?: number
    distinct?: NotificationsScalarFieldEnum | NotificationsScalarFieldEnum[]
  }


  /**
   * notifications create
   */
  export type notificationsCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notifications
     */
    select?: notificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: notificationsInclude<ExtArgs> | null
    /**
     * The data needed to create a notifications.
     */
    data: XOR<notificationsCreateInput, notificationsUncheckedCreateInput>
  }


  /**
   * notifications createMany
   */
  export type notificationsCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many notifications.
     */
    data: notificationsCreateManyInput | notificationsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * notifications update
   */
  export type notificationsUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notifications
     */
    select?: notificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: notificationsInclude<ExtArgs> | null
    /**
     * The data needed to update a notifications.
     */
    data: XOR<notificationsUpdateInput, notificationsUncheckedUpdateInput>
    /**
     * Choose, which notifications to update.
     */
    where: notificationsWhereUniqueInput
  }


  /**
   * notifications updateMany
   */
  export type notificationsUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update notifications.
     */
    data: XOR<notificationsUpdateManyMutationInput, notificationsUncheckedUpdateManyInput>
    /**
     * Filter which notifications to update
     */
    where?: notificationsWhereInput
  }


  /**
   * notifications upsert
   */
  export type notificationsUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notifications
     */
    select?: notificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: notificationsInclude<ExtArgs> | null
    /**
     * The filter to search for the notifications to update in case it exists.
     */
    where: notificationsWhereUniqueInput
    /**
     * In case the notifications found by the `where` argument doesn't exist, create a new notifications with this data.
     */
    create: XOR<notificationsCreateInput, notificationsUncheckedCreateInput>
    /**
     * In case the notifications was found with the provided `where` argument, update it with this data.
     */
    update: XOR<notificationsUpdateInput, notificationsUncheckedUpdateInput>
  }


  /**
   * notifications delete
   */
  export type notificationsDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notifications
     */
    select?: notificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: notificationsInclude<ExtArgs> | null
    /**
     * Filter which notifications to delete.
     */
    where: notificationsWhereUniqueInput
  }


  /**
   * notifications deleteMany
   */
  export type notificationsDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which notifications to delete
     */
    where?: notificationsWhereInput
  }


  /**
   * notifications.user
   */
  export type notifications$userArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    where?: usersWhereInput
  }


  /**
   * notifications.comments
   */
  export type notifications$commentsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comments
     */
    select?: commentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: commentsInclude<ExtArgs> | null
    where?: commentsWhereInput
  }


  /**
   * notifications.reviews
   */
  export type notifications$reviewsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reviews
     */
    select?: reviewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: reviewsInclude<ExtArgs> | null
    where?: reviewsWhereInput
  }


  /**
   * notifications without action
   */
  export type notificationsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notifications
     */
    select?: notificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: notificationsInclude<ExtArgs> | null
  }



  /**
   * Model flashSell
   */


  export type AggregateFlashSell = {
    _count: FlashSellCountAggregateOutputType | null
    _min: FlashSellMinAggregateOutputType | null
    _max: FlashSellMaxAggregateOutputType | null
  }

  export type FlashSellMinAggregateOutputType = {
    id: string | null
    startAt: Date | null
    endAt: Date | null
    banner: string | null
    title: string | null
  }

  export type FlashSellMaxAggregateOutputType = {
    id: string | null
    startAt: Date | null
    endAt: Date | null
    banner: string | null
    title: string | null
  }

  export type FlashSellCountAggregateOutputType = {
    id: number
    startAt: number
    endAt: number
    banner: number
    title: number
    _all: number
  }


  export type FlashSellMinAggregateInputType = {
    id?: true
    startAt?: true
    endAt?: true
    banner?: true
    title?: true
  }

  export type FlashSellMaxAggregateInputType = {
    id?: true
    startAt?: true
    endAt?: true
    banner?: true
    title?: true
  }

  export type FlashSellCountAggregateInputType = {
    id?: true
    startAt?: true
    endAt?: true
    banner?: true
    title?: true
    _all?: true
  }

  export type FlashSellAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which flashSell to aggregate.
     */
    where?: flashSellWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of flashSells to fetch.
     */
    orderBy?: flashSellOrderByWithRelationInput | flashSellOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: flashSellWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` flashSells from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` flashSells.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned flashSells
    **/
    _count?: true | FlashSellCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FlashSellMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FlashSellMaxAggregateInputType
  }

  export type GetFlashSellAggregateType<T extends FlashSellAggregateArgs> = {
        [P in keyof T & keyof AggregateFlashSell]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFlashSell[P]>
      : GetScalarType<T[P], AggregateFlashSell[P]>
  }




  export type flashSellGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: flashSellWhereInput
    orderBy?: flashSellOrderByWithAggregationInput | flashSellOrderByWithAggregationInput[]
    by: FlashSellScalarFieldEnum[] | FlashSellScalarFieldEnum
    having?: flashSellScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FlashSellCountAggregateInputType | true
    _min?: FlashSellMinAggregateInputType
    _max?: FlashSellMaxAggregateInputType
  }


  export type FlashSellGroupByOutputType = {
    id: string
    startAt: Date
    endAt: Date
    banner: string
    title: string
    _count: FlashSellCountAggregateOutputType | null
    _min: FlashSellMinAggregateOutputType | null
    _max: FlashSellMaxAggregateOutputType | null
  }

  type GetFlashSellGroupByPayload<T extends flashSellGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FlashSellGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FlashSellGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FlashSellGroupByOutputType[P]>
            : GetScalarType<T[P], FlashSellGroupByOutputType[P]>
        }
      >
    >


  export type flashSellSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    startAt?: boolean
    endAt?: boolean
    banner?: boolean
    title?: boolean
    product?: boolean | flashSell$productArgs<ExtArgs>
    _count?: boolean | FlashSellCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["flashSell"]>

  export type flashSellSelectScalar = {
    id?: boolean
    startAt?: boolean
    endAt?: boolean
    banner?: boolean
    title?: boolean
  }

  export type flashSellInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    product?: boolean | flashSell$productArgs<ExtArgs>
    _count?: boolean | FlashSellCountOutputTypeArgs<ExtArgs>
  }


  type flashSellGetPayload<S extends boolean | null | undefined | flashSellArgs> = $Types.GetResult<flashSellPayload, S>

  type flashSellCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<flashSellFindManyArgs, 'select' | 'include'> & {
      select?: FlashSellCountAggregateInputType | true
    }

  export interface flashSellDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['flashSell'], meta: { name: 'flashSell' } }
    /**
     * Find zero or one FlashSell that matches the filter.
     * @param {flashSellFindUniqueArgs} args - Arguments to find a FlashSell
     * @example
     * // Get one FlashSell
     * const flashSell = await prisma.flashSell.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends flashSellFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, flashSellFindUniqueArgs<ExtArgs>>
    ): Prisma__flashSellClient<$Types.GetResult<flashSellPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one FlashSell that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {flashSellFindUniqueOrThrowArgs} args - Arguments to find a FlashSell
     * @example
     * // Get one FlashSell
     * const flashSell = await prisma.flashSell.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends flashSellFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, flashSellFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__flashSellClient<$Types.GetResult<flashSellPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first FlashSell that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {flashSellFindFirstArgs} args - Arguments to find a FlashSell
     * @example
     * // Get one FlashSell
     * const flashSell = await prisma.flashSell.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends flashSellFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, flashSellFindFirstArgs<ExtArgs>>
    ): Prisma__flashSellClient<$Types.GetResult<flashSellPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first FlashSell that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {flashSellFindFirstOrThrowArgs} args - Arguments to find a FlashSell
     * @example
     * // Get one FlashSell
     * const flashSell = await prisma.flashSell.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends flashSellFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, flashSellFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__flashSellClient<$Types.GetResult<flashSellPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more FlashSells that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {flashSellFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FlashSells
     * const flashSells = await prisma.flashSell.findMany()
     * 
     * // Get first 10 FlashSells
     * const flashSells = await prisma.flashSell.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const flashSellWithIdOnly = await prisma.flashSell.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends flashSellFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, flashSellFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<flashSellPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a FlashSell.
     * @param {flashSellCreateArgs} args - Arguments to create a FlashSell.
     * @example
     * // Create one FlashSell
     * const FlashSell = await prisma.flashSell.create({
     *   data: {
     *     // ... data to create a FlashSell
     *   }
     * })
     * 
    **/
    create<T extends flashSellCreateArgs<ExtArgs>>(
      args: SelectSubset<T, flashSellCreateArgs<ExtArgs>>
    ): Prisma__flashSellClient<$Types.GetResult<flashSellPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many FlashSells.
     *     @param {flashSellCreateManyArgs} args - Arguments to create many FlashSells.
     *     @example
     *     // Create many FlashSells
     *     const flashSell = await prisma.flashSell.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends flashSellCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, flashSellCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a FlashSell.
     * @param {flashSellDeleteArgs} args - Arguments to delete one FlashSell.
     * @example
     * // Delete one FlashSell
     * const FlashSell = await prisma.flashSell.delete({
     *   where: {
     *     // ... filter to delete one FlashSell
     *   }
     * })
     * 
    **/
    delete<T extends flashSellDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, flashSellDeleteArgs<ExtArgs>>
    ): Prisma__flashSellClient<$Types.GetResult<flashSellPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one FlashSell.
     * @param {flashSellUpdateArgs} args - Arguments to update one FlashSell.
     * @example
     * // Update one FlashSell
     * const flashSell = await prisma.flashSell.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends flashSellUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, flashSellUpdateArgs<ExtArgs>>
    ): Prisma__flashSellClient<$Types.GetResult<flashSellPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more FlashSells.
     * @param {flashSellDeleteManyArgs} args - Arguments to filter FlashSells to delete.
     * @example
     * // Delete a few FlashSells
     * const { count } = await prisma.flashSell.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends flashSellDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, flashSellDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FlashSells.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {flashSellUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FlashSells
     * const flashSell = await prisma.flashSell.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends flashSellUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, flashSellUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FlashSell.
     * @param {flashSellUpsertArgs} args - Arguments to update or create a FlashSell.
     * @example
     * // Update or create a FlashSell
     * const flashSell = await prisma.flashSell.upsert({
     *   create: {
     *     // ... data to create a FlashSell
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FlashSell we want to update
     *   }
     * })
    **/
    upsert<T extends flashSellUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, flashSellUpsertArgs<ExtArgs>>
    ): Prisma__flashSellClient<$Types.GetResult<flashSellPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of FlashSells.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {flashSellCountArgs} args - Arguments to filter FlashSells to count.
     * @example
     * // Count the number of FlashSells
     * const count = await prisma.flashSell.count({
     *   where: {
     *     // ... the filter for the FlashSells we want to count
     *   }
     * })
    **/
    count<T extends flashSellCountArgs>(
      args?: Subset<T, flashSellCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FlashSellCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FlashSell.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlashSellAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FlashSellAggregateArgs>(args: Subset<T, FlashSellAggregateArgs>): Prisma.PrismaPromise<GetFlashSellAggregateType<T>>

    /**
     * Group by FlashSell.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {flashSellGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends flashSellGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: flashSellGroupByArgs['orderBy'] }
        : { orderBy?: flashSellGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, flashSellGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFlashSellGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the flashSell model
   */
  readonly fields: flashSellFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for flashSell.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__flashSellClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    product<T extends flashSell$productArgs<ExtArgs> = {}>(args?: Subset<T, flashSell$productArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<flashSellProductPayload<ExtArgs>, T, 'findMany'>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the flashSell model
   */ 
  interface flashSellFieldRefs {
    readonly id: FieldRef<"flashSell", 'String'>
    readonly startAt: FieldRef<"flashSell", 'DateTime'>
    readonly endAt: FieldRef<"flashSell", 'DateTime'>
    readonly banner: FieldRef<"flashSell", 'String'>
    readonly title: FieldRef<"flashSell", 'String'>
  }
    

  // Custom InputTypes

  /**
   * flashSell findUnique
   */
  export type flashSellFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the flashSell
     */
    select?: flashSellSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: flashSellInclude<ExtArgs> | null
    /**
     * Filter, which flashSell to fetch.
     */
    where: flashSellWhereUniqueInput
  }


  /**
   * flashSell findUniqueOrThrow
   */
  export type flashSellFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the flashSell
     */
    select?: flashSellSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: flashSellInclude<ExtArgs> | null
    /**
     * Filter, which flashSell to fetch.
     */
    where: flashSellWhereUniqueInput
  }


  /**
   * flashSell findFirst
   */
  export type flashSellFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the flashSell
     */
    select?: flashSellSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: flashSellInclude<ExtArgs> | null
    /**
     * Filter, which flashSell to fetch.
     */
    where?: flashSellWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of flashSells to fetch.
     */
    orderBy?: flashSellOrderByWithRelationInput | flashSellOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for flashSells.
     */
    cursor?: flashSellWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` flashSells from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` flashSells.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of flashSells.
     */
    distinct?: FlashSellScalarFieldEnum | FlashSellScalarFieldEnum[]
  }


  /**
   * flashSell findFirstOrThrow
   */
  export type flashSellFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the flashSell
     */
    select?: flashSellSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: flashSellInclude<ExtArgs> | null
    /**
     * Filter, which flashSell to fetch.
     */
    where?: flashSellWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of flashSells to fetch.
     */
    orderBy?: flashSellOrderByWithRelationInput | flashSellOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for flashSells.
     */
    cursor?: flashSellWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` flashSells from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` flashSells.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of flashSells.
     */
    distinct?: FlashSellScalarFieldEnum | FlashSellScalarFieldEnum[]
  }


  /**
   * flashSell findMany
   */
  export type flashSellFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the flashSell
     */
    select?: flashSellSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: flashSellInclude<ExtArgs> | null
    /**
     * Filter, which flashSells to fetch.
     */
    where?: flashSellWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of flashSells to fetch.
     */
    orderBy?: flashSellOrderByWithRelationInput | flashSellOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing flashSells.
     */
    cursor?: flashSellWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` flashSells from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` flashSells.
     */
    skip?: number
    distinct?: FlashSellScalarFieldEnum | FlashSellScalarFieldEnum[]
  }


  /**
   * flashSell create
   */
  export type flashSellCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the flashSell
     */
    select?: flashSellSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: flashSellInclude<ExtArgs> | null
    /**
     * The data needed to create a flashSell.
     */
    data: XOR<flashSellCreateInput, flashSellUncheckedCreateInput>
  }


  /**
   * flashSell createMany
   */
  export type flashSellCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many flashSells.
     */
    data: flashSellCreateManyInput | flashSellCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * flashSell update
   */
  export type flashSellUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the flashSell
     */
    select?: flashSellSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: flashSellInclude<ExtArgs> | null
    /**
     * The data needed to update a flashSell.
     */
    data: XOR<flashSellUpdateInput, flashSellUncheckedUpdateInput>
    /**
     * Choose, which flashSell to update.
     */
    where: flashSellWhereUniqueInput
  }


  /**
   * flashSell updateMany
   */
  export type flashSellUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update flashSells.
     */
    data: XOR<flashSellUpdateManyMutationInput, flashSellUncheckedUpdateManyInput>
    /**
     * Filter which flashSells to update
     */
    where?: flashSellWhereInput
  }


  /**
   * flashSell upsert
   */
  export type flashSellUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the flashSell
     */
    select?: flashSellSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: flashSellInclude<ExtArgs> | null
    /**
     * The filter to search for the flashSell to update in case it exists.
     */
    where: flashSellWhereUniqueInput
    /**
     * In case the flashSell found by the `where` argument doesn't exist, create a new flashSell with this data.
     */
    create: XOR<flashSellCreateInput, flashSellUncheckedCreateInput>
    /**
     * In case the flashSell was found with the provided `where` argument, update it with this data.
     */
    update: XOR<flashSellUpdateInput, flashSellUncheckedUpdateInput>
  }


  /**
   * flashSell delete
   */
  export type flashSellDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the flashSell
     */
    select?: flashSellSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: flashSellInclude<ExtArgs> | null
    /**
     * Filter which flashSell to delete.
     */
    where: flashSellWhereUniqueInput
  }


  /**
   * flashSell deleteMany
   */
  export type flashSellDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which flashSells to delete
     */
    where?: flashSellWhereInput
  }


  /**
   * flashSell.product
   */
  export type flashSell$productArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the flashSellProduct
     */
    select?: flashSellProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: flashSellProductInclude<ExtArgs> | null
    where?: flashSellProductWhereInput
    orderBy?: flashSellProductOrderByWithRelationInput | flashSellProductOrderByWithRelationInput[]
    cursor?: flashSellProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FlashSellProductScalarFieldEnum | FlashSellProductScalarFieldEnum[]
  }


  /**
   * flashSell without action
   */
  export type flashSellArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the flashSell
     */
    select?: flashSellSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: flashSellInclude<ExtArgs> | null
  }



  /**
   * Model flashSellProduct
   */


  export type AggregateFlashSellProduct = {
    _count: FlashSellProductCountAggregateOutputType | null
    _avg: FlashSellProductAvgAggregateOutputType | null
    _sum: FlashSellProductSumAggregateOutputType | null
    _min: FlashSellProductMinAggregateOutputType | null
    _max: FlashSellProductMaxAggregateOutputType | null
  }

  export type FlashSellProductAvgAggregateOutputType = {
    offer: number | null
    minSell: number | null
    quantity: number | null
  }

  export type FlashSellProductSumAggregateOutputType = {
    offer: number | null
    minSell: number | null
    quantity: number | null
  }

  export type FlashSellProductMinAggregateOutputType = {
    id: string | null
    offer: number | null
    percentage: boolean | null
    minSell: number | null
    quantity: number | null
    deliveryFree: boolean | null
    flashSellId: string | null
    productId: string | null
    userId: string | null
    createdAt: Date | null
  }

  export type FlashSellProductMaxAggregateOutputType = {
    id: string | null
    offer: number | null
    percentage: boolean | null
    minSell: number | null
    quantity: number | null
    deliveryFree: boolean | null
    flashSellId: string | null
    productId: string | null
    userId: string | null
    createdAt: Date | null
  }

  export type FlashSellProductCountAggregateOutputType = {
    id: number
    offer: number
    percentage: number
    minSell: number
    quantity: number
    deliveryFree: number
    flashSellId: number
    productId: number
    userId: number
    createdAt: number
    _all: number
  }


  export type FlashSellProductAvgAggregateInputType = {
    offer?: true
    minSell?: true
    quantity?: true
  }

  export type FlashSellProductSumAggregateInputType = {
    offer?: true
    minSell?: true
    quantity?: true
  }

  export type FlashSellProductMinAggregateInputType = {
    id?: true
    offer?: true
    percentage?: true
    minSell?: true
    quantity?: true
    deliveryFree?: true
    flashSellId?: true
    productId?: true
    userId?: true
    createdAt?: true
  }

  export type FlashSellProductMaxAggregateInputType = {
    id?: true
    offer?: true
    percentage?: true
    minSell?: true
    quantity?: true
    deliveryFree?: true
    flashSellId?: true
    productId?: true
    userId?: true
    createdAt?: true
  }

  export type FlashSellProductCountAggregateInputType = {
    id?: true
    offer?: true
    percentage?: true
    minSell?: true
    quantity?: true
    deliveryFree?: true
    flashSellId?: true
    productId?: true
    userId?: true
    createdAt?: true
    _all?: true
  }

  export type FlashSellProductAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which flashSellProduct to aggregate.
     */
    where?: flashSellProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of flashSellProducts to fetch.
     */
    orderBy?: flashSellProductOrderByWithRelationInput | flashSellProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: flashSellProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` flashSellProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` flashSellProducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned flashSellProducts
    **/
    _count?: true | FlashSellProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FlashSellProductAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FlashSellProductSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FlashSellProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FlashSellProductMaxAggregateInputType
  }

  export type GetFlashSellProductAggregateType<T extends FlashSellProductAggregateArgs> = {
        [P in keyof T & keyof AggregateFlashSellProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFlashSellProduct[P]>
      : GetScalarType<T[P], AggregateFlashSellProduct[P]>
  }




  export type flashSellProductGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: flashSellProductWhereInput
    orderBy?: flashSellProductOrderByWithAggregationInput | flashSellProductOrderByWithAggregationInput[]
    by: FlashSellProductScalarFieldEnum[] | FlashSellProductScalarFieldEnum
    having?: flashSellProductScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FlashSellProductCountAggregateInputType | true
    _avg?: FlashSellProductAvgAggregateInputType
    _sum?: FlashSellProductSumAggregateInputType
    _min?: FlashSellProductMinAggregateInputType
    _max?: FlashSellProductMaxAggregateInputType
  }


  export type FlashSellProductGroupByOutputType = {
    id: string
    offer: number
    percentage: boolean
    minSell: number
    quantity: number
    deliveryFree: boolean
    flashSellId: string
    productId: string
    userId: string
    createdAt: Date
    _count: FlashSellProductCountAggregateOutputType | null
    _avg: FlashSellProductAvgAggregateOutputType | null
    _sum: FlashSellProductSumAggregateOutputType | null
    _min: FlashSellProductMinAggregateOutputType | null
    _max: FlashSellProductMaxAggregateOutputType | null
  }

  type GetFlashSellProductGroupByPayload<T extends flashSellProductGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FlashSellProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FlashSellProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FlashSellProductGroupByOutputType[P]>
            : GetScalarType<T[P], FlashSellProductGroupByOutputType[P]>
        }
      >
    >


  export type flashSellProductSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    offer?: boolean
    percentage?: boolean
    minSell?: boolean
    quantity?: boolean
    deliveryFree?: boolean
    flashSellId?: boolean
    productId?: boolean
    userId?: boolean
    createdAt?: boolean
    flashSell?: boolean | flashSellProduct$flashSellArgs<ExtArgs>
    product?: boolean | flashSellProduct$productArgs<ExtArgs>
    user?: boolean | flashSellProduct$userArgs<ExtArgs>
  }, ExtArgs["result"]["flashSellProduct"]>

  export type flashSellProductSelectScalar = {
    id?: boolean
    offer?: boolean
    percentage?: boolean
    minSell?: boolean
    quantity?: boolean
    deliveryFree?: boolean
    flashSellId?: boolean
    productId?: boolean
    userId?: boolean
    createdAt?: boolean
  }

  export type flashSellProductInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    flashSell?: boolean | flashSellProduct$flashSellArgs<ExtArgs>
    product?: boolean | flashSellProduct$productArgs<ExtArgs>
    user?: boolean | flashSellProduct$userArgs<ExtArgs>
  }


  type flashSellProductGetPayload<S extends boolean | null | undefined | flashSellProductArgs> = $Types.GetResult<flashSellProductPayload, S>

  type flashSellProductCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<flashSellProductFindManyArgs, 'select' | 'include'> & {
      select?: FlashSellProductCountAggregateInputType | true
    }

  export interface flashSellProductDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['flashSellProduct'], meta: { name: 'flashSellProduct' } }
    /**
     * Find zero or one FlashSellProduct that matches the filter.
     * @param {flashSellProductFindUniqueArgs} args - Arguments to find a FlashSellProduct
     * @example
     * // Get one FlashSellProduct
     * const flashSellProduct = await prisma.flashSellProduct.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends flashSellProductFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, flashSellProductFindUniqueArgs<ExtArgs>>
    ): Prisma__flashSellProductClient<$Types.GetResult<flashSellProductPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one FlashSellProduct that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {flashSellProductFindUniqueOrThrowArgs} args - Arguments to find a FlashSellProduct
     * @example
     * // Get one FlashSellProduct
     * const flashSellProduct = await prisma.flashSellProduct.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends flashSellProductFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, flashSellProductFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__flashSellProductClient<$Types.GetResult<flashSellProductPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first FlashSellProduct that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {flashSellProductFindFirstArgs} args - Arguments to find a FlashSellProduct
     * @example
     * // Get one FlashSellProduct
     * const flashSellProduct = await prisma.flashSellProduct.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends flashSellProductFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, flashSellProductFindFirstArgs<ExtArgs>>
    ): Prisma__flashSellProductClient<$Types.GetResult<flashSellProductPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first FlashSellProduct that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {flashSellProductFindFirstOrThrowArgs} args - Arguments to find a FlashSellProduct
     * @example
     * // Get one FlashSellProduct
     * const flashSellProduct = await prisma.flashSellProduct.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends flashSellProductFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, flashSellProductFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__flashSellProductClient<$Types.GetResult<flashSellProductPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more FlashSellProducts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {flashSellProductFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FlashSellProducts
     * const flashSellProducts = await prisma.flashSellProduct.findMany()
     * 
     * // Get first 10 FlashSellProducts
     * const flashSellProducts = await prisma.flashSellProduct.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const flashSellProductWithIdOnly = await prisma.flashSellProduct.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends flashSellProductFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, flashSellProductFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<flashSellProductPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a FlashSellProduct.
     * @param {flashSellProductCreateArgs} args - Arguments to create a FlashSellProduct.
     * @example
     * // Create one FlashSellProduct
     * const FlashSellProduct = await prisma.flashSellProduct.create({
     *   data: {
     *     // ... data to create a FlashSellProduct
     *   }
     * })
     * 
    **/
    create<T extends flashSellProductCreateArgs<ExtArgs>>(
      args: SelectSubset<T, flashSellProductCreateArgs<ExtArgs>>
    ): Prisma__flashSellProductClient<$Types.GetResult<flashSellProductPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many FlashSellProducts.
     *     @param {flashSellProductCreateManyArgs} args - Arguments to create many FlashSellProducts.
     *     @example
     *     // Create many FlashSellProducts
     *     const flashSellProduct = await prisma.flashSellProduct.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends flashSellProductCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, flashSellProductCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a FlashSellProduct.
     * @param {flashSellProductDeleteArgs} args - Arguments to delete one FlashSellProduct.
     * @example
     * // Delete one FlashSellProduct
     * const FlashSellProduct = await prisma.flashSellProduct.delete({
     *   where: {
     *     // ... filter to delete one FlashSellProduct
     *   }
     * })
     * 
    **/
    delete<T extends flashSellProductDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, flashSellProductDeleteArgs<ExtArgs>>
    ): Prisma__flashSellProductClient<$Types.GetResult<flashSellProductPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one FlashSellProduct.
     * @param {flashSellProductUpdateArgs} args - Arguments to update one FlashSellProduct.
     * @example
     * // Update one FlashSellProduct
     * const flashSellProduct = await prisma.flashSellProduct.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends flashSellProductUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, flashSellProductUpdateArgs<ExtArgs>>
    ): Prisma__flashSellProductClient<$Types.GetResult<flashSellProductPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more FlashSellProducts.
     * @param {flashSellProductDeleteManyArgs} args - Arguments to filter FlashSellProducts to delete.
     * @example
     * // Delete a few FlashSellProducts
     * const { count } = await prisma.flashSellProduct.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends flashSellProductDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, flashSellProductDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FlashSellProducts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {flashSellProductUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FlashSellProducts
     * const flashSellProduct = await prisma.flashSellProduct.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends flashSellProductUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, flashSellProductUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FlashSellProduct.
     * @param {flashSellProductUpsertArgs} args - Arguments to update or create a FlashSellProduct.
     * @example
     * // Update or create a FlashSellProduct
     * const flashSellProduct = await prisma.flashSellProduct.upsert({
     *   create: {
     *     // ... data to create a FlashSellProduct
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FlashSellProduct we want to update
     *   }
     * })
    **/
    upsert<T extends flashSellProductUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, flashSellProductUpsertArgs<ExtArgs>>
    ): Prisma__flashSellProductClient<$Types.GetResult<flashSellProductPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of FlashSellProducts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {flashSellProductCountArgs} args - Arguments to filter FlashSellProducts to count.
     * @example
     * // Count the number of FlashSellProducts
     * const count = await prisma.flashSellProduct.count({
     *   where: {
     *     // ... the filter for the FlashSellProducts we want to count
     *   }
     * })
    **/
    count<T extends flashSellProductCountArgs>(
      args?: Subset<T, flashSellProductCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FlashSellProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FlashSellProduct.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlashSellProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FlashSellProductAggregateArgs>(args: Subset<T, FlashSellProductAggregateArgs>): Prisma.PrismaPromise<GetFlashSellProductAggregateType<T>>

    /**
     * Group by FlashSellProduct.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {flashSellProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends flashSellProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: flashSellProductGroupByArgs['orderBy'] }
        : { orderBy?: flashSellProductGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, flashSellProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFlashSellProductGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the flashSellProduct model
   */
  readonly fields: flashSellProductFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for flashSellProduct.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__flashSellProductClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    flashSell<T extends flashSellProduct$flashSellArgs<ExtArgs> = {}>(args?: Subset<T, flashSellProduct$flashSellArgs<ExtArgs>>): Prisma__flashSellClient<$Types.GetResult<flashSellPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    product<T extends flashSellProduct$productArgs<ExtArgs> = {}>(args?: Subset<T, flashSellProduct$productArgs<ExtArgs>>): Prisma__productsClient<$Types.GetResult<productsPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    user<T extends flashSellProduct$userArgs<ExtArgs> = {}>(args?: Subset<T, flashSellProduct$userArgs<ExtArgs>>): Prisma__usersClient<$Types.GetResult<usersPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the flashSellProduct model
   */ 
  interface flashSellProductFieldRefs {
    readonly id: FieldRef<"flashSellProduct", 'String'>
    readonly offer: FieldRef<"flashSellProduct", 'Int'>
    readonly percentage: FieldRef<"flashSellProduct", 'Boolean'>
    readonly minSell: FieldRef<"flashSellProduct", 'Int'>
    readonly quantity: FieldRef<"flashSellProduct", 'Int'>
    readonly deliveryFree: FieldRef<"flashSellProduct", 'Boolean'>
    readonly flashSellId: FieldRef<"flashSellProduct", 'String'>
    readonly productId: FieldRef<"flashSellProduct", 'String'>
    readonly userId: FieldRef<"flashSellProduct", 'String'>
    readonly createdAt: FieldRef<"flashSellProduct", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * flashSellProduct findUnique
   */
  export type flashSellProductFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the flashSellProduct
     */
    select?: flashSellProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: flashSellProductInclude<ExtArgs> | null
    /**
     * Filter, which flashSellProduct to fetch.
     */
    where: flashSellProductWhereUniqueInput
  }


  /**
   * flashSellProduct findUniqueOrThrow
   */
  export type flashSellProductFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the flashSellProduct
     */
    select?: flashSellProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: flashSellProductInclude<ExtArgs> | null
    /**
     * Filter, which flashSellProduct to fetch.
     */
    where: flashSellProductWhereUniqueInput
  }


  /**
   * flashSellProduct findFirst
   */
  export type flashSellProductFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the flashSellProduct
     */
    select?: flashSellProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: flashSellProductInclude<ExtArgs> | null
    /**
     * Filter, which flashSellProduct to fetch.
     */
    where?: flashSellProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of flashSellProducts to fetch.
     */
    orderBy?: flashSellProductOrderByWithRelationInput | flashSellProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for flashSellProducts.
     */
    cursor?: flashSellProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` flashSellProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` flashSellProducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of flashSellProducts.
     */
    distinct?: FlashSellProductScalarFieldEnum | FlashSellProductScalarFieldEnum[]
  }


  /**
   * flashSellProduct findFirstOrThrow
   */
  export type flashSellProductFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the flashSellProduct
     */
    select?: flashSellProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: flashSellProductInclude<ExtArgs> | null
    /**
     * Filter, which flashSellProduct to fetch.
     */
    where?: flashSellProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of flashSellProducts to fetch.
     */
    orderBy?: flashSellProductOrderByWithRelationInput | flashSellProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for flashSellProducts.
     */
    cursor?: flashSellProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` flashSellProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` flashSellProducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of flashSellProducts.
     */
    distinct?: FlashSellProductScalarFieldEnum | FlashSellProductScalarFieldEnum[]
  }


  /**
   * flashSellProduct findMany
   */
  export type flashSellProductFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the flashSellProduct
     */
    select?: flashSellProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: flashSellProductInclude<ExtArgs> | null
    /**
     * Filter, which flashSellProducts to fetch.
     */
    where?: flashSellProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of flashSellProducts to fetch.
     */
    orderBy?: flashSellProductOrderByWithRelationInput | flashSellProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing flashSellProducts.
     */
    cursor?: flashSellProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` flashSellProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` flashSellProducts.
     */
    skip?: number
    distinct?: FlashSellProductScalarFieldEnum | FlashSellProductScalarFieldEnum[]
  }


  /**
   * flashSellProduct create
   */
  export type flashSellProductCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the flashSellProduct
     */
    select?: flashSellProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: flashSellProductInclude<ExtArgs> | null
    /**
     * The data needed to create a flashSellProduct.
     */
    data: XOR<flashSellProductCreateInput, flashSellProductUncheckedCreateInput>
  }


  /**
   * flashSellProduct createMany
   */
  export type flashSellProductCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many flashSellProducts.
     */
    data: flashSellProductCreateManyInput | flashSellProductCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * flashSellProduct update
   */
  export type flashSellProductUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the flashSellProduct
     */
    select?: flashSellProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: flashSellProductInclude<ExtArgs> | null
    /**
     * The data needed to update a flashSellProduct.
     */
    data: XOR<flashSellProductUpdateInput, flashSellProductUncheckedUpdateInput>
    /**
     * Choose, which flashSellProduct to update.
     */
    where: flashSellProductWhereUniqueInput
  }


  /**
   * flashSellProduct updateMany
   */
  export type flashSellProductUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update flashSellProducts.
     */
    data: XOR<flashSellProductUpdateManyMutationInput, flashSellProductUncheckedUpdateManyInput>
    /**
     * Filter which flashSellProducts to update
     */
    where?: flashSellProductWhereInput
  }


  /**
   * flashSellProduct upsert
   */
  export type flashSellProductUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the flashSellProduct
     */
    select?: flashSellProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: flashSellProductInclude<ExtArgs> | null
    /**
     * The filter to search for the flashSellProduct to update in case it exists.
     */
    where: flashSellProductWhereUniqueInput
    /**
     * In case the flashSellProduct found by the `where` argument doesn't exist, create a new flashSellProduct with this data.
     */
    create: XOR<flashSellProductCreateInput, flashSellProductUncheckedCreateInput>
    /**
     * In case the flashSellProduct was found with the provided `where` argument, update it with this data.
     */
    update: XOR<flashSellProductUpdateInput, flashSellProductUncheckedUpdateInput>
  }


  /**
   * flashSellProduct delete
   */
  export type flashSellProductDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the flashSellProduct
     */
    select?: flashSellProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: flashSellProductInclude<ExtArgs> | null
    /**
     * Filter which flashSellProduct to delete.
     */
    where: flashSellProductWhereUniqueInput
  }


  /**
   * flashSellProduct deleteMany
   */
  export type flashSellProductDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which flashSellProducts to delete
     */
    where?: flashSellProductWhereInput
  }


  /**
   * flashSellProduct.flashSell
   */
  export type flashSellProduct$flashSellArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the flashSell
     */
    select?: flashSellSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: flashSellInclude<ExtArgs> | null
    where?: flashSellWhereInput
  }


  /**
   * flashSellProduct.product
   */
  export type flashSellProduct$productArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productsInclude<ExtArgs> | null
    where?: productsWhereInput
  }


  /**
   * flashSellProduct.user
   */
  export type flashSellProduct$userArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    where?: usersWhereInput
  }


  /**
   * flashSellProduct without action
   */
  export type flashSellProductArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the flashSellProduct
     */
    select?: flashSellProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: flashSellProductInclude<ExtArgs> | null
  }



  /**
   * Model contacts
   */


  export type AggregateContacts = {
    _count: ContactsCountAggregateOutputType | null
    _min: ContactsMinAggregateOutputType | null
    _max: ContactsMaxAggregateOutputType | null
  }

  export type ContactsMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    name: string | null
    phone: string | null
    email: string | null
    date: Date | null
  }

  export type ContactsMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    name: string | null
    phone: string | null
    email: string | null
    date: Date | null
  }

  export type ContactsCountAggregateOutputType = {
    id: number
    title: number
    description: number
    name: number
    phone: number
    email: number
    date: number
    _all: number
  }


  export type ContactsMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    name?: true
    phone?: true
    email?: true
    date?: true
  }

  export type ContactsMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    name?: true
    phone?: true
    email?: true
    date?: true
  }

  export type ContactsCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    name?: true
    phone?: true
    email?: true
    date?: true
    _all?: true
  }

  export type ContactsAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which contacts to aggregate.
     */
    where?: contactsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of contacts to fetch.
     */
    orderBy?: contactsOrderByWithRelationInput | contactsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: contactsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` contacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` contacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned contacts
    **/
    _count?: true | ContactsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContactsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContactsMaxAggregateInputType
  }

  export type GetContactsAggregateType<T extends ContactsAggregateArgs> = {
        [P in keyof T & keyof AggregateContacts]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContacts[P]>
      : GetScalarType<T[P], AggregateContacts[P]>
  }




  export type contactsGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: contactsWhereInput
    orderBy?: contactsOrderByWithAggregationInput | contactsOrderByWithAggregationInput[]
    by: ContactsScalarFieldEnum[] | ContactsScalarFieldEnum
    having?: contactsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContactsCountAggregateInputType | true
    _min?: ContactsMinAggregateInputType
    _max?: ContactsMaxAggregateInputType
  }


  export type ContactsGroupByOutputType = {
    id: string
    title: string
    description: string
    name: string
    phone: string
    email: string
    date: Date
    _count: ContactsCountAggregateOutputType | null
    _min: ContactsMinAggregateOutputType | null
    _max: ContactsMaxAggregateOutputType | null
  }

  type GetContactsGroupByPayload<T extends contactsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContactsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContactsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContactsGroupByOutputType[P]>
            : GetScalarType<T[P], ContactsGroupByOutputType[P]>
        }
      >
    >


  export type contactsSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    name?: boolean
    phone?: boolean
    email?: boolean
    date?: boolean
  }, ExtArgs["result"]["contacts"]>

  export type contactsSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    name?: boolean
    phone?: boolean
    email?: boolean
    date?: boolean
  }


  type contactsGetPayload<S extends boolean | null | undefined | contactsArgs> = $Types.GetResult<contactsPayload, S>

  type contactsCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<contactsFindManyArgs, 'select' | 'include'> & {
      select?: ContactsCountAggregateInputType | true
    }

  export interface contactsDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['contacts'], meta: { name: 'contacts' } }
    /**
     * Find zero or one Contacts that matches the filter.
     * @param {contactsFindUniqueArgs} args - Arguments to find a Contacts
     * @example
     * // Get one Contacts
     * const contacts = await prisma.contacts.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends contactsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, contactsFindUniqueArgs<ExtArgs>>
    ): Prisma__contactsClient<$Types.GetResult<contactsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Contacts that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {contactsFindUniqueOrThrowArgs} args - Arguments to find a Contacts
     * @example
     * // Get one Contacts
     * const contacts = await prisma.contacts.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends contactsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, contactsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__contactsClient<$Types.GetResult<contactsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Contacts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {contactsFindFirstArgs} args - Arguments to find a Contacts
     * @example
     * // Get one Contacts
     * const contacts = await prisma.contacts.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends contactsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, contactsFindFirstArgs<ExtArgs>>
    ): Prisma__contactsClient<$Types.GetResult<contactsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Contacts that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {contactsFindFirstOrThrowArgs} args - Arguments to find a Contacts
     * @example
     * // Get one Contacts
     * const contacts = await prisma.contacts.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends contactsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, contactsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__contactsClient<$Types.GetResult<contactsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Contacts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {contactsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Contacts
     * const contacts = await prisma.contacts.findMany()
     * 
     * // Get first 10 Contacts
     * const contacts = await prisma.contacts.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contactsWithIdOnly = await prisma.contacts.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends contactsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, contactsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<contactsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Contacts.
     * @param {contactsCreateArgs} args - Arguments to create a Contacts.
     * @example
     * // Create one Contacts
     * const Contacts = await prisma.contacts.create({
     *   data: {
     *     // ... data to create a Contacts
     *   }
     * })
     * 
    **/
    create<T extends contactsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, contactsCreateArgs<ExtArgs>>
    ): Prisma__contactsClient<$Types.GetResult<contactsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Contacts.
     *     @param {contactsCreateManyArgs} args - Arguments to create many Contacts.
     *     @example
     *     // Create many Contacts
     *     const contacts = await prisma.contacts.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends contactsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, contactsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Contacts.
     * @param {contactsDeleteArgs} args - Arguments to delete one Contacts.
     * @example
     * // Delete one Contacts
     * const Contacts = await prisma.contacts.delete({
     *   where: {
     *     // ... filter to delete one Contacts
     *   }
     * })
     * 
    **/
    delete<T extends contactsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, contactsDeleteArgs<ExtArgs>>
    ): Prisma__contactsClient<$Types.GetResult<contactsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Contacts.
     * @param {contactsUpdateArgs} args - Arguments to update one Contacts.
     * @example
     * // Update one Contacts
     * const contacts = await prisma.contacts.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends contactsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, contactsUpdateArgs<ExtArgs>>
    ): Prisma__contactsClient<$Types.GetResult<contactsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Contacts.
     * @param {contactsDeleteManyArgs} args - Arguments to filter Contacts to delete.
     * @example
     * // Delete a few Contacts
     * const { count } = await prisma.contacts.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends contactsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, contactsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Contacts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {contactsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Contacts
     * const contacts = await prisma.contacts.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends contactsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, contactsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Contacts.
     * @param {contactsUpsertArgs} args - Arguments to update or create a Contacts.
     * @example
     * // Update or create a Contacts
     * const contacts = await prisma.contacts.upsert({
     *   create: {
     *     // ... data to create a Contacts
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Contacts we want to update
     *   }
     * })
    **/
    upsert<T extends contactsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, contactsUpsertArgs<ExtArgs>>
    ): Prisma__contactsClient<$Types.GetResult<contactsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Contacts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {contactsCountArgs} args - Arguments to filter Contacts to count.
     * @example
     * // Count the number of Contacts
     * const count = await prisma.contacts.count({
     *   where: {
     *     // ... the filter for the Contacts we want to count
     *   }
     * })
    **/
    count<T extends contactsCountArgs>(
      args?: Subset<T, contactsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContactsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Contacts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContactsAggregateArgs>(args: Subset<T, ContactsAggregateArgs>): Prisma.PrismaPromise<GetContactsAggregateType<T>>

    /**
     * Group by Contacts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {contactsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends contactsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: contactsGroupByArgs['orderBy'] }
        : { orderBy?: contactsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, contactsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContactsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the contacts model
   */
  readonly fields: contactsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for contacts.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__contactsClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the contacts model
   */ 
  interface contactsFieldRefs {
    readonly id: FieldRef<"contacts", 'String'>
    readonly title: FieldRef<"contacts", 'String'>
    readonly description: FieldRef<"contacts", 'String'>
    readonly name: FieldRef<"contacts", 'String'>
    readonly phone: FieldRef<"contacts", 'String'>
    readonly email: FieldRef<"contacts", 'String'>
    readonly date: FieldRef<"contacts", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * contacts findUnique
   */
  export type contactsFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contacts
     */
    select?: contactsSelect<ExtArgs> | null
    /**
     * Filter, which contacts to fetch.
     */
    where: contactsWhereUniqueInput
  }


  /**
   * contacts findUniqueOrThrow
   */
  export type contactsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contacts
     */
    select?: contactsSelect<ExtArgs> | null
    /**
     * Filter, which contacts to fetch.
     */
    where: contactsWhereUniqueInput
  }


  /**
   * contacts findFirst
   */
  export type contactsFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contacts
     */
    select?: contactsSelect<ExtArgs> | null
    /**
     * Filter, which contacts to fetch.
     */
    where?: contactsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of contacts to fetch.
     */
    orderBy?: contactsOrderByWithRelationInput | contactsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for contacts.
     */
    cursor?: contactsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` contacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` contacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of contacts.
     */
    distinct?: ContactsScalarFieldEnum | ContactsScalarFieldEnum[]
  }


  /**
   * contacts findFirstOrThrow
   */
  export type contactsFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contacts
     */
    select?: contactsSelect<ExtArgs> | null
    /**
     * Filter, which contacts to fetch.
     */
    where?: contactsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of contacts to fetch.
     */
    orderBy?: contactsOrderByWithRelationInput | contactsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for contacts.
     */
    cursor?: contactsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` contacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` contacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of contacts.
     */
    distinct?: ContactsScalarFieldEnum | ContactsScalarFieldEnum[]
  }


  /**
   * contacts findMany
   */
  export type contactsFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contacts
     */
    select?: contactsSelect<ExtArgs> | null
    /**
     * Filter, which contacts to fetch.
     */
    where?: contactsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of contacts to fetch.
     */
    orderBy?: contactsOrderByWithRelationInput | contactsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing contacts.
     */
    cursor?: contactsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` contacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` contacts.
     */
    skip?: number
    distinct?: ContactsScalarFieldEnum | ContactsScalarFieldEnum[]
  }


  /**
   * contacts create
   */
  export type contactsCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contacts
     */
    select?: contactsSelect<ExtArgs> | null
    /**
     * The data needed to create a contacts.
     */
    data: XOR<contactsCreateInput, contactsUncheckedCreateInput>
  }


  /**
   * contacts createMany
   */
  export type contactsCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many contacts.
     */
    data: contactsCreateManyInput | contactsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * contacts update
   */
  export type contactsUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contacts
     */
    select?: contactsSelect<ExtArgs> | null
    /**
     * The data needed to update a contacts.
     */
    data: XOR<contactsUpdateInput, contactsUncheckedUpdateInput>
    /**
     * Choose, which contacts to update.
     */
    where: contactsWhereUniqueInput
  }


  /**
   * contacts updateMany
   */
  export type contactsUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update contacts.
     */
    data: XOR<contactsUpdateManyMutationInput, contactsUncheckedUpdateManyInput>
    /**
     * Filter which contacts to update
     */
    where?: contactsWhereInput
  }


  /**
   * contacts upsert
   */
  export type contactsUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contacts
     */
    select?: contactsSelect<ExtArgs> | null
    /**
     * The filter to search for the contacts to update in case it exists.
     */
    where: contactsWhereUniqueInput
    /**
     * In case the contacts found by the `where` argument doesn't exist, create a new contacts with this data.
     */
    create: XOR<contactsCreateInput, contactsUncheckedCreateInput>
    /**
     * In case the contacts was found with the provided `where` argument, update it with this data.
     */
    update: XOR<contactsUpdateInput, contactsUncheckedUpdateInput>
  }


  /**
   * contacts delete
   */
  export type contactsDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contacts
     */
    select?: contactsSelect<ExtArgs> | null
    /**
     * Filter which contacts to delete.
     */
    where: contactsWhereUniqueInput
  }


  /**
   * contacts deleteMany
   */
  export type contactsDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which contacts to delete
     */
    where?: contactsWhereInput
  }


  /**
   * contacts without action
   */
  export type contactsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contacts
     */
    select?: contactsSelect<ExtArgs> | null
  }



  /**
   * Model conversations
   */


  export type AggregateConversations = {
    _count: ConversationsCountAggregateOutputType | null
    _min: ConversationsMinAggregateOutputType | null
    _max: ConversationsMaxAggregateOutputType | null
  }

  export type ConversationsMinAggregateOutputType = {
    id: string | null
    senderId: string | null
    receiverId: string | null
    date: Date | null
  }

  export type ConversationsMaxAggregateOutputType = {
    id: string | null
    senderId: string | null
    receiverId: string | null
    date: Date | null
  }

  export type ConversationsCountAggregateOutputType = {
    id: number
    senderId: number
    receiverId: number
    date: number
    _all: number
  }


  export type ConversationsMinAggregateInputType = {
    id?: true
    senderId?: true
    receiverId?: true
    date?: true
  }

  export type ConversationsMaxAggregateInputType = {
    id?: true
    senderId?: true
    receiverId?: true
    date?: true
  }

  export type ConversationsCountAggregateInputType = {
    id?: true
    senderId?: true
    receiverId?: true
    date?: true
    _all?: true
  }

  export type ConversationsAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which conversations to aggregate.
     */
    where?: conversationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of conversations to fetch.
     */
    orderBy?: conversationsOrderByWithRelationInput | conversationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: conversationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` conversations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` conversations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned conversations
    **/
    _count?: true | ConversationsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ConversationsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ConversationsMaxAggregateInputType
  }

  export type GetConversationsAggregateType<T extends ConversationsAggregateArgs> = {
        [P in keyof T & keyof AggregateConversations]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateConversations[P]>
      : GetScalarType<T[P], AggregateConversations[P]>
  }




  export type conversationsGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: conversationsWhereInput
    orderBy?: conversationsOrderByWithAggregationInput | conversationsOrderByWithAggregationInput[]
    by: ConversationsScalarFieldEnum[] | ConversationsScalarFieldEnum
    having?: conversationsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ConversationsCountAggregateInputType | true
    _min?: ConversationsMinAggregateInputType
    _max?: ConversationsMaxAggregateInputType
  }


  export type ConversationsGroupByOutputType = {
    id: string
    senderId: string
    receiverId: string
    date: Date
    _count: ConversationsCountAggregateOutputType | null
    _min: ConversationsMinAggregateOutputType | null
    _max: ConversationsMaxAggregateOutputType | null
  }

  type GetConversationsGroupByPayload<T extends conversationsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ConversationsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ConversationsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ConversationsGroupByOutputType[P]>
            : GetScalarType<T[P], ConversationsGroupByOutputType[P]>
        }
      >
    >


  export type conversationsSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    senderId?: boolean
    receiverId?: boolean
    date?: boolean
    sender?: boolean | conversations$senderArgs<ExtArgs>
  }, ExtArgs["result"]["conversations"]>

  export type conversationsSelectScalar = {
    id?: boolean
    senderId?: boolean
    receiverId?: boolean
    date?: boolean
  }

  export type conversationsInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    sender?: boolean | conversations$senderArgs<ExtArgs>
  }


  type conversationsGetPayload<S extends boolean | null | undefined | conversationsArgs> = $Types.GetResult<conversationsPayload, S>

  type conversationsCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<conversationsFindManyArgs, 'select' | 'include'> & {
      select?: ConversationsCountAggregateInputType | true
    }

  export interface conversationsDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['conversations'], meta: { name: 'conversations' } }
    /**
     * Find zero or one Conversations that matches the filter.
     * @param {conversationsFindUniqueArgs} args - Arguments to find a Conversations
     * @example
     * // Get one Conversations
     * const conversations = await prisma.conversations.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends conversationsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, conversationsFindUniqueArgs<ExtArgs>>
    ): Prisma__conversationsClient<$Types.GetResult<conversationsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Conversations that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {conversationsFindUniqueOrThrowArgs} args - Arguments to find a Conversations
     * @example
     * // Get one Conversations
     * const conversations = await prisma.conversations.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends conversationsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, conversationsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__conversationsClient<$Types.GetResult<conversationsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Conversations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {conversationsFindFirstArgs} args - Arguments to find a Conversations
     * @example
     * // Get one Conversations
     * const conversations = await prisma.conversations.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends conversationsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, conversationsFindFirstArgs<ExtArgs>>
    ): Prisma__conversationsClient<$Types.GetResult<conversationsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Conversations that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {conversationsFindFirstOrThrowArgs} args - Arguments to find a Conversations
     * @example
     * // Get one Conversations
     * const conversations = await prisma.conversations.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends conversationsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, conversationsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__conversationsClient<$Types.GetResult<conversationsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Conversations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {conversationsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Conversations
     * const conversations = await prisma.conversations.findMany()
     * 
     * // Get first 10 Conversations
     * const conversations = await prisma.conversations.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const conversationsWithIdOnly = await prisma.conversations.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends conversationsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, conversationsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<conversationsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Conversations.
     * @param {conversationsCreateArgs} args - Arguments to create a Conversations.
     * @example
     * // Create one Conversations
     * const Conversations = await prisma.conversations.create({
     *   data: {
     *     // ... data to create a Conversations
     *   }
     * })
     * 
    **/
    create<T extends conversationsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, conversationsCreateArgs<ExtArgs>>
    ): Prisma__conversationsClient<$Types.GetResult<conversationsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Conversations.
     *     @param {conversationsCreateManyArgs} args - Arguments to create many Conversations.
     *     @example
     *     // Create many Conversations
     *     const conversations = await prisma.conversations.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends conversationsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, conversationsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Conversations.
     * @param {conversationsDeleteArgs} args - Arguments to delete one Conversations.
     * @example
     * // Delete one Conversations
     * const Conversations = await prisma.conversations.delete({
     *   where: {
     *     // ... filter to delete one Conversations
     *   }
     * })
     * 
    **/
    delete<T extends conversationsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, conversationsDeleteArgs<ExtArgs>>
    ): Prisma__conversationsClient<$Types.GetResult<conversationsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Conversations.
     * @param {conversationsUpdateArgs} args - Arguments to update one Conversations.
     * @example
     * // Update one Conversations
     * const conversations = await prisma.conversations.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends conversationsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, conversationsUpdateArgs<ExtArgs>>
    ): Prisma__conversationsClient<$Types.GetResult<conversationsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Conversations.
     * @param {conversationsDeleteManyArgs} args - Arguments to filter Conversations to delete.
     * @example
     * // Delete a few Conversations
     * const { count } = await prisma.conversations.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends conversationsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, conversationsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Conversations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {conversationsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Conversations
     * const conversations = await prisma.conversations.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends conversationsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, conversationsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Conversations.
     * @param {conversationsUpsertArgs} args - Arguments to update or create a Conversations.
     * @example
     * // Update or create a Conversations
     * const conversations = await prisma.conversations.upsert({
     *   create: {
     *     // ... data to create a Conversations
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Conversations we want to update
     *   }
     * })
    **/
    upsert<T extends conversationsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, conversationsUpsertArgs<ExtArgs>>
    ): Prisma__conversationsClient<$Types.GetResult<conversationsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Conversations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {conversationsCountArgs} args - Arguments to filter Conversations to count.
     * @example
     * // Count the number of Conversations
     * const count = await prisma.conversations.count({
     *   where: {
     *     // ... the filter for the Conversations we want to count
     *   }
     * })
    **/
    count<T extends conversationsCountArgs>(
      args?: Subset<T, conversationsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ConversationsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Conversations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ConversationsAggregateArgs>(args: Subset<T, ConversationsAggregateArgs>): Prisma.PrismaPromise<GetConversationsAggregateType<T>>

    /**
     * Group by Conversations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {conversationsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends conversationsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: conversationsGroupByArgs['orderBy'] }
        : { orderBy?: conversationsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, conversationsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConversationsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the conversations model
   */
  readonly fields: conversationsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for conversations.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__conversationsClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    sender<T extends conversations$senderArgs<ExtArgs> = {}>(args?: Subset<T, conversations$senderArgs<ExtArgs>>): Prisma__usersClient<$Types.GetResult<usersPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the conversations model
   */ 
  interface conversationsFieldRefs {
    readonly id: FieldRef<"conversations", 'String'>
    readonly senderId: FieldRef<"conversations", 'String'>
    readonly receiverId: FieldRef<"conversations", 'String'>
    readonly date: FieldRef<"conversations", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * conversations findUnique
   */
  export type conversationsFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the conversations
     */
    select?: conversationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: conversationsInclude<ExtArgs> | null
    /**
     * Filter, which conversations to fetch.
     */
    where: conversationsWhereUniqueInput
  }


  /**
   * conversations findUniqueOrThrow
   */
  export type conversationsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the conversations
     */
    select?: conversationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: conversationsInclude<ExtArgs> | null
    /**
     * Filter, which conversations to fetch.
     */
    where: conversationsWhereUniqueInput
  }


  /**
   * conversations findFirst
   */
  export type conversationsFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the conversations
     */
    select?: conversationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: conversationsInclude<ExtArgs> | null
    /**
     * Filter, which conversations to fetch.
     */
    where?: conversationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of conversations to fetch.
     */
    orderBy?: conversationsOrderByWithRelationInput | conversationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for conversations.
     */
    cursor?: conversationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` conversations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` conversations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of conversations.
     */
    distinct?: ConversationsScalarFieldEnum | ConversationsScalarFieldEnum[]
  }


  /**
   * conversations findFirstOrThrow
   */
  export type conversationsFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the conversations
     */
    select?: conversationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: conversationsInclude<ExtArgs> | null
    /**
     * Filter, which conversations to fetch.
     */
    where?: conversationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of conversations to fetch.
     */
    orderBy?: conversationsOrderByWithRelationInput | conversationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for conversations.
     */
    cursor?: conversationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` conversations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` conversations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of conversations.
     */
    distinct?: ConversationsScalarFieldEnum | ConversationsScalarFieldEnum[]
  }


  /**
   * conversations findMany
   */
  export type conversationsFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the conversations
     */
    select?: conversationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: conversationsInclude<ExtArgs> | null
    /**
     * Filter, which conversations to fetch.
     */
    where?: conversationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of conversations to fetch.
     */
    orderBy?: conversationsOrderByWithRelationInput | conversationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing conversations.
     */
    cursor?: conversationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` conversations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` conversations.
     */
    skip?: number
    distinct?: ConversationsScalarFieldEnum | ConversationsScalarFieldEnum[]
  }


  /**
   * conversations create
   */
  export type conversationsCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the conversations
     */
    select?: conversationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: conversationsInclude<ExtArgs> | null
    /**
     * The data needed to create a conversations.
     */
    data: XOR<conversationsCreateInput, conversationsUncheckedCreateInput>
  }


  /**
   * conversations createMany
   */
  export type conversationsCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many conversations.
     */
    data: conversationsCreateManyInput | conversationsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * conversations update
   */
  export type conversationsUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the conversations
     */
    select?: conversationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: conversationsInclude<ExtArgs> | null
    /**
     * The data needed to update a conversations.
     */
    data: XOR<conversationsUpdateInput, conversationsUncheckedUpdateInput>
    /**
     * Choose, which conversations to update.
     */
    where: conversationsWhereUniqueInput
  }


  /**
   * conversations updateMany
   */
  export type conversationsUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update conversations.
     */
    data: XOR<conversationsUpdateManyMutationInput, conversationsUncheckedUpdateManyInput>
    /**
     * Filter which conversations to update
     */
    where?: conversationsWhereInput
  }


  /**
   * conversations upsert
   */
  export type conversationsUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the conversations
     */
    select?: conversationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: conversationsInclude<ExtArgs> | null
    /**
     * The filter to search for the conversations to update in case it exists.
     */
    where: conversationsWhereUniqueInput
    /**
     * In case the conversations found by the `where` argument doesn't exist, create a new conversations with this data.
     */
    create: XOR<conversationsCreateInput, conversationsUncheckedCreateInput>
    /**
     * In case the conversations was found with the provided `where` argument, update it with this data.
     */
    update: XOR<conversationsUpdateInput, conversationsUncheckedUpdateInput>
  }


  /**
   * conversations delete
   */
  export type conversationsDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the conversations
     */
    select?: conversationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: conversationsInclude<ExtArgs> | null
    /**
     * Filter which conversations to delete.
     */
    where: conversationsWhereUniqueInput
  }


  /**
   * conversations deleteMany
   */
  export type conversationsDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which conversations to delete
     */
    where?: conversationsWhereInput
  }


  /**
   * conversations.sender
   */
  export type conversations$senderArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    where?: usersWhereInput
  }


  /**
   * conversations without action
   */
  export type conversationsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the conversations
     */
    select?: conversationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: conversationsInclude<ExtArgs> | null
  }



  /**
   * Model messages
   */


  export type AggregateMessages = {
    _count: MessagesCountAggregateOutputType | null
    _min: MessagesMinAggregateOutputType | null
    _max: MessagesMaxAggregateOutputType | null
  }

  export type MessagesMinAggregateOutputType = {
    id: string | null
    message: string | null
    image: string | null
    date: Date | null
    productId: string | null
  }

  export type MessagesMaxAggregateOutputType = {
    id: string | null
    message: string | null
    image: string | null
    date: Date | null
    productId: string | null
  }

  export type MessagesCountAggregateOutputType = {
    id: number
    message: number
    image: number
    date: number
    productId: number
    _all: number
  }


  export type MessagesMinAggregateInputType = {
    id?: true
    message?: true
    image?: true
    date?: true
    productId?: true
  }

  export type MessagesMaxAggregateInputType = {
    id?: true
    message?: true
    image?: true
    date?: true
    productId?: true
  }

  export type MessagesCountAggregateInputType = {
    id?: true
    message?: true
    image?: true
    date?: true
    productId?: true
    _all?: true
  }

  export type MessagesAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which messages to aggregate.
     */
    where?: messagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of messages to fetch.
     */
    orderBy?: messagesOrderByWithRelationInput | messagesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: messagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned messages
    **/
    _count?: true | MessagesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MessagesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MessagesMaxAggregateInputType
  }

  export type GetMessagesAggregateType<T extends MessagesAggregateArgs> = {
        [P in keyof T & keyof AggregateMessages]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMessages[P]>
      : GetScalarType<T[P], AggregateMessages[P]>
  }




  export type messagesGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: messagesWhereInput
    orderBy?: messagesOrderByWithAggregationInput | messagesOrderByWithAggregationInput[]
    by: MessagesScalarFieldEnum[] | MessagesScalarFieldEnum
    having?: messagesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MessagesCountAggregateInputType | true
    _min?: MessagesMinAggregateInputType
    _max?: MessagesMaxAggregateInputType
  }


  export type MessagesGroupByOutputType = {
    id: string
    message: string | null
    image: string | null
    date: Date
    productId: string
    _count: MessagesCountAggregateOutputType | null
    _min: MessagesMinAggregateOutputType | null
    _max: MessagesMaxAggregateOutputType | null
  }

  type GetMessagesGroupByPayload<T extends messagesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MessagesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MessagesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MessagesGroupByOutputType[P]>
            : GetScalarType<T[P], MessagesGroupByOutputType[P]>
        }
      >
    >


  export type messagesSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    message?: boolean
    image?: boolean
    date?: boolean
    productId?: boolean
    product?: boolean | messages$productArgs<ExtArgs>
  }, ExtArgs["result"]["messages"]>

  export type messagesSelectScalar = {
    id?: boolean
    message?: boolean
    image?: boolean
    date?: boolean
    productId?: boolean
  }

  export type messagesInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    product?: boolean | messages$productArgs<ExtArgs>
  }


  type messagesGetPayload<S extends boolean | null | undefined | messagesArgs> = $Types.GetResult<messagesPayload, S>

  type messagesCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<messagesFindManyArgs, 'select' | 'include'> & {
      select?: MessagesCountAggregateInputType | true
    }

  export interface messagesDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['messages'], meta: { name: 'messages' } }
    /**
     * Find zero or one Messages that matches the filter.
     * @param {messagesFindUniqueArgs} args - Arguments to find a Messages
     * @example
     * // Get one Messages
     * const messages = await prisma.messages.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends messagesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, messagesFindUniqueArgs<ExtArgs>>
    ): Prisma__messagesClient<$Types.GetResult<messagesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Messages that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {messagesFindUniqueOrThrowArgs} args - Arguments to find a Messages
     * @example
     * // Get one Messages
     * const messages = await prisma.messages.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends messagesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, messagesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__messagesClient<$Types.GetResult<messagesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Messages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {messagesFindFirstArgs} args - Arguments to find a Messages
     * @example
     * // Get one Messages
     * const messages = await prisma.messages.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends messagesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, messagesFindFirstArgs<ExtArgs>>
    ): Prisma__messagesClient<$Types.GetResult<messagesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Messages that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {messagesFindFirstOrThrowArgs} args - Arguments to find a Messages
     * @example
     * // Get one Messages
     * const messages = await prisma.messages.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends messagesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, messagesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__messagesClient<$Types.GetResult<messagesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Messages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {messagesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Messages
     * const messages = await prisma.messages.findMany()
     * 
     * // Get first 10 Messages
     * const messages = await prisma.messages.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const messagesWithIdOnly = await prisma.messages.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends messagesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, messagesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<messagesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Messages.
     * @param {messagesCreateArgs} args - Arguments to create a Messages.
     * @example
     * // Create one Messages
     * const Messages = await prisma.messages.create({
     *   data: {
     *     // ... data to create a Messages
     *   }
     * })
     * 
    **/
    create<T extends messagesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, messagesCreateArgs<ExtArgs>>
    ): Prisma__messagesClient<$Types.GetResult<messagesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Messages.
     *     @param {messagesCreateManyArgs} args - Arguments to create many Messages.
     *     @example
     *     // Create many Messages
     *     const messages = await prisma.messages.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends messagesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, messagesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Messages.
     * @param {messagesDeleteArgs} args - Arguments to delete one Messages.
     * @example
     * // Delete one Messages
     * const Messages = await prisma.messages.delete({
     *   where: {
     *     // ... filter to delete one Messages
     *   }
     * })
     * 
    **/
    delete<T extends messagesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, messagesDeleteArgs<ExtArgs>>
    ): Prisma__messagesClient<$Types.GetResult<messagesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Messages.
     * @param {messagesUpdateArgs} args - Arguments to update one Messages.
     * @example
     * // Update one Messages
     * const messages = await prisma.messages.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends messagesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, messagesUpdateArgs<ExtArgs>>
    ): Prisma__messagesClient<$Types.GetResult<messagesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Messages.
     * @param {messagesDeleteManyArgs} args - Arguments to filter Messages to delete.
     * @example
     * // Delete a few Messages
     * const { count } = await prisma.messages.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends messagesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, messagesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {messagesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Messages
     * const messages = await prisma.messages.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends messagesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, messagesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Messages.
     * @param {messagesUpsertArgs} args - Arguments to update or create a Messages.
     * @example
     * // Update or create a Messages
     * const messages = await prisma.messages.upsert({
     *   create: {
     *     // ... data to create a Messages
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Messages we want to update
     *   }
     * })
    **/
    upsert<T extends messagesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, messagesUpsertArgs<ExtArgs>>
    ): Prisma__messagesClient<$Types.GetResult<messagesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {messagesCountArgs} args - Arguments to filter Messages to count.
     * @example
     * // Count the number of Messages
     * const count = await prisma.messages.count({
     *   where: {
     *     // ... the filter for the Messages we want to count
     *   }
     * })
    **/
    count<T extends messagesCountArgs>(
      args?: Subset<T, messagesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MessagesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessagesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MessagesAggregateArgs>(args: Subset<T, MessagesAggregateArgs>): Prisma.PrismaPromise<GetMessagesAggregateType<T>>

    /**
     * Group by Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {messagesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends messagesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: messagesGroupByArgs['orderBy'] }
        : { orderBy?: messagesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, messagesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMessagesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the messages model
   */
  readonly fields: messagesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for messages.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__messagesClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    product<T extends messages$productArgs<ExtArgs> = {}>(args?: Subset<T, messages$productArgs<ExtArgs>>): Prisma__productsClient<$Types.GetResult<productsPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the messages model
   */ 
  interface messagesFieldRefs {
    readonly id: FieldRef<"messages", 'String'>
    readonly message: FieldRef<"messages", 'String'>
    readonly image: FieldRef<"messages", 'String'>
    readonly date: FieldRef<"messages", 'DateTime'>
    readonly productId: FieldRef<"messages", 'String'>
  }
    

  // Custom InputTypes

  /**
   * messages findUnique
   */
  export type messagesFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the messages
     */
    select?: messagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: messagesInclude<ExtArgs> | null
    /**
     * Filter, which messages to fetch.
     */
    where: messagesWhereUniqueInput
  }


  /**
   * messages findUniqueOrThrow
   */
  export type messagesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the messages
     */
    select?: messagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: messagesInclude<ExtArgs> | null
    /**
     * Filter, which messages to fetch.
     */
    where: messagesWhereUniqueInput
  }


  /**
   * messages findFirst
   */
  export type messagesFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the messages
     */
    select?: messagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: messagesInclude<ExtArgs> | null
    /**
     * Filter, which messages to fetch.
     */
    where?: messagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of messages to fetch.
     */
    orderBy?: messagesOrderByWithRelationInput | messagesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for messages.
     */
    cursor?: messagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of messages.
     */
    distinct?: MessagesScalarFieldEnum | MessagesScalarFieldEnum[]
  }


  /**
   * messages findFirstOrThrow
   */
  export type messagesFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the messages
     */
    select?: messagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: messagesInclude<ExtArgs> | null
    /**
     * Filter, which messages to fetch.
     */
    where?: messagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of messages to fetch.
     */
    orderBy?: messagesOrderByWithRelationInput | messagesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for messages.
     */
    cursor?: messagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of messages.
     */
    distinct?: MessagesScalarFieldEnum | MessagesScalarFieldEnum[]
  }


  /**
   * messages findMany
   */
  export type messagesFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the messages
     */
    select?: messagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: messagesInclude<ExtArgs> | null
    /**
     * Filter, which messages to fetch.
     */
    where?: messagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of messages to fetch.
     */
    orderBy?: messagesOrderByWithRelationInput | messagesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing messages.
     */
    cursor?: messagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` messages.
     */
    skip?: number
    distinct?: MessagesScalarFieldEnum | MessagesScalarFieldEnum[]
  }


  /**
   * messages create
   */
  export type messagesCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the messages
     */
    select?: messagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: messagesInclude<ExtArgs> | null
    /**
     * The data needed to create a messages.
     */
    data: XOR<messagesCreateInput, messagesUncheckedCreateInput>
  }


  /**
   * messages createMany
   */
  export type messagesCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many messages.
     */
    data: messagesCreateManyInput | messagesCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * messages update
   */
  export type messagesUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the messages
     */
    select?: messagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: messagesInclude<ExtArgs> | null
    /**
     * The data needed to update a messages.
     */
    data: XOR<messagesUpdateInput, messagesUncheckedUpdateInput>
    /**
     * Choose, which messages to update.
     */
    where: messagesWhereUniqueInput
  }


  /**
   * messages updateMany
   */
  export type messagesUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update messages.
     */
    data: XOR<messagesUpdateManyMutationInput, messagesUncheckedUpdateManyInput>
    /**
     * Filter which messages to update
     */
    where?: messagesWhereInput
  }


  /**
   * messages upsert
   */
  export type messagesUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the messages
     */
    select?: messagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: messagesInclude<ExtArgs> | null
    /**
     * The filter to search for the messages to update in case it exists.
     */
    where: messagesWhereUniqueInput
    /**
     * In case the messages found by the `where` argument doesn't exist, create a new messages with this data.
     */
    create: XOR<messagesCreateInput, messagesUncheckedCreateInput>
    /**
     * In case the messages was found with the provided `where` argument, update it with this data.
     */
    update: XOR<messagesUpdateInput, messagesUncheckedUpdateInput>
  }


  /**
   * messages delete
   */
  export type messagesDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the messages
     */
    select?: messagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: messagesInclude<ExtArgs> | null
    /**
     * Filter which messages to delete.
     */
    where: messagesWhereUniqueInput
  }


  /**
   * messages deleteMany
   */
  export type messagesDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which messages to delete
     */
    where?: messagesWhereInput
  }


  /**
   * messages.product
   */
  export type messages$productArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productsInclude<ExtArgs> | null
    where?: productsWhereInput
  }


  /**
   * messages without action
   */
  export type messagesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the messages
     */
    select?: messagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: messagesInclude<ExtArgs> | null
  }



  /**
   * Model orders
   */


  export type AggregateOrders = {
    _count: OrdersCountAggregateOutputType | null
    _avg: OrdersAvgAggregateOutputType | null
    _sum: OrdersSumAggregateOutputType | null
    _min: OrdersMinAggregateOutputType | null
    _max: OrdersMaxAggregateOutputType | null
  }

  export type OrdersAvgAggregateOutputType = {
    offerPrice: number | null
  }

  export type OrdersSumAggregateOutputType = {
    offerPrice: number | null
  }

  export type OrdersMinAggregateOutputType = {
    id: string | null
    buyerid: string | null
    productId: string | null
    offerPrice: number | null
    date: Date | null
  }

  export type OrdersMaxAggregateOutputType = {
    id: string | null
    buyerid: string | null
    productId: string | null
    offerPrice: number | null
    date: Date | null
  }

  export type OrdersCountAggregateOutputType = {
    id: number
    buyerid: number
    productId: number
    offerPrice: number
    date: number
    _all: number
  }


  export type OrdersAvgAggregateInputType = {
    offerPrice?: true
  }

  export type OrdersSumAggregateInputType = {
    offerPrice?: true
  }

  export type OrdersMinAggregateInputType = {
    id?: true
    buyerid?: true
    productId?: true
    offerPrice?: true
    date?: true
  }

  export type OrdersMaxAggregateInputType = {
    id?: true
    buyerid?: true
    productId?: true
    offerPrice?: true
    date?: true
  }

  export type OrdersCountAggregateInputType = {
    id?: true
    buyerid?: true
    productId?: true
    offerPrice?: true
    date?: true
    _all?: true
  }

  export type OrdersAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which orders to aggregate.
     */
    where?: ordersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orders to fetch.
     */
    orderBy?: ordersOrderByWithRelationInput | ordersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ordersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned orders
    **/
    _count?: true | OrdersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrdersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrdersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrdersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrdersMaxAggregateInputType
  }

  export type GetOrdersAggregateType<T extends OrdersAggregateArgs> = {
        [P in keyof T & keyof AggregateOrders]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrders[P]>
      : GetScalarType<T[P], AggregateOrders[P]>
  }




  export type ordersGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ordersWhereInput
    orderBy?: ordersOrderByWithAggregationInput | ordersOrderByWithAggregationInput[]
    by: OrdersScalarFieldEnum[] | OrdersScalarFieldEnum
    having?: ordersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrdersCountAggregateInputType | true
    _avg?: OrdersAvgAggregateInputType
    _sum?: OrdersSumAggregateInputType
    _min?: OrdersMinAggregateInputType
    _max?: OrdersMaxAggregateInputType
  }


  export type OrdersGroupByOutputType = {
    id: string
    buyerid: string
    productId: string
    offerPrice: number
    date: Date
    _count: OrdersCountAggregateOutputType | null
    _avg: OrdersAvgAggregateOutputType | null
    _sum: OrdersSumAggregateOutputType | null
    _min: OrdersMinAggregateOutputType | null
    _max: OrdersMaxAggregateOutputType | null
  }

  type GetOrdersGroupByPayload<T extends ordersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrdersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrdersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrdersGroupByOutputType[P]>
            : GetScalarType<T[P], OrdersGroupByOutputType[P]>
        }
      >
    >


  export type ordersSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    buyerid?: boolean
    productId?: boolean
    offerPrice?: boolean
    date?: boolean
    buyer?: boolean | usersArgs<ExtArgs>
    product?: boolean | productsArgs<ExtArgs>
  }, ExtArgs["result"]["orders"]>

  export type ordersSelectScalar = {
    id?: boolean
    buyerid?: boolean
    productId?: boolean
    offerPrice?: boolean
    date?: boolean
  }

  export type ordersInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    buyer?: boolean | usersArgs<ExtArgs>
    product?: boolean | productsArgs<ExtArgs>
  }


  type ordersGetPayload<S extends boolean | null | undefined | ordersArgs> = $Types.GetResult<ordersPayload, S>

  type ordersCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ordersFindManyArgs, 'select' | 'include'> & {
      select?: OrdersCountAggregateInputType | true
    }

  export interface ordersDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['orders'], meta: { name: 'orders' } }
    /**
     * Find zero or one Orders that matches the filter.
     * @param {ordersFindUniqueArgs} args - Arguments to find a Orders
     * @example
     * // Get one Orders
     * const orders = await prisma.orders.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ordersFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ordersFindUniqueArgs<ExtArgs>>
    ): Prisma__ordersClient<$Types.GetResult<ordersPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Orders that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ordersFindUniqueOrThrowArgs} args - Arguments to find a Orders
     * @example
     * // Get one Orders
     * const orders = await prisma.orders.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ordersFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ordersFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ordersClient<$Types.GetResult<ordersPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Orders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ordersFindFirstArgs} args - Arguments to find a Orders
     * @example
     * // Get one Orders
     * const orders = await prisma.orders.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ordersFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ordersFindFirstArgs<ExtArgs>>
    ): Prisma__ordersClient<$Types.GetResult<ordersPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Orders that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ordersFindFirstOrThrowArgs} args - Arguments to find a Orders
     * @example
     * // Get one Orders
     * const orders = await prisma.orders.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ordersFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ordersFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ordersClient<$Types.GetResult<ordersPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Orders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ordersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Orders
     * const orders = await prisma.orders.findMany()
     * 
     * // Get first 10 Orders
     * const orders = await prisma.orders.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ordersWithIdOnly = await prisma.orders.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ordersFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ordersFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<ordersPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Orders.
     * @param {ordersCreateArgs} args - Arguments to create a Orders.
     * @example
     * // Create one Orders
     * const Orders = await prisma.orders.create({
     *   data: {
     *     // ... data to create a Orders
     *   }
     * })
     * 
    **/
    create<T extends ordersCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ordersCreateArgs<ExtArgs>>
    ): Prisma__ordersClient<$Types.GetResult<ordersPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Orders.
     *     @param {ordersCreateManyArgs} args - Arguments to create many Orders.
     *     @example
     *     // Create many Orders
     *     const orders = await prisma.orders.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ordersCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ordersCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Orders.
     * @param {ordersDeleteArgs} args - Arguments to delete one Orders.
     * @example
     * // Delete one Orders
     * const Orders = await prisma.orders.delete({
     *   where: {
     *     // ... filter to delete one Orders
     *   }
     * })
     * 
    **/
    delete<T extends ordersDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ordersDeleteArgs<ExtArgs>>
    ): Prisma__ordersClient<$Types.GetResult<ordersPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Orders.
     * @param {ordersUpdateArgs} args - Arguments to update one Orders.
     * @example
     * // Update one Orders
     * const orders = await prisma.orders.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ordersUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ordersUpdateArgs<ExtArgs>>
    ): Prisma__ordersClient<$Types.GetResult<ordersPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Orders.
     * @param {ordersDeleteManyArgs} args - Arguments to filter Orders to delete.
     * @example
     * // Delete a few Orders
     * const { count } = await prisma.orders.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ordersDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ordersDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ordersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Orders
     * const orders = await prisma.orders.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ordersUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ordersUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Orders.
     * @param {ordersUpsertArgs} args - Arguments to update or create a Orders.
     * @example
     * // Update or create a Orders
     * const orders = await prisma.orders.upsert({
     *   create: {
     *     // ... data to create a Orders
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Orders we want to update
     *   }
     * })
    **/
    upsert<T extends ordersUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ordersUpsertArgs<ExtArgs>>
    ): Prisma__ordersClient<$Types.GetResult<ordersPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ordersCountArgs} args - Arguments to filter Orders to count.
     * @example
     * // Count the number of Orders
     * const count = await prisma.orders.count({
     *   where: {
     *     // ... the filter for the Orders we want to count
     *   }
     * })
    **/
    count<T extends ordersCountArgs>(
      args?: Subset<T, ordersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrdersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrdersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrdersAggregateArgs>(args: Subset<T, OrdersAggregateArgs>): Prisma.PrismaPromise<GetOrdersAggregateType<T>>

    /**
     * Group by Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ordersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ordersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ordersGroupByArgs['orderBy'] }
        : { orderBy?: ordersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ordersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrdersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the orders model
   */
  readonly fields: ordersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for orders.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ordersClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    buyer<T extends usersArgs<ExtArgs> = {}>(args?: Subset<T, usersArgs<ExtArgs>>): Prisma__usersClient<$Types.GetResult<usersPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    product<T extends productsArgs<ExtArgs> = {}>(args?: Subset<T, productsArgs<ExtArgs>>): Prisma__productsClient<$Types.GetResult<productsPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the orders model
   */ 
  interface ordersFieldRefs {
    readonly id: FieldRef<"orders", 'String'>
    readonly buyerid: FieldRef<"orders", 'String'>
    readonly productId: FieldRef<"orders", 'String'>
    readonly offerPrice: FieldRef<"orders", 'Int'>
    readonly date: FieldRef<"orders", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * orders findUnique
   */
  export type ordersFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ordersInclude<ExtArgs> | null
    /**
     * Filter, which orders to fetch.
     */
    where: ordersWhereUniqueInput
  }


  /**
   * orders findUniqueOrThrow
   */
  export type ordersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ordersInclude<ExtArgs> | null
    /**
     * Filter, which orders to fetch.
     */
    where: ordersWhereUniqueInput
  }


  /**
   * orders findFirst
   */
  export type ordersFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ordersInclude<ExtArgs> | null
    /**
     * Filter, which orders to fetch.
     */
    where?: ordersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orders to fetch.
     */
    orderBy?: ordersOrderByWithRelationInput | ordersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for orders.
     */
    cursor?: ordersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of orders.
     */
    distinct?: OrdersScalarFieldEnum | OrdersScalarFieldEnum[]
  }


  /**
   * orders findFirstOrThrow
   */
  export type ordersFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ordersInclude<ExtArgs> | null
    /**
     * Filter, which orders to fetch.
     */
    where?: ordersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orders to fetch.
     */
    orderBy?: ordersOrderByWithRelationInput | ordersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for orders.
     */
    cursor?: ordersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of orders.
     */
    distinct?: OrdersScalarFieldEnum | OrdersScalarFieldEnum[]
  }


  /**
   * orders findMany
   */
  export type ordersFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ordersInclude<ExtArgs> | null
    /**
     * Filter, which orders to fetch.
     */
    where?: ordersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orders to fetch.
     */
    orderBy?: ordersOrderByWithRelationInput | ordersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing orders.
     */
    cursor?: ordersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orders.
     */
    skip?: number
    distinct?: OrdersScalarFieldEnum | OrdersScalarFieldEnum[]
  }


  /**
   * orders create
   */
  export type ordersCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ordersInclude<ExtArgs> | null
    /**
     * The data needed to create a orders.
     */
    data: XOR<ordersCreateInput, ordersUncheckedCreateInput>
  }


  /**
   * orders createMany
   */
  export type ordersCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many orders.
     */
    data: ordersCreateManyInput | ordersCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * orders update
   */
  export type ordersUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ordersInclude<ExtArgs> | null
    /**
     * The data needed to update a orders.
     */
    data: XOR<ordersUpdateInput, ordersUncheckedUpdateInput>
    /**
     * Choose, which orders to update.
     */
    where: ordersWhereUniqueInput
  }


  /**
   * orders updateMany
   */
  export type ordersUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update orders.
     */
    data: XOR<ordersUpdateManyMutationInput, ordersUncheckedUpdateManyInput>
    /**
     * Filter which orders to update
     */
    where?: ordersWhereInput
  }


  /**
   * orders upsert
   */
  export type ordersUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ordersInclude<ExtArgs> | null
    /**
     * The filter to search for the orders to update in case it exists.
     */
    where: ordersWhereUniqueInput
    /**
     * In case the orders found by the `where` argument doesn't exist, create a new orders with this data.
     */
    create: XOR<ordersCreateInput, ordersUncheckedCreateInput>
    /**
     * In case the orders was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ordersUpdateInput, ordersUncheckedUpdateInput>
  }


  /**
   * orders delete
   */
  export type ordersDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ordersInclude<ExtArgs> | null
    /**
     * Filter which orders to delete.
     */
    where: ordersWhereUniqueInput
  }


  /**
   * orders deleteMany
   */
  export type ordersDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which orders to delete
     */
    where?: ordersWhereInput
  }


  /**
   * orders without action
   */
  export type ordersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ordersInclude<ExtArgs> | null
  }



  /**
   * Model banner
   */


  export type AggregateBanner = {
    _count: BannerCountAggregateOutputType | null
    _min: BannerMinAggregateOutputType | null
    _max: BannerMaxAggregateOutputType | null
  }

  export type BannerMinAggregateOutputType = {
    id: string | null
    title: string | null
    image: string | null
    productId: string | null
  }

  export type BannerMaxAggregateOutputType = {
    id: string | null
    title: string | null
    image: string | null
    productId: string | null
  }

  export type BannerCountAggregateOutputType = {
    id: number
    title: number
    image: number
    productId: number
    _all: number
  }


  export type BannerMinAggregateInputType = {
    id?: true
    title?: true
    image?: true
    productId?: true
  }

  export type BannerMaxAggregateInputType = {
    id?: true
    title?: true
    image?: true
    productId?: true
  }

  export type BannerCountAggregateInputType = {
    id?: true
    title?: true
    image?: true
    productId?: true
    _all?: true
  }

  export type BannerAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which banner to aggregate.
     */
    where?: bannerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of banners to fetch.
     */
    orderBy?: bannerOrderByWithRelationInput | bannerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: bannerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` banners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` banners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned banners
    **/
    _count?: true | BannerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BannerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BannerMaxAggregateInputType
  }

  export type GetBannerAggregateType<T extends BannerAggregateArgs> = {
        [P in keyof T & keyof AggregateBanner]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBanner[P]>
      : GetScalarType<T[P], AggregateBanner[P]>
  }




  export type bannerGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: bannerWhereInput
    orderBy?: bannerOrderByWithAggregationInput | bannerOrderByWithAggregationInput[]
    by: BannerScalarFieldEnum[] | BannerScalarFieldEnum
    having?: bannerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BannerCountAggregateInputType | true
    _min?: BannerMinAggregateInputType
    _max?: BannerMaxAggregateInputType
  }


  export type BannerGroupByOutputType = {
    id: string
    title: string
    image: string
    productId: string
    _count: BannerCountAggregateOutputType | null
    _min: BannerMinAggregateOutputType | null
    _max: BannerMaxAggregateOutputType | null
  }

  type GetBannerGroupByPayload<T extends bannerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BannerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BannerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BannerGroupByOutputType[P]>
            : GetScalarType<T[P], BannerGroupByOutputType[P]>
        }
      >
    >


  export type bannerSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    image?: boolean
    productId?: boolean
    product?: boolean | banner$productArgs<ExtArgs>
  }, ExtArgs["result"]["banner"]>

  export type bannerSelectScalar = {
    id?: boolean
    title?: boolean
    image?: boolean
    productId?: boolean
  }

  export type bannerInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    product?: boolean | banner$productArgs<ExtArgs>
  }


  type bannerGetPayload<S extends boolean | null | undefined | bannerArgs> = $Types.GetResult<bannerPayload, S>

  type bannerCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<bannerFindManyArgs, 'select' | 'include'> & {
      select?: BannerCountAggregateInputType | true
    }

  export interface bannerDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['banner'], meta: { name: 'banner' } }
    /**
     * Find zero or one Banner that matches the filter.
     * @param {bannerFindUniqueArgs} args - Arguments to find a Banner
     * @example
     * // Get one Banner
     * const banner = await prisma.banner.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends bannerFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, bannerFindUniqueArgs<ExtArgs>>
    ): Prisma__bannerClient<$Types.GetResult<bannerPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Banner that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {bannerFindUniqueOrThrowArgs} args - Arguments to find a Banner
     * @example
     * // Get one Banner
     * const banner = await prisma.banner.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends bannerFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, bannerFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__bannerClient<$Types.GetResult<bannerPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Banner that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bannerFindFirstArgs} args - Arguments to find a Banner
     * @example
     * // Get one Banner
     * const banner = await prisma.banner.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends bannerFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, bannerFindFirstArgs<ExtArgs>>
    ): Prisma__bannerClient<$Types.GetResult<bannerPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Banner that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bannerFindFirstOrThrowArgs} args - Arguments to find a Banner
     * @example
     * // Get one Banner
     * const banner = await prisma.banner.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends bannerFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, bannerFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__bannerClient<$Types.GetResult<bannerPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Banners that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bannerFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Banners
     * const banners = await prisma.banner.findMany()
     * 
     * // Get first 10 Banners
     * const banners = await prisma.banner.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bannerWithIdOnly = await prisma.banner.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends bannerFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, bannerFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<bannerPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Banner.
     * @param {bannerCreateArgs} args - Arguments to create a Banner.
     * @example
     * // Create one Banner
     * const Banner = await prisma.banner.create({
     *   data: {
     *     // ... data to create a Banner
     *   }
     * })
     * 
    **/
    create<T extends bannerCreateArgs<ExtArgs>>(
      args: SelectSubset<T, bannerCreateArgs<ExtArgs>>
    ): Prisma__bannerClient<$Types.GetResult<bannerPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Banners.
     *     @param {bannerCreateManyArgs} args - Arguments to create many Banners.
     *     @example
     *     // Create many Banners
     *     const banner = await prisma.banner.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends bannerCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, bannerCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Banner.
     * @param {bannerDeleteArgs} args - Arguments to delete one Banner.
     * @example
     * // Delete one Banner
     * const Banner = await prisma.banner.delete({
     *   where: {
     *     // ... filter to delete one Banner
     *   }
     * })
     * 
    **/
    delete<T extends bannerDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, bannerDeleteArgs<ExtArgs>>
    ): Prisma__bannerClient<$Types.GetResult<bannerPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Banner.
     * @param {bannerUpdateArgs} args - Arguments to update one Banner.
     * @example
     * // Update one Banner
     * const banner = await prisma.banner.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends bannerUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, bannerUpdateArgs<ExtArgs>>
    ): Prisma__bannerClient<$Types.GetResult<bannerPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Banners.
     * @param {bannerDeleteManyArgs} args - Arguments to filter Banners to delete.
     * @example
     * // Delete a few Banners
     * const { count } = await prisma.banner.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends bannerDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, bannerDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Banners.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bannerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Banners
     * const banner = await prisma.banner.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends bannerUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, bannerUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Banner.
     * @param {bannerUpsertArgs} args - Arguments to update or create a Banner.
     * @example
     * // Update or create a Banner
     * const banner = await prisma.banner.upsert({
     *   create: {
     *     // ... data to create a Banner
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Banner we want to update
     *   }
     * })
    **/
    upsert<T extends bannerUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, bannerUpsertArgs<ExtArgs>>
    ): Prisma__bannerClient<$Types.GetResult<bannerPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Banners.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bannerCountArgs} args - Arguments to filter Banners to count.
     * @example
     * // Count the number of Banners
     * const count = await prisma.banner.count({
     *   where: {
     *     // ... the filter for the Banners we want to count
     *   }
     * })
    **/
    count<T extends bannerCountArgs>(
      args?: Subset<T, bannerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BannerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Banner.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BannerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BannerAggregateArgs>(args: Subset<T, BannerAggregateArgs>): Prisma.PrismaPromise<GetBannerAggregateType<T>>

    /**
     * Group by Banner.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bannerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends bannerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: bannerGroupByArgs['orderBy'] }
        : { orderBy?: bannerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, bannerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBannerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the banner model
   */
  readonly fields: bannerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for banner.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__bannerClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    product<T extends banner$productArgs<ExtArgs> = {}>(args?: Subset<T, banner$productArgs<ExtArgs>>): Prisma__productsClient<$Types.GetResult<productsPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the banner model
   */ 
  interface bannerFieldRefs {
    readonly id: FieldRef<"banner", 'String'>
    readonly title: FieldRef<"banner", 'String'>
    readonly image: FieldRef<"banner", 'String'>
    readonly productId: FieldRef<"banner", 'String'>
  }
    

  // Custom InputTypes

  /**
   * banner findUnique
   */
  export type bannerFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the banner
     */
    select?: bannerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: bannerInclude<ExtArgs> | null
    /**
     * Filter, which banner to fetch.
     */
    where: bannerWhereUniqueInput
  }


  /**
   * banner findUniqueOrThrow
   */
  export type bannerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the banner
     */
    select?: bannerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: bannerInclude<ExtArgs> | null
    /**
     * Filter, which banner to fetch.
     */
    where: bannerWhereUniqueInput
  }


  /**
   * banner findFirst
   */
  export type bannerFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the banner
     */
    select?: bannerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: bannerInclude<ExtArgs> | null
    /**
     * Filter, which banner to fetch.
     */
    where?: bannerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of banners to fetch.
     */
    orderBy?: bannerOrderByWithRelationInput | bannerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for banners.
     */
    cursor?: bannerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` banners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` banners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of banners.
     */
    distinct?: BannerScalarFieldEnum | BannerScalarFieldEnum[]
  }


  /**
   * banner findFirstOrThrow
   */
  export type bannerFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the banner
     */
    select?: bannerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: bannerInclude<ExtArgs> | null
    /**
     * Filter, which banner to fetch.
     */
    where?: bannerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of banners to fetch.
     */
    orderBy?: bannerOrderByWithRelationInput | bannerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for banners.
     */
    cursor?: bannerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` banners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` banners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of banners.
     */
    distinct?: BannerScalarFieldEnum | BannerScalarFieldEnum[]
  }


  /**
   * banner findMany
   */
  export type bannerFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the banner
     */
    select?: bannerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: bannerInclude<ExtArgs> | null
    /**
     * Filter, which banners to fetch.
     */
    where?: bannerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of banners to fetch.
     */
    orderBy?: bannerOrderByWithRelationInput | bannerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing banners.
     */
    cursor?: bannerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` banners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` banners.
     */
    skip?: number
    distinct?: BannerScalarFieldEnum | BannerScalarFieldEnum[]
  }


  /**
   * banner create
   */
  export type bannerCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the banner
     */
    select?: bannerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: bannerInclude<ExtArgs> | null
    /**
     * The data needed to create a banner.
     */
    data: XOR<bannerCreateInput, bannerUncheckedCreateInput>
  }


  /**
   * banner createMany
   */
  export type bannerCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many banners.
     */
    data: bannerCreateManyInput | bannerCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * banner update
   */
  export type bannerUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the banner
     */
    select?: bannerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: bannerInclude<ExtArgs> | null
    /**
     * The data needed to update a banner.
     */
    data: XOR<bannerUpdateInput, bannerUncheckedUpdateInput>
    /**
     * Choose, which banner to update.
     */
    where: bannerWhereUniqueInput
  }


  /**
   * banner updateMany
   */
  export type bannerUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update banners.
     */
    data: XOR<bannerUpdateManyMutationInput, bannerUncheckedUpdateManyInput>
    /**
     * Filter which banners to update
     */
    where?: bannerWhereInput
  }


  /**
   * banner upsert
   */
  export type bannerUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the banner
     */
    select?: bannerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: bannerInclude<ExtArgs> | null
    /**
     * The filter to search for the banner to update in case it exists.
     */
    where: bannerWhereUniqueInput
    /**
     * In case the banner found by the `where` argument doesn't exist, create a new banner with this data.
     */
    create: XOR<bannerCreateInput, bannerUncheckedCreateInput>
    /**
     * In case the banner was found with the provided `where` argument, update it with this data.
     */
    update: XOR<bannerUpdateInput, bannerUncheckedUpdateInput>
  }


  /**
   * banner delete
   */
  export type bannerDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the banner
     */
    select?: bannerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: bannerInclude<ExtArgs> | null
    /**
     * Filter which banner to delete.
     */
    where: bannerWhereUniqueInput
  }


  /**
   * banner deleteMany
   */
  export type bannerDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which banners to delete
     */
    where?: bannerWhereInput
  }


  /**
   * banner.product
   */
  export type banner$productArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productsInclude<ExtArgs> | null
    where?: productsWhereInput
  }


  /**
   * banner without action
   */
  export type bannerArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the banner
     */
    select?: bannerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: bannerInclude<ExtArgs> | null
  }



  /**
   * Model adds
   */


  export type AggregateAdds = {
    _count: AddsCountAggregateOutputType | null
    _min: AddsMinAggregateOutputType | null
    _max: AddsMaxAggregateOutputType | null
  }

  export type AddsMinAggregateOutputType = {
    id: string | null
    title: string | null
    image: string | null
    productId: string | null
    visitorId: string | null
    date: Date | null
  }

  export type AddsMaxAggregateOutputType = {
    id: string | null
    title: string | null
    image: string | null
    productId: string | null
    visitorId: string | null
    date: Date | null
  }

  export type AddsCountAggregateOutputType = {
    id: number
    title: number
    image: number
    productId: number
    visitorId: number
    date: number
    _all: number
  }


  export type AddsMinAggregateInputType = {
    id?: true
    title?: true
    image?: true
    productId?: true
    visitorId?: true
    date?: true
  }

  export type AddsMaxAggregateInputType = {
    id?: true
    title?: true
    image?: true
    productId?: true
    visitorId?: true
    date?: true
  }

  export type AddsCountAggregateInputType = {
    id?: true
    title?: true
    image?: true
    productId?: true
    visitorId?: true
    date?: true
    _all?: true
  }

  export type AddsAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which adds to aggregate.
     */
    where?: addsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of adds to fetch.
     */
    orderBy?: addsOrderByWithRelationInput | addsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: addsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` adds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` adds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned adds
    **/
    _count?: true | AddsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AddsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AddsMaxAggregateInputType
  }

  export type GetAddsAggregateType<T extends AddsAggregateArgs> = {
        [P in keyof T & keyof AggregateAdds]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdds[P]>
      : GetScalarType<T[P], AggregateAdds[P]>
  }




  export type addsGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: addsWhereInput
    orderBy?: addsOrderByWithAggregationInput | addsOrderByWithAggregationInput[]
    by: AddsScalarFieldEnum[] | AddsScalarFieldEnum
    having?: addsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AddsCountAggregateInputType | true
    _min?: AddsMinAggregateInputType
    _max?: AddsMaxAggregateInputType
  }


  export type AddsGroupByOutputType = {
    id: string
    title: string
    image: string
    productId: string
    visitorId: string | null
    date: Date
    _count: AddsCountAggregateOutputType | null
    _min: AddsMinAggregateOutputType | null
    _max: AddsMaxAggregateOutputType | null
  }

  type GetAddsGroupByPayload<T extends addsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AddsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AddsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AddsGroupByOutputType[P]>
            : GetScalarType<T[P], AddsGroupByOutputType[P]>
        }
      >
    >


  export type addsSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    image?: boolean
    productId?: boolean
    visitorId?: boolean
    date?: boolean
    product?: boolean | adds$productArgs<ExtArgs>
    visitors?: boolean | adds$visitorsArgs<ExtArgs>
  }, ExtArgs["result"]["adds"]>

  export type addsSelectScalar = {
    id?: boolean
    title?: boolean
    image?: boolean
    productId?: boolean
    visitorId?: boolean
    date?: boolean
  }

  export type addsInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    product?: boolean | adds$productArgs<ExtArgs>
    visitors?: boolean | adds$visitorsArgs<ExtArgs>
  }


  type addsGetPayload<S extends boolean | null | undefined | addsArgs> = $Types.GetResult<addsPayload, S>

  type addsCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<addsFindManyArgs, 'select' | 'include'> & {
      select?: AddsCountAggregateInputType | true
    }

  export interface addsDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['adds'], meta: { name: 'adds' } }
    /**
     * Find zero or one Adds that matches the filter.
     * @param {addsFindUniqueArgs} args - Arguments to find a Adds
     * @example
     * // Get one Adds
     * const adds = await prisma.adds.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends addsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, addsFindUniqueArgs<ExtArgs>>
    ): Prisma__addsClient<$Types.GetResult<addsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Adds that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {addsFindUniqueOrThrowArgs} args - Arguments to find a Adds
     * @example
     * // Get one Adds
     * const adds = await prisma.adds.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends addsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, addsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__addsClient<$Types.GetResult<addsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Adds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {addsFindFirstArgs} args - Arguments to find a Adds
     * @example
     * // Get one Adds
     * const adds = await prisma.adds.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends addsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, addsFindFirstArgs<ExtArgs>>
    ): Prisma__addsClient<$Types.GetResult<addsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Adds that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {addsFindFirstOrThrowArgs} args - Arguments to find a Adds
     * @example
     * // Get one Adds
     * const adds = await prisma.adds.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends addsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, addsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__addsClient<$Types.GetResult<addsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Adds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {addsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Adds
     * const adds = await prisma.adds.findMany()
     * 
     * // Get first 10 Adds
     * const adds = await prisma.adds.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const addsWithIdOnly = await prisma.adds.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends addsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, addsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<addsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Adds.
     * @param {addsCreateArgs} args - Arguments to create a Adds.
     * @example
     * // Create one Adds
     * const Adds = await prisma.adds.create({
     *   data: {
     *     // ... data to create a Adds
     *   }
     * })
     * 
    **/
    create<T extends addsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, addsCreateArgs<ExtArgs>>
    ): Prisma__addsClient<$Types.GetResult<addsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Adds.
     *     @param {addsCreateManyArgs} args - Arguments to create many Adds.
     *     @example
     *     // Create many Adds
     *     const adds = await prisma.adds.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends addsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, addsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Adds.
     * @param {addsDeleteArgs} args - Arguments to delete one Adds.
     * @example
     * // Delete one Adds
     * const Adds = await prisma.adds.delete({
     *   where: {
     *     // ... filter to delete one Adds
     *   }
     * })
     * 
    **/
    delete<T extends addsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, addsDeleteArgs<ExtArgs>>
    ): Prisma__addsClient<$Types.GetResult<addsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Adds.
     * @param {addsUpdateArgs} args - Arguments to update one Adds.
     * @example
     * // Update one Adds
     * const adds = await prisma.adds.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends addsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, addsUpdateArgs<ExtArgs>>
    ): Prisma__addsClient<$Types.GetResult<addsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Adds.
     * @param {addsDeleteManyArgs} args - Arguments to filter Adds to delete.
     * @example
     * // Delete a few Adds
     * const { count } = await prisma.adds.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends addsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, addsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Adds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {addsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Adds
     * const adds = await prisma.adds.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends addsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, addsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Adds.
     * @param {addsUpsertArgs} args - Arguments to update or create a Adds.
     * @example
     * // Update or create a Adds
     * const adds = await prisma.adds.upsert({
     *   create: {
     *     // ... data to create a Adds
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Adds we want to update
     *   }
     * })
    **/
    upsert<T extends addsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, addsUpsertArgs<ExtArgs>>
    ): Prisma__addsClient<$Types.GetResult<addsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Adds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {addsCountArgs} args - Arguments to filter Adds to count.
     * @example
     * // Count the number of Adds
     * const count = await prisma.adds.count({
     *   where: {
     *     // ... the filter for the Adds we want to count
     *   }
     * })
    **/
    count<T extends addsCountArgs>(
      args?: Subset<T, addsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AddsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Adds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AddsAggregateArgs>(args: Subset<T, AddsAggregateArgs>): Prisma.PrismaPromise<GetAddsAggregateType<T>>

    /**
     * Group by Adds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {addsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends addsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: addsGroupByArgs['orderBy'] }
        : { orderBy?: addsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, addsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAddsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the adds model
   */
  readonly fields: addsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for adds.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__addsClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    product<T extends adds$productArgs<ExtArgs> = {}>(args?: Subset<T, adds$productArgs<ExtArgs>>): Prisma__productsClient<$Types.GetResult<productsPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    visitors<T extends adds$visitorsArgs<ExtArgs> = {}>(args?: Subset<T, adds$visitorsArgs<ExtArgs>>): Prisma__visitorsClient<$Types.GetResult<visitorsPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the adds model
   */ 
  interface addsFieldRefs {
    readonly id: FieldRef<"adds", 'String'>
    readonly title: FieldRef<"adds", 'String'>
    readonly image: FieldRef<"adds", 'String'>
    readonly productId: FieldRef<"adds", 'String'>
    readonly visitorId: FieldRef<"adds", 'String'>
    readonly date: FieldRef<"adds", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * adds findUnique
   */
  export type addsFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the adds
     */
    select?: addsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: addsInclude<ExtArgs> | null
    /**
     * Filter, which adds to fetch.
     */
    where: addsWhereUniqueInput
  }


  /**
   * adds findUniqueOrThrow
   */
  export type addsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the adds
     */
    select?: addsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: addsInclude<ExtArgs> | null
    /**
     * Filter, which adds to fetch.
     */
    where: addsWhereUniqueInput
  }


  /**
   * adds findFirst
   */
  export type addsFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the adds
     */
    select?: addsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: addsInclude<ExtArgs> | null
    /**
     * Filter, which adds to fetch.
     */
    where?: addsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of adds to fetch.
     */
    orderBy?: addsOrderByWithRelationInput | addsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for adds.
     */
    cursor?: addsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` adds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` adds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of adds.
     */
    distinct?: AddsScalarFieldEnum | AddsScalarFieldEnum[]
  }


  /**
   * adds findFirstOrThrow
   */
  export type addsFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the adds
     */
    select?: addsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: addsInclude<ExtArgs> | null
    /**
     * Filter, which adds to fetch.
     */
    where?: addsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of adds to fetch.
     */
    orderBy?: addsOrderByWithRelationInput | addsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for adds.
     */
    cursor?: addsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` adds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` adds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of adds.
     */
    distinct?: AddsScalarFieldEnum | AddsScalarFieldEnum[]
  }


  /**
   * adds findMany
   */
  export type addsFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the adds
     */
    select?: addsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: addsInclude<ExtArgs> | null
    /**
     * Filter, which adds to fetch.
     */
    where?: addsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of adds to fetch.
     */
    orderBy?: addsOrderByWithRelationInput | addsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing adds.
     */
    cursor?: addsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` adds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` adds.
     */
    skip?: number
    distinct?: AddsScalarFieldEnum | AddsScalarFieldEnum[]
  }


  /**
   * adds create
   */
  export type addsCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the adds
     */
    select?: addsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: addsInclude<ExtArgs> | null
    /**
     * The data needed to create a adds.
     */
    data: XOR<addsCreateInput, addsUncheckedCreateInput>
  }


  /**
   * adds createMany
   */
  export type addsCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many adds.
     */
    data: addsCreateManyInput | addsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * adds update
   */
  export type addsUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the adds
     */
    select?: addsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: addsInclude<ExtArgs> | null
    /**
     * The data needed to update a adds.
     */
    data: XOR<addsUpdateInput, addsUncheckedUpdateInput>
    /**
     * Choose, which adds to update.
     */
    where: addsWhereUniqueInput
  }


  /**
   * adds updateMany
   */
  export type addsUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update adds.
     */
    data: XOR<addsUpdateManyMutationInput, addsUncheckedUpdateManyInput>
    /**
     * Filter which adds to update
     */
    where?: addsWhereInput
  }


  /**
   * adds upsert
   */
  export type addsUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the adds
     */
    select?: addsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: addsInclude<ExtArgs> | null
    /**
     * The filter to search for the adds to update in case it exists.
     */
    where: addsWhereUniqueInput
    /**
     * In case the adds found by the `where` argument doesn't exist, create a new adds with this data.
     */
    create: XOR<addsCreateInput, addsUncheckedCreateInput>
    /**
     * In case the adds was found with the provided `where` argument, update it with this data.
     */
    update: XOR<addsUpdateInput, addsUncheckedUpdateInput>
  }


  /**
   * adds delete
   */
  export type addsDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the adds
     */
    select?: addsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: addsInclude<ExtArgs> | null
    /**
     * Filter which adds to delete.
     */
    where: addsWhereUniqueInput
  }


  /**
   * adds deleteMany
   */
  export type addsDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which adds to delete
     */
    where?: addsWhereInput
  }


  /**
   * adds.product
   */
  export type adds$productArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productsInclude<ExtArgs> | null
    where?: productsWhereInput
  }


  /**
   * adds.visitors
   */
  export type adds$visitorsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the visitors
     */
    select?: visitorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: visitorsInclude<ExtArgs> | null
    where?: visitorsWhereInput
  }


  /**
   * adds without action
   */
  export type addsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the adds
     */
    select?: addsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: addsInclude<ExtArgs> | null
  }



  /**
   * Model visitors
   */


  export type AggregateVisitors = {
    _count: VisitorsCountAggregateOutputType | null
    _min: VisitorsMinAggregateOutputType | null
    _max: VisitorsMaxAggregateOutputType | null
  }

  export type VisitorsMinAggregateOutputType = {
    id: string | null
    ip: string | null
    deviceName: string | null
    randomId: string | null
    date: Date | null
  }

  export type VisitorsMaxAggregateOutputType = {
    id: string | null
    ip: string | null
    deviceName: string | null
    randomId: string | null
    date: Date | null
  }

  export type VisitorsCountAggregateOutputType = {
    id: number
    ip: number
    deviceName: number
    randomId: number
    date: number
    _all: number
  }


  export type VisitorsMinAggregateInputType = {
    id?: true
    ip?: true
    deviceName?: true
    randomId?: true
    date?: true
  }

  export type VisitorsMaxAggregateInputType = {
    id?: true
    ip?: true
    deviceName?: true
    randomId?: true
    date?: true
  }

  export type VisitorsCountAggregateInputType = {
    id?: true
    ip?: true
    deviceName?: true
    randomId?: true
    date?: true
    _all?: true
  }

  export type VisitorsAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which visitors to aggregate.
     */
    where?: visitorsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of visitors to fetch.
     */
    orderBy?: visitorsOrderByWithRelationInput | visitorsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: visitorsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` visitors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` visitors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned visitors
    **/
    _count?: true | VisitorsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VisitorsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VisitorsMaxAggregateInputType
  }

  export type GetVisitorsAggregateType<T extends VisitorsAggregateArgs> = {
        [P in keyof T & keyof AggregateVisitors]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVisitors[P]>
      : GetScalarType<T[P], AggregateVisitors[P]>
  }




  export type visitorsGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: visitorsWhereInput
    orderBy?: visitorsOrderByWithAggregationInput | visitorsOrderByWithAggregationInput[]
    by: VisitorsScalarFieldEnum[] | VisitorsScalarFieldEnum
    having?: visitorsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VisitorsCountAggregateInputType | true
    _min?: VisitorsMinAggregateInputType
    _max?: VisitorsMaxAggregateInputType
  }


  export type VisitorsGroupByOutputType = {
    id: string
    ip: string
    deviceName: string
    randomId: string
    date: Date
    _count: VisitorsCountAggregateOutputType | null
    _min: VisitorsMinAggregateOutputType | null
    _max: VisitorsMaxAggregateOutputType | null
  }

  type GetVisitorsGroupByPayload<T extends visitorsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VisitorsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VisitorsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VisitorsGroupByOutputType[P]>
            : GetScalarType<T[P], VisitorsGroupByOutputType[P]>
        }
      >
    >


  export type visitorsSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ip?: boolean
    deviceName?: boolean
    randomId?: boolean
    date?: boolean
    adds?: boolean | visitors$addsArgs<ExtArgs>
  }, ExtArgs["result"]["visitors"]>

  export type visitorsSelectScalar = {
    id?: boolean
    ip?: boolean
    deviceName?: boolean
    randomId?: boolean
    date?: boolean
  }

  export type visitorsInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    adds?: boolean | visitors$addsArgs<ExtArgs>
  }


  type visitorsGetPayload<S extends boolean | null | undefined | visitorsArgs> = $Types.GetResult<visitorsPayload, S>

  type visitorsCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<visitorsFindManyArgs, 'select' | 'include'> & {
      select?: VisitorsCountAggregateInputType | true
    }

  export interface visitorsDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['visitors'], meta: { name: 'visitors' } }
    /**
     * Find zero or one Visitors that matches the filter.
     * @param {visitorsFindUniqueArgs} args - Arguments to find a Visitors
     * @example
     * // Get one Visitors
     * const visitors = await prisma.visitors.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends visitorsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, visitorsFindUniqueArgs<ExtArgs>>
    ): Prisma__visitorsClient<$Types.GetResult<visitorsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Visitors that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {visitorsFindUniqueOrThrowArgs} args - Arguments to find a Visitors
     * @example
     * // Get one Visitors
     * const visitors = await prisma.visitors.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends visitorsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, visitorsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__visitorsClient<$Types.GetResult<visitorsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Visitors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {visitorsFindFirstArgs} args - Arguments to find a Visitors
     * @example
     * // Get one Visitors
     * const visitors = await prisma.visitors.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends visitorsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, visitorsFindFirstArgs<ExtArgs>>
    ): Prisma__visitorsClient<$Types.GetResult<visitorsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Visitors that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {visitorsFindFirstOrThrowArgs} args - Arguments to find a Visitors
     * @example
     * // Get one Visitors
     * const visitors = await prisma.visitors.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends visitorsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, visitorsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__visitorsClient<$Types.GetResult<visitorsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Visitors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {visitorsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Visitors
     * const visitors = await prisma.visitors.findMany()
     * 
     * // Get first 10 Visitors
     * const visitors = await prisma.visitors.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const visitorsWithIdOnly = await prisma.visitors.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends visitorsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, visitorsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<visitorsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Visitors.
     * @param {visitorsCreateArgs} args - Arguments to create a Visitors.
     * @example
     * // Create one Visitors
     * const Visitors = await prisma.visitors.create({
     *   data: {
     *     // ... data to create a Visitors
     *   }
     * })
     * 
    **/
    create<T extends visitorsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, visitorsCreateArgs<ExtArgs>>
    ): Prisma__visitorsClient<$Types.GetResult<visitorsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Visitors.
     *     @param {visitorsCreateManyArgs} args - Arguments to create many Visitors.
     *     @example
     *     // Create many Visitors
     *     const visitors = await prisma.visitors.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends visitorsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, visitorsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Visitors.
     * @param {visitorsDeleteArgs} args - Arguments to delete one Visitors.
     * @example
     * // Delete one Visitors
     * const Visitors = await prisma.visitors.delete({
     *   where: {
     *     // ... filter to delete one Visitors
     *   }
     * })
     * 
    **/
    delete<T extends visitorsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, visitorsDeleteArgs<ExtArgs>>
    ): Prisma__visitorsClient<$Types.GetResult<visitorsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Visitors.
     * @param {visitorsUpdateArgs} args - Arguments to update one Visitors.
     * @example
     * // Update one Visitors
     * const visitors = await prisma.visitors.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends visitorsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, visitorsUpdateArgs<ExtArgs>>
    ): Prisma__visitorsClient<$Types.GetResult<visitorsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Visitors.
     * @param {visitorsDeleteManyArgs} args - Arguments to filter Visitors to delete.
     * @example
     * // Delete a few Visitors
     * const { count } = await prisma.visitors.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends visitorsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, visitorsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Visitors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {visitorsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Visitors
     * const visitors = await prisma.visitors.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends visitorsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, visitorsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Visitors.
     * @param {visitorsUpsertArgs} args - Arguments to update or create a Visitors.
     * @example
     * // Update or create a Visitors
     * const visitors = await prisma.visitors.upsert({
     *   create: {
     *     // ... data to create a Visitors
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Visitors we want to update
     *   }
     * })
    **/
    upsert<T extends visitorsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, visitorsUpsertArgs<ExtArgs>>
    ): Prisma__visitorsClient<$Types.GetResult<visitorsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Visitors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {visitorsCountArgs} args - Arguments to filter Visitors to count.
     * @example
     * // Count the number of Visitors
     * const count = await prisma.visitors.count({
     *   where: {
     *     // ... the filter for the Visitors we want to count
     *   }
     * })
    **/
    count<T extends visitorsCountArgs>(
      args?: Subset<T, visitorsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VisitorsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Visitors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VisitorsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VisitorsAggregateArgs>(args: Subset<T, VisitorsAggregateArgs>): Prisma.PrismaPromise<GetVisitorsAggregateType<T>>

    /**
     * Group by Visitors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {visitorsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends visitorsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: visitorsGroupByArgs['orderBy'] }
        : { orderBy?: visitorsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, visitorsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVisitorsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the visitors model
   */
  readonly fields: visitorsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for visitors.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__visitorsClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    adds<T extends visitors$addsArgs<ExtArgs> = {}>(args?: Subset<T, visitors$addsArgs<ExtArgs>>): Prisma__addsClient<$Types.GetResult<addsPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the visitors model
   */ 
  interface visitorsFieldRefs {
    readonly id: FieldRef<"visitors", 'String'>
    readonly ip: FieldRef<"visitors", 'String'>
    readonly deviceName: FieldRef<"visitors", 'String'>
    readonly randomId: FieldRef<"visitors", 'String'>
    readonly date: FieldRef<"visitors", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * visitors findUnique
   */
  export type visitorsFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the visitors
     */
    select?: visitorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: visitorsInclude<ExtArgs> | null
    /**
     * Filter, which visitors to fetch.
     */
    where: visitorsWhereUniqueInput
  }


  /**
   * visitors findUniqueOrThrow
   */
  export type visitorsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the visitors
     */
    select?: visitorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: visitorsInclude<ExtArgs> | null
    /**
     * Filter, which visitors to fetch.
     */
    where: visitorsWhereUniqueInput
  }


  /**
   * visitors findFirst
   */
  export type visitorsFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the visitors
     */
    select?: visitorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: visitorsInclude<ExtArgs> | null
    /**
     * Filter, which visitors to fetch.
     */
    where?: visitorsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of visitors to fetch.
     */
    orderBy?: visitorsOrderByWithRelationInput | visitorsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for visitors.
     */
    cursor?: visitorsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` visitors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` visitors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of visitors.
     */
    distinct?: VisitorsScalarFieldEnum | VisitorsScalarFieldEnum[]
  }


  /**
   * visitors findFirstOrThrow
   */
  export type visitorsFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the visitors
     */
    select?: visitorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: visitorsInclude<ExtArgs> | null
    /**
     * Filter, which visitors to fetch.
     */
    where?: visitorsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of visitors to fetch.
     */
    orderBy?: visitorsOrderByWithRelationInput | visitorsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for visitors.
     */
    cursor?: visitorsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` visitors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` visitors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of visitors.
     */
    distinct?: VisitorsScalarFieldEnum | VisitorsScalarFieldEnum[]
  }


  /**
   * visitors findMany
   */
  export type visitorsFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the visitors
     */
    select?: visitorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: visitorsInclude<ExtArgs> | null
    /**
     * Filter, which visitors to fetch.
     */
    where?: visitorsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of visitors to fetch.
     */
    orderBy?: visitorsOrderByWithRelationInput | visitorsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing visitors.
     */
    cursor?: visitorsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` visitors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` visitors.
     */
    skip?: number
    distinct?: VisitorsScalarFieldEnum | VisitorsScalarFieldEnum[]
  }


  /**
   * visitors create
   */
  export type visitorsCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the visitors
     */
    select?: visitorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: visitorsInclude<ExtArgs> | null
    /**
     * The data needed to create a visitors.
     */
    data: XOR<visitorsCreateInput, visitorsUncheckedCreateInput>
  }


  /**
   * visitors createMany
   */
  export type visitorsCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many visitors.
     */
    data: visitorsCreateManyInput | visitorsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * visitors update
   */
  export type visitorsUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the visitors
     */
    select?: visitorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: visitorsInclude<ExtArgs> | null
    /**
     * The data needed to update a visitors.
     */
    data: XOR<visitorsUpdateInput, visitorsUncheckedUpdateInput>
    /**
     * Choose, which visitors to update.
     */
    where: visitorsWhereUniqueInput
  }


  /**
   * visitors updateMany
   */
  export type visitorsUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update visitors.
     */
    data: XOR<visitorsUpdateManyMutationInput, visitorsUncheckedUpdateManyInput>
    /**
     * Filter which visitors to update
     */
    where?: visitorsWhereInput
  }


  /**
   * visitors upsert
   */
  export type visitorsUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the visitors
     */
    select?: visitorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: visitorsInclude<ExtArgs> | null
    /**
     * The filter to search for the visitors to update in case it exists.
     */
    where: visitorsWhereUniqueInput
    /**
     * In case the visitors found by the `where` argument doesn't exist, create a new visitors with this data.
     */
    create: XOR<visitorsCreateInput, visitorsUncheckedCreateInput>
    /**
     * In case the visitors was found with the provided `where` argument, update it with this data.
     */
    update: XOR<visitorsUpdateInput, visitorsUncheckedUpdateInput>
  }


  /**
   * visitors delete
   */
  export type visitorsDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the visitors
     */
    select?: visitorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: visitorsInclude<ExtArgs> | null
    /**
     * Filter which visitors to delete.
     */
    where: visitorsWhereUniqueInput
  }


  /**
   * visitors deleteMany
   */
  export type visitorsDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which visitors to delete
     */
    where?: visitorsWhereInput
  }


  /**
   * visitors.adds
   */
  export type visitors$addsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the adds
     */
    select?: addsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: addsInclude<ExtArgs> | null
    where?: addsWhereInput
  }


  /**
   * visitors without action
   */
  export type visitorsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the visitors
     */
    select?: visitorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: visitorsInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsersScalarFieldEnum: {
    id: 'id',
    email: 'email',
    name: 'name',
    image: 'image',
    phone: 'phone',
    birthday: 'birthday',
    gender: 'gender',
    role: 'role',
    uid: 'uid',
    address: 'address',
    createdAt: 'createdAt',
    pushToken: 'pushToken',
    verified: 'verified'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const CategoryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    icon: 'icon'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const SubCategoryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    categoryId: 'categoryId'
  };

  export type SubCategoryScalarFieldEnum = (typeof SubCategoryScalarFieldEnum)[keyof typeof SubCategoryScalarFieldEnum]


  export const OptionsScalarFieldEnum: {
    id: 'id',
    name: 'name',
    subCategoryId: 'subCategoryId'
  };

  export type OptionsScalarFieldEnum = (typeof OptionsScalarFieldEnum)[keyof typeof OptionsScalarFieldEnum]


  export const SellerScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    shopName: 'shopName',
    shopAddress: 'shopAddress',
    categories: 'categories',
    logo: 'logo',
    verified: 'verified'
  };

  export type SellerScalarFieldEnum = (typeof SellerScalarFieldEnum)[keyof typeof SellerScalarFieldEnum]


  export const BrandsScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    brandName: 'brandName',
    brandAddress: 'brandAddress',
    brandIcon: 'brandIcon',
    categories: 'categories',
    verified: 'verified'
  };

  export type BrandsScalarFieldEnum = (typeof BrandsScalarFieldEnum)[keyof typeof BrandsScalarFieldEnum]


  export const ProductsScalarFieldEnum: {
    id: 'id',
    price: 'price',
    coin: 'coin',
    title: 'title',
    description: 'description',
    thumbnail: 'thumbnail',
    quantity: 'quantity',
    minOrder: 'minOrder',
    freeCoin: 'freeCoin',
    offer: 'offer',
    percentage: 'percentage',
    freeDelivery: 'freeDelivery',
    fixedPrice: 'fixedPrice',
    createdAt: 'createdAt',
    colorId: 'colorId',
    sizeId: 'sizeId',
    specificationsId: 'specificationsId',
    images: 'images',
    verified: 'verified',
    sellerId: 'sellerId',
    brandId: 'brandId',
    categoryId: 'categoryId',
    subCategoryId: 'subCategoryId',
    optionId: 'optionId',
    userId: 'userId'
  };

  export type ProductsScalarFieldEnum = (typeof ProductsScalarFieldEnum)[keyof typeof ProductsScalarFieldEnum]


  export const ColorsScalarFieldEnum: {
    id: 'id',
    title: 'title',
    color: 'color'
  };

  export type ColorsScalarFieldEnum = (typeof ColorsScalarFieldEnum)[keyof typeof ColorsScalarFieldEnum]


  export const SizeScalarFieldEnum: {
    id: 'id',
    title: 'title',
    cm: 'cm'
  };

  export type SizeScalarFieldEnum = (typeof SizeScalarFieldEnum)[keyof typeof SizeScalarFieldEnum]


  export const SpecificationsScalarFieldEnum: {
    id: 'id',
    title: 'title',
    details: 'details'
  };

  export type SpecificationsScalarFieldEnum = (typeof SpecificationsScalarFieldEnum)[keyof typeof SpecificationsScalarFieldEnum]


  export const CommentsScalarFieldEnum: {
    id: 'id',
    message: 'message',
    image: 'image',
    replay: 'replay',
    userId: 'userId',
    productId: 'productId',
    receiverId: 'receiverId'
  };

  export type CommentsScalarFieldEnum = (typeof CommentsScalarFieldEnum)[keyof typeof CommentsScalarFieldEnum]


  export const ReviewsScalarFieldEnum: {
    id: 'id',
    message: 'message',
    rate: 'rate',
    userId: 'userId',
    productId: 'productId',
    sellerId: 'sellerId',
    brandId: 'brandId'
  };

  export type ReviewsScalarFieldEnum = (typeof ReviewsScalarFieldEnum)[keyof typeof ReviewsScalarFieldEnum]


  export const NotificationsScalarFieldEnum: {
    id: 'id',
    message: 'message',
    title: 'title',
    userId: 'userId',
    commentId: 'commentId',
    reviewId: 'reviewId'
  };

  export type NotificationsScalarFieldEnum = (typeof NotificationsScalarFieldEnum)[keyof typeof NotificationsScalarFieldEnum]


  export const FlashSellScalarFieldEnum: {
    id: 'id',
    startAt: 'startAt',
    endAt: 'endAt',
    banner: 'banner',
    title: 'title'
  };

  export type FlashSellScalarFieldEnum = (typeof FlashSellScalarFieldEnum)[keyof typeof FlashSellScalarFieldEnum]


  export const FlashSellProductScalarFieldEnum: {
    id: 'id',
    offer: 'offer',
    percentage: 'percentage',
    minSell: 'minSell',
    quantity: 'quantity',
    deliveryFree: 'deliveryFree',
    flashSellId: 'flashSellId',
    productId: 'productId',
    userId: 'userId',
    createdAt: 'createdAt'
  };

  export type FlashSellProductScalarFieldEnum = (typeof FlashSellProductScalarFieldEnum)[keyof typeof FlashSellProductScalarFieldEnum]


  export const ContactsScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    name: 'name',
    phone: 'phone',
    email: 'email',
    date: 'date'
  };

  export type ContactsScalarFieldEnum = (typeof ContactsScalarFieldEnum)[keyof typeof ContactsScalarFieldEnum]


  export const ConversationsScalarFieldEnum: {
    id: 'id',
    senderId: 'senderId',
    receiverId: 'receiverId',
    date: 'date'
  };

  export type ConversationsScalarFieldEnum = (typeof ConversationsScalarFieldEnum)[keyof typeof ConversationsScalarFieldEnum]


  export const MessagesScalarFieldEnum: {
    id: 'id',
    message: 'message',
    image: 'image',
    date: 'date',
    productId: 'productId'
  };

  export type MessagesScalarFieldEnum = (typeof MessagesScalarFieldEnum)[keyof typeof MessagesScalarFieldEnum]


  export const OrdersScalarFieldEnum: {
    id: 'id',
    buyerid: 'buyerid',
    productId: 'productId',
    offerPrice: 'offerPrice',
    date: 'date'
  };

  export type OrdersScalarFieldEnum = (typeof OrdersScalarFieldEnum)[keyof typeof OrdersScalarFieldEnum]


  export const BannerScalarFieldEnum: {
    id: 'id',
    title: 'title',
    image: 'image',
    productId: 'productId'
  };

  export type BannerScalarFieldEnum = (typeof BannerScalarFieldEnum)[keyof typeof BannerScalarFieldEnum]


  export const AddsScalarFieldEnum: {
    id: 'id',
    title: 'title',
    image: 'image',
    productId: 'productId',
    visitorId: 'visitorId',
    date: 'date'
  };

  export type AddsScalarFieldEnum = (typeof AddsScalarFieldEnum)[keyof typeof AddsScalarFieldEnum]


  export const VisitorsScalarFieldEnum: {
    id: 'id',
    ip: 'ip',
    deviceName: 'deviceName',
    randomId: 'randomId',
    date: 'date'
  };

  export type VisitorsScalarFieldEnum = (typeof VisitorsScalarFieldEnum)[keyof typeof VisitorsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type usersWhereInput = {
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    id?: StringFilter<"users"> | string
    email?: StringNullableFilter<"users"> | string | null
    name?: StringFilter<"users"> | string
    image?: StringNullableFilter<"users"> | string | null
    phone?: StringNullableFilter<"users"> | string | null
    birthday?: StringNullableFilter<"users"> | string | null
    gender?: StringNullableFilter<"users"> | string | null
    role?: IntFilter<"users"> | number
    uid?: StringFilter<"users"> | string
    address?: JsonNullableFilter<"users">
    createdAt?: DateTimeFilter<"users"> | Date | string
    pushToken?: StringNullableFilter<"users"> | string | null
    verified?: BoolFilter<"users"> | boolean
    seller?: SellerListRelationFilter
    brand?: BrandsListRelationFilter
    products?: ProductsListRelationFilter
    comments?: CommentsListRelationFilter
    reviews?: ReviewsListRelationFilter
    notifications?: NotificationsListRelationFilter
    flashSellProduct?: FlashSellProductListRelationFilter
    conversations?: ConversationsListRelationFilter
    orders?: OrdersListRelationFilter
  }

  export type usersOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrderInput | SortOrder
    name?: SortOrder
    image?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    birthday?: SortOrderInput | SortOrder
    gender?: SortOrderInput | SortOrder
    role?: SortOrder
    uid?: SortOrder
    address?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    pushToken?: SortOrderInput | SortOrder
    verified?: SortOrder
    seller?: sellerOrderByRelationAggregateInput
    brand?: brandsOrderByRelationAggregateInput
    products?: productsOrderByRelationAggregateInput
    comments?: commentsOrderByRelationAggregateInput
    reviews?: reviewsOrderByRelationAggregateInput
    notifications?: notificationsOrderByRelationAggregateInput
    flashSellProduct?: flashSellProductOrderByRelationAggregateInput
    conversations?: conversationsOrderByRelationAggregateInput
    orders?: ordersOrderByRelationAggregateInput
  }

  export type usersWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    phone?: string
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    name?: StringFilter<"users"> | string
    image?: StringNullableFilter<"users"> | string | null
    birthday?: StringNullableFilter<"users"> | string | null
    gender?: StringNullableFilter<"users"> | string | null
    role?: IntFilter<"users"> | number
    uid?: StringFilter<"users"> | string
    address?: JsonNullableFilter<"users">
    createdAt?: DateTimeFilter<"users"> | Date | string
    pushToken?: StringNullableFilter<"users"> | string | null
    verified?: BoolFilter<"users"> | boolean
    seller?: SellerListRelationFilter
    brand?: BrandsListRelationFilter
    products?: ProductsListRelationFilter
    comments?: CommentsListRelationFilter
    reviews?: ReviewsListRelationFilter
    notifications?: NotificationsListRelationFilter
    flashSellProduct?: FlashSellProductListRelationFilter
    conversations?: ConversationsListRelationFilter
    orders?: OrdersListRelationFilter
  }, "id" | "email" | "phone">

  export type usersOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrderInput | SortOrder
    name?: SortOrder
    image?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    birthday?: SortOrderInput | SortOrder
    gender?: SortOrderInput | SortOrder
    role?: SortOrder
    uid?: SortOrder
    address?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    pushToken?: SortOrderInput | SortOrder
    verified?: SortOrder
    _count?: usersCountOrderByAggregateInput
    _avg?: usersAvgOrderByAggregateInput
    _max?: usersMaxOrderByAggregateInput
    _min?: usersMinOrderByAggregateInput
    _sum?: usersSumOrderByAggregateInput
  }

  export type usersScalarWhereWithAggregatesInput = {
    AND?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    OR?: usersScalarWhereWithAggregatesInput[]
    NOT?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"users"> | string
    email?: StringNullableWithAggregatesFilter<"users"> | string | null
    name?: StringWithAggregatesFilter<"users"> | string
    image?: StringNullableWithAggregatesFilter<"users"> | string | null
    phone?: StringNullableWithAggregatesFilter<"users"> | string | null
    birthday?: StringNullableWithAggregatesFilter<"users"> | string | null
    gender?: StringNullableWithAggregatesFilter<"users"> | string | null
    role?: IntWithAggregatesFilter<"users"> | number
    uid?: StringWithAggregatesFilter<"users"> | string
    address?: JsonNullableWithAggregatesFilter<"users">
    createdAt?: DateTimeWithAggregatesFilter<"users"> | Date | string
    pushToken?: StringNullableWithAggregatesFilter<"users"> | string | null
    verified?: BoolWithAggregatesFilter<"users"> | boolean
  }

  export type categoryWhereInput = {
    AND?: categoryWhereInput | categoryWhereInput[]
    OR?: categoryWhereInput[]
    NOT?: categoryWhereInput | categoryWhereInput[]
    id?: StringFilter<"category"> | string
    name?: StringFilter<"category"> | string
    icon?: StringFilter<"category"> | string
    subCategory?: SubCategoryListRelationFilter
    products?: ProductsListRelationFilter
  }

  export type categoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    icon?: SortOrder
    subCategory?: subCategoryOrderByRelationAggregateInput
    products?: productsOrderByRelationAggregateInput
  }

  export type categoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: categoryWhereInput | categoryWhereInput[]
    OR?: categoryWhereInput[]
    NOT?: categoryWhereInput | categoryWhereInput[]
    icon?: StringFilter<"category"> | string
    subCategory?: SubCategoryListRelationFilter
    products?: ProductsListRelationFilter
  }, "id" | "name">

  export type categoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    icon?: SortOrder
    _count?: categoryCountOrderByAggregateInput
    _max?: categoryMaxOrderByAggregateInput
    _min?: categoryMinOrderByAggregateInput
  }

  export type categoryScalarWhereWithAggregatesInput = {
    AND?: categoryScalarWhereWithAggregatesInput | categoryScalarWhereWithAggregatesInput[]
    OR?: categoryScalarWhereWithAggregatesInput[]
    NOT?: categoryScalarWhereWithAggregatesInput | categoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"category"> | string
    name?: StringWithAggregatesFilter<"category"> | string
    icon?: StringWithAggregatesFilter<"category"> | string
  }

  export type subCategoryWhereInput = {
    AND?: subCategoryWhereInput | subCategoryWhereInput[]
    OR?: subCategoryWhereInput[]
    NOT?: subCategoryWhereInput | subCategoryWhereInput[]
    id?: StringFilter<"subCategory"> | string
    name?: StringFilter<"subCategory"> | string
    categoryId?: StringFilter<"subCategory"> | string
    category?: XOR<CategoryNullableRelationFilter, categoryWhereInput> | null
    options?: OptionsListRelationFilter
    products?: ProductsListRelationFilter
  }

  export type subCategoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    categoryId?: SortOrder
    category?: categoryOrderByWithRelationInput
    options?: optionsOrderByRelationAggregateInput
    products?: productsOrderByRelationAggregateInput
  }

  export type subCategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: subCategoryWhereInput | subCategoryWhereInput[]
    OR?: subCategoryWhereInput[]
    NOT?: subCategoryWhereInput | subCategoryWhereInput[]
    categoryId?: StringFilter<"subCategory"> | string
    category?: XOR<CategoryNullableRelationFilter, categoryWhereInput> | null
    options?: OptionsListRelationFilter
    products?: ProductsListRelationFilter
  }, "id" | "name">

  export type subCategoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    categoryId?: SortOrder
    _count?: subCategoryCountOrderByAggregateInput
    _max?: subCategoryMaxOrderByAggregateInput
    _min?: subCategoryMinOrderByAggregateInput
  }

  export type subCategoryScalarWhereWithAggregatesInput = {
    AND?: subCategoryScalarWhereWithAggregatesInput | subCategoryScalarWhereWithAggregatesInput[]
    OR?: subCategoryScalarWhereWithAggregatesInput[]
    NOT?: subCategoryScalarWhereWithAggregatesInput | subCategoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"subCategory"> | string
    name?: StringWithAggregatesFilter<"subCategory"> | string
    categoryId?: StringWithAggregatesFilter<"subCategory"> | string
  }

  export type optionsWhereInput = {
    AND?: optionsWhereInput | optionsWhereInput[]
    OR?: optionsWhereInput[]
    NOT?: optionsWhereInput | optionsWhereInput[]
    id?: StringFilter<"options"> | string
    name?: StringFilter<"options"> | string
    subCategoryId?: StringFilter<"options"> | string
    subCategory?: XOR<SubCategoryNullableRelationFilter, subCategoryWhereInput> | null
    products?: ProductsListRelationFilter
  }

  export type optionsOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    subCategoryId?: SortOrder
    subCategory?: subCategoryOrderByWithRelationInput
    products?: productsOrderByRelationAggregateInput
  }

  export type optionsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: optionsWhereInput | optionsWhereInput[]
    OR?: optionsWhereInput[]
    NOT?: optionsWhereInput | optionsWhereInput[]
    name?: StringFilter<"options"> | string
    subCategoryId?: StringFilter<"options"> | string
    subCategory?: XOR<SubCategoryNullableRelationFilter, subCategoryWhereInput> | null
    products?: ProductsListRelationFilter
  }, "id">

  export type optionsOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    subCategoryId?: SortOrder
    _count?: optionsCountOrderByAggregateInput
    _max?: optionsMaxOrderByAggregateInput
    _min?: optionsMinOrderByAggregateInput
  }

  export type optionsScalarWhereWithAggregatesInput = {
    AND?: optionsScalarWhereWithAggregatesInput | optionsScalarWhereWithAggregatesInput[]
    OR?: optionsScalarWhereWithAggregatesInput[]
    NOT?: optionsScalarWhereWithAggregatesInput | optionsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"options"> | string
    name?: StringWithAggregatesFilter<"options"> | string
    subCategoryId?: StringWithAggregatesFilter<"options"> | string
  }

  export type sellerWhereInput = {
    AND?: sellerWhereInput | sellerWhereInput[]
    OR?: sellerWhereInput[]
    NOT?: sellerWhereInput | sellerWhereInput[]
    id?: StringFilter<"seller"> | string
    userId?: StringFilter<"seller"> | string
    shopName?: StringFilter<"seller"> | string
    shopAddress?: StringFilter<"seller"> | string
    categories?: JsonNullableFilter<"seller">
    logo?: StringFilter<"seller"> | string
    verified?: BoolFilter<"seller"> | boolean
    user?: XOR<UsersNullableRelationFilter, usersWhereInput> | null
    products?: ProductsListRelationFilter
    reviews?: ReviewsListRelationFilter
  }

  export type sellerOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    shopName?: SortOrder
    shopAddress?: SortOrder
    categories?: SortOrderInput | SortOrder
    logo?: SortOrder
    verified?: SortOrder
    user?: usersOrderByWithRelationInput
    products?: productsOrderByRelationAggregateInput
    reviews?: reviewsOrderByRelationAggregateInput
  }

  export type sellerWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    shopName?: string
    AND?: sellerWhereInput | sellerWhereInput[]
    OR?: sellerWhereInput[]
    NOT?: sellerWhereInput | sellerWhereInput[]
    userId?: StringFilter<"seller"> | string
    shopAddress?: StringFilter<"seller"> | string
    categories?: JsonNullableFilter<"seller">
    logo?: StringFilter<"seller"> | string
    verified?: BoolFilter<"seller"> | boolean
    user?: XOR<UsersNullableRelationFilter, usersWhereInput> | null
    products?: ProductsListRelationFilter
    reviews?: ReviewsListRelationFilter
  }, "id" | "shopName">

  export type sellerOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    shopName?: SortOrder
    shopAddress?: SortOrder
    categories?: SortOrderInput | SortOrder
    logo?: SortOrder
    verified?: SortOrder
    _count?: sellerCountOrderByAggregateInput
    _max?: sellerMaxOrderByAggregateInput
    _min?: sellerMinOrderByAggregateInput
  }

  export type sellerScalarWhereWithAggregatesInput = {
    AND?: sellerScalarWhereWithAggregatesInput | sellerScalarWhereWithAggregatesInput[]
    OR?: sellerScalarWhereWithAggregatesInput[]
    NOT?: sellerScalarWhereWithAggregatesInput | sellerScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"seller"> | string
    userId?: StringWithAggregatesFilter<"seller"> | string
    shopName?: StringWithAggregatesFilter<"seller"> | string
    shopAddress?: StringWithAggregatesFilter<"seller"> | string
    categories?: JsonNullableWithAggregatesFilter<"seller">
    logo?: StringWithAggregatesFilter<"seller"> | string
    verified?: BoolWithAggregatesFilter<"seller"> | boolean
  }

  export type brandsWhereInput = {
    AND?: brandsWhereInput | brandsWhereInput[]
    OR?: brandsWhereInput[]
    NOT?: brandsWhereInput | brandsWhereInput[]
    id?: StringFilter<"brands"> | string
    userId?: StringFilter<"brands"> | string
    brandName?: StringFilter<"brands"> | string
    brandAddress?: StringFilter<"brands"> | string
    brandIcon?: StringFilter<"brands"> | string
    categories?: JsonNullableFilter<"brands">
    verified?: BoolFilter<"brands"> | boolean
    user?: XOR<UsersNullableRelationFilter, usersWhereInput> | null
    products?: ProductsListRelationFilter
    reviews?: ReviewsListRelationFilter
  }

  export type brandsOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    brandName?: SortOrder
    brandAddress?: SortOrder
    brandIcon?: SortOrder
    categories?: SortOrderInput | SortOrder
    verified?: SortOrder
    user?: usersOrderByWithRelationInput
    products?: productsOrderByRelationAggregateInput
    reviews?: reviewsOrderByRelationAggregateInput
  }

  export type brandsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    brandName?: string
    AND?: brandsWhereInput | brandsWhereInput[]
    OR?: brandsWhereInput[]
    NOT?: brandsWhereInput | brandsWhereInput[]
    userId?: StringFilter<"brands"> | string
    brandAddress?: StringFilter<"brands"> | string
    brandIcon?: StringFilter<"brands"> | string
    categories?: JsonNullableFilter<"brands">
    verified?: BoolFilter<"brands"> | boolean
    user?: XOR<UsersNullableRelationFilter, usersWhereInput> | null
    products?: ProductsListRelationFilter
    reviews?: ReviewsListRelationFilter
  }, "id" | "brandName">

  export type brandsOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    brandName?: SortOrder
    brandAddress?: SortOrder
    brandIcon?: SortOrder
    categories?: SortOrderInput | SortOrder
    verified?: SortOrder
    _count?: brandsCountOrderByAggregateInput
    _max?: brandsMaxOrderByAggregateInput
    _min?: brandsMinOrderByAggregateInput
  }

  export type brandsScalarWhereWithAggregatesInput = {
    AND?: brandsScalarWhereWithAggregatesInput | brandsScalarWhereWithAggregatesInput[]
    OR?: brandsScalarWhereWithAggregatesInput[]
    NOT?: brandsScalarWhereWithAggregatesInput | brandsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"brands"> | string
    userId?: StringWithAggregatesFilter<"brands"> | string
    brandName?: StringWithAggregatesFilter<"brands"> | string
    brandAddress?: StringWithAggregatesFilter<"brands"> | string
    brandIcon?: StringWithAggregatesFilter<"brands"> | string
    categories?: JsonNullableWithAggregatesFilter<"brands">
    verified?: BoolWithAggregatesFilter<"brands"> | boolean
  }

  export type productsWhereInput = {
    AND?: productsWhereInput | productsWhereInput[]
    OR?: productsWhereInput[]
    NOT?: productsWhereInput | productsWhereInput[]
    id?: StringFilter<"products"> | string
    price?: IntFilter<"products"> | number
    coin?: BoolFilter<"products"> | boolean
    title?: StringFilter<"products"> | string
    description?: StringFilter<"products"> | string
    thumbnail?: StringFilter<"products"> | string
    quantity?: IntFilter<"products"> | number
    minOrder?: IntFilter<"products"> | number
    freeCoin?: IntFilter<"products"> | number
    offer?: IntFilter<"products"> | number
    percentage?: BoolFilter<"products"> | boolean
    freeDelivery?: BoolFilter<"products"> | boolean
    fixedPrice?: BoolFilter<"products"> | boolean
    createdAt?: DateTimeFilter<"products"> | Date | string
    colorId?: StringFilter<"products"> | string
    sizeId?: StringFilter<"products"> | string
    specificationsId?: StringFilter<"products"> | string
    images?: JsonNullableFilter<"products">
    verified?: BoolFilter<"products"> | boolean
    sellerId?: StringNullableFilter<"products"> | string | null
    brandId?: StringNullableFilter<"products"> | string | null
    categoryId?: StringFilter<"products"> | string
    subCategoryId?: StringFilter<"products"> | string
    optionId?: StringFilter<"products"> | string
    userId?: StringFilter<"products"> | string
    colors?: XOR<ColorsNullableRelationFilter, colorsWhereInput> | null
    size?: XOR<SizeNullableRelationFilter, sizeWhereInput> | null
    specification?: XOR<SpecificationsNullableRelationFilter, specificationsWhereInput> | null
    comments?: CommentsListRelationFilter
    reviews?: ReviewsListRelationFilter
    flashSellProduct?: FlashSellProductListRelationFilter
    seller?: XOR<SellerNullableRelationFilter, sellerWhereInput> | null
    brand?: XOR<BrandsNullableRelationFilter, brandsWhereInput> | null
    category?: XOR<CategoryNullableRelationFilter, categoryWhereInput> | null
    subCategory?: XOR<SubCategoryNullableRelationFilter, subCategoryWhereInput> | null
    option?: XOR<OptionsNullableRelationFilter, optionsWhereInput> | null
    user?: XOR<UsersNullableRelationFilter, usersWhereInput> | null
    banner?: BannerListRelationFilter
    adds?: AddsListRelationFilter
    messages?: MessagesListRelationFilter
    orders?: OrdersListRelationFilter
  }

  export type productsOrderByWithRelationInput = {
    id?: SortOrder
    price?: SortOrder
    coin?: SortOrder
    title?: SortOrder
    description?: SortOrder
    thumbnail?: SortOrder
    quantity?: SortOrder
    minOrder?: SortOrder
    freeCoin?: SortOrder
    offer?: SortOrder
    percentage?: SortOrder
    freeDelivery?: SortOrder
    fixedPrice?: SortOrder
    createdAt?: SortOrder
    colorId?: SortOrder
    sizeId?: SortOrder
    specificationsId?: SortOrder
    images?: SortOrderInput | SortOrder
    verified?: SortOrder
    sellerId?: SortOrderInput | SortOrder
    brandId?: SortOrderInput | SortOrder
    categoryId?: SortOrder
    subCategoryId?: SortOrder
    optionId?: SortOrder
    userId?: SortOrder
    colors?: colorsOrderByWithRelationInput
    size?: sizeOrderByWithRelationInput
    specification?: specificationsOrderByWithRelationInput
    comments?: commentsOrderByRelationAggregateInput
    reviews?: reviewsOrderByRelationAggregateInput
    flashSellProduct?: flashSellProductOrderByRelationAggregateInput
    seller?: sellerOrderByWithRelationInput
    brand?: brandsOrderByWithRelationInput
    category?: categoryOrderByWithRelationInput
    subCategory?: subCategoryOrderByWithRelationInput
    option?: optionsOrderByWithRelationInput
    user?: usersOrderByWithRelationInput
    banner?: bannerOrderByRelationAggregateInput
    adds?: addsOrderByRelationAggregateInput
    messages?: messagesOrderByRelationAggregateInput
    orders?: ordersOrderByRelationAggregateInput
  }

  export type productsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: productsWhereInput | productsWhereInput[]
    OR?: productsWhereInput[]
    NOT?: productsWhereInput | productsWhereInput[]
    price?: IntFilter<"products"> | number
    coin?: BoolFilter<"products"> | boolean
    title?: StringFilter<"products"> | string
    description?: StringFilter<"products"> | string
    thumbnail?: StringFilter<"products"> | string
    quantity?: IntFilter<"products"> | number
    minOrder?: IntFilter<"products"> | number
    freeCoin?: IntFilter<"products"> | number
    offer?: IntFilter<"products"> | number
    percentage?: BoolFilter<"products"> | boolean
    freeDelivery?: BoolFilter<"products"> | boolean
    fixedPrice?: BoolFilter<"products"> | boolean
    createdAt?: DateTimeFilter<"products"> | Date | string
    colorId?: StringFilter<"products"> | string
    sizeId?: StringFilter<"products"> | string
    specificationsId?: StringFilter<"products"> | string
    images?: JsonNullableFilter<"products">
    verified?: BoolFilter<"products"> | boolean
    sellerId?: StringNullableFilter<"products"> | string | null
    brandId?: StringNullableFilter<"products"> | string | null
    categoryId?: StringFilter<"products"> | string
    subCategoryId?: StringFilter<"products"> | string
    optionId?: StringFilter<"products"> | string
    userId?: StringFilter<"products"> | string
    colors?: XOR<ColorsNullableRelationFilter, colorsWhereInput> | null
    size?: XOR<SizeNullableRelationFilter, sizeWhereInput> | null
    specification?: XOR<SpecificationsNullableRelationFilter, specificationsWhereInput> | null
    comments?: CommentsListRelationFilter
    reviews?: ReviewsListRelationFilter
    flashSellProduct?: FlashSellProductListRelationFilter
    seller?: XOR<SellerNullableRelationFilter, sellerWhereInput> | null
    brand?: XOR<BrandsNullableRelationFilter, brandsWhereInput> | null
    category?: XOR<CategoryNullableRelationFilter, categoryWhereInput> | null
    subCategory?: XOR<SubCategoryNullableRelationFilter, subCategoryWhereInput> | null
    option?: XOR<OptionsNullableRelationFilter, optionsWhereInput> | null
    user?: XOR<UsersNullableRelationFilter, usersWhereInput> | null
    banner?: BannerListRelationFilter
    adds?: AddsListRelationFilter
    messages?: MessagesListRelationFilter
    orders?: OrdersListRelationFilter
  }, "id">

  export type productsOrderByWithAggregationInput = {
    id?: SortOrder
    price?: SortOrder
    coin?: SortOrder
    title?: SortOrder
    description?: SortOrder
    thumbnail?: SortOrder
    quantity?: SortOrder
    minOrder?: SortOrder
    freeCoin?: SortOrder
    offer?: SortOrder
    percentage?: SortOrder
    freeDelivery?: SortOrder
    fixedPrice?: SortOrder
    createdAt?: SortOrder
    colorId?: SortOrder
    sizeId?: SortOrder
    specificationsId?: SortOrder
    images?: SortOrderInput | SortOrder
    verified?: SortOrder
    sellerId?: SortOrderInput | SortOrder
    brandId?: SortOrderInput | SortOrder
    categoryId?: SortOrder
    subCategoryId?: SortOrder
    optionId?: SortOrder
    userId?: SortOrder
    _count?: productsCountOrderByAggregateInput
    _avg?: productsAvgOrderByAggregateInput
    _max?: productsMaxOrderByAggregateInput
    _min?: productsMinOrderByAggregateInput
    _sum?: productsSumOrderByAggregateInput
  }

  export type productsScalarWhereWithAggregatesInput = {
    AND?: productsScalarWhereWithAggregatesInput | productsScalarWhereWithAggregatesInput[]
    OR?: productsScalarWhereWithAggregatesInput[]
    NOT?: productsScalarWhereWithAggregatesInput | productsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"products"> | string
    price?: IntWithAggregatesFilter<"products"> | number
    coin?: BoolWithAggregatesFilter<"products"> | boolean
    title?: StringWithAggregatesFilter<"products"> | string
    description?: StringWithAggregatesFilter<"products"> | string
    thumbnail?: StringWithAggregatesFilter<"products"> | string
    quantity?: IntWithAggregatesFilter<"products"> | number
    minOrder?: IntWithAggregatesFilter<"products"> | number
    freeCoin?: IntWithAggregatesFilter<"products"> | number
    offer?: IntWithAggregatesFilter<"products"> | number
    percentage?: BoolWithAggregatesFilter<"products"> | boolean
    freeDelivery?: BoolWithAggregatesFilter<"products"> | boolean
    fixedPrice?: BoolWithAggregatesFilter<"products"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"products"> | Date | string
    colorId?: StringWithAggregatesFilter<"products"> | string
    sizeId?: StringWithAggregatesFilter<"products"> | string
    specificationsId?: StringWithAggregatesFilter<"products"> | string
    images?: JsonNullableWithAggregatesFilter<"products">
    verified?: BoolWithAggregatesFilter<"products"> | boolean
    sellerId?: StringNullableWithAggregatesFilter<"products"> | string | null
    brandId?: StringNullableWithAggregatesFilter<"products"> | string | null
    categoryId?: StringWithAggregatesFilter<"products"> | string
    subCategoryId?: StringWithAggregatesFilter<"products"> | string
    optionId?: StringWithAggregatesFilter<"products"> | string
    userId?: StringWithAggregatesFilter<"products"> | string
  }

  export type colorsWhereInput = {
    AND?: colorsWhereInput | colorsWhereInput[]
    OR?: colorsWhereInput[]
    NOT?: colorsWhereInput | colorsWhereInput[]
    id?: StringFilter<"colors"> | string
    title?: StringFilter<"colors"> | string
    color?: StringFilter<"colors"> | string
    products?: ProductsListRelationFilter
  }

  export type colorsOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    color?: SortOrder
    products?: productsOrderByRelationAggregateInput
  }

  export type colorsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    title?: string
    AND?: colorsWhereInput | colorsWhereInput[]
    OR?: colorsWhereInput[]
    NOT?: colorsWhereInput | colorsWhereInput[]
    color?: StringFilter<"colors"> | string
    products?: ProductsListRelationFilter
  }, "id" | "title">

  export type colorsOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    color?: SortOrder
    _count?: colorsCountOrderByAggregateInput
    _max?: colorsMaxOrderByAggregateInput
    _min?: colorsMinOrderByAggregateInput
  }

  export type colorsScalarWhereWithAggregatesInput = {
    AND?: colorsScalarWhereWithAggregatesInput | colorsScalarWhereWithAggregatesInput[]
    OR?: colorsScalarWhereWithAggregatesInput[]
    NOT?: colorsScalarWhereWithAggregatesInput | colorsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"colors"> | string
    title?: StringWithAggregatesFilter<"colors"> | string
    color?: StringWithAggregatesFilter<"colors"> | string
  }

  export type sizeWhereInput = {
    AND?: sizeWhereInput | sizeWhereInput[]
    OR?: sizeWhereInput[]
    NOT?: sizeWhereInput | sizeWhereInput[]
    id?: StringFilter<"size"> | string
    title?: StringFilter<"size"> | string
    cm?: StringFilter<"size"> | string
    products?: ProductsListRelationFilter
  }

  export type sizeOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    cm?: SortOrder
    products?: productsOrderByRelationAggregateInput
  }

  export type sizeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    title?: string
    AND?: sizeWhereInput | sizeWhereInput[]
    OR?: sizeWhereInput[]
    NOT?: sizeWhereInput | sizeWhereInput[]
    cm?: StringFilter<"size"> | string
    products?: ProductsListRelationFilter
  }, "id" | "title">

  export type sizeOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    cm?: SortOrder
    _count?: sizeCountOrderByAggregateInput
    _max?: sizeMaxOrderByAggregateInput
    _min?: sizeMinOrderByAggregateInput
  }

  export type sizeScalarWhereWithAggregatesInput = {
    AND?: sizeScalarWhereWithAggregatesInput | sizeScalarWhereWithAggregatesInput[]
    OR?: sizeScalarWhereWithAggregatesInput[]
    NOT?: sizeScalarWhereWithAggregatesInput | sizeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"size"> | string
    title?: StringWithAggregatesFilter<"size"> | string
    cm?: StringWithAggregatesFilter<"size"> | string
  }

  export type specificationsWhereInput = {
    AND?: specificationsWhereInput | specificationsWhereInput[]
    OR?: specificationsWhereInput[]
    NOT?: specificationsWhereInput | specificationsWhereInput[]
    id?: StringFilter<"specifications"> | string
    title?: StringFilter<"specifications"> | string
    details?: StringFilter<"specifications"> | string
    products?: ProductsListRelationFilter
  }

  export type specificationsOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    details?: SortOrder
    products?: productsOrderByRelationAggregateInput
  }

  export type specificationsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    title?: string
    AND?: specificationsWhereInput | specificationsWhereInput[]
    OR?: specificationsWhereInput[]
    NOT?: specificationsWhereInput | specificationsWhereInput[]
    details?: StringFilter<"specifications"> | string
    products?: ProductsListRelationFilter
  }, "id" | "title">

  export type specificationsOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    details?: SortOrder
    _count?: specificationsCountOrderByAggregateInput
    _max?: specificationsMaxOrderByAggregateInput
    _min?: specificationsMinOrderByAggregateInput
  }

  export type specificationsScalarWhereWithAggregatesInput = {
    AND?: specificationsScalarWhereWithAggregatesInput | specificationsScalarWhereWithAggregatesInput[]
    OR?: specificationsScalarWhereWithAggregatesInput[]
    NOT?: specificationsScalarWhereWithAggregatesInput | specificationsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"specifications"> | string
    title?: StringWithAggregatesFilter<"specifications"> | string
    details?: StringWithAggregatesFilter<"specifications"> | string
  }

  export type commentsWhereInput = {
    AND?: commentsWhereInput | commentsWhereInput[]
    OR?: commentsWhereInput[]
    NOT?: commentsWhereInput | commentsWhereInput[]
    id?: StringFilter<"comments"> | string
    message?: StringFilter<"comments"> | string
    image?: StringNullableFilter<"comments"> | string | null
    replay?: StringNullableFilter<"comments"> | string | null
    userId?: StringFilter<"comments"> | string
    productId?: StringFilter<"comments"> | string
    receiverId?: StringFilter<"comments"> | string
    user?: XOR<UsersNullableRelationFilter, usersWhereInput> | null
    product?: XOR<ProductsNullableRelationFilter, productsWhereInput> | null
    notifications?: NotificationsListRelationFilter
  }

  export type commentsOrderByWithRelationInput = {
    id?: SortOrder
    message?: SortOrder
    image?: SortOrderInput | SortOrder
    replay?: SortOrderInput | SortOrder
    userId?: SortOrder
    productId?: SortOrder
    receiverId?: SortOrder
    user?: usersOrderByWithRelationInput
    product?: productsOrderByWithRelationInput
    notifications?: notificationsOrderByRelationAggregateInput
  }

  export type commentsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: commentsWhereInput | commentsWhereInput[]
    OR?: commentsWhereInput[]
    NOT?: commentsWhereInput | commentsWhereInput[]
    message?: StringFilter<"comments"> | string
    image?: StringNullableFilter<"comments"> | string | null
    replay?: StringNullableFilter<"comments"> | string | null
    userId?: StringFilter<"comments"> | string
    productId?: StringFilter<"comments"> | string
    receiverId?: StringFilter<"comments"> | string
    user?: XOR<UsersNullableRelationFilter, usersWhereInput> | null
    product?: XOR<ProductsNullableRelationFilter, productsWhereInput> | null
    notifications?: NotificationsListRelationFilter
  }, "id">

  export type commentsOrderByWithAggregationInput = {
    id?: SortOrder
    message?: SortOrder
    image?: SortOrderInput | SortOrder
    replay?: SortOrderInput | SortOrder
    userId?: SortOrder
    productId?: SortOrder
    receiverId?: SortOrder
    _count?: commentsCountOrderByAggregateInput
    _max?: commentsMaxOrderByAggregateInput
    _min?: commentsMinOrderByAggregateInput
  }

  export type commentsScalarWhereWithAggregatesInput = {
    AND?: commentsScalarWhereWithAggregatesInput | commentsScalarWhereWithAggregatesInput[]
    OR?: commentsScalarWhereWithAggregatesInput[]
    NOT?: commentsScalarWhereWithAggregatesInput | commentsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"comments"> | string
    message?: StringWithAggregatesFilter<"comments"> | string
    image?: StringNullableWithAggregatesFilter<"comments"> | string | null
    replay?: StringNullableWithAggregatesFilter<"comments"> | string | null
    userId?: StringWithAggregatesFilter<"comments"> | string
    productId?: StringWithAggregatesFilter<"comments"> | string
    receiverId?: StringWithAggregatesFilter<"comments"> | string
  }

  export type reviewsWhereInput = {
    AND?: reviewsWhereInput | reviewsWhereInput[]
    OR?: reviewsWhereInput[]
    NOT?: reviewsWhereInput | reviewsWhereInput[]
    id?: StringFilter<"reviews"> | string
    message?: StringFilter<"reviews"> | string
    rate?: IntFilter<"reviews"> | number
    userId?: StringFilter<"reviews"> | string
    productId?: StringFilter<"reviews"> | string
    sellerId?: StringNullableFilter<"reviews"> | string | null
    brandId?: StringNullableFilter<"reviews"> | string | null
    user?: XOR<UsersNullableRelationFilter, usersWhereInput> | null
    product?: XOR<ProductsNullableRelationFilter, productsWhereInput> | null
    notifications?: NotificationsListRelationFilter
    seller?: XOR<SellerNullableRelationFilter, sellerWhereInput> | null
    brand?: XOR<BrandsNullableRelationFilter, brandsWhereInput> | null
  }

  export type reviewsOrderByWithRelationInput = {
    id?: SortOrder
    message?: SortOrder
    rate?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    sellerId?: SortOrderInput | SortOrder
    brandId?: SortOrderInput | SortOrder
    user?: usersOrderByWithRelationInput
    product?: productsOrderByWithRelationInput
    notifications?: notificationsOrderByRelationAggregateInput
    seller?: sellerOrderByWithRelationInput
    brand?: brandsOrderByWithRelationInput
  }

  export type reviewsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: reviewsWhereInput | reviewsWhereInput[]
    OR?: reviewsWhereInput[]
    NOT?: reviewsWhereInput | reviewsWhereInput[]
    message?: StringFilter<"reviews"> | string
    rate?: IntFilter<"reviews"> | number
    userId?: StringFilter<"reviews"> | string
    productId?: StringFilter<"reviews"> | string
    sellerId?: StringNullableFilter<"reviews"> | string | null
    brandId?: StringNullableFilter<"reviews"> | string | null
    user?: XOR<UsersNullableRelationFilter, usersWhereInput> | null
    product?: XOR<ProductsNullableRelationFilter, productsWhereInput> | null
    notifications?: NotificationsListRelationFilter
    seller?: XOR<SellerNullableRelationFilter, sellerWhereInput> | null
    brand?: XOR<BrandsNullableRelationFilter, brandsWhereInput> | null
  }, "id">

  export type reviewsOrderByWithAggregationInput = {
    id?: SortOrder
    message?: SortOrder
    rate?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    sellerId?: SortOrderInput | SortOrder
    brandId?: SortOrderInput | SortOrder
    _count?: reviewsCountOrderByAggregateInput
    _avg?: reviewsAvgOrderByAggregateInput
    _max?: reviewsMaxOrderByAggregateInput
    _min?: reviewsMinOrderByAggregateInput
    _sum?: reviewsSumOrderByAggregateInput
  }

  export type reviewsScalarWhereWithAggregatesInput = {
    AND?: reviewsScalarWhereWithAggregatesInput | reviewsScalarWhereWithAggregatesInput[]
    OR?: reviewsScalarWhereWithAggregatesInput[]
    NOT?: reviewsScalarWhereWithAggregatesInput | reviewsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"reviews"> | string
    message?: StringWithAggregatesFilter<"reviews"> | string
    rate?: IntWithAggregatesFilter<"reviews"> | number
    userId?: StringWithAggregatesFilter<"reviews"> | string
    productId?: StringWithAggregatesFilter<"reviews"> | string
    sellerId?: StringNullableWithAggregatesFilter<"reviews"> | string | null
    brandId?: StringNullableWithAggregatesFilter<"reviews"> | string | null
  }

  export type notificationsWhereInput = {
    AND?: notificationsWhereInput | notificationsWhereInput[]
    OR?: notificationsWhereInput[]
    NOT?: notificationsWhereInput | notificationsWhereInput[]
    id?: StringFilter<"notifications"> | string
    message?: StringFilter<"notifications"> | string
    title?: StringFilter<"notifications"> | string
    userId?: StringFilter<"notifications"> | string
    commentId?: StringFilter<"notifications"> | string
    reviewId?: StringFilter<"notifications"> | string
    user?: XOR<UsersNullableRelationFilter, usersWhereInput> | null
    comments?: XOR<CommentsNullableRelationFilter, commentsWhereInput> | null
    reviews?: XOR<ReviewsNullableRelationFilter, reviewsWhereInput> | null
  }

  export type notificationsOrderByWithRelationInput = {
    id?: SortOrder
    message?: SortOrder
    title?: SortOrder
    userId?: SortOrder
    commentId?: SortOrder
    reviewId?: SortOrder
    user?: usersOrderByWithRelationInput
    comments?: commentsOrderByWithRelationInput
    reviews?: reviewsOrderByWithRelationInput
  }

  export type notificationsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: notificationsWhereInput | notificationsWhereInput[]
    OR?: notificationsWhereInput[]
    NOT?: notificationsWhereInput | notificationsWhereInput[]
    message?: StringFilter<"notifications"> | string
    title?: StringFilter<"notifications"> | string
    userId?: StringFilter<"notifications"> | string
    commentId?: StringFilter<"notifications"> | string
    reviewId?: StringFilter<"notifications"> | string
    user?: XOR<UsersNullableRelationFilter, usersWhereInput> | null
    comments?: XOR<CommentsNullableRelationFilter, commentsWhereInput> | null
    reviews?: XOR<ReviewsNullableRelationFilter, reviewsWhereInput> | null
  }, "id">

  export type notificationsOrderByWithAggregationInput = {
    id?: SortOrder
    message?: SortOrder
    title?: SortOrder
    userId?: SortOrder
    commentId?: SortOrder
    reviewId?: SortOrder
    _count?: notificationsCountOrderByAggregateInput
    _max?: notificationsMaxOrderByAggregateInput
    _min?: notificationsMinOrderByAggregateInput
  }

  export type notificationsScalarWhereWithAggregatesInput = {
    AND?: notificationsScalarWhereWithAggregatesInput | notificationsScalarWhereWithAggregatesInput[]
    OR?: notificationsScalarWhereWithAggregatesInput[]
    NOT?: notificationsScalarWhereWithAggregatesInput | notificationsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"notifications"> | string
    message?: StringWithAggregatesFilter<"notifications"> | string
    title?: StringWithAggregatesFilter<"notifications"> | string
    userId?: StringWithAggregatesFilter<"notifications"> | string
    commentId?: StringWithAggregatesFilter<"notifications"> | string
    reviewId?: StringWithAggregatesFilter<"notifications"> | string
  }

  export type flashSellWhereInput = {
    AND?: flashSellWhereInput | flashSellWhereInput[]
    OR?: flashSellWhereInput[]
    NOT?: flashSellWhereInput | flashSellWhereInput[]
    id?: StringFilter<"flashSell"> | string
    startAt?: DateTimeFilter<"flashSell"> | Date | string
    endAt?: DateTimeFilter<"flashSell"> | Date | string
    banner?: StringFilter<"flashSell"> | string
    title?: StringFilter<"flashSell"> | string
    product?: FlashSellProductListRelationFilter
  }

  export type flashSellOrderByWithRelationInput = {
    id?: SortOrder
    startAt?: SortOrder
    endAt?: SortOrder
    banner?: SortOrder
    title?: SortOrder
    product?: flashSellProductOrderByRelationAggregateInput
  }

  export type flashSellWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    title?: string
    AND?: flashSellWhereInput | flashSellWhereInput[]
    OR?: flashSellWhereInput[]
    NOT?: flashSellWhereInput | flashSellWhereInput[]
    startAt?: DateTimeFilter<"flashSell"> | Date | string
    endAt?: DateTimeFilter<"flashSell"> | Date | string
    banner?: StringFilter<"flashSell"> | string
    product?: FlashSellProductListRelationFilter
  }, "id" | "title">

  export type flashSellOrderByWithAggregationInput = {
    id?: SortOrder
    startAt?: SortOrder
    endAt?: SortOrder
    banner?: SortOrder
    title?: SortOrder
    _count?: flashSellCountOrderByAggregateInput
    _max?: flashSellMaxOrderByAggregateInput
    _min?: flashSellMinOrderByAggregateInput
  }

  export type flashSellScalarWhereWithAggregatesInput = {
    AND?: flashSellScalarWhereWithAggregatesInput | flashSellScalarWhereWithAggregatesInput[]
    OR?: flashSellScalarWhereWithAggregatesInput[]
    NOT?: flashSellScalarWhereWithAggregatesInput | flashSellScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"flashSell"> | string
    startAt?: DateTimeWithAggregatesFilter<"flashSell"> | Date | string
    endAt?: DateTimeWithAggregatesFilter<"flashSell"> | Date | string
    banner?: StringWithAggregatesFilter<"flashSell"> | string
    title?: StringWithAggregatesFilter<"flashSell"> | string
  }

  export type flashSellProductWhereInput = {
    AND?: flashSellProductWhereInput | flashSellProductWhereInput[]
    OR?: flashSellProductWhereInput[]
    NOT?: flashSellProductWhereInput | flashSellProductWhereInput[]
    id?: StringFilter<"flashSellProduct"> | string
    offer?: IntFilter<"flashSellProduct"> | number
    percentage?: BoolFilter<"flashSellProduct"> | boolean
    minSell?: IntFilter<"flashSellProduct"> | number
    quantity?: IntFilter<"flashSellProduct"> | number
    deliveryFree?: BoolFilter<"flashSellProduct"> | boolean
    flashSellId?: StringFilter<"flashSellProduct"> | string
    productId?: StringFilter<"flashSellProduct"> | string
    userId?: StringFilter<"flashSellProduct"> | string
    createdAt?: DateTimeFilter<"flashSellProduct"> | Date | string
    flashSell?: XOR<FlashSellNullableRelationFilter, flashSellWhereInput> | null
    product?: XOR<ProductsNullableRelationFilter, productsWhereInput> | null
    user?: XOR<UsersNullableRelationFilter, usersWhereInput> | null
  }

  export type flashSellProductOrderByWithRelationInput = {
    id?: SortOrder
    offer?: SortOrder
    percentage?: SortOrder
    minSell?: SortOrder
    quantity?: SortOrder
    deliveryFree?: SortOrder
    flashSellId?: SortOrder
    productId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    flashSell?: flashSellOrderByWithRelationInput
    product?: productsOrderByWithRelationInput
    user?: usersOrderByWithRelationInput
  }

  export type flashSellProductWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: flashSellProductWhereInput | flashSellProductWhereInput[]
    OR?: flashSellProductWhereInput[]
    NOT?: flashSellProductWhereInput | flashSellProductWhereInput[]
    offer?: IntFilter<"flashSellProduct"> | number
    percentage?: BoolFilter<"flashSellProduct"> | boolean
    minSell?: IntFilter<"flashSellProduct"> | number
    quantity?: IntFilter<"flashSellProduct"> | number
    deliveryFree?: BoolFilter<"flashSellProduct"> | boolean
    flashSellId?: StringFilter<"flashSellProduct"> | string
    productId?: StringFilter<"flashSellProduct"> | string
    userId?: StringFilter<"flashSellProduct"> | string
    createdAt?: DateTimeFilter<"flashSellProduct"> | Date | string
    flashSell?: XOR<FlashSellNullableRelationFilter, flashSellWhereInput> | null
    product?: XOR<ProductsNullableRelationFilter, productsWhereInput> | null
    user?: XOR<UsersNullableRelationFilter, usersWhereInput> | null
  }, "id">

  export type flashSellProductOrderByWithAggregationInput = {
    id?: SortOrder
    offer?: SortOrder
    percentage?: SortOrder
    minSell?: SortOrder
    quantity?: SortOrder
    deliveryFree?: SortOrder
    flashSellId?: SortOrder
    productId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    _count?: flashSellProductCountOrderByAggregateInput
    _avg?: flashSellProductAvgOrderByAggregateInput
    _max?: flashSellProductMaxOrderByAggregateInput
    _min?: flashSellProductMinOrderByAggregateInput
    _sum?: flashSellProductSumOrderByAggregateInput
  }

  export type flashSellProductScalarWhereWithAggregatesInput = {
    AND?: flashSellProductScalarWhereWithAggregatesInput | flashSellProductScalarWhereWithAggregatesInput[]
    OR?: flashSellProductScalarWhereWithAggregatesInput[]
    NOT?: flashSellProductScalarWhereWithAggregatesInput | flashSellProductScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"flashSellProduct"> | string
    offer?: IntWithAggregatesFilter<"flashSellProduct"> | number
    percentage?: BoolWithAggregatesFilter<"flashSellProduct"> | boolean
    minSell?: IntWithAggregatesFilter<"flashSellProduct"> | number
    quantity?: IntWithAggregatesFilter<"flashSellProduct"> | number
    deliveryFree?: BoolWithAggregatesFilter<"flashSellProduct"> | boolean
    flashSellId?: StringWithAggregatesFilter<"flashSellProduct"> | string
    productId?: StringWithAggregatesFilter<"flashSellProduct"> | string
    userId?: StringWithAggregatesFilter<"flashSellProduct"> | string
    createdAt?: DateTimeWithAggregatesFilter<"flashSellProduct"> | Date | string
  }

  export type contactsWhereInput = {
    AND?: contactsWhereInput | contactsWhereInput[]
    OR?: contactsWhereInput[]
    NOT?: contactsWhereInput | contactsWhereInput[]
    id?: StringFilter<"contacts"> | string
    title?: StringFilter<"contacts"> | string
    description?: StringFilter<"contacts"> | string
    name?: StringFilter<"contacts"> | string
    phone?: StringFilter<"contacts"> | string
    email?: StringFilter<"contacts"> | string
    date?: DateTimeFilter<"contacts"> | Date | string
  }

  export type contactsOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    date?: SortOrder
  }

  export type contactsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: contactsWhereInput | contactsWhereInput[]
    OR?: contactsWhereInput[]
    NOT?: contactsWhereInput | contactsWhereInput[]
    title?: StringFilter<"contacts"> | string
    description?: StringFilter<"contacts"> | string
    name?: StringFilter<"contacts"> | string
    phone?: StringFilter<"contacts"> | string
    email?: StringFilter<"contacts"> | string
    date?: DateTimeFilter<"contacts"> | Date | string
  }, "id">

  export type contactsOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    date?: SortOrder
    _count?: contactsCountOrderByAggregateInput
    _max?: contactsMaxOrderByAggregateInput
    _min?: contactsMinOrderByAggregateInput
  }

  export type contactsScalarWhereWithAggregatesInput = {
    AND?: contactsScalarWhereWithAggregatesInput | contactsScalarWhereWithAggregatesInput[]
    OR?: contactsScalarWhereWithAggregatesInput[]
    NOT?: contactsScalarWhereWithAggregatesInput | contactsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"contacts"> | string
    title?: StringWithAggregatesFilter<"contacts"> | string
    description?: StringWithAggregatesFilter<"contacts"> | string
    name?: StringWithAggregatesFilter<"contacts"> | string
    phone?: StringWithAggregatesFilter<"contacts"> | string
    email?: StringWithAggregatesFilter<"contacts"> | string
    date?: DateTimeWithAggregatesFilter<"contacts"> | Date | string
  }

  export type conversationsWhereInput = {
    AND?: conversationsWhereInput | conversationsWhereInput[]
    OR?: conversationsWhereInput[]
    NOT?: conversationsWhereInput | conversationsWhereInput[]
    id?: StringFilter<"conversations"> | string
    senderId?: StringFilter<"conversations"> | string
    receiverId?: StringFilter<"conversations"> | string
    date?: DateTimeFilter<"conversations"> | Date | string
    sender?: XOR<UsersNullableRelationFilter, usersWhereInput> | null
  }

  export type conversationsOrderByWithRelationInput = {
    id?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    date?: SortOrder
    sender?: usersOrderByWithRelationInput
  }

  export type conversationsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: conversationsWhereInput | conversationsWhereInput[]
    OR?: conversationsWhereInput[]
    NOT?: conversationsWhereInput | conversationsWhereInput[]
    senderId?: StringFilter<"conversations"> | string
    receiverId?: StringFilter<"conversations"> | string
    date?: DateTimeFilter<"conversations"> | Date | string
    sender?: XOR<UsersNullableRelationFilter, usersWhereInput> | null
  }, "id">

  export type conversationsOrderByWithAggregationInput = {
    id?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    date?: SortOrder
    _count?: conversationsCountOrderByAggregateInput
    _max?: conversationsMaxOrderByAggregateInput
    _min?: conversationsMinOrderByAggregateInput
  }

  export type conversationsScalarWhereWithAggregatesInput = {
    AND?: conversationsScalarWhereWithAggregatesInput | conversationsScalarWhereWithAggregatesInput[]
    OR?: conversationsScalarWhereWithAggregatesInput[]
    NOT?: conversationsScalarWhereWithAggregatesInput | conversationsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"conversations"> | string
    senderId?: StringWithAggregatesFilter<"conversations"> | string
    receiverId?: StringWithAggregatesFilter<"conversations"> | string
    date?: DateTimeWithAggregatesFilter<"conversations"> | Date | string
  }

  export type messagesWhereInput = {
    AND?: messagesWhereInput | messagesWhereInput[]
    OR?: messagesWhereInput[]
    NOT?: messagesWhereInput | messagesWhereInput[]
    id?: StringFilter<"messages"> | string
    message?: StringNullableFilter<"messages"> | string | null
    image?: StringNullableFilter<"messages"> | string | null
    date?: DateTimeFilter<"messages"> | Date | string
    productId?: StringFilter<"messages"> | string
    product?: XOR<ProductsNullableRelationFilter, productsWhereInput> | null
  }

  export type messagesOrderByWithRelationInput = {
    id?: SortOrder
    message?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    date?: SortOrder
    productId?: SortOrder
    product?: productsOrderByWithRelationInput
  }

  export type messagesWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: messagesWhereInput | messagesWhereInput[]
    OR?: messagesWhereInput[]
    NOT?: messagesWhereInput | messagesWhereInput[]
    message?: StringNullableFilter<"messages"> | string | null
    image?: StringNullableFilter<"messages"> | string | null
    date?: DateTimeFilter<"messages"> | Date | string
    productId?: StringFilter<"messages"> | string
    product?: XOR<ProductsNullableRelationFilter, productsWhereInput> | null
  }, "id">

  export type messagesOrderByWithAggregationInput = {
    id?: SortOrder
    message?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    date?: SortOrder
    productId?: SortOrder
    _count?: messagesCountOrderByAggregateInput
    _max?: messagesMaxOrderByAggregateInput
    _min?: messagesMinOrderByAggregateInput
  }

  export type messagesScalarWhereWithAggregatesInput = {
    AND?: messagesScalarWhereWithAggregatesInput | messagesScalarWhereWithAggregatesInput[]
    OR?: messagesScalarWhereWithAggregatesInput[]
    NOT?: messagesScalarWhereWithAggregatesInput | messagesScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"messages"> | string
    message?: StringNullableWithAggregatesFilter<"messages"> | string | null
    image?: StringNullableWithAggregatesFilter<"messages"> | string | null
    date?: DateTimeWithAggregatesFilter<"messages"> | Date | string
    productId?: StringWithAggregatesFilter<"messages"> | string
  }

  export type ordersWhereInput = {
    AND?: ordersWhereInput | ordersWhereInput[]
    OR?: ordersWhereInput[]
    NOT?: ordersWhereInput | ordersWhereInput[]
    id?: StringFilter<"orders"> | string
    buyerid?: StringFilter<"orders"> | string
    productId?: StringFilter<"orders"> | string
    offerPrice?: IntFilter<"orders"> | number
    date?: DateTimeFilter<"orders"> | Date | string
    buyer?: XOR<UsersRelationFilter, usersWhereInput>
    product?: XOR<ProductsRelationFilter, productsWhereInput>
  }

  export type ordersOrderByWithRelationInput = {
    id?: SortOrder
    buyerid?: SortOrder
    productId?: SortOrder
    offerPrice?: SortOrder
    date?: SortOrder
    buyer?: usersOrderByWithRelationInput
    product?: productsOrderByWithRelationInput
  }

  export type ordersWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ordersWhereInput | ordersWhereInput[]
    OR?: ordersWhereInput[]
    NOT?: ordersWhereInput | ordersWhereInput[]
    buyerid?: StringFilter<"orders"> | string
    productId?: StringFilter<"orders"> | string
    offerPrice?: IntFilter<"orders"> | number
    date?: DateTimeFilter<"orders"> | Date | string
    buyer?: XOR<UsersRelationFilter, usersWhereInput>
    product?: XOR<ProductsRelationFilter, productsWhereInput>
  }, "id">

  export type ordersOrderByWithAggregationInput = {
    id?: SortOrder
    buyerid?: SortOrder
    productId?: SortOrder
    offerPrice?: SortOrder
    date?: SortOrder
    _count?: ordersCountOrderByAggregateInput
    _avg?: ordersAvgOrderByAggregateInput
    _max?: ordersMaxOrderByAggregateInput
    _min?: ordersMinOrderByAggregateInput
    _sum?: ordersSumOrderByAggregateInput
  }

  export type ordersScalarWhereWithAggregatesInput = {
    AND?: ordersScalarWhereWithAggregatesInput | ordersScalarWhereWithAggregatesInput[]
    OR?: ordersScalarWhereWithAggregatesInput[]
    NOT?: ordersScalarWhereWithAggregatesInput | ordersScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"orders"> | string
    buyerid?: StringWithAggregatesFilter<"orders"> | string
    productId?: StringWithAggregatesFilter<"orders"> | string
    offerPrice?: IntWithAggregatesFilter<"orders"> | number
    date?: DateTimeWithAggregatesFilter<"orders"> | Date | string
  }

  export type bannerWhereInput = {
    AND?: bannerWhereInput | bannerWhereInput[]
    OR?: bannerWhereInput[]
    NOT?: bannerWhereInput | bannerWhereInput[]
    id?: StringFilter<"banner"> | string
    title?: StringFilter<"banner"> | string
    image?: StringFilter<"banner"> | string
    productId?: StringFilter<"banner"> | string
    product?: XOR<ProductsNullableRelationFilter, productsWhereInput> | null
  }

  export type bannerOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    image?: SortOrder
    productId?: SortOrder
    product?: productsOrderByWithRelationInput
  }

  export type bannerWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    title?: string
    AND?: bannerWhereInput | bannerWhereInput[]
    OR?: bannerWhereInput[]
    NOT?: bannerWhereInput | bannerWhereInput[]
    image?: StringFilter<"banner"> | string
    productId?: StringFilter<"banner"> | string
    product?: XOR<ProductsNullableRelationFilter, productsWhereInput> | null
  }, "id" | "title">

  export type bannerOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    image?: SortOrder
    productId?: SortOrder
    _count?: bannerCountOrderByAggregateInput
    _max?: bannerMaxOrderByAggregateInput
    _min?: bannerMinOrderByAggregateInput
  }

  export type bannerScalarWhereWithAggregatesInput = {
    AND?: bannerScalarWhereWithAggregatesInput | bannerScalarWhereWithAggregatesInput[]
    OR?: bannerScalarWhereWithAggregatesInput[]
    NOT?: bannerScalarWhereWithAggregatesInput | bannerScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"banner"> | string
    title?: StringWithAggregatesFilter<"banner"> | string
    image?: StringWithAggregatesFilter<"banner"> | string
    productId?: StringWithAggregatesFilter<"banner"> | string
  }

  export type addsWhereInput = {
    AND?: addsWhereInput | addsWhereInput[]
    OR?: addsWhereInput[]
    NOT?: addsWhereInput | addsWhereInput[]
    id?: StringFilter<"adds"> | string
    title?: StringFilter<"adds"> | string
    image?: StringFilter<"adds"> | string
    productId?: StringFilter<"adds"> | string
    visitorId?: StringNullableFilter<"adds"> | string | null
    date?: DateTimeFilter<"adds"> | Date | string
    product?: XOR<ProductsNullableRelationFilter, productsWhereInput> | null
    visitors?: XOR<VisitorsNullableRelationFilter, visitorsWhereInput> | null
  }

  export type addsOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    image?: SortOrder
    productId?: SortOrder
    visitorId?: SortOrderInput | SortOrder
    date?: SortOrder
    product?: productsOrderByWithRelationInput
    visitors?: visitorsOrderByWithRelationInput
  }

  export type addsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    title?: string
    visitorId?: string
    AND?: addsWhereInput | addsWhereInput[]
    OR?: addsWhereInput[]
    NOT?: addsWhereInput | addsWhereInput[]
    image?: StringFilter<"adds"> | string
    productId?: StringFilter<"adds"> | string
    date?: DateTimeFilter<"adds"> | Date | string
    product?: XOR<ProductsNullableRelationFilter, productsWhereInput> | null
    visitors?: XOR<VisitorsNullableRelationFilter, visitorsWhereInput> | null
  }, "id" | "title" | "visitorId">

  export type addsOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    image?: SortOrder
    productId?: SortOrder
    visitorId?: SortOrderInput | SortOrder
    date?: SortOrder
    _count?: addsCountOrderByAggregateInput
    _max?: addsMaxOrderByAggregateInput
    _min?: addsMinOrderByAggregateInput
  }

  export type addsScalarWhereWithAggregatesInput = {
    AND?: addsScalarWhereWithAggregatesInput | addsScalarWhereWithAggregatesInput[]
    OR?: addsScalarWhereWithAggregatesInput[]
    NOT?: addsScalarWhereWithAggregatesInput | addsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"adds"> | string
    title?: StringWithAggregatesFilter<"adds"> | string
    image?: StringWithAggregatesFilter<"adds"> | string
    productId?: StringWithAggregatesFilter<"adds"> | string
    visitorId?: StringNullableWithAggregatesFilter<"adds"> | string | null
    date?: DateTimeWithAggregatesFilter<"adds"> | Date | string
  }

  export type visitorsWhereInput = {
    AND?: visitorsWhereInput | visitorsWhereInput[]
    OR?: visitorsWhereInput[]
    NOT?: visitorsWhereInput | visitorsWhereInput[]
    id?: StringFilter<"visitors"> | string
    ip?: StringFilter<"visitors"> | string
    deviceName?: StringFilter<"visitors"> | string
    randomId?: StringFilter<"visitors"> | string
    date?: DateTimeFilter<"visitors"> | Date | string
    adds?: XOR<AddsNullableRelationFilter, addsWhereInput> | null
  }

  export type visitorsOrderByWithRelationInput = {
    id?: SortOrder
    ip?: SortOrder
    deviceName?: SortOrder
    randomId?: SortOrder
    date?: SortOrder
    adds?: addsOrderByWithRelationInput
  }

  export type visitorsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    randomId?: string
    AND?: visitorsWhereInput | visitorsWhereInput[]
    OR?: visitorsWhereInput[]
    NOT?: visitorsWhereInput | visitorsWhereInput[]
    ip?: StringFilter<"visitors"> | string
    deviceName?: StringFilter<"visitors"> | string
    date?: DateTimeFilter<"visitors"> | Date | string
    adds?: XOR<AddsNullableRelationFilter, addsWhereInput> | null
  }, "id" | "randomId">

  export type visitorsOrderByWithAggregationInput = {
    id?: SortOrder
    ip?: SortOrder
    deviceName?: SortOrder
    randomId?: SortOrder
    date?: SortOrder
    _count?: visitorsCountOrderByAggregateInput
    _max?: visitorsMaxOrderByAggregateInput
    _min?: visitorsMinOrderByAggregateInput
  }

  export type visitorsScalarWhereWithAggregatesInput = {
    AND?: visitorsScalarWhereWithAggregatesInput | visitorsScalarWhereWithAggregatesInput[]
    OR?: visitorsScalarWhereWithAggregatesInput[]
    NOT?: visitorsScalarWhereWithAggregatesInput | visitorsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"visitors"> | string
    ip?: StringWithAggregatesFilter<"visitors"> | string
    deviceName?: StringWithAggregatesFilter<"visitors"> | string
    randomId?: StringWithAggregatesFilter<"visitors"> | string
    date?: DateTimeWithAggregatesFilter<"visitors"> | Date | string
  }

  export type usersCreateInput = {
    id?: string
    email?: string | null
    name: string
    image?: string | null
    phone?: string | null
    birthday?: string | null
    gender?: string | null
    role?: number
    uid: string
    address?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    pushToken?: string | null
    verified?: boolean
    seller?: sellerCreateNestedManyWithoutUserInput
    brand?: brandsCreateNestedManyWithoutUserInput
    products?: productsCreateNestedManyWithoutUserInput
    comments?: commentsCreateNestedManyWithoutUserInput
    reviews?: reviewsCreateNestedManyWithoutUserInput
    notifications?: notificationsCreateNestedManyWithoutUserInput
    flashSellProduct?: flashSellProductCreateNestedManyWithoutUserInput
    conversations?: conversationsCreateNestedManyWithoutSenderInput
    orders?: ordersCreateNestedManyWithoutBuyerInput
  }

  export type usersUncheckedCreateInput = {
    id?: string
    email?: string | null
    name: string
    image?: string | null
    phone?: string | null
    birthday?: string | null
    gender?: string | null
    role?: number
    uid: string
    address?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    pushToken?: string | null
    verified?: boolean
    seller?: sellerUncheckedCreateNestedManyWithoutUserInput
    brand?: brandsUncheckedCreateNestedManyWithoutUserInput
    products?: productsUncheckedCreateNestedManyWithoutUserInput
    comments?: commentsUncheckedCreateNestedManyWithoutUserInput
    reviews?: reviewsUncheckedCreateNestedManyWithoutUserInput
    notifications?: notificationsUncheckedCreateNestedManyWithoutUserInput
    flashSellProduct?: flashSellProductUncheckedCreateNestedManyWithoutUserInput
    conversations?: conversationsUncheckedCreateNestedManyWithoutSenderInput
    orders?: ordersUncheckedCreateNestedManyWithoutBuyerInput
  }

  export type usersUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    role?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    address?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pushToken?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    seller?: sellerUpdateManyWithoutUserNestedInput
    brand?: brandsUpdateManyWithoutUserNestedInput
    products?: productsUpdateManyWithoutUserNestedInput
    comments?: commentsUpdateManyWithoutUserNestedInput
    reviews?: reviewsUpdateManyWithoutUserNestedInput
    notifications?: notificationsUpdateManyWithoutUserNestedInput
    flashSellProduct?: flashSellProductUpdateManyWithoutUserNestedInput
    conversations?: conversationsUpdateManyWithoutSenderNestedInput
    orders?: ordersUpdateManyWithoutBuyerNestedInput
  }

  export type usersUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    role?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    address?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pushToken?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    seller?: sellerUncheckedUpdateManyWithoutUserNestedInput
    brand?: brandsUncheckedUpdateManyWithoutUserNestedInput
    products?: productsUncheckedUpdateManyWithoutUserNestedInput
    comments?: commentsUncheckedUpdateManyWithoutUserNestedInput
    reviews?: reviewsUncheckedUpdateManyWithoutUserNestedInput
    notifications?: notificationsUncheckedUpdateManyWithoutUserNestedInput
    flashSellProduct?: flashSellProductUncheckedUpdateManyWithoutUserNestedInput
    conversations?: conversationsUncheckedUpdateManyWithoutSenderNestedInput
    orders?: ordersUncheckedUpdateManyWithoutBuyerNestedInput
  }

  export type usersCreateManyInput = {
    id?: string
    email?: string | null
    name: string
    image?: string | null
    phone?: string | null
    birthday?: string | null
    gender?: string | null
    role?: number
    uid: string
    address?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    pushToken?: string | null
    verified?: boolean
  }

  export type usersUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    role?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    address?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pushToken?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
  }

  export type usersUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    role?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    address?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pushToken?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
  }

  export type categoryCreateInput = {
    id?: string
    name: string
    icon: string
    subCategory?: subCategoryCreateNestedManyWithoutCategoryInput
    products?: productsCreateNestedManyWithoutCategoryInput
  }

  export type categoryUncheckedCreateInput = {
    id?: string
    name: string
    icon: string
    subCategory?: subCategoryUncheckedCreateNestedManyWithoutCategoryInput
    products?: productsUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type categoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    subCategory?: subCategoryUpdateManyWithoutCategoryNestedInput
    products?: productsUpdateManyWithoutCategoryNestedInput
  }

  export type categoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    subCategory?: subCategoryUncheckedUpdateManyWithoutCategoryNestedInput
    products?: productsUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type categoryCreateManyInput = {
    id?: string
    name: string
    icon: string
  }

  export type categoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
  }

  export type categoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
  }

  export type subCategoryCreateInput = {
    id?: string
    name: string
    category?: categoryCreateNestedOneWithoutSubCategoryInput
    options?: optionsCreateNestedManyWithoutSubCategoryInput
    products?: productsCreateNestedManyWithoutSubCategoryInput
  }

  export type subCategoryUncheckedCreateInput = {
    id?: string
    name: string
    categoryId: string
    options?: optionsUncheckedCreateNestedManyWithoutSubCategoryInput
    products?: productsUncheckedCreateNestedManyWithoutSubCategoryInput
  }

  export type subCategoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: categoryUpdateOneWithoutSubCategoryNestedInput
    options?: optionsUpdateManyWithoutSubCategoryNestedInput
    products?: productsUpdateManyWithoutSubCategoryNestedInput
  }

  export type subCategoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    options?: optionsUncheckedUpdateManyWithoutSubCategoryNestedInput
    products?: productsUncheckedUpdateManyWithoutSubCategoryNestedInput
  }

  export type subCategoryCreateManyInput = {
    id?: string
    name: string
    categoryId: string
  }

  export type subCategoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type subCategoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
  }

  export type optionsCreateInput = {
    id?: string
    name: string
    subCategory?: subCategoryCreateNestedOneWithoutOptionsInput
    products?: productsCreateNestedManyWithoutOptionInput
  }

  export type optionsUncheckedCreateInput = {
    id?: string
    name: string
    subCategoryId: string
    products?: productsUncheckedCreateNestedManyWithoutOptionInput
  }

  export type optionsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subCategory?: subCategoryUpdateOneWithoutOptionsNestedInput
    products?: productsUpdateManyWithoutOptionNestedInput
  }

  export type optionsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subCategoryId?: StringFieldUpdateOperationsInput | string
    products?: productsUncheckedUpdateManyWithoutOptionNestedInput
  }

  export type optionsCreateManyInput = {
    id?: string
    name: string
    subCategoryId: string
  }

  export type optionsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type optionsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subCategoryId?: StringFieldUpdateOperationsInput | string
  }

  export type sellerCreateInput = {
    id?: string
    shopName: string
    shopAddress: string
    categories?: NullableJsonNullValueInput | InputJsonValue
    logo: string
    verified?: boolean
    user?: usersCreateNestedOneWithoutSellerInput
    products?: productsCreateNestedManyWithoutSellerInput
    reviews?: reviewsCreateNestedManyWithoutSellerInput
  }

  export type sellerUncheckedCreateInput = {
    id?: string
    userId: string
    shopName: string
    shopAddress: string
    categories?: NullableJsonNullValueInput | InputJsonValue
    logo: string
    verified?: boolean
    products?: productsUncheckedCreateNestedManyWithoutSellerInput
    reviews?: reviewsUncheckedCreateNestedManyWithoutSellerInput
  }

  export type sellerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopName?: StringFieldUpdateOperationsInput | string
    shopAddress?: StringFieldUpdateOperationsInput | string
    categories?: NullableJsonNullValueInput | InputJsonValue
    logo?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    user?: usersUpdateOneWithoutSellerNestedInput
    products?: productsUpdateManyWithoutSellerNestedInput
    reviews?: reviewsUpdateManyWithoutSellerNestedInput
  }

  export type sellerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    shopName?: StringFieldUpdateOperationsInput | string
    shopAddress?: StringFieldUpdateOperationsInput | string
    categories?: NullableJsonNullValueInput | InputJsonValue
    logo?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    products?: productsUncheckedUpdateManyWithoutSellerNestedInput
    reviews?: reviewsUncheckedUpdateManyWithoutSellerNestedInput
  }

  export type sellerCreateManyInput = {
    id?: string
    userId: string
    shopName: string
    shopAddress: string
    categories?: NullableJsonNullValueInput | InputJsonValue
    logo: string
    verified?: boolean
  }

  export type sellerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopName?: StringFieldUpdateOperationsInput | string
    shopAddress?: StringFieldUpdateOperationsInput | string
    categories?: NullableJsonNullValueInput | InputJsonValue
    logo?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
  }

  export type sellerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    shopName?: StringFieldUpdateOperationsInput | string
    shopAddress?: StringFieldUpdateOperationsInput | string
    categories?: NullableJsonNullValueInput | InputJsonValue
    logo?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
  }

  export type brandsCreateInput = {
    id?: string
    brandName: string
    brandAddress: string
    brandIcon: string
    categories?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean
    user?: usersCreateNestedOneWithoutBrandInput
    products?: productsCreateNestedManyWithoutBrandInput
    reviews?: reviewsCreateNestedManyWithoutBrandInput
  }

  export type brandsUncheckedCreateInput = {
    id?: string
    userId: string
    brandName: string
    brandAddress: string
    brandIcon: string
    categories?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean
    products?: productsUncheckedCreateNestedManyWithoutBrandInput
    reviews?: reviewsUncheckedCreateNestedManyWithoutBrandInput
  }

  export type brandsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    brandName?: StringFieldUpdateOperationsInput | string
    brandAddress?: StringFieldUpdateOperationsInput | string
    brandIcon?: StringFieldUpdateOperationsInput | string
    categories?: NullableJsonNullValueInput | InputJsonValue
    verified?: BoolFieldUpdateOperationsInput | boolean
    user?: usersUpdateOneWithoutBrandNestedInput
    products?: productsUpdateManyWithoutBrandNestedInput
    reviews?: reviewsUpdateManyWithoutBrandNestedInput
  }

  export type brandsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    brandName?: StringFieldUpdateOperationsInput | string
    brandAddress?: StringFieldUpdateOperationsInput | string
    brandIcon?: StringFieldUpdateOperationsInput | string
    categories?: NullableJsonNullValueInput | InputJsonValue
    verified?: BoolFieldUpdateOperationsInput | boolean
    products?: productsUncheckedUpdateManyWithoutBrandNestedInput
    reviews?: reviewsUncheckedUpdateManyWithoutBrandNestedInput
  }

  export type brandsCreateManyInput = {
    id?: string
    userId: string
    brandName: string
    brandAddress: string
    brandIcon: string
    categories?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean
  }

  export type brandsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    brandName?: StringFieldUpdateOperationsInput | string
    brandAddress?: StringFieldUpdateOperationsInput | string
    brandIcon?: StringFieldUpdateOperationsInput | string
    categories?: NullableJsonNullValueInput | InputJsonValue
    verified?: BoolFieldUpdateOperationsInput | boolean
  }

  export type brandsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    brandName?: StringFieldUpdateOperationsInput | string
    brandAddress?: StringFieldUpdateOperationsInput | string
    brandIcon?: StringFieldUpdateOperationsInput | string
    categories?: NullableJsonNullValueInput | InputJsonValue
    verified?: BoolFieldUpdateOperationsInput | boolean
  }

  export type productsCreateInput = {
    id?: string
    price: number
    coin?: boolean
    title: string
    description: string
    thumbnail: string
    quantity?: number
    minOrder?: number
    freeCoin?: number
    offer?: number
    percentage?: boolean
    freeDelivery?: boolean
    fixedPrice?: boolean
    createdAt?: Date | string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean
    colors?: colorsCreateNestedOneWithoutProductsInput
    size?: sizeCreateNestedOneWithoutProductsInput
    specification?: specificationsCreateNestedOneWithoutProductsInput
    comments?: commentsCreateNestedManyWithoutProductInput
    reviews?: reviewsCreateNestedManyWithoutProductInput
    flashSellProduct?: flashSellProductCreateNestedManyWithoutProductInput
    seller?: sellerCreateNestedOneWithoutProductsInput
    brand?: brandsCreateNestedOneWithoutProductsInput
    category?: categoryCreateNestedOneWithoutProductsInput
    subCategory?: subCategoryCreateNestedOneWithoutProductsInput
    option?: optionsCreateNestedOneWithoutProductsInput
    user?: usersCreateNestedOneWithoutProductsInput
    banner?: bannerCreateNestedManyWithoutProductInput
    adds?: addsCreateNestedManyWithoutProductInput
    messages?: messagesCreateNestedManyWithoutProductInput
    orders?: ordersCreateNestedManyWithoutProductInput
  }

  export type productsUncheckedCreateInput = {
    id?: string
    price: number
    coin?: boolean
    title: string
    description: string
    thumbnail: string
    quantity?: number
    minOrder?: number
    freeCoin?: number
    offer?: number
    percentage?: boolean
    freeDelivery?: boolean
    fixedPrice?: boolean
    createdAt?: Date | string
    colorId: string
    sizeId: string
    specificationsId: string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean
    sellerId?: string | null
    brandId?: string | null
    categoryId: string
    subCategoryId: string
    optionId: string
    userId: string
    comments?: commentsUncheckedCreateNestedManyWithoutProductInput
    reviews?: reviewsUncheckedCreateNestedManyWithoutProductInput
    flashSellProduct?: flashSellProductUncheckedCreateNestedManyWithoutProductInput
    banner?: bannerUncheckedCreateNestedManyWithoutProductInput
    adds?: addsUncheckedCreateNestedManyWithoutProductInput
    messages?: messagesUncheckedCreateNestedManyWithoutProductInput
    orders?: ordersUncheckedCreateNestedManyWithoutProductInput
  }

  export type productsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    coin?: BoolFieldUpdateOperationsInput | boolean
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    minOrder?: IntFieldUpdateOperationsInput | number
    freeCoin?: IntFieldUpdateOperationsInput | number
    offer?: IntFieldUpdateOperationsInput | number
    percentage?: BoolFieldUpdateOperationsInput | boolean
    freeDelivery?: BoolFieldUpdateOperationsInput | boolean
    fixedPrice?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: BoolFieldUpdateOperationsInput | boolean
    colors?: colorsUpdateOneWithoutProductsNestedInput
    size?: sizeUpdateOneWithoutProductsNestedInput
    specification?: specificationsUpdateOneWithoutProductsNestedInput
    comments?: commentsUpdateManyWithoutProductNestedInput
    reviews?: reviewsUpdateManyWithoutProductNestedInput
    flashSellProduct?: flashSellProductUpdateManyWithoutProductNestedInput
    seller?: sellerUpdateOneWithoutProductsNestedInput
    brand?: brandsUpdateOneWithoutProductsNestedInput
    category?: categoryUpdateOneWithoutProductsNestedInput
    subCategory?: subCategoryUpdateOneWithoutProductsNestedInput
    option?: optionsUpdateOneWithoutProductsNestedInput
    user?: usersUpdateOneWithoutProductsNestedInput
    banner?: bannerUpdateManyWithoutProductNestedInput
    adds?: addsUpdateManyWithoutProductNestedInput
    messages?: messagesUpdateManyWithoutProductNestedInput
    orders?: ordersUpdateManyWithoutProductNestedInput
  }

  export type productsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    coin?: BoolFieldUpdateOperationsInput | boolean
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    minOrder?: IntFieldUpdateOperationsInput | number
    freeCoin?: IntFieldUpdateOperationsInput | number
    offer?: IntFieldUpdateOperationsInput | number
    percentage?: BoolFieldUpdateOperationsInput | boolean
    freeDelivery?: BoolFieldUpdateOperationsInput | boolean
    fixedPrice?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    colorId?: StringFieldUpdateOperationsInput | string
    sizeId?: StringFieldUpdateOperationsInput | string
    specificationsId?: StringFieldUpdateOperationsInput | string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: BoolFieldUpdateOperationsInput | boolean
    sellerId?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    subCategoryId?: StringFieldUpdateOperationsInput | string
    optionId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    comments?: commentsUncheckedUpdateManyWithoutProductNestedInput
    reviews?: reviewsUncheckedUpdateManyWithoutProductNestedInput
    flashSellProduct?: flashSellProductUncheckedUpdateManyWithoutProductNestedInput
    banner?: bannerUncheckedUpdateManyWithoutProductNestedInput
    adds?: addsUncheckedUpdateManyWithoutProductNestedInput
    messages?: messagesUncheckedUpdateManyWithoutProductNestedInput
    orders?: ordersUncheckedUpdateManyWithoutProductNestedInput
  }

  export type productsCreateManyInput = {
    id?: string
    price: number
    coin?: boolean
    title: string
    description: string
    thumbnail: string
    quantity?: number
    minOrder?: number
    freeCoin?: number
    offer?: number
    percentage?: boolean
    freeDelivery?: boolean
    fixedPrice?: boolean
    createdAt?: Date | string
    colorId: string
    sizeId: string
    specificationsId: string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean
    sellerId?: string | null
    brandId?: string | null
    categoryId: string
    subCategoryId: string
    optionId: string
    userId: string
  }

  export type productsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    coin?: BoolFieldUpdateOperationsInput | boolean
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    minOrder?: IntFieldUpdateOperationsInput | number
    freeCoin?: IntFieldUpdateOperationsInput | number
    offer?: IntFieldUpdateOperationsInput | number
    percentage?: BoolFieldUpdateOperationsInput | boolean
    freeDelivery?: BoolFieldUpdateOperationsInput | boolean
    fixedPrice?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: BoolFieldUpdateOperationsInput | boolean
  }

  export type productsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    coin?: BoolFieldUpdateOperationsInput | boolean
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    minOrder?: IntFieldUpdateOperationsInput | number
    freeCoin?: IntFieldUpdateOperationsInput | number
    offer?: IntFieldUpdateOperationsInput | number
    percentage?: BoolFieldUpdateOperationsInput | boolean
    freeDelivery?: BoolFieldUpdateOperationsInput | boolean
    fixedPrice?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    colorId?: StringFieldUpdateOperationsInput | string
    sizeId?: StringFieldUpdateOperationsInput | string
    specificationsId?: StringFieldUpdateOperationsInput | string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: BoolFieldUpdateOperationsInput | boolean
    sellerId?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    subCategoryId?: StringFieldUpdateOperationsInput | string
    optionId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type colorsCreateInput = {
    id?: string
    title: string
    color: string
    products?: productsCreateNestedManyWithoutColorsInput
  }

  export type colorsUncheckedCreateInput = {
    id?: string
    title: string
    color: string
    products?: productsUncheckedCreateNestedManyWithoutColorsInput
  }

  export type colorsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    products?: productsUpdateManyWithoutColorsNestedInput
  }

  export type colorsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    products?: productsUncheckedUpdateManyWithoutColorsNestedInput
  }

  export type colorsCreateManyInput = {
    id?: string
    title: string
    color: string
  }

  export type colorsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
  }

  export type colorsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
  }

  export type sizeCreateInput = {
    id?: string
    title: string
    cm: string
    products?: productsCreateNestedManyWithoutSizeInput
  }

  export type sizeUncheckedCreateInput = {
    id?: string
    title: string
    cm: string
    products?: productsUncheckedCreateNestedManyWithoutSizeInput
  }

  export type sizeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    cm?: StringFieldUpdateOperationsInput | string
    products?: productsUpdateManyWithoutSizeNestedInput
  }

  export type sizeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    cm?: StringFieldUpdateOperationsInput | string
    products?: productsUncheckedUpdateManyWithoutSizeNestedInput
  }

  export type sizeCreateManyInput = {
    id?: string
    title: string
    cm: string
  }

  export type sizeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    cm?: StringFieldUpdateOperationsInput | string
  }

  export type sizeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    cm?: StringFieldUpdateOperationsInput | string
  }

  export type specificationsCreateInput = {
    id?: string
    title: string
    details: string
    products?: productsCreateNestedManyWithoutSpecificationInput
  }

  export type specificationsUncheckedCreateInput = {
    id?: string
    title: string
    details: string
    products?: productsUncheckedCreateNestedManyWithoutSpecificationInput
  }

  export type specificationsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    products?: productsUpdateManyWithoutSpecificationNestedInput
  }

  export type specificationsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    products?: productsUncheckedUpdateManyWithoutSpecificationNestedInput
  }

  export type specificationsCreateManyInput = {
    id?: string
    title: string
    details: string
  }

  export type specificationsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
  }

  export type specificationsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
  }

  export type commentsCreateInput = {
    id?: string
    message: string
    image?: string | null
    replay?: string | null
    receiverId: string
    user?: usersCreateNestedOneWithoutCommentsInput
    product?: productsCreateNestedOneWithoutCommentsInput
    notifications?: notificationsCreateNestedManyWithoutCommentsInput
  }

  export type commentsUncheckedCreateInput = {
    id?: string
    message: string
    image?: string | null
    replay?: string | null
    userId: string
    productId: string
    receiverId: string
    notifications?: notificationsUncheckedCreateNestedManyWithoutCommentsInput
  }

  export type commentsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    replay?: NullableStringFieldUpdateOperationsInput | string | null
    receiverId?: StringFieldUpdateOperationsInput | string
    user?: usersUpdateOneWithoutCommentsNestedInput
    product?: productsUpdateOneWithoutCommentsNestedInput
    notifications?: notificationsUpdateManyWithoutCommentsNestedInput
  }

  export type commentsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    replay?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    receiverId?: StringFieldUpdateOperationsInput | string
    notifications?: notificationsUncheckedUpdateManyWithoutCommentsNestedInput
  }

  export type commentsCreateManyInput = {
    id?: string
    message: string
    image?: string | null
    replay?: string | null
    userId: string
    productId: string
    receiverId: string
  }

  export type commentsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    replay?: NullableStringFieldUpdateOperationsInput | string | null
    receiverId?: StringFieldUpdateOperationsInput | string
  }

  export type commentsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    replay?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    receiverId?: StringFieldUpdateOperationsInput | string
  }

  export type reviewsCreateInput = {
    id?: string
    message: string
    rate?: number
    user?: usersCreateNestedOneWithoutReviewsInput
    product?: productsCreateNestedOneWithoutReviewsInput
    notifications?: notificationsCreateNestedManyWithoutReviewsInput
    seller?: sellerCreateNestedOneWithoutReviewsInput
    brand?: brandsCreateNestedOneWithoutReviewsInput
  }

  export type reviewsUncheckedCreateInput = {
    id?: string
    message: string
    rate?: number
    userId: string
    productId: string
    sellerId?: string | null
    brandId?: string | null
    notifications?: notificationsUncheckedCreateNestedManyWithoutReviewsInput
  }

  export type reviewsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    rate?: IntFieldUpdateOperationsInput | number
    user?: usersUpdateOneWithoutReviewsNestedInput
    product?: productsUpdateOneWithoutReviewsNestedInput
    notifications?: notificationsUpdateManyWithoutReviewsNestedInput
    seller?: sellerUpdateOneWithoutReviewsNestedInput
    brand?: brandsUpdateOneWithoutReviewsNestedInput
  }

  export type reviewsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    rate?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    sellerId?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    notifications?: notificationsUncheckedUpdateManyWithoutReviewsNestedInput
  }

  export type reviewsCreateManyInput = {
    id?: string
    message: string
    rate?: number
    userId: string
    productId: string
    sellerId?: string | null
    brandId?: string | null
  }

  export type reviewsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    rate?: IntFieldUpdateOperationsInput | number
  }

  export type reviewsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    rate?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    sellerId?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type notificationsCreateInput = {
    id?: string
    message: string
    title: string
    user?: usersCreateNestedOneWithoutNotificationsInput
    comments?: commentsCreateNestedOneWithoutNotificationsInput
    reviews?: reviewsCreateNestedOneWithoutNotificationsInput
  }

  export type notificationsUncheckedCreateInput = {
    id?: string
    message: string
    title: string
    userId: string
    commentId: string
    reviewId: string
  }

  export type notificationsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    user?: usersUpdateOneWithoutNotificationsNestedInput
    comments?: commentsUpdateOneWithoutNotificationsNestedInput
    reviews?: reviewsUpdateOneWithoutNotificationsNestedInput
  }

  export type notificationsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    commentId?: StringFieldUpdateOperationsInput | string
    reviewId?: StringFieldUpdateOperationsInput | string
  }

  export type notificationsCreateManyInput = {
    id?: string
    message: string
    title: string
    userId: string
    commentId: string
    reviewId: string
  }

  export type notificationsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
  }

  export type notificationsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    commentId?: StringFieldUpdateOperationsInput | string
    reviewId?: StringFieldUpdateOperationsInput | string
  }

  export type flashSellCreateInput = {
    id?: string
    startAt: Date | string
    endAt: Date | string
    banner: string
    title: string
    product?: flashSellProductCreateNestedManyWithoutFlashSellInput
  }

  export type flashSellUncheckedCreateInput = {
    id?: string
    startAt: Date | string
    endAt: Date | string
    banner: string
    title: string
    product?: flashSellProductUncheckedCreateNestedManyWithoutFlashSellInput
  }

  export type flashSellUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    startAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endAt?: DateTimeFieldUpdateOperationsInput | Date | string
    banner?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    product?: flashSellProductUpdateManyWithoutFlashSellNestedInput
  }

  export type flashSellUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    startAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endAt?: DateTimeFieldUpdateOperationsInput | Date | string
    banner?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    product?: flashSellProductUncheckedUpdateManyWithoutFlashSellNestedInput
  }

  export type flashSellCreateManyInput = {
    id?: string
    startAt: Date | string
    endAt: Date | string
    banner: string
    title: string
  }

  export type flashSellUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    startAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endAt?: DateTimeFieldUpdateOperationsInput | Date | string
    banner?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
  }

  export type flashSellUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    startAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endAt?: DateTimeFieldUpdateOperationsInput | Date | string
    banner?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
  }

  export type flashSellProductCreateInput = {
    id?: string
    offer?: number
    percentage?: boolean
    minSell?: number
    quantity?: number
    deliveryFree?: boolean
    createdAt?: Date | string
    flashSell?: flashSellCreateNestedOneWithoutProductInput
    product?: productsCreateNestedOneWithoutFlashSellProductInput
    user?: usersCreateNestedOneWithoutFlashSellProductInput
  }

  export type flashSellProductUncheckedCreateInput = {
    id?: string
    offer?: number
    percentage?: boolean
    minSell?: number
    quantity?: number
    deliveryFree?: boolean
    flashSellId: string
    productId: string
    userId: string
    createdAt?: Date | string
  }

  export type flashSellProductUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    offer?: IntFieldUpdateOperationsInput | number
    percentage?: BoolFieldUpdateOperationsInput | boolean
    minSell?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    deliveryFree?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    flashSell?: flashSellUpdateOneWithoutProductNestedInput
    product?: productsUpdateOneWithoutFlashSellProductNestedInput
    user?: usersUpdateOneWithoutFlashSellProductNestedInput
  }

  export type flashSellProductUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    offer?: IntFieldUpdateOperationsInput | number
    percentage?: BoolFieldUpdateOperationsInput | boolean
    minSell?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    deliveryFree?: BoolFieldUpdateOperationsInput | boolean
    flashSellId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type flashSellProductCreateManyInput = {
    id?: string
    offer?: number
    percentage?: boolean
    minSell?: number
    quantity?: number
    deliveryFree?: boolean
    flashSellId: string
    productId: string
    userId: string
    createdAt?: Date | string
  }

  export type flashSellProductUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    offer?: IntFieldUpdateOperationsInput | number
    percentage?: BoolFieldUpdateOperationsInput | boolean
    minSell?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    deliveryFree?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type flashSellProductUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    offer?: IntFieldUpdateOperationsInput | number
    percentage?: BoolFieldUpdateOperationsInput | boolean
    minSell?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    deliveryFree?: BoolFieldUpdateOperationsInput | boolean
    flashSellId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type contactsCreateInput = {
    id?: string
    title: string
    description: string
    name: string
    phone: string
    email: string
    date?: Date | string
  }

  export type contactsUncheckedCreateInput = {
    id?: string
    title: string
    description: string
    name: string
    phone: string
    email: string
    date?: Date | string
  }

  export type contactsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type contactsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type contactsCreateManyInput = {
    id?: string
    title: string
    description: string
    name: string
    phone: string
    email: string
    date?: Date | string
  }

  export type contactsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type contactsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type conversationsCreateInput = {
    id?: string
    receiverId: string
    date?: Date | string
    sender?: usersCreateNestedOneWithoutConversationsInput
  }

  export type conversationsUncheckedCreateInput = {
    id?: string
    senderId: string
    receiverId: string
    date?: Date | string
  }

  export type conversationsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    receiverId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    sender?: usersUpdateOneWithoutConversationsNestedInput
  }

  export type conversationsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    receiverId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type conversationsCreateManyInput = {
    id?: string
    senderId: string
    receiverId: string
    date?: Date | string
  }

  export type conversationsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    receiverId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type conversationsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    receiverId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type messagesCreateInput = {
    id?: string
    message?: string | null
    image?: string | null
    date?: Date | string
    product?: productsCreateNestedOneWithoutMessagesInput
  }

  export type messagesUncheckedCreateInput = {
    id?: string
    message?: string | null
    image?: string | null
    date?: Date | string
    productId: string
  }

  export type messagesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: productsUpdateOneWithoutMessagesNestedInput
  }

  export type messagesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    productId?: StringFieldUpdateOperationsInput | string
  }

  export type messagesCreateManyInput = {
    id?: string
    message?: string | null
    image?: string | null
    date?: Date | string
    productId: string
  }

  export type messagesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type messagesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    productId?: StringFieldUpdateOperationsInput | string
  }

  export type ordersCreateInput = {
    id?: string
    offerPrice?: number
    date?: Date | string
    buyer: usersCreateNestedOneWithoutOrdersInput
    product: productsCreateNestedOneWithoutOrdersInput
  }

  export type ordersUncheckedCreateInput = {
    id?: string
    buyerid: string
    productId: string
    offerPrice?: number
    date?: Date | string
  }

  export type ordersUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    offerPrice?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    buyer?: usersUpdateOneRequiredWithoutOrdersNestedInput
    product?: productsUpdateOneRequiredWithoutOrdersNestedInput
  }

  export type ordersUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    buyerid?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    offerPrice?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ordersCreateManyInput = {
    id?: string
    buyerid: string
    productId: string
    offerPrice?: number
    date?: Date | string
  }

  export type ordersUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    offerPrice?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ordersUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    buyerid?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    offerPrice?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type bannerCreateInput = {
    id?: string
    title: string
    image: string
    product?: productsCreateNestedOneWithoutBannerInput
  }

  export type bannerUncheckedCreateInput = {
    id?: string
    title: string
    image: string
    productId: string
  }

  export type bannerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    product?: productsUpdateOneWithoutBannerNestedInput
  }

  export type bannerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
  }

  export type bannerCreateManyInput = {
    id?: string
    title: string
    image: string
    productId: string
  }

  export type bannerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type bannerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
  }

  export type addsCreateInput = {
    id?: string
    title: string
    image: string
    date?: Date | string
    product?: productsCreateNestedOneWithoutAddsInput
    visitors?: visitorsCreateNestedOneWithoutAddsInput
  }

  export type addsUncheckedCreateInput = {
    id?: string
    title: string
    image: string
    productId: string
    visitorId?: string | null
    date?: Date | string
  }

  export type addsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: productsUpdateOneWithoutAddsNestedInput
    visitors?: visitorsUpdateOneWithoutAddsNestedInput
  }

  export type addsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    visitorId?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type addsCreateManyInput = {
    id?: string
    title: string
    image: string
    productId: string
    visitorId?: string | null
    date?: Date | string
  }

  export type addsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type addsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    visitorId?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type visitorsCreateInput = {
    id?: string
    ip: string
    deviceName: string
    randomId: string
    date?: Date | string
    adds?: addsCreateNestedOneWithoutVisitorsInput
  }

  export type visitorsUncheckedCreateInput = {
    id?: string
    ip: string
    deviceName: string
    randomId: string
    date?: Date | string
    adds?: addsUncheckedCreateNestedOneWithoutVisitorsInput
  }

  export type visitorsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    ip?: StringFieldUpdateOperationsInput | string
    deviceName?: StringFieldUpdateOperationsInput | string
    randomId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    adds?: addsUpdateOneWithoutVisitorsNestedInput
  }

  export type visitorsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    ip?: StringFieldUpdateOperationsInput | string
    deviceName?: StringFieldUpdateOperationsInput | string
    randomId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    adds?: addsUncheckedUpdateOneWithoutVisitorsNestedInput
  }

  export type visitorsCreateManyInput = {
    id?: string
    ip: string
    deviceName: string
    randomId: string
    date?: Date | string
  }

  export type visitorsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    ip?: StringFieldUpdateOperationsInput | string
    deviceName?: StringFieldUpdateOperationsInput | string
    randomId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type visitorsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    ip?: StringFieldUpdateOperationsInput | string
    deviceName?: StringFieldUpdateOperationsInput | string
    randomId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type SellerListRelationFilter = {
    every?: sellerWhereInput
    some?: sellerWhereInput
    none?: sellerWhereInput
  }

  export type BrandsListRelationFilter = {
    every?: brandsWhereInput
    some?: brandsWhereInput
    none?: brandsWhereInput
  }

  export type ProductsListRelationFilter = {
    every?: productsWhereInput
    some?: productsWhereInput
    none?: productsWhereInput
  }

  export type CommentsListRelationFilter = {
    every?: commentsWhereInput
    some?: commentsWhereInput
    none?: commentsWhereInput
  }

  export type ReviewsListRelationFilter = {
    every?: reviewsWhereInput
    some?: reviewsWhereInput
    none?: reviewsWhereInput
  }

  export type NotificationsListRelationFilter = {
    every?: notificationsWhereInput
    some?: notificationsWhereInput
    none?: notificationsWhereInput
  }

  export type FlashSellProductListRelationFilter = {
    every?: flashSellProductWhereInput
    some?: flashSellProductWhereInput
    none?: flashSellProductWhereInput
  }

  export type ConversationsListRelationFilter = {
    every?: conversationsWhereInput
    some?: conversationsWhereInput
    none?: conversationsWhereInput
  }

  export type OrdersListRelationFilter = {
    every?: ordersWhereInput
    some?: ordersWhereInput
    none?: ordersWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type sellerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type brandsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type productsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type commentsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type reviewsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type notificationsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type flashSellProductOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type conversationsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ordersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type usersCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    image?: SortOrder
    phone?: SortOrder
    birthday?: SortOrder
    gender?: SortOrder
    role?: SortOrder
    uid?: SortOrder
    address?: SortOrder
    createdAt?: SortOrder
    pushToken?: SortOrder
    verified?: SortOrder
  }

  export type usersAvgOrderByAggregateInput = {
    role?: SortOrder
  }

  export type usersMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    image?: SortOrder
    phone?: SortOrder
    birthday?: SortOrder
    gender?: SortOrder
    role?: SortOrder
    uid?: SortOrder
    createdAt?: SortOrder
    pushToken?: SortOrder
    verified?: SortOrder
  }

  export type usersMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    image?: SortOrder
    phone?: SortOrder
    birthday?: SortOrder
    gender?: SortOrder
    role?: SortOrder
    uid?: SortOrder
    createdAt?: SortOrder
    pushToken?: SortOrder
    verified?: SortOrder
  }

  export type usersSumOrderByAggregateInput = {
    role?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type SubCategoryListRelationFilter = {
    every?: subCategoryWhereInput
    some?: subCategoryWhereInput
    none?: subCategoryWhereInput
  }

  export type subCategoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type categoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    icon?: SortOrder
  }

  export type categoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    icon?: SortOrder
  }

  export type categoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    icon?: SortOrder
  }

  export type CategoryNullableRelationFilter = {
    is?: categoryWhereInput | null
    isNot?: categoryWhereInput | null
  }

  export type OptionsListRelationFilter = {
    every?: optionsWhereInput
    some?: optionsWhereInput
    none?: optionsWhereInput
  }

  export type optionsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type subCategoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    categoryId?: SortOrder
  }

  export type subCategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    categoryId?: SortOrder
  }

  export type subCategoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    categoryId?: SortOrder
  }

  export type SubCategoryNullableRelationFilter = {
    is?: subCategoryWhereInput | null
    isNot?: subCategoryWhereInput | null
  }

  export type optionsCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    subCategoryId?: SortOrder
  }

  export type optionsMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    subCategoryId?: SortOrder
  }

  export type optionsMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    subCategoryId?: SortOrder
  }

  export type UsersNullableRelationFilter = {
    is?: usersWhereInput | null
    isNot?: usersWhereInput | null
  }

  export type sellerCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    shopName?: SortOrder
    shopAddress?: SortOrder
    categories?: SortOrder
    logo?: SortOrder
    verified?: SortOrder
  }

  export type sellerMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    shopName?: SortOrder
    shopAddress?: SortOrder
    logo?: SortOrder
    verified?: SortOrder
  }

  export type sellerMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    shopName?: SortOrder
    shopAddress?: SortOrder
    logo?: SortOrder
    verified?: SortOrder
  }

  export type brandsCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    brandName?: SortOrder
    brandAddress?: SortOrder
    brandIcon?: SortOrder
    categories?: SortOrder
    verified?: SortOrder
  }

  export type brandsMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    brandName?: SortOrder
    brandAddress?: SortOrder
    brandIcon?: SortOrder
    verified?: SortOrder
  }

  export type brandsMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    brandName?: SortOrder
    brandAddress?: SortOrder
    brandIcon?: SortOrder
    verified?: SortOrder
  }

  export type ColorsNullableRelationFilter = {
    is?: colorsWhereInput | null
    isNot?: colorsWhereInput | null
  }

  export type SizeNullableRelationFilter = {
    is?: sizeWhereInput | null
    isNot?: sizeWhereInput | null
  }

  export type SpecificationsNullableRelationFilter = {
    is?: specificationsWhereInput | null
    isNot?: specificationsWhereInput | null
  }

  export type SellerNullableRelationFilter = {
    is?: sellerWhereInput | null
    isNot?: sellerWhereInput | null
  }

  export type BrandsNullableRelationFilter = {
    is?: brandsWhereInput | null
    isNot?: brandsWhereInput | null
  }

  export type OptionsNullableRelationFilter = {
    is?: optionsWhereInput | null
    isNot?: optionsWhereInput | null
  }

  export type BannerListRelationFilter = {
    every?: bannerWhereInput
    some?: bannerWhereInput
    none?: bannerWhereInput
  }

  export type AddsListRelationFilter = {
    every?: addsWhereInput
    some?: addsWhereInput
    none?: addsWhereInput
  }

  export type MessagesListRelationFilter = {
    every?: messagesWhereInput
    some?: messagesWhereInput
    none?: messagesWhereInput
  }

  export type bannerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type addsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type messagesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type productsCountOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    coin?: SortOrder
    title?: SortOrder
    description?: SortOrder
    thumbnail?: SortOrder
    quantity?: SortOrder
    minOrder?: SortOrder
    freeCoin?: SortOrder
    offer?: SortOrder
    percentage?: SortOrder
    freeDelivery?: SortOrder
    fixedPrice?: SortOrder
    createdAt?: SortOrder
    colorId?: SortOrder
    sizeId?: SortOrder
    specificationsId?: SortOrder
    images?: SortOrder
    verified?: SortOrder
    sellerId?: SortOrder
    brandId?: SortOrder
    categoryId?: SortOrder
    subCategoryId?: SortOrder
    optionId?: SortOrder
    userId?: SortOrder
  }

  export type productsAvgOrderByAggregateInput = {
    price?: SortOrder
    quantity?: SortOrder
    minOrder?: SortOrder
    freeCoin?: SortOrder
    offer?: SortOrder
  }

  export type productsMaxOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    coin?: SortOrder
    title?: SortOrder
    description?: SortOrder
    thumbnail?: SortOrder
    quantity?: SortOrder
    minOrder?: SortOrder
    freeCoin?: SortOrder
    offer?: SortOrder
    percentage?: SortOrder
    freeDelivery?: SortOrder
    fixedPrice?: SortOrder
    createdAt?: SortOrder
    colorId?: SortOrder
    sizeId?: SortOrder
    specificationsId?: SortOrder
    verified?: SortOrder
    sellerId?: SortOrder
    brandId?: SortOrder
    categoryId?: SortOrder
    subCategoryId?: SortOrder
    optionId?: SortOrder
    userId?: SortOrder
  }

  export type productsMinOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    coin?: SortOrder
    title?: SortOrder
    description?: SortOrder
    thumbnail?: SortOrder
    quantity?: SortOrder
    minOrder?: SortOrder
    freeCoin?: SortOrder
    offer?: SortOrder
    percentage?: SortOrder
    freeDelivery?: SortOrder
    fixedPrice?: SortOrder
    createdAt?: SortOrder
    colorId?: SortOrder
    sizeId?: SortOrder
    specificationsId?: SortOrder
    verified?: SortOrder
    sellerId?: SortOrder
    brandId?: SortOrder
    categoryId?: SortOrder
    subCategoryId?: SortOrder
    optionId?: SortOrder
    userId?: SortOrder
  }

  export type productsSumOrderByAggregateInput = {
    price?: SortOrder
    quantity?: SortOrder
    minOrder?: SortOrder
    freeCoin?: SortOrder
    offer?: SortOrder
  }

  export type colorsCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    color?: SortOrder
  }

  export type colorsMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    color?: SortOrder
  }

  export type colorsMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    color?: SortOrder
  }

  export type sizeCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    cm?: SortOrder
  }

  export type sizeMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    cm?: SortOrder
  }

  export type sizeMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    cm?: SortOrder
  }

  export type specificationsCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    details?: SortOrder
  }

  export type specificationsMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    details?: SortOrder
  }

  export type specificationsMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    details?: SortOrder
  }

  export type ProductsNullableRelationFilter = {
    is?: productsWhereInput | null
    isNot?: productsWhereInput | null
  }

  export type commentsCountOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    image?: SortOrder
    replay?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    receiverId?: SortOrder
  }

  export type commentsMaxOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    image?: SortOrder
    replay?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    receiverId?: SortOrder
  }

  export type commentsMinOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    image?: SortOrder
    replay?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    receiverId?: SortOrder
  }

  export type reviewsCountOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    rate?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    sellerId?: SortOrder
    brandId?: SortOrder
  }

  export type reviewsAvgOrderByAggregateInput = {
    rate?: SortOrder
  }

  export type reviewsMaxOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    rate?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    sellerId?: SortOrder
    brandId?: SortOrder
  }

  export type reviewsMinOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    rate?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    sellerId?: SortOrder
    brandId?: SortOrder
  }

  export type reviewsSumOrderByAggregateInput = {
    rate?: SortOrder
  }

  export type CommentsNullableRelationFilter = {
    is?: commentsWhereInput | null
    isNot?: commentsWhereInput | null
  }

  export type ReviewsNullableRelationFilter = {
    is?: reviewsWhereInput | null
    isNot?: reviewsWhereInput | null
  }

  export type notificationsCountOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    title?: SortOrder
    userId?: SortOrder
    commentId?: SortOrder
    reviewId?: SortOrder
  }

  export type notificationsMaxOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    title?: SortOrder
    userId?: SortOrder
    commentId?: SortOrder
    reviewId?: SortOrder
  }

  export type notificationsMinOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    title?: SortOrder
    userId?: SortOrder
    commentId?: SortOrder
    reviewId?: SortOrder
  }

  export type flashSellCountOrderByAggregateInput = {
    id?: SortOrder
    startAt?: SortOrder
    endAt?: SortOrder
    banner?: SortOrder
    title?: SortOrder
  }

  export type flashSellMaxOrderByAggregateInput = {
    id?: SortOrder
    startAt?: SortOrder
    endAt?: SortOrder
    banner?: SortOrder
    title?: SortOrder
  }

  export type flashSellMinOrderByAggregateInput = {
    id?: SortOrder
    startAt?: SortOrder
    endAt?: SortOrder
    banner?: SortOrder
    title?: SortOrder
  }

  export type FlashSellNullableRelationFilter = {
    is?: flashSellWhereInput | null
    isNot?: flashSellWhereInput | null
  }

  export type flashSellProductCountOrderByAggregateInput = {
    id?: SortOrder
    offer?: SortOrder
    percentage?: SortOrder
    minSell?: SortOrder
    quantity?: SortOrder
    deliveryFree?: SortOrder
    flashSellId?: SortOrder
    productId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type flashSellProductAvgOrderByAggregateInput = {
    offer?: SortOrder
    minSell?: SortOrder
    quantity?: SortOrder
  }

  export type flashSellProductMaxOrderByAggregateInput = {
    id?: SortOrder
    offer?: SortOrder
    percentage?: SortOrder
    minSell?: SortOrder
    quantity?: SortOrder
    deliveryFree?: SortOrder
    flashSellId?: SortOrder
    productId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type flashSellProductMinOrderByAggregateInput = {
    id?: SortOrder
    offer?: SortOrder
    percentage?: SortOrder
    minSell?: SortOrder
    quantity?: SortOrder
    deliveryFree?: SortOrder
    flashSellId?: SortOrder
    productId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type flashSellProductSumOrderByAggregateInput = {
    offer?: SortOrder
    minSell?: SortOrder
    quantity?: SortOrder
  }

  export type contactsCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    date?: SortOrder
  }

  export type contactsMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    date?: SortOrder
  }

  export type contactsMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    date?: SortOrder
  }

  export type conversationsCountOrderByAggregateInput = {
    id?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    date?: SortOrder
  }

  export type conversationsMaxOrderByAggregateInput = {
    id?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    date?: SortOrder
  }

  export type conversationsMinOrderByAggregateInput = {
    id?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    date?: SortOrder
  }

  export type messagesCountOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    image?: SortOrder
    date?: SortOrder
    productId?: SortOrder
  }

  export type messagesMaxOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    image?: SortOrder
    date?: SortOrder
    productId?: SortOrder
  }

  export type messagesMinOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    image?: SortOrder
    date?: SortOrder
    productId?: SortOrder
  }

  export type UsersRelationFilter = {
    is?: usersWhereInput
    isNot?: usersWhereInput
  }

  export type ProductsRelationFilter = {
    is?: productsWhereInput
    isNot?: productsWhereInput
  }

  export type ordersCountOrderByAggregateInput = {
    id?: SortOrder
    buyerid?: SortOrder
    productId?: SortOrder
    offerPrice?: SortOrder
    date?: SortOrder
  }

  export type ordersAvgOrderByAggregateInput = {
    offerPrice?: SortOrder
  }

  export type ordersMaxOrderByAggregateInput = {
    id?: SortOrder
    buyerid?: SortOrder
    productId?: SortOrder
    offerPrice?: SortOrder
    date?: SortOrder
  }

  export type ordersMinOrderByAggregateInput = {
    id?: SortOrder
    buyerid?: SortOrder
    productId?: SortOrder
    offerPrice?: SortOrder
    date?: SortOrder
  }

  export type ordersSumOrderByAggregateInput = {
    offerPrice?: SortOrder
  }

  export type bannerCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    image?: SortOrder
    productId?: SortOrder
  }

  export type bannerMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    image?: SortOrder
    productId?: SortOrder
  }

  export type bannerMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    image?: SortOrder
    productId?: SortOrder
  }

  export type VisitorsNullableRelationFilter = {
    is?: visitorsWhereInput | null
    isNot?: visitorsWhereInput | null
  }

  export type addsCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    image?: SortOrder
    productId?: SortOrder
    visitorId?: SortOrder
    date?: SortOrder
  }

  export type addsMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    image?: SortOrder
    productId?: SortOrder
    visitorId?: SortOrder
    date?: SortOrder
  }

  export type addsMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    image?: SortOrder
    productId?: SortOrder
    visitorId?: SortOrder
    date?: SortOrder
  }

  export type AddsNullableRelationFilter = {
    is?: addsWhereInput | null
    isNot?: addsWhereInput | null
  }

  export type visitorsCountOrderByAggregateInput = {
    id?: SortOrder
    ip?: SortOrder
    deviceName?: SortOrder
    randomId?: SortOrder
    date?: SortOrder
  }

  export type visitorsMaxOrderByAggregateInput = {
    id?: SortOrder
    ip?: SortOrder
    deviceName?: SortOrder
    randomId?: SortOrder
    date?: SortOrder
  }

  export type visitorsMinOrderByAggregateInput = {
    id?: SortOrder
    ip?: SortOrder
    deviceName?: SortOrder
    randomId?: SortOrder
    date?: SortOrder
  }

  export type sellerCreateNestedManyWithoutUserInput = {
    create?: XOR<sellerCreateWithoutUserInput, sellerUncheckedCreateWithoutUserInput> | sellerCreateWithoutUserInput[] | sellerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: sellerCreateOrConnectWithoutUserInput | sellerCreateOrConnectWithoutUserInput[]
    createMany?: sellerCreateManyUserInputEnvelope
    connect?: sellerWhereUniqueInput | sellerWhereUniqueInput[]
  }

  export type brandsCreateNestedManyWithoutUserInput = {
    create?: XOR<brandsCreateWithoutUserInput, brandsUncheckedCreateWithoutUserInput> | brandsCreateWithoutUserInput[] | brandsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: brandsCreateOrConnectWithoutUserInput | brandsCreateOrConnectWithoutUserInput[]
    createMany?: brandsCreateManyUserInputEnvelope
    connect?: brandsWhereUniqueInput | brandsWhereUniqueInput[]
  }

  export type productsCreateNestedManyWithoutUserInput = {
    create?: XOR<productsCreateWithoutUserInput, productsUncheckedCreateWithoutUserInput> | productsCreateWithoutUserInput[] | productsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: productsCreateOrConnectWithoutUserInput | productsCreateOrConnectWithoutUserInput[]
    createMany?: productsCreateManyUserInputEnvelope
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
  }

  export type commentsCreateNestedManyWithoutUserInput = {
    create?: XOR<commentsCreateWithoutUserInput, commentsUncheckedCreateWithoutUserInput> | commentsCreateWithoutUserInput[] | commentsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: commentsCreateOrConnectWithoutUserInput | commentsCreateOrConnectWithoutUserInput[]
    createMany?: commentsCreateManyUserInputEnvelope
    connect?: commentsWhereUniqueInput | commentsWhereUniqueInput[]
  }

  export type reviewsCreateNestedManyWithoutUserInput = {
    create?: XOR<reviewsCreateWithoutUserInput, reviewsUncheckedCreateWithoutUserInput> | reviewsCreateWithoutUserInput[] | reviewsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: reviewsCreateOrConnectWithoutUserInput | reviewsCreateOrConnectWithoutUserInput[]
    createMany?: reviewsCreateManyUserInputEnvelope
    connect?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
  }

  export type notificationsCreateNestedManyWithoutUserInput = {
    create?: XOR<notificationsCreateWithoutUserInput, notificationsUncheckedCreateWithoutUserInput> | notificationsCreateWithoutUserInput[] | notificationsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: notificationsCreateOrConnectWithoutUserInput | notificationsCreateOrConnectWithoutUserInput[]
    createMany?: notificationsCreateManyUserInputEnvelope
    connect?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
  }

  export type flashSellProductCreateNestedManyWithoutUserInput = {
    create?: XOR<flashSellProductCreateWithoutUserInput, flashSellProductUncheckedCreateWithoutUserInput> | flashSellProductCreateWithoutUserInput[] | flashSellProductUncheckedCreateWithoutUserInput[]
    connectOrCreate?: flashSellProductCreateOrConnectWithoutUserInput | flashSellProductCreateOrConnectWithoutUserInput[]
    createMany?: flashSellProductCreateManyUserInputEnvelope
    connect?: flashSellProductWhereUniqueInput | flashSellProductWhereUniqueInput[]
  }

  export type conversationsCreateNestedManyWithoutSenderInput = {
    create?: XOR<conversationsCreateWithoutSenderInput, conversationsUncheckedCreateWithoutSenderInput> | conversationsCreateWithoutSenderInput[] | conversationsUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: conversationsCreateOrConnectWithoutSenderInput | conversationsCreateOrConnectWithoutSenderInput[]
    createMany?: conversationsCreateManySenderInputEnvelope
    connect?: conversationsWhereUniqueInput | conversationsWhereUniqueInput[]
  }

  export type ordersCreateNestedManyWithoutBuyerInput = {
    create?: XOR<ordersCreateWithoutBuyerInput, ordersUncheckedCreateWithoutBuyerInput> | ordersCreateWithoutBuyerInput[] | ordersUncheckedCreateWithoutBuyerInput[]
    connectOrCreate?: ordersCreateOrConnectWithoutBuyerInput | ordersCreateOrConnectWithoutBuyerInput[]
    createMany?: ordersCreateManyBuyerInputEnvelope
    connect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
  }

  export type sellerUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<sellerCreateWithoutUserInput, sellerUncheckedCreateWithoutUserInput> | sellerCreateWithoutUserInput[] | sellerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: sellerCreateOrConnectWithoutUserInput | sellerCreateOrConnectWithoutUserInput[]
    createMany?: sellerCreateManyUserInputEnvelope
    connect?: sellerWhereUniqueInput | sellerWhereUniqueInput[]
  }

  export type brandsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<brandsCreateWithoutUserInput, brandsUncheckedCreateWithoutUserInput> | brandsCreateWithoutUserInput[] | brandsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: brandsCreateOrConnectWithoutUserInput | brandsCreateOrConnectWithoutUserInput[]
    createMany?: brandsCreateManyUserInputEnvelope
    connect?: brandsWhereUniqueInput | brandsWhereUniqueInput[]
  }

  export type productsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<productsCreateWithoutUserInput, productsUncheckedCreateWithoutUserInput> | productsCreateWithoutUserInput[] | productsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: productsCreateOrConnectWithoutUserInput | productsCreateOrConnectWithoutUserInput[]
    createMany?: productsCreateManyUserInputEnvelope
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
  }

  export type commentsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<commentsCreateWithoutUserInput, commentsUncheckedCreateWithoutUserInput> | commentsCreateWithoutUserInput[] | commentsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: commentsCreateOrConnectWithoutUserInput | commentsCreateOrConnectWithoutUserInput[]
    createMany?: commentsCreateManyUserInputEnvelope
    connect?: commentsWhereUniqueInput | commentsWhereUniqueInput[]
  }

  export type reviewsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<reviewsCreateWithoutUserInput, reviewsUncheckedCreateWithoutUserInput> | reviewsCreateWithoutUserInput[] | reviewsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: reviewsCreateOrConnectWithoutUserInput | reviewsCreateOrConnectWithoutUserInput[]
    createMany?: reviewsCreateManyUserInputEnvelope
    connect?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
  }

  export type notificationsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<notificationsCreateWithoutUserInput, notificationsUncheckedCreateWithoutUserInput> | notificationsCreateWithoutUserInput[] | notificationsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: notificationsCreateOrConnectWithoutUserInput | notificationsCreateOrConnectWithoutUserInput[]
    createMany?: notificationsCreateManyUserInputEnvelope
    connect?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
  }

  export type flashSellProductUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<flashSellProductCreateWithoutUserInput, flashSellProductUncheckedCreateWithoutUserInput> | flashSellProductCreateWithoutUserInput[] | flashSellProductUncheckedCreateWithoutUserInput[]
    connectOrCreate?: flashSellProductCreateOrConnectWithoutUserInput | flashSellProductCreateOrConnectWithoutUserInput[]
    createMany?: flashSellProductCreateManyUserInputEnvelope
    connect?: flashSellProductWhereUniqueInput | flashSellProductWhereUniqueInput[]
  }

  export type conversationsUncheckedCreateNestedManyWithoutSenderInput = {
    create?: XOR<conversationsCreateWithoutSenderInput, conversationsUncheckedCreateWithoutSenderInput> | conversationsCreateWithoutSenderInput[] | conversationsUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: conversationsCreateOrConnectWithoutSenderInput | conversationsCreateOrConnectWithoutSenderInput[]
    createMany?: conversationsCreateManySenderInputEnvelope
    connect?: conversationsWhereUniqueInput | conversationsWhereUniqueInput[]
  }

  export type ordersUncheckedCreateNestedManyWithoutBuyerInput = {
    create?: XOR<ordersCreateWithoutBuyerInput, ordersUncheckedCreateWithoutBuyerInput> | ordersCreateWithoutBuyerInput[] | ordersUncheckedCreateWithoutBuyerInput[]
    connectOrCreate?: ordersCreateOrConnectWithoutBuyerInput | ordersCreateOrConnectWithoutBuyerInput[]
    createMany?: ordersCreateManyBuyerInputEnvelope
    connect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type sellerUpdateManyWithoutUserNestedInput = {
    create?: XOR<sellerCreateWithoutUserInput, sellerUncheckedCreateWithoutUserInput> | sellerCreateWithoutUserInput[] | sellerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: sellerCreateOrConnectWithoutUserInput | sellerCreateOrConnectWithoutUserInput[]
    upsert?: sellerUpsertWithWhereUniqueWithoutUserInput | sellerUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: sellerCreateManyUserInputEnvelope
    set?: sellerWhereUniqueInput | sellerWhereUniqueInput[]
    disconnect?: sellerWhereUniqueInput | sellerWhereUniqueInput[]
    delete?: sellerWhereUniqueInput | sellerWhereUniqueInput[]
    connect?: sellerWhereUniqueInput | sellerWhereUniqueInput[]
    update?: sellerUpdateWithWhereUniqueWithoutUserInput | sellerUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: sellerUpdateManyWithWhereWithoutUserInput | sellerUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: sellerScalarWhereInput | sellerScalarWhereInput[]
  }

  export type brandsUpdateManyWithoutUserNestedInput = {
    create?: XOR<brandsCreateWithoutUserInput, brandsUncheckedCreateWithoutUserInput> | brandsCreateWithoutUserInput[] | brandsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: brandsCreateOrConnectWithoutUserInput | brandsCreateOrConnectWithoutUserInput[]
    upsert?: brandsUpsertWithWhereUniqueWithoutUserInput | brandsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: brandsCreateManyUserInputEnvelope
    set?: brandsWhereUniqueInput | brandsWhereUniqueInput[]
    disconnect?: brandsWhereUniqueInput | brandsWhereUniqueInput[]
    delete?: brandsWhereUniqueInput | brandsWhereUniqueInput[]
    connect?: brandsWhereUniqueInput | brandsWhereUniqueInput[]
    update?: brandsUpdateWithWhereUniqueWithoutUserInput | brandsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: brandsUpdateManyWithWhereWithoutUserInput | brandsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: brandsScalarWhereInput | brandsScalarWhereInput[]
  }

  export type productsUpdateManyWithoutUserNestedInput = {
    create?: XOR<productsCreateWithoutUserInput, productsUncheckedCreateWithoutUserInput> | productsCreateWithoutUserInput[] | productsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: productsCreateOrConnectWithoutUserInput | productsCreateOrConnectWithoutUserInput[]
    upsert?: productsUpsertWithWhereUniqueWithoutUserInput | productsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: productsCreateManyUserInputEnvelope
    set?: productsWhereUniqueInput | productsWhereUniqueInput[]
    disconnect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    delete?: productsWhereUniqueInput | productsWhereUniqueInput[]
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    update?: productsUpdateWithWhereUniqueWithoutUserInput | productsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: productsUpdateManyWithWhereWithoutUserInput | productsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: productsScalarWhereInput | productsScalarWhereInput[]
  }

  export type commentsUpdateManyWithoutUserNestedInput = {
    create?: XOR<commentsCreateWithoutUserInput, commentsUncheckedCreateWithoutUserInput> | commentsCreateWithoutUserInput[] | commentsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: commentsCreateOrConnectWithoutUserInput | commentsCreateOrConnectWithoutUserInput[]
    upsert?: commentsUpsertWithWhereUniqueWithoutUserInput | commentsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: commentsCreateManyUserInputEnvelope
    set?: commentsWhereUniqueInput | commentsWhereUniqueInput[]
    disconnect?: commentsWhereUniqueInput | commentsWhereUniqueInput[]
    delete?: commentsWhereUniqueInput | commentsWhereUniqueInput[]
    connect?: commentsWhereUniqueInput | commentsWhereUniqueInput[]
    update?: commentsUpdateWithWhereUniqueWithoutUserInput | commentsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: commentsUpdateManyWithWhereWithoutUserInput | commentsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: commentsScalarWhereInput | commentsScalarWhereInput[]
  }

  export type reviewsUpdateManyWithoutUserNestedInput = {
    create?: XOR<reviewsCreateWithoutUserInput, reviewsUncheckedCreateWithoutUserInput> | reviewsCreateWithoutUserInput[] | reviewsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: reviewsCreateOrConnectWithoutUserInput | reviewsCreateOrConnectWithoutUserInput[]
    upsert?: reviewsUpsertWithWhereUniqueWithoutUserInput | reviewsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: reviewsCreateManyUserInputEnvelope
    set?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    disconnect?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    delete?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    connect?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    update?: reviewsUpdateWithWhereUniqueWithoutUserInput | reviewsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: reviewsUpdateManyWithWhereWithoutUserInput | reviewsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: reviewsScalarWhereInput | reviewsScalarWhereInput[]
  }

  export type notificationsUpdateManyWithoutUserNestedInput = {
    create?: XOR<notificationsCreateWithoutUserInput, notificationsUncheckedCreateWithoutUserInput> | notificationsCreateWithoutUserInput[] | notificationsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: notificationsCreateOrConnectWithoutUserInput | notificationsCreateOrConnectWithoutUserInput[]
    upsert?: notificationsUpsertWithWhereUniqueWithoutUserInput | notificationsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: notificationsCreateManyUserInputEnvelope
    set?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    disconnect?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    delete?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    connect?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    update?: notificationsUpdateWithWhereUniqueWithoutUserInput | notificationsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: notificationsUpdateManyWithWhereWithoutUserInput | notificationsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: notificationsScalarWhereInput | notificationsScalarWhereInput[]
  }

  export type flashSellProductUpdateManyWithoutUserNestedInput = {
    create?: XOR<flashSellProductCreateWithoutUserInput, flashSellProductUncheckedCreateWithoutUserInput> | flashSellProductCreateWithoutUserInput[] | flashSellProductUncheckedCreateWithoutUserInput[]
    connectOrCreate?: flashSellProductCreateOrConnectWithoutUserInput | flashSellProductCreateOrConnectWithoutUserInput[]
    upsert?: flashSellProductUpsertWithWhereUniqueWithoutUserInput | flashSellProductUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: flashSellProductCreateManyUserInputEnvelope
    set?: flashSellProductWhereUniqueInput | flashSellProductWhereUniqueInput[]
    disconnect?: flashSellProductWhereUniqueInput | flashSellProductWhereUniqueInput[]
    delete?: flashSellProductWhereUniqueInput | flashSellProductWhereUniqueInput[]
    connect?: flashSellProductWhereUniqueInput | flashSellProductWhereUniqueInput[]
    update?: flashSellProductUpdateWithWhereUniqueWithoutUserInput | flashSellProductUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: flashSellProductUpdateManyWithWhereWithoutUserInput | flashSellProductUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: flashSellProductScalarWhereInput | flashSellProductScalarWhereInput[]
  }

  export type conversationsUpdateManyWithoutSenderNestedInput = {
    create?: XOR<conversationsCreateWithoutSenderInput, conversationsUncheckedCreateWithoutSenderInput> | conversationsCreateWithoutSenderInput[] | conversationsUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: conversationsCreateOrConnectWithoutSenderInput | conversationsCreateOrConnectWithoutSenderInput[]
    upsert?: conversationsUpsertWithWhereUniqueWithoutSenderInput | conversationsUpsertWithWhereUniqueWithoutSenderInput[]
    createMany?: conversationsCreateManySenderInputEnvelope
    set?: conversationsWhereUniqueInput | conversationsWhereUniqueInput[]
    disconnect?: conversationsWhereUniqueInput | conversationsWhereUniqueInput[]
    delete?: conversationsWhereUniqueInput | conversationsWhereUniqueInput[]
    connect?: conversationsWhereUniqueInput | conversationsWhereUniqueInput[]
    update?: conversationsUpdateWithWhereUniqueWithoutSenderInput | conversationsUpdateWithWhereUniqueWithoutSenderInput[]
    updateMany?: conversationsUpdateManyWithWhereWithoutSenderInput | conversationsUpdateManyWithWhereWithoutSenderInput[]
    deleteMany?: conversationsScalarWhereInput | conversationsScalarWhereInput[]
  }

  export type ordersUpdateManyWithoutBuyerNestedInput = {
    create?: XOR<ordersCreateWithoutBuyerInput, ordersUncheckedCreateWithoutBuyerInput> | ordersCreateWithoutBuyerInput[] | ordersUncheckedCreateWithoutBuyerInput[]
    connectOrCreate?: ordersCreateOrConnectWithoutBuyerInput | ordersCreateOrConnectWithoutBuyerInput[]
    upsert?: ordersUpsertWithWhereUniqueWithoutBuyerInput | ordersUpsertWithWhereUniqueWithoutBuyerInput[]
    createMany?: ordersCreateManyBuyerInputEnvelope
    set?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    disconnect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    delete?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    connect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    update?: ordersUpdateWithWhereUniqueWithoutBuyerInput | ordersUpdateWithWhereUniqueWithoutBuyerInput[]
    updateMany?: ordersUpdateManyWithWhereWithoutBuyerInput | ordersUpdateManyWithWhereWithoutBuyerInput[]
    deleteMany?: ordersScalarWhereInput | ordersScalarWhereInput[]
  }

  export type sellerUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<sellerCreateWithoutUserInput, sellerUncheckedCreateWithoutUserInput> | sellerCreateWithoutUserInput[] | sellerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: sellerCreateOrConnectWithoutUserInput | sellerCreateOrConnectWithoutUserInput[]
    upsert?: sellerUpsertWithWhereUniqueWithoutUserInput | sellerUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: sellerCreateManyUserInputEnvelope
    set?: sellerWhereUniqueInput | sellerWhereUniqueInput[]
    disconnect?: sellerWhereUniqueInput | sellerWhereUniqueInput[]
    delete?: sellerWhereUniqueInput | sellerWhereUniqueInput[]
    connect?: sellerWhereUniqueInput | sellerWhereUniqueInput[]
    update?: sellerUpdateWithWhereUniqueWithoutUserInput | sellerUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: sellerUpdateManyWithWhereWithoutUserInput | sellerUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: sellerScalarWhereInput | sellerScalarWhereInput[]
  }

  export type brandsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<brandsCreateWithoutUserInput, brandsUncheckedCreateWithoutUserInput> | brandsCreateWithoutUserInput[] | brandsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: brandsCreateOrConnectWithoutUserInput | brandsCreateOrConnectWithoutUserInput[]
    upsert?: brandsUpsertWithWhereUniqueWithoutUserInput | brandsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: brandsCreateManyUserInputEnvelope
    set?: brandsWhereUniqueInput | brandsWhereUniqueInput[]
    disconnect?: brandsWhereUniqueInput | brandsWhereUniqueInput[]
    delete?: brandsWhereUniqueInput | brandsWhereUniqueInput[]
    connect?: brandsWhereUniqueInput | brandsWhereUniqueInput[]
    update?: brandsUpdateWithWhereUniqueWithoutUserInput | brandsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: brandsUpdateManyWithWhereWithoutUserInput | brandsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: brandsScalarWhereInput | brandsScalarWhereInput[]
  }

  export type productsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<productsCreateWithoutUserInput, productsUncheckedCreateWithoutUserInput> | productsCreateWithoutUserInput[] | productsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: productsCreateOrConnectWithoutUserInput | productsCreateOrConnectWithoutUserInput[]
    upsert?: productsUpsertWithWhereUniqueWithoutUserInput | productsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: productsCreateManyUserInputEnvelope
    set?: productsWhereUniqueInput | productsWhereUniqueInput[]
    disconnect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    delete?: productsWhereUniqueInput | productsWhereUniqueInput[]
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    update?: productsUpdateWithWhereUniqueWithoutUserInput | productsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: productsUpdateManyWithWhereWithoutUserInput | productsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: productsScalarWhereInput | productsScalarWhereInput[]
  }

  export type commentsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<commentsCreateWithoutUserInput, commentsUncheckedCreateWithoutUserInput> | commentsCreateWithoutUserInput[] | commentsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: commentsCreateOrConnectWithoutUserInput | commentsCreateOrConnectWithoutUserInput[]
    upsert?: commentsUpsertWithWhereUniqueWithoutUserInput | commentsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: commentsCreateManyUserInputEnvelope
    set?: commentsWhereUniqueInput | commentsWhereUniqueInput[]
    disconnect?: commentsWhereUniqueInput | commentsWhereUniqueInput[]
    delete?: commentsWhereUniqueInput | commentsWhereUniqueInput[]
    connect?: commentsWhereUniqueInput | commentsWhereUniqueInput[]
    update?: commentsUpdateWithWhereUniqueWithoutUserInput | commentsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: commentsUpdateManyWithWhereWithoutUserInput | commentsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: commentsScalarWhereInput | commentsScalarWhereInput[]
  }

  export type reviewsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<reviewsCreateWithoutUserInput, reviewsUncheckedCreateWithoutUserInput> | reviewsCreateWithoutUserInput[] | reviewsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: reviewsCreateOrConnectWithoutUserInput | reviewsCreateOrConnectWithoutUserInput[]
    upsert?: reviewsUpsertWithWhereUniqueWithoutUserInput | reviewsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: reviewsCreateManyUserInputEnvelope
    set?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    disconnect?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    delete?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    connect?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    update?: reviewsUpdateWithWhereUniqueWithoutUserInput | reviewsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: reviewsUpdateManyWithWhereWithoutUserInput | reviewsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: reviewsScalarWhereInput | reviewsScalarWhereInput[]
  }

  export type notificationsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<notificationsCreateWithoutUserInput, notificationsUncheckedCreateWithoutUserInput> | notificationsCreateWithoutUserInput[] | notificationsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: notificationsCreateOrConnectWithoutUserInput | notificationsCreateOrConnectWithoutUserInput[]
    upsert?: notificationsUpsertWithWhereUniqueWithoutUserInput | notificationsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: notificationsCreateManyUserInputEnvelope
    set?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    disconnect?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    delete?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    connect?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    update?: notificationsUpdateWithWhereUniqueWithoutUserInput | notificationsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: notificationsUpdateManyWithWhereWithoutUserInput | notificationsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: notificationsScalarWhereInput | notificationsScalarWhereInput[]
  }

  export type flashSellProductUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<flashSellProductCreateWithoutUserInput, flashSellProductUncheckedCreateWithoutUserInput> | flashSellProductCreateWithoutUserInput[] | flashSellProductUncheckedCreateWithoutUserInput[]
    connectOrCreate?: flashSellProductCreateOrConnectWithoutUserInput | flashSellProductCreateOrConnectWithoutUserInput[]
    upsert?: flashSellProductUpsertWithWhereUniqueWithoutUserInput | flashSellProductUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: flashSellProductCreateManyUserInputEnvelope
    set?: flashSellProductWhereUniqueInput | flashSellProductWhereUniqueInput[]
    disconnect?: flashSellProductWhereUniqueInput | flashSellProductWhereUniqueInput[]
    delete?: flashSellProductWhereUniqueInput | flashSellProductWhereUniqueInput[]
    connect?: flashSellProductWhereUniqueInput | flashSellProductWhereUniqueInput[]
    update?: flashSellProductUpdateWithWhereUniqueWithoutUserInput | flashSellProductUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: flashSellProductUpdateManyWithWhereWithoutUserInput | flashSellProductUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: flashSellProductScalarWhereInput | flashSellProductScalarWhereInput[]
  }

  export type conversationsUncheckedUpdateManyWithoutSenderNestedInput = {
    create?: XOR<conversationsCreateWithoutSenderInput, conversationsUncheckedCreateWithoutSenderInput> | conversationsCreateWithoutSenderInput[] | conversationsUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: conversationsCreateOrConnectWithoutSenderInput | conversationsCreateOrConnectWithoutSenderInput[]
    upsert?: conversationsUpsertWithWhereUniqueWithoutSenderInput | conversationsUpsertWithWhereUniqueWithoutSenderInput[]
    createMany?: conversationsCreateManySenderInputEnvelope
    set?: conversationsWhereUniqueInput | conversationsWhereUniqueInput[]
    disconnect?: conversationsWhereUniqueInput | conversationsWhereUniqueInput[]
    delete?: conversationsWhereUniqueInput | conversationsWhereUniqueInput[]
    connect?: conversationsWhereUniqueInput | conversationsWhereUniqueInput[]
    update?: conversationsUpdateWithWhereUniqueWithoutSenderInput | conversationsUpdateWithWhereUniqueWithoutSenderInput[]
    updateMany?: conversationsUpdateManyWithWhereWithoutSenderInput | conversationsUpdateManyWithWhereWithoutSenderInput[]
    deleteMany?: conversationsScalarWhereInput | conversationsScalarWhereInput[]
  }

  export type ordersUncheckedUpdateManyWithoutBuyerNestedInput = {
    create?: XOR<ordersCreateWithoutBuyerInput, ordersUncheckedCreateWithoutBuyerInput> | ordersCreateWithoutBuyerInput[] | ordersUncheckedCreateWithoutBuyerInput[]
    connectOrCreate?: ordersCreateOrConnectWithoutBuyerInput | ordersCreateOrConnectWithoutBuyerInput[]
    upsert?: ordersUpsertWithWhereUniqueWithoutBuyerInput | ordersUpsertWithWhereUniqueWithoutBuyerInput[]
    createMany?: ordersCreateManyBuyerInputEnvelope
    set?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    disconnect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    delete?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    connect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    update?: ordersUpdateWithWhereUniqueWithoutBuyerInput | ordersUpdateWithWhereUniqueWithoutBuyerInput[]
    updateMany?: ordersUpdateManyWithWhereWithoutBuyerInput | ordersUpdateManyWithWhereWithoutBuyerInput[]
    deleteMany?: ordersScalarWhereInput | ordersScalarWhereInput[]
  }

  export type subCategoryCreateNestedManyWithoutCategoryInput = {
    create?: XOR<subCategoryCreateWithoutCategoryInput, subCategoryUncheckedCreateWithoutCategoryInput> | subCategoryCreateWithoutCategoryInput[] | subCategoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: subCategoryCreateOrConnectWithoutCategoryInput | subCategoryCreateOrConnectWithoutCategoryInput[]
    createMany?: subCategoryCreateManyCategoryInputEnvelope
    connect?: subCategoryWhereUniqueInput | subCategoryWhereUniqueInput[]
  }

  export type productsCreateNestedManyWithoutCategoryInput = {
    create?: XOR<productsCreateWithoutCategoryInput, productsUncheckedCreateWithoutCategoryInput> | productsCreateWithoutCategoryInput[] | productsUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: productsCreateOrConnectWithoutCategoryInput | productsCreateOrConnectWithoutCategoryInput[]
    createMany?: productsCreateManyCategoryInputEnvelope
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
  }

  export type subCategoryUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<subCategoryCreateWithoutCategoryInput, subCategoryUncheckedCreateWithoutCategoryInput> | subCategoryCreateWithoutCategoryInput[] | subCategoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: subCategoryCreateOrConnectWithoutCategoryInput | subCategoryCreateOrConnectWithoutCategoryInput[]
    createMany?: subCategoryCreateManyCategoryInputEnvelope
    connect?: subCategoryWhereUniqueInput | subCategoryWhereUniqueInput[]
  }

  export type productsUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<productsCreateWithoutCategoryInput, productsUncheckedCreateWithoutCategoryInput> | productsCreateWithoutCategoryInput[] | productsUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: productsCreateOrConnectWithoutCategoryInput | productsCreateOrConnectWithoutCategoryInput[]
    createMany?: productsCreateManyCategoryInputEnvelope
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
  }

  export type subCategoryUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<subCategoryCreateWithoutCategoryInput, subCategoryUncheckedCreateWithoutCategoryInput> | subCategoryCreateWithoutCategoryInput[] | subCategoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: subCategoryCreateOrConnectWithoutCategoryInput | subCategoryCreateOrConnectWithoutCategoryInput[]
    upsert?: subCategoryUpsertWithWhereUniqueWithoutCategoryInput | subCategoryUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: subCategoryCreateManyCategoryInputEnvelope
    set?: subCategoryWhereUniqueInput | subCategoryWhereUniqueInput[]
    disconnect?: subCategoryWhereUniqueInput | subCategoryWhereUniqueInput[]
    delete?: subCategoryWhereUniqueInput | subCategoryWhereUniqueInput[]
    connect?: subCategoryWhereUniqueInput | subCategoryWhereUniqueInput[]
    update?: subCategoryUpdateWithWhereUniqueWithoutCategoryInput | subCategoryUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: subCategoryUpdateManyWithWhereWithoutCategoryInput | subCategoryUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: subCategoryScalarWhereInput | subCategoryScalarWhereInput[]
  }

  export type productsUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<productsCreateWithoutCategoryInput, productsUncheckedCreateWithoutCategoryInput> | productsCreateWithoutCategoryInput[] | productsUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: productsCreateOrConnectWithoutCategoryInput | productsCreateOrConnectWithoutCategoryInput[]
    upsert?: productsUpsertWithWhereUniqueWithoutCategoryInput | productsUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: productsCreateManyCategoryInputEnvelope
    set?: productsWhereUniqueInput | productsWhereUniqueInput[]
    disconnect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    delete?: productsWhereUniqueInput | productsWhereUniqueInput[]
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    update?: productsUpdateWithWhereUniqueWithoutCategoryInput | productsUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: productsUpdateManyWithWhereWithoutCategoryInput | productsUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: productsScalarWhereInput | productsScalarWhereInput[]
  }

  export type subCategoryUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<subCategoryCreateWithoutCategoryInput, subCategoryUncheckedCreateWithoutCategoryInput> | subCategoryCreateWithoutCategoryInput[] | subCategoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: subCategoryCreateOrConnectWithoutCategoryInput | subCategoryCreateOrConnectWithoutCategoryInput[]
    upsert?: subCategoryUpsertWithWhereUniqueWithoutCategoryInput | subCategoryUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: subCategoryCreateManyCategoryInputEnvelope
    set?: subCategoryWhereUniqueInput | subCategoryWhereUniqueInput[]
    disconnect?: subCategoryWhereUniqueInput | subCategoryWhereUniqueInput[]
    delete?: subCategoryWhereUniqueInput | subCategoryWhereUniqueInput[]
    connect?: subCategoryWhereUniqueInput | subCategoryWhereUniqueInput[]
    update?: subCategoryUpdateWithWhereUniqueWithoutCategoryInput | subCategoryUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: subCategoryUpdateManyWithWhereWithoutCategoryInput | subCategoryUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: subCategoryScalarWhereInput | subCategoryScalarWhereInput[]
  }

  export type productsUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<productsCreateWithoutCategoryInput, productsUncheckedCreateWithoutCategoryInput> | productsCreateWithoutCategoryInput[] | productsUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: productsCreateOrConnectWithoutCategoryInput | productsCreateOrConnectWithoutCategoryInput[]
    upsert?: productsUpsertWithWhereUniqueWithoutCategoryInput | productsUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: productsCreateManyCategoryInputEnvelope
    set?: productsWhereUniqueInput | productsWhereUniqueInput[]
    disconnect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    delete?: productsWhereUniqueInput | productsWhereUniqueInput[]
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    update?: productsUpdateWithWhereUniqueWithoutCategoryInput | productsUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: productsUpdateManyWithWhereWithoutCategoryInput | productsUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: productsScalarWhereInput | productsScalarWhereInput[]
  }

  export type categoryCreateNestedOneWithoutSubCategoryInput = {
    create?: XOR<categoryCreateWithoutSubCategoryInput, categoryUncheckedCreateWithoutSubCategoryInput>
    connectOrCreate?: categoryCreateOrConnectWithoutSubCategoryInput
    connect?: categoryWhereUniqueInput
  }

  export type optionsCreateNestedManyWithoutSubCategoryInput = {
    create?: XOR<optionsCreateWithoutSubCategoryInput, optionsUncheckedCreateWithoutSubCategoryInput> | optionsCreateWithoutSubCategoryInput[] | optionsUncheckedCreateWithoutSubCategoryInput[]
    connectOrCreate?: optionsCreateOrConnectWithoutSubCategoryInput | optionsCreateOrConnectWithoutSubCategoryInput[]
    createMany?: optionsCreateManySubCategoryInputEnvelope
    connect?: optionsWhereUniqueInput | optionsWhereUniqueInput[]
  }

  export type productsCreateNestedManyWithoutSubCategoryInput = {
    create?: XOR<productsCreateWithoutSubCategoryInput, productsUncheckedCreateWithoutSubCategoryInput> | productsCreateWithoutSubCategoryInput[] | productsUncheckedCreateWithoutSubCategoryInput[]
    connectOrCreate?: productsCreateOrConnectWithoutSubCategoryInput | productsCreateOrConnectWithoutSubCategoryInput[]
    createMany?: productsCreateManySubCategoryInputEnvelope
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
  }

  export type optionsUncheckedCreateNestedManyWithoutSubCategoryInput = {
    create?: XOR<optionsCreateWithoutSubCategoryInput, optionsUncheckedCreateWithoutSubCategoryInput> | optionsCreateWithoutSubCategoryInput[] | optionsUncheckedCreateWithoutSubCategoryInput[]
    connectOrCreate?: optionsCreateOrConnectWithoutSubCategoryInput | optionsCreateOrConnectWithoutSubCategoryInput[]
    createMany?: optionsCreateManySubCategoryInputEnvelope
    connect?: optionsWhereUniqueInput | optionsWhereUniqueInput[]
  }

  export type productsUncheckedCreateNestedManyWithoutSubCategoryInput = {
    create?: XOR<productsCreateWithoutSubCategoryInput, productsUncheckedCreateWithoutSubCategoryInput> | productsCreateWithoutSubCategoryInput[] | productsUncheckedCreateWithoutSubCategoryInput[]
    connectOrCreate?: productsCreateOrConnectWithoutSubCategoryInput | productsCreateOrConnectWithoutSubCategoryInput[]
    createMany?: productsCreateManySubCategoryInputEnvelope
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
  }

  export type categoryUpdateOneWithoutSubCategoryNestedInput = {
    create?: XOR<categoryCreateWithoutSubCategoryInput, categoryUncheckedCreateWithoutSubCategoryInput>
    connectOrCreate?: categoryCreateOrConnectWithoutSubCategoryInput
    upsert?: categoryUpsertWithoutSubCategoryInput
    disconnect?: categoryWhereInput | boolean
    delete?: categoryWhereInput | boolean
    connect?: categoryWhereUniqueInput
    update?: XOR<XOR<categoryUpdateToOneWithWhereWithoutSubCategoryInput, categoryUpdateWithoutSubCategoryInput>, categoryUncheckedUpdateWithoutSubCategoryInput>
  }

  export type optionsUpdateManyWithoutSubCategoryNestedInput = {
    create?: XOR<optionsCreateWithoutSubCategoryInput, optionsUncheckedCreateWithoutSubCategoryInput> | optionsCreateWithoutSubCategoryInput[] | optionsUncheckedCreateWithoutSubCategoryInput[]
    connectOrCreate?: optionsCreateOrConnectWithoutSubCategoryInput | optionsCreateOrConnectWithoutSubCategoryInput[]
    upsert?: optionsUpsertWithWhereUniqueWithoutSubCategoryInput | optionsUpsertWithWhereUniqueWithoutSubCategoryInput[]
    createMany?: optionsCreateManySubCategoryInputEnvelope
    set?: optionsWhereUniqueInput | optionsWhereUniqueInput[]
    disconnect?: optionsWhereUniqueInput | optionsWhereUniqueInput[]
    delete?: optionsWhereUniqueInput | optionsWhereUniqueInput[]
    connect?: optionsWhereUniqueInput | optionsWhereUniqueInput[]
    update?: optionsUpdateWithWhereUniqueWithoutSubCategoryInput | optionsUpdateWithWhereUniqueWithoutSubCategoryInput[]
    updateMany?: optionsUpdateManyWithWhereWithoutSubCategoryInput | optionsUpdateManyWithWhereWithoutSubCategoryInput[]
    deleteMany?: optionsScalarWhereInput | optionsScalarWhereInput[]
  }

  export type productsUpdateManyWithoutSubCategoryNestedInput = {
    create?: XOR<productsCreateWithoutSubCategoryInput, productsUncheckedCreateWithoutSubCategoryInput> | productsCreateWithoutSubCategoryInput[] | productsUncheckedCreateWithoutSubCategoryInput[]
    connectOrCreate?: productsCreateOrConnectWithoutSubCategoryInput | productsCreateOrConnectWithoutSubCategoryInput[]
    upsert?: productsUpsertWithWhereUniqueWithoutSubCategoryInput | productsUpsertWithWhereUniqueWithoutSubCategoryInput[]
    createMany?: productsCreateManySubCategoryInputEnvelope
    set?: productsWhereUniqueInput | productsWhereUniqueInput[]
    disconnect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    delete?: productsWhereUniqueInput | productsWhereUniqueInput[]
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    update?: productsUpdateWithWhereUniqueWithoutSubCategoryInput | productsUpdateWithWhereUniqueWithoutSubCategoryInput[]
    updateMany?: productsUpdateManyWithWhereWithoutSubCategoryInput | productsUpdateManyWithWhereWithoutSubCategoryInput[]
    deleteMany?: productsScalarWhereInput | productsScalarWhereInput[]
  }

  export type optionsUncheckedUpdateManyWithoutSubCategoryNestedInput = {
    create?: XOR<optionsCreateWithoutSubCategoryInput, optionsUncheckedCreateWithoutSubCategoryInput> | optionsCreateWithoutSubCategoryInput[] | optionsUncheckedCreateWithoutSubCategoryInput[]
    connectOrCreate?: optionsCreateOrConnectWithoutSubCategoryInput | optionsCreateOrConnectWithoutSubCategoryInput[]
    upsert?: optionsUpsertWithWhereUniqueWithoutSubCategoryInput | optionsUpsertWithWhereUniqueWithoutSubCategoryInput[]
    createMany?: optionsCreateManySubCategoryInputEnvelope
    set?: optionsWhereUniqueInput | optionsWhereUniqueInput[]
    disconnect?: optionsWhereUniqueInput | optionsWhereUniqueInput[]
    delete?: optionsWhereUniqueInput | optionsWhereUniqueInput[]
    connect?: optionsWhereUniqueInput | optionsWhereUniqueInput[]
    update?: optionsUpdateWithWhereUniqueWithoutSubCategoryInput | optionsUpdateWithWhereUniqueWithoutSubCategoryInput[]
    updateMany?: optionsUpdateManyWithWhereWithoutSubCategoryInput | optionsUpdateManyWithWhereWithoutSubCategoryInput[]
    deleteMany?: optionsScalarWhereInput | optionsScalarWhereInput[]
  }

  export type productsUncheckedUpdateManyWithoutSubCategoryNestedInput = {
    create?: XOR<productsCreateWithoutSubCategoryInput, productsUncheckedCreateWithoutSubCategoryInput> | productsCreateWithoutSubCategoryInput[] | productsUncheckedCreateWithoutSubCategoryInput[]
    connectOrCreate?: productsCreateOrConnectWithoutSubCategoryInput | productsCreateOrConnectWithoutSubCategoryInput[]
    upsert?: productsUpsertWithWhereUniqueWithoutSubCategoryInput | productsUpsertWithWhereUniqueWithoutSubCategoryInput[]
    createMany?: productsCreateManySubCategoryInputEnvelope
    set?: productsWhereUniqueInput | productsWhereUniqueInput[]
    disconnect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    delete?: productsWhereUniqueInput | productsWhereUniqueInput[]
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    update?: productsUpdateWithWhereUniqueWithoutSubCategoryInput | productsUpdateWithWhereUniqueWithoutSubCategoryInput[]
    updateMany?: productsUpdateManyWithWhereWithoutSubCategoryInput | productsUpdateManyWithWhereWithoutSubCategoryInput[]
    deleteMany?: productsScalarWhereInput | productsScalarWhereInput[]
  }

  export type subCategoryCreateNestedOneWithoutOptionsInput = {
    create?: XOR<subCategoryCreateWithoutOptionsInput, subCategoryUncheckedCreateWithoutOptionsInput>
    connectOrCreate?: subCategoryCreateOrConnectWithoutOptionsInput
    connect?: subCategoryWhereUniqueInput
  }

  export type productsCreateNestedManyWithoutOptionInput = {
    create?: XOR<productsCreateWithoutOptionInput, productsUncheckedCreateWithoutOptionInput> | productsCreateWithoutOptionInput[] | productsUncheckedCreateWithoutOptionInput[]
    connectOrCreate?: productsCreateOrConnectWithoutOptionInput | productsCreateOrConnectWithoutOptionInput[]
    createMany?: productsCreateManyOptionInputEnvelope
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
  }

  export type productsUncheckedCreateNestedManyWithoutOptionInput = {
    create?: XOR<productsCreateWithoutOptionInput, productsUncheckedCreateWithoutOptionInput> | productsCreateWithoutOptionInput[] | productsUncheckedCreateWithoutOptionInput[]
    connectOrCreate?: productsCreateOrConnectWithoutOptionInput | productsCreateOrConnectWithoutOptionInput[]
    createMany?: productsCreateManyOptionInputEnvelope
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
  }

  export type subCategoryUpdateOneWithoutOptionsNestedInput = {
    create?: XOR<subCategoryCreateWithoutOptionsInput, subCategoryUncheckedCreateWithoutOptionsInput>
    connectOrCreate?: subCategoryCreateOrConnectWithoutOptionsInput
    upsert?: subCategoryUpsertWithoutOptionsInput
    disconnect?: subCategoryWhereInput | boolean
    delete?: subCategoryWhereInput | boolean
    connect?: subCategoryWhereUniqueInput
    update?: XOR<XOR<subCategoryUpdateToOneWithWhereWithoutOptionsInput, subCategoryUpdateWithoutOptionsInput>, subCategoryUncheckedUpdateWithoutOptionsInput>
  }

  export type productsUpdateManyWithoutOptionNestedInput = {
    create?: XOR<productsCreateWithoutOptionInput, productsUncheckedCreateWithoutOptionInput> | productsCreateWithoutOptionInput[] | productsUncheckedCreateWithoutOptionInput[]
    connectOrCreate?: productsCreateOrConnectWithoutOptionInput | productsCreateOrConnectWithoutOptionInput[]
    upsert?: productsUpsertWithWhereUniqueWithoutOptionInput | productsUpsertWithWhereUniqueWithoutOptionInput[]
    createMany?: productsCreateManyOptionInputEnvelope
    set?: productsWhereUniqueInput | productsWhereUniqueInput[]
    disconnect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    delete?: productsWhereUniqueInput | productsWhereUniqueInput[]
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    update?: productsUpdateWithWhereUniqueWithoutOptionInput | productsUpdateWithWhereUniqueWithoutOptionInput[]
    updateMany?: productsUpdateManyWithWhereWithoutOptionInput | productsUpdateManyWithWhereWithoutOptionInput[]
    deleteMany?: productsScalarWhereInput | productsScalarWhereInput[]
  }

  export type productsUncheckedUpdateManyWithoutOptionNestedInput = {
    create?: XOR<productsCreateWithoutOptionInput, productsUncheckedCreateWithoutOptionInput> | productsCreateWithoutOptionInput[] | productsUncheckedCreateWithoutOptionInput[]
    connectOrCreate?: productsCreateOrConnectWithoutOptionInput | productsCreateOrConnectWithoutOptionInput[]
    upsert?: productsUpsertWithWhereUniqueWithoutOptionInput | productsUpsertWithWhereUniqueWithoutOptionInput[]
    createMany?: productsCreateManyOptionInputEnvelope
    set?: productsWhereUniqueInput | productsWhereUniqueInput[]
    disconnect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    delete?: productsWhereUniqueInput | productsWhereUniqueInput[]
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    update?: productsUpdateWithWhereUniqueWithoutOptionInput | productsUpdateWithWhereUniqueWithoutOptionInput[]
    updateMany?: productsUpdateManyWithWhereWithoutOptionInput | productsUpdateManyWithWhereWithoutOptionInput[]
    deleteMany?: productsScalarWhereInput | productsScalarWhereInput[]
  }

  export type usersCreateNestedOneWithoutSellerInput = {
    create?: XOR<usersCreateWithoutSellerInput, usersUncheckedCreateWithoutSellerInput>
    connectOrCreate?: usersCreateOrConnectWithoutSellerInput
    connect?: usersWhereUniqueInput
  }

  export type productsCreateNestedManyWithoutSellerInput = {
    create?: XOR<productsCreateWithoutSellerInput, productsUncheckedCreateWithoutSellerInput> | productsCreateWithoutSellerInput[] | productsUncheckedCreateWithoutSellerInput[]
    connectOrCreate?: productsCreateOrConnectWithoutSellerInput | productsCreateOrConnectWithoutSellerInput[]
    createMany?: productsCreateManySellerInputEnvelope
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
  }

  export type reviewsCreateNestedManyWithoutSellerInput = {
    create?: XOR<reviewsCreateWithoutSellerInput, reviewsUncheckedCreateWithoutSellerInput> | reviewsCreateWithoutSellerInput[] | reviewsUncheckedCreateWithoutSellerInput[]
    connectOrCreate?: reviewsCreateOrConnectWithoutSellerInput | reviewsCreateOrConnectWithoutSellerInput[]
    createMany?: reviewsCreateManySellerInputEnvelope
    connect?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
  }

  export type productsUncheckedCreateNestedManyWithoutSellerInput = {
    create?: XOR<productsCreateWithoutSellerInput, productsUncheckedCreateWithoutSellerInput> | productsCreateWithoutSellerInput[] | productsUncheckedCreateWithoutSellerInput[]
    connectOrCreate?: productsCreateOrConnectWithoutSellerInput | productsCreateOrConnectWithoutSellerInput[]
    createMany?: productsCreateManySellerInputEnvelope
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
  }

  export type reviewsUncheckedCreateNestedManyWithoutSellerInput = {
    create?: XOR<reviewsCreateWithoutSellerInput, reviewsUncheckedCreateWithoutSellerInput> | reviewsCreateWithoutSellerInput[] | reviewsUncheckedCreateWithoutSellerInput[]
    connectOrCreate?: reviewsCreateOrConnectWithoutSellerInput | reviewsCreateOrConnectWithoutSellerInput[]
    createMany?: reviewsCreateManySellerInputEnvelope
    connect?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
  }

  export type usersUpdateOneWithoutSellerNestedInput = {
    create?: XOR<usersCreateWithoutSellerInput, usersUncheckedCreateWithoutSellerInput>
    connectOrCreate?: usersCreateOrConnectWithoutSellerInput
    upsert?: usersUpsertWithoutSellerInput
    disconnect?: usersWhereInput | boolean
    delete?: usersWhereInput | boolean
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutSellerInput, usersUpdateWithoutSellerInput>, usersUncheckedUpdateWithoutSellerInput>
  }

  export type productsUpdateManyWithoutSellerNestedInput = {
    create?: XOR<productsCreateWithoutSellerInput, productsUncheckedCreateWithoutSellerInput> | productsCreateWithoutSellerInput[] | productsUncheckedCreateWithoutSellerInput[]
    connectOrCreate?: productsCreateOrConnectWithoutSellerInput | productsCreateOrConnectWithoutSellerInput[]
    upsert?: productsUpsertWithWhereUniqueWithoutSellerInput | productsUpsertWithWhereUniqueWithoutSellerInput[]
    createMany?: productsCreateManySellerInputEnvelope
    set?: productsWhereUniqueInput | productsWhereUniqueInput[]
    disconnect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    delete?: productsWhereUniqueInput | productsWhereUniqueInput[]
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    update?: productsUpdateWithWhereUniqueWithoutSellerInput | productsUpdateWithWhereUniqueWithoutSellerInput[]
    updateMany?: productsUpdateManyWithWhereWithoutSellerInput | productsUpdateManyWithWhereWithoutSellerInput[]
    deleteMany?: productsScalarWhereInput | productsScalarWhereInput[]
  }

  export type reviewsUpdateManyWithoutSellerNestedInput = {
    create?: XOR<reviewsCreateWithoutSellerInput, reviewsUncheckedCreateWithoutSellerInput> | reviewsCreateWithoutSellerInput[] | reviewsUncheckedCreateWithoutSellerInput[]
    connectOrCreate?: reviewsCreateOrConnectWithoutSellerInput | reviewsCreateOrConnectWithoutSellerInput[]
    upsert?: reviewsUpsertWithWhereUniqueWithoutSellerInput | reviewsUpsertWithWhereUniqueWithoutSellerInput[]
    createMany?: reviewsCreateManySellerInputEnvelope
    set?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    disconnect?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    delete?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    connect?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    update?: reviewsUpdateWithWhereUniqueWithoutSellerInput | reviewsUpdateWithWhereUniqueWithoutSellerInput[]
    updateMany?: reviewsUpdateManyWithWhereWithoutSellerInput | reviewsUpdateManyWithWhereWithoutSellerInput[]
    deleteMany?: reviewsScalarWhereInput | reviewsScalarWhereInput[]
  }

  export type productsUncheckedUpdateManyWithoutSellerNestedInput = {
    create?: XOR<productsCreateWithoutSellerInput, productsUncheckedCreateWithoutSellerInput> | productsCreateWithoutSellerInput[] | productsUncheckedCreateWithoutSellerInput[]
    connectOrCreate?: productsCreateOrConnectWithoutSellerInput | productsCreateOrConnectWithoutSellerInput[]
    upsert?: productsUpsertWithWhereUniqueWithoutSellerInput | productsUpsertWithWhereUniqueWithoutSellerInput[]
    createMany?: productsCreateManySellerInputEnvelope
    set?: productsWhereUniqueInput | productsWhereUniqueInput[]
    disconnect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    delete?: productsWhereUniqueInput | productsWhereUniqueInput[]
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    update?: productsUpdateWithWhereUniqueWithoutSellerInput | productsUpdateWithWhereUniqueWithoutSellerInput[]
    updateMany?: productsUpdateManyWithWhereWithoutSellerInput | productsUpdateManyWithWhereWithoutSellerInput[]
    deleteMany?: productsScalarWhereInput | productsScalarWhereInput[]
  }

  export type reviewsUncheckedUpdateManyWithoutSellerNestedInput = {
    create?: XOR<reviewsCreateWithoutSellerInput, reviewsUncheckedCreateWithoutSellerInput> | reviewsCreateWithoutSellerInput[] | reviewsUncheckedCreateWithoutSellerInput[]
    connectOrCreate?: reviewsCreateOrConnectWithoutSellerInput | reviewsCreateOrConnectWithoutSellerInput[]
    upsert?: reviewsUpsertWithWhereUniqueWithoutSellerInput | reviewsUpsertWithWhereUniqueWithoutSellerInput[]
    createMany?: reviewsCreateManySellerInputEnvelope
    set?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    disconnect?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    delete?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    connect?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    update?: reviewsUpdateWithWhereUniqueWithoutSellerInput | reviewsUpdateWithWhereUniqueWithoutSellerInput[]
    updateMany?: reviewsUpdateManyWithWhereWithoutSellerInput | reviewsUpdateManyWithWhereWithoutSellerInput[]
    deleteMany?: reviewsScalarWhereInput | reviewsScalarWhereInput[]
  }

  export type usersCreateNestedOneWithoutBrandInput = {
    create?: XOR<usersCreateWithoutBrandInput, usersUncheckedCreateWithoutBrandInput>
    connectOrCreate?: usersCreateOrConnectWithoutBrandInput
    connect?: usersWhereUniqueInput
  }

  export type productsCreateNestedManyWithoutBrandInput = {
    create?: XOR<productsCreateWithoutBrandInput, productsUncheckedCreateWithoutBrandInput> | productsCreateWithoutBrandInput[] | productsUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: productsCreateOrConnectWithoutBrandInput | productsCreateOrConnectWithoutBrandInput[]
    createMany?: productsCreateManyBrandInputEnvelope
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
  }

  export type reviewsCreateNestedManyWithoutBrandInput = {
    create?: XOR<reviewsCreateWithoutBrandInput, reviewsUncheckedCreateWithoutBrandInput> | reviewsCreateWithoutBrandInput[] | reviewsUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: reviewsCreateOrConnectWithoutBrandInput | reviewsCreateOrConnectWithoutBrandInput[]
    createMany?: reviewsCreateManyBrandInputEnvelope
    connect?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
  }

  export type productsUncheckedCreateNestedManyWithoutBrandInput = {
    create?: XOR<productsCreateWithoutBrandInput, productsUncheckedCreateWithoutBrandInput> | productsCreateWithoutBrandInput[] | productsUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: productsCreateOrConnectWithoutBrandInput | productsCreateOrConnectWithoutBrandInput[]
    createMany?: productsCreateManyBrandInputEnvelope
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
  }

  export type reviewsUncheckedCreateNestedManyWithoutBrandInput = {
    create?: XOR<reviewsCreateWithoutBrandInput, reviewsUncheckedCreateWithoutBrandInput> | reviewsCreateWithoutBrandInput[] | reviewsUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: reviewsCreateOrConnectWithoutBrandInput | reviewsCreateOrConnectWithoutBrandInput[]
    createMany?: reviewsCreateManyBrandInputEnvelope
    connect?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
  }

  export type usersUpdateOneWithoutBrandNestedInput = {
    create?: XOR<usersCreateWithoutBrandInput, usersUncheckedCreateWithoutBrandInput>
    connectOrCreate?: usersCreateOrConnectWithoutBrandInput
    upsert?: usersUpsertWithoutBrandInput
    disconnect?: usersWhereInput | boolean
    delete?: usersWhereInput | boolean
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutBrandInput, usersUpdateWithoutBrandInput>, usersUncheckedUpdateWithoutBrandInput>
  }

  export type productsUpdateManyWithoutBrandNestedInput = {
    create?: XOR<productsCreateWithoutBrandInput, productsUncheckedCreateWithoutBrandInput> | productsCreateWithoutBrandInput[] | productsUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: productsCreateOrConnectWithoutBrandInput | productsCreateOrConnectWithoutBrandInput[]
    upsert?: productsUpsertWithWhereUniqueWithoutBrandInput | productsUpsertWithWhereUniqueWithoutBrandInput[]
    createMany?: productsCreateManyBrandInputEnvelope
    set?: productsWhereUniqueInput | productsWhereUniqueInput[]
    disconnect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    delete?: productsWhereUniqueInput | productsWhereUniqueInput[]
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    update?: productsUpdateWithWhereUniqueWithoutBrandInput | productsUpdateWithWhereUniqueWithoutBrandInput[]
    updateMany?: productsUpdateManyWithWhereWithoutBrandInput | productsUpdateManyWithWhereWithoutBrandInput[]
    deleteMany?: productsScalarWhereInput | productsScalarWhereInput[]
  }

  export type reviewsUpdateManyWithoutBrandNestedInput = {
    create?: XOR<reviewsCreateWithoutBrandInput, reviewsUncheckedCreateWithoutBrandInput> | reviewsCreateWithoutBrandInput[] | reviewsUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: reviewsCreateOrConnectWithoutBrandInput | reviewsCreateOrConnectWithoutBrandInput[]
    upsert?: reviewsUpsertWithWhereUniqueWithoutBrandInput | reviewsUpsertWithWhereUniqueWithoutBrandInput[]
    createMany?: reviewsCreateManyBrandInputEnvelope
    set?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    disconnect?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    delete?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    connect?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    update?: reviewsUpdateWithWhereUniqueWithoutBrandInput | reviewsUpdateWithWhereUniqueWithoutBrandInput[]
    updateMany?: reviewsUpdateManyWithWhereWithoutBrandInput | reviewsUpdateManyWithWhereWithoutBrandInput[]
    deleteMany?: reviewsScalarWhereInput | reviewsScalarWhereInput[]
  }

  export type productsUncheckedUpdateManyWithoutBrandNestedInput = {
    create?: XOR<productsCreateWithoutBrandInput, productsUncheckedCreateWithoutBrandInput> | productsCreateWithoutBrandInput[] | productsUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: productsCreateOrConnectWithoutBrandInput | productsCreateOrConnectWithoutBrandInput[]
    upsert?: productsUpsertWithWhereUniqueWithoutBrandInput | productsUpsertWithWhereUniqueWithoutBrandInput[]
    createMany?: productsCreateManyBrandInputEnvelope
    set?: productsWhereUniqueInput | productsWhereUniqueInput[]
    disconnect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    delete?: productsWhereUniqueInput | productsWhereUniqueInput[]
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    update?: productsUpdateWithWhereUniqueWithoutBrandInput | productsUpdateWithWhereUniqueWithoutBrandInput[]
    updateMany?: productsUpdateManyWithWhereWithoutBrandInput | productsUpdateManyWithWhereWithoutBrandInput[]
    deleteMany?: productsScalarWhereInput | productsScalarWhereInput[]
  }

  export type reviewsUncheckedUpdateManyWithoutBrandNestedInput = {
    create?: XOR<reviewsCreateWithoutBrandInput, reviewsUncheckedCreateWithoutBrandInput> | reviewsCreateWithoutBrandInput[] | reviewsUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: reviewsCreateOrConnectWithoutBrandInput | reviewsCreateOrConnectWithoutBrandInput[]
    upsert?: reviewsUpsertWithWhereUniqueWithoutBrandInput | reviewsUpsertWithWhereUniqueWithoutBrandInput[]
    createMany?: reviewsCreateManyBrandInputEnvelope
    set?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    disconnect?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    delete?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    connect?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    update?: reviewsUpdateWithWhereUniqueWithoutBrandInput | reviewsUpdateWithWhereUniqueWithoutBrandInput[]
    updateMany?: reviewsUpdateManyWithWhereWithoutBrandInput | reviewsUpdateManyWithWhereWithoutBrandInput[]
    deleteMany?: reviewsScalarWhereInput | reviewsScalarWhereInput[]
  }

  export type colorsCreateNestedOneWithoutProductsInput = {
    create?: XOR<colorsCreateWithoutProductsInput, colorsUncheckedCreateWithoutProductsInput>
    connectOrCreate?: colorsCreateOrConnectWithoutProductsInput
    connect?: colorsWhereUniqueInput
  }

  export type sizeCreateNestedOneWithoutProductsInput = {
    create?: XOR<sizeCreateWithoutProductsInput, sizeUncheckedCreateWithoutProductsInput>
    connectOrCreate?: sizeCreateOrConnectWithoutProductsInput
    connect?: sizeWhereUniqueInput
  }

  export type specificationsCreateNestedOneWithoutProductsInput = {
    create?: XOR<specificationsCreateWithoutProductsInput, specificationsUncheckedCreateWithoutProductsInput>
    connectOrCreate?: specificationsCreateOrConnectWithoutProductsInput
    connect?: specificationsWhereUniqueInput
  }

  export type commentsCreateNestedManyWithoutProductInput = {
    create?: XOR<commentsCreateWithoutProductInput, commentsUncheckedCreateWithoutProductInput> | commentsCreateWithoutProductInput[] | commentsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: commentsCreateOrConnectWithoutProductInput | commentsCreateOrConnectWithoutProductInput[]
    createMany?: commentsCreateManyProductInputEnvelope
    connect?: commentsWhereUniqueInput | commentsWhereUniqueInput[]
  }

  export type reviewsCreateNestedManyWithoutProductInput = {
    create?: XOR<reviewsCreateWithoutProductInput, reviewsUncheckedCreateWithoutProductInput> | reviewsCreateWithoutProductInput[] | reviewsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: reviewsCreateOrConnectWithoutProductInput | reviewsCreateOrConnectWithoutProductInput[]
    createMany?: reviewsCreateManyProductInputEnvelope
    connect?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
  }

  export type flashSellProductCreateNestedManyWithoutProductInput = {
    create?: XOR<flashSellProductCreateWithoutProductInput, flashSellProductUncheckedCreateWithoutProductInput> | flashSellProductCreateWithoutProductInput[] | flashSellProductUncheckedCreateWithoutProductInput[]
    connectOrCreate?: flashSellProductCreateOrConnectWithoutProductInput | flashSellProductCreateOrConnectWithoutProductInput[]
    createMany?: flashSellProductCreateManyProductInputEnvelope
    connect?: flashSellProductWhereUniqueInput | flashSellProductWhereUniqueInput[]
  }

  export type sellerCreateNestedOneWithoutProductsInput = {
    create?: XOR<sellerCreateWithoutProductsInput, sellerUncheckedCreateWithoutProductsInput>
    connectOrCreate?: sellerCreateOrConnectWithoutProductsInput
    connect?: sellerWhereUniqueInput
  }

  export type brandsCreateNestedOneWithoutProductsInput = {
    create?: XOR<brandsCreateWithoutProductsInput, brandsUncheckedCreateWithoutProductsInput>
    connectOrCreate?: brandsCreateOrConnectWithoutProductsInput
    connect?: brandsWhereUniqueInput
  }

  export type categoryCreateNestedOneWithoutProductsInput = {
    create?: XOR<categoryCreateWithoutProductsInput, categoryUncheckedCreateWithoutProductsInput>
    connectOrCreate?: categoryCreateOrConnectWithoutProductsInput
    connect?: categoryWhereUniqueInput
  }

  export type subCategoryCreateNestedOneWithoutProductsInput = {
    create?: XOR<subCategoryCreateWithoutProductsInput, subCategoryUncheckedCreateWithoutProductsInput>
    connectOrCreate?: subCategoryCreateOrConnectWithoutProductsInput
    connect?: subCategoryWhereUniqueInput
  }

  export type optionsCreateNestedOneWithoutProductsInput = {
    create?: XOR<optionsCreateWithoutProductsInput, optionsUncheckedCreateWithoutProductsInput>
    connectOrCreate?: optionsCreateOrConnectWithoutProductsInput
    connect?: optionsWhereUniqueInput
  }

  export type usersCreateNestedOneWithoutProductsInput = {
    create?: XOR<usersCreateWithoutProductsInput, usersUncheckedCreateWithoutProductsInput>
    connectOrCreate?: usersCreateOrConnectWithoutProductsInput
    connect?: usersWhereUniqueInput
  }

  export type bannerCreateNestedManyWithoutProductInput = {
    create?: XOR<bannerCreateWithoutProductInput, bannerUncheckedCreateWithoutProductInput> | bannerCreateWithoutProductInput[] | bannerUncheckedCreateWithoutProductInput[]
    connectOrCreate?: bannerCreateOrConnectWithoutProductInput | bannerCreateOrConnectWithoutProductInput[]
    createMany?: bannerCreateManyProductInputEnvelope
    connect?: bannerWhereUniqueInput | bannerWhereUniqueInput[]
  }

  export type addsCreateNestedManyWithoutProductInput = {
    create?: XOR<addsCreateWithoutProductInput, addsUncheckedCreateWithoutProductInput> | addsCreateWithoutProductInput[] | addsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: addsCreateOrConnectWithoutProductInput | addsCreateOrConnectWithoutProductInput[]
    createMany?: addsCreateManyProductInputEnvelope
    connect?: addsWhereUniqueInput | addsWhereUniqueInput[]
  }

  export type messagesCreateNestedManyWithoutProductInput = {
    create?: XOR<messagesCreateWithoutProductInput, messagesUncheckedCreateWithoutProductInput> | messagesCreateWithoutProductInput[] | messagesUncheckedCreateWithoutProductInput[]
    connectOrCreate?: messagesCreateOrConnectWithoutProductInput | messagesCreateOrConnectWithoutProductInput[]
    createMany?: messagesCreateManyProductInputEnvelope
    connect?: messagesWhereUniqueInput | messagesWhereUniqueInput[]
  }

  export type ordersCreateNestedManyWithoutProductInput = {
    create?: XOR<ordersCreateWithoutProductInput, ordersUncheckedCreateWithoutProductInput> | ordersCreateWithoutProductInput[] | ordersUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ordersCreateOrConnectWithoutProductInput | ordersCreateOrConnectWithoutProductInput[]
    createMany?: ordersCreateManyProductInputEnvelope
    connect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
  }

  export type commentsUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<commentsCreateWithoutProductInput, commentsUncheckedCreateWithoutProductInput> | commentsCreateWithoutProductInput[] | commentsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: commentsCreateOrConnectWithoutProductInput | commentsCreateOrConnectWithoutProductInput[]
    createMany?: commentsCreateManyProductInputEnvelope
    connect?: commentsWhereUniqueInput | commentsWhereUniqueInput[]
  }

  export type reviewsUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<reviewsCreateWithoutProductInput, reviewsUncheckedCreateWithoutProductInput> | reviewsCreateWithoutProductInput[] | reviewsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: reviewsCreateOrConnectWithoutProductInput | reviewsCreateOrConnectWithoutProductInput[]
    createMany?: reviewsCreateManyProductInputEnvelope
    connect?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
  }

  export type flashSellProductUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<flashSellProductCreateWithoutProductInput, flashSellProductUncheckedCreateWithoutProductInput> | flashSellProductCreateWithoutProductInput[] | flashSellProductUncheckedCreateWithoutProductInput[]
    connectOrCreate?: flashSellProductCreateOrConnectWithoutProductInput | flashSellProductCreateOrConnectWithoutProductInput[]
    createMany?: flashSellProductCreateManyProductInputEnvelope
    connect?: flashSellProductWhereUniqueInput | flashSellProductWhereUniqueInput[]
  }

  export type bannerUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<bannerCreateWithoutProductInput, bannerUncheckedCreateWithoutProductInput> | bannerCreateWithoutProductInput[] | bannerUncheckedCreateWithoutProductInput[]
    connectOrCreate?: bannerCreateOrConnectWithoutProductInput | bannerCreateOrConnectWithoutProductInput[]
    createMany?: bannerCreateManyProductInputEnvelope
    connect?: bannerWhereUniqueInput | bannerWhereUniqueInput[]
  }

  export type addsUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<addsCreateWithoutProductInput, addsUncheckedCreateWithoutProductInput> | addsCreateWithoutProductInput[] | addsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: addsCreateOrConnectWithoutProductInput | addsCreateOrConnectWithoutProductInput[]
    createMany?: addsCreateManyProductInputEnvelope
    connect?: addsWhereUniqueInput | addsWhereUniqueInput[]
  }

  export type messagesUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<messagesCreateWithoutProductInput, messagesUncheckedCreateWithoutProductInput> | messagesCreateWithoutProductInput[] | messagesUncheckedCreateWithoutProductInput[]
    connectOrCreate?: messagesCreateOrConnectWithoutProductInput | messagesCreateOrConnectWithoutProductInput[]
    createMany?: messagesCreateManyProductInputEnvelope
    connect?: messagesWhereUniqueInput | messagesWhereUniqueInput[]
  }

  export type ordersUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<ordersCreateWithoutProductInput, ordersUncheckedCreateWithoutProductInput> | ordersCreateWithoutProductInput[] | ordersUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ordersCreateOrConnectWithoutProductInput | ordersCreateOrConnectWithoutProductInput[]
    createMany?: ordersCreateManyProductInputEnvelope
    connect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
  }

  export type colorsUpdateOneWithoutProductsNestedInput = {
    create?: XOR<colorsCreateWithoutProductsInput, colorsUncheckedCreateWithoutProductsInput>
    connectOrCreate?: colorsCreateOrConnectWithoutProductsInput
    upsert?: colorsUpsertWithoutProductsInput
    disconnect?: colorsWhereInput | boolean
    delete?: colorsWhereInput | boolean
    connect?: colorsWhereUniqueInput
    update?: XOR<XOR<colorsUpdateToOneWithWhereWithoutProductsInput, colorsUpdateWithoutProductsInput>, colorsUncheckedUpdateWithoutProductsInput>
  }

  export type sizeUpdateOneWithoutProductsNestedInput = {
    create?: XOR<sizeCreateWithoutProductsInput, sizeUncheckedCreateWithoutProductsInput>
    connectOrCreate?: sizeCreateOrConnectWithoutProductsInput
    upsert?: sizeUpsertWithoutProductsInput
    disconnect?: sizeWhereInput | boolean
    delete?: sizeWhereInput | boolean
    connect?: sizeWhereUniqueInput
    update?: XOR<XOR<sizeUpdateToOneWithWhereWithoutProductsInput, sizeUpdateWithoutProductsInput>, sizeUncheckedUpdateWithoutProductsInput>
  }

  export type specificationsUpdateOneWithoutProductsNestedInput = {
    create?: XOR<specificationsCreateWithoutProductsInput, specificationsUncheckedCreateWithoutProductsInput>
    connectOrCreate?: specificationsCreateOrConnectWithoutProductsInput
    upsert?: specificationsUpsertWithoutProductsInput
    disconnect?: specificationsWhereInput | boolean
    delete?: specificationsWhereInput | boolean
    connect?: specificationsWhereUniqueInput
    update?: XOR<XOR<specificationsUpdateToOneWithWhereWithoutProductsInput, specificationsUpdateWithoutProductsInput>, specificationsUncheckedUpdateWithoutProductsInput>
  }

  export type commentsUpdateManyWithoutProductNestedInput = {
    create?: XOR<commentsCreateWithoutProductInput, commentsUncheckedCreateWithoutProductInput> | commentsCreateWithoutProductInput[] | commentsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: commentsCreateOrConnectWithoutProductInput | commentsCreateOrConnectWithoutProductInput[]
    upsert?: commentsUpsertWithWhereUniqueWithoutProductInput | commentsUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: commentsCreateManyProductInputEnvelope
    set?: commentsWhereUniqueInput | commentsWhereUniqueInput[]
    disconnect?: commentsWhereUniqueInput | commentsWhereUniqueInput[]
    delete?: commentsWhereUniqueInput | commentsWhereUniqueInput[]
    connect?: commentsWhereUniqueInput | commentsWhereUniqueInput[]
    update?: commentsUpdateWithWhereUniqueWithoutProductInput | commentsUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: commentsUpdateManyWithWhereWithoutProductInput | commentsUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: commentsScalarWhereInput | commentsScalarWhereInput[]
  }

  export type reviewsUpdateManyWithoutProductNestedInput = {
    create?: XOR<reviewsCreateWithoutProductInput, reviewsUncheckedCreateWithoutProductInput> | reviewsCreateWithoutProductInput[] | reviewsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: reviewsCreateOrConnectWithoutProductInput | reviewsCreateOrConnectWithoutProductInput[]
    upsert?: reviewsUpsertWithWhereUniqueWithoutProductInput | reviewsUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: reviewsCreateManyProductInputEnvelope
    set?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    disconnect?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    delete?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    connect?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    update?: reviewsUpdateWithWhereUniqueWithoutProductInput | reviewsUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: reviewsUpdateManyWithWhereWithoutProductInput | reviewsUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: reviewsScalarWhereInput | reviewsScalarWhereInput[]
  }

  export type flashSellProductUpdateManyWithoutProductNestedInput = {
    create?: XOR<flashSellProductCreateWithoutProductInput, flashSellProductUncheckedCreateWithoutProductInput> | flashSellProductCreateWithoutProductInput[] | flashSellProductUncheckedCreateWithoutProductInput[]
    connectOrCreate?: flashSellProductCreateOrConnectWithoutProductInput | flashSellProductCreateOrConnectWithoutProductInput[]
    upsert?: flashSellProductUpsertWithWhereUniqueWithoutProductInput | flashSellProductUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: flashSellProductCreateManyProductInputEnvelope
    set?: flashSellProductWhereUniqueInput | flashSellProductWhereUniqueInput[]
    disconnect?: flashSellProductWhereUniqueInput | flashSellProductWhereUniqueInput[]
    delete?: flashSellProductWhereUniqueInput | flashSellProductWhereUniqueInput[]
    connect?: flashSellProductWhereUniqueInput | flashSellProductWhereUniqueInput[]
    update?: flashSellProductUpdateWithWhereUniqueWithoutProductInput | flashSellProductUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: flashSellProductUpdateManyWithWhereWithoutProductInput | flashSellProductUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: flashSellProductScalarWhereInput | flashSellProductScalarWhereInput[]
  }

  export type sellerUpdateOneWithoutProductsNestedInput = {
    create?: XOR<sellerCreateWithoutProductsInput, sellerUncheckedCreateWithoutProductsInput>
    connectOrCreate?: sellerCreateOrConnectWithoutProductsInput
    upsert?: sellerUpsertWithoutProductsInput
    disconnect?: sellerWhereInput | boolean
    delete?: sellerWhereInput | boolean
    connect?: sellerWhereUniqueInput
    update?: XOR<XOR<sellerUpdateToOneWithWhereWithoutProductsInput, sellerUpdateWithoutProductsInput>, sellerUncheckedUpdateWithoutProductsInput>
  }

  export type brandsUpdateOneWithoutProductsNestedInput = {
    create?: XOR<brandsCreateWithoutProductsInput, brandsUncheckedCreateWithoutProductsInput>
    connectOrCreate?: brandsCreateOrConnectWithoutProductsInput
    upsert?: brandsUpsertWithoutProductsInput
    disconnect?: brandsWhereInput | boolean
    delete?: brandsWhereInput | boolean
    connect?: brandsWhereUniqueInput
    update?: XOR<XOR<brandsUpdateToOneWithWhereWithoutProductsInput, brandsUpdateWithoutProductsInput>, brandsUncheckedUpdateWithoutProductsInput>
  }

  export type categoryUpdateOneWithoutProductsNestedInput = {
    create?: XOR<categoryCreateWithoutProductsInput, categoryUncheckedCreateWithoutProductsInput>
    connectOrCreate?: categoryCreateOrConnectWithoutProductsInput
    upsert?: categoryUpsertWithoutProductsInput
    disconnect?: categoryWhereInput | boolean
    delete?: categoryWhereInput | boolean
    connect?: categoryWhereUniqueInput
    update?: XOR<XOR<categoryUpdateToOneWithWhereWithoutProductsInput, categoryUpdateWithoutProductsInput>, categoryUncheckedUpdateWithoutProductsInput>
  }

  export type subCategoryUpdateOneWithoutProductsNestedInput = {
    create?: XOR<subCategoryCreateWithoutProductsInput, subCategoryUncheckedCreateWithoutProductsInput>
    connectOrCreate?: subCategoryCreateOrConnectWithoutProductsInput
    upsert?: subCategoryUpsertWithoutProductsInput
    disconnect?: subCategoryWhereInput | boolean
    delete?: subCategoryWhereInput | boolean
    connect?: subCategoryWhereUniqueInput
    update?: XOR<XOR<subCategoryUpdateToOneWithWhereWithoutProductsInput, subCategoryUpdateWithoutProductsInput>, subCategoryUncheckedUpdateWithoutProductsInput>
  }

  export type optionsUpdateOneWithoutProductsNestedInput = {
    create?: XOR<optionsCreateWithoutProductsInput, optionsUncheckedCreateWithoutProductsInput>
    connectOrCreate?: optionsCreateOrConnectWithoutProductsInput
    upsert?: optionsUpsertWithoutProductsInput
    disconnect?: optionsWhereInput | boolean
    delete?: optionsWhereInput | boolean
    connect?: optionsWhereUniqueInput
    update?: XOR<XOR<optionsUpdateToOneWithWhereWithoutProductsInput, optionsUpdateWithoutProductsInput>, optionsUncheckedUpdateWithoutProductsInput>
  }

  export type usersUpdateOneWithoutProductsNestedInput = {
    create?: XOR<usersCreateWithoutProductsInput, usersUncheckedCreateWithoutProductsInput>
    connectOrCreate?: usersCreateOrConnectWithoutProductsInput
    upsert?: usersUpsertWithoutProductsInput
    disconnect?: usersWhereInput | boolean
    delete?: usersWhereInput | boolean
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutProductsInput, usersUpdateWithoutProductsInput>, usersUncheckedUpdateWithoutProductsInput>
  }

  export type bannerUpdateManyWithoutProductNestedInput = {
    create?: XOR<bannerCreateWithoutProductInput, bannerUncheckedCreateWithoutProductInput> | bannerCreateWithoutProductInput[] | bannerUncheckedCreateWithoutProductInput[]
    connectOrCreate?: bannerCreateOrConnectWithoutProductInput | bannerCreateOrConnectWithoutProductInput[]
    upsert?: bannerUpsertWithWhereUniqueWithoutProductInput | bannerUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: bannerCreateManyProductInputEnvelope
    set?: bannerWhereUniqueInput | bannerWhereUniqueInput[]
    disconnect?: bannerWhereUniqueInput | bannerWhereUniqueInput[]
    delete?: bannerWhereUniqueInput | bannerWhereUniqueInput[]
    connect?: bannerWhereUniqueInput | bannerWhereUniqueInput[]
    update?: bannerUpdateWithWhereUniqueWithoutProductInput | bannerUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: bannerUpdateManyWithWhereWithoutProductInput | bannerUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: bannerScalarWhereInput | bannerScalarWhereInput[]
  }

  export type addsUpdateManyWithoutProductNestedInput = {
    create?: XOR<addsCreateWithoutProductInput, addsUncheckedCreateWithoutProductInput> | addsCreateWithoutProductInput[] | addsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: addsCreateOrConnectWithoutProductInput | addsCreateOrConnectWithoutProductInput[]
    upsert?: addsUpsertWithWhereUniqueWithoutProductInput | addsUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: addsCreateManyProductInputEnvelope
    set?: addsWhereUniqueInput | addsWhereUniqueInput[]
    disconnect?: addsWhereUniqueInput | addsWhereUniqueInput[]
    delete?: addsWhereUniqueInput | addsWhereUniqueInput[]
    connect?: addsWhereUniqueInput | addsWhereUniqueInput[]
    update?: addsUpdateWithWhereUniqueWithoutProductInput | addsUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: addsUpdateManyWithWhereWithoutProductInput | addsUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: addsScalarWhereInput | addsScalarWhereInput[]
  }

  export type messagesUpdateManyWithoutProductNestedInput = {
    create?: XOR<messagesCreateWithoutProductInput, messagesUncheckedCreateWithoutProductInput> | messagesCreateWithoutProductInput[] | messagesUncheckedCreateWithoutProductInput[]
    connectOrCreate?: messagesCreateOrConnectWithoutProductInput | messagesCreateOrConnectWithoutProductInput[]
    upsert?: messagesUpsertWithWhereUniqueWithoutProductInput | messagesUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: messagesCreateManyProductInputEnvelope
    set?: messagesWhereUniqueInput | messagesWhereUniqueInput[]
    disconnect?: messagesWhereUniqueInput | messagesWhereUniqueInput[]
    delete?: messagesWhereUniqueInput | messagesWhereUniqueInput[]
    connect?: messagesWhereUniqueInput | messagesWhereUniqueInput[]
    update?: messagesUpdateWithWhereUniqueWithoutProductInput | messagesUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: messagesUpdateManyWithWhereWithoutProductInput | messagesUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: messagesScalarWhereInput | messagesScalarWhereInput[]
  }

  export type ordersUpdateManyWithoutProductNestedInput = {
    create?: XOR<ordersCreateWithoutProductInput, ordersUncheckedCreateWithoutProductInput> | ordersCreateWithoutProductInput[] | ordersUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ordersCreateOrConnectWithoutProductInput | ordersCreateOrConnectWithoutProductInput[]
    upsert?: ordersUpsertWithWhereUniqueWithoutProductInput | ordersUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: ordersCreateManyProductInputEnvelope
    set?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    disconnect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    delete?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    connect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    update?: ordersUpdateWithWhereUniqueWithoutProductInput | ordersUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: ordersUpdateManyWithWhereWithoutProductInput | ordersUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: ordersScalarWhereInput | ordersScalarWhereInput[]
  }

  export type commentsUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<commentsCreateWithoutProductInput, commentsUncheckedCreateWithoutProductInput> | commentsCreateWithoutProductInput[] | commentsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: commentsCreateOrConnectWithoutProductInput | commentsCreateOrConnectWithoutProductInput[]
    upsert?: commentsUpsertWithWhereUniqueWithoutProductInput | commentsUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: commentsCreateManyProductInputEnvelope
    set?: commentsWhereUniqueInput | commentsWhereUniqueInput[]
    disconnect?: commentsWhereUniqueInput | commentsWhereUniqueInput[]
    delete?: commentsWhereUniqueInput | commentsWhereUniqueInput[]
    connect?: commentsWhereUniqueInput | commentsWhereUniqueInput[]
    update?: commentsUpdateWithWhereUniqueWithoutProductInput | commentsUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: commentsUpdateManyWithWhereWithoutProductInput | commentsUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: commentsScalarWhereInput | commentsScalarWhereInput[]
  }

  export type reviewsUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<reviewsCreateWithoutProductInput, reviewsUncheckedCreateWithoutProductInput> | reviewsCreateWithoutProductInput[] | reviewsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: reviewsCreateOrConnectWithoutProductInput | reviewsCreateOrConnectWithoutProductInput[]
    upsert?: reviewsUpsertWithWhereUniqueWithoutProductInput | reviewsUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: reviewsCreateManyProductInputEnvelope
    set?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    disconnect?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    delete?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    connect?: reviewsWhereUniqueInput | reviewsWhereUniqueInput[]
    update?: reviewsUpdateWithWhereUniqueWithoutProductInput | reviewsUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: reviewsUpdateManyWithWhereWithoutProductInput | reviewsUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: reviewsScalarWhereInput | reviewsScalarWhereInput[]
  }

  export type flashSellProductUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<flashSellProductCreateWithoutProductInput, flashSellProductUncheckedCreateWithoutProductInput> | flashSellProductCreateWithoutProductInput[] | flashSellProductUncheckedCreateWithoutProductInput[]
    connectOrCreate?: flashSellProductCreateOrConnectWithoutProductInput | flashSellProductCreateOrConnectWithoutProductInput[]
    upsert?: flashSellProductUpsertWithWhereUniqueWithoutProductInput | flashSellProductUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: flashSellProductCreateManyProductInputEnvelope
    set?: flashSellProductWhereUniqueInput | flashSellProductWhereUniqueInput[]
    disconnect?: flashSellProductWhereUniqueInput | flashSellProductWhereUniqueInput[]
    delete?: flashSellProductWhereUniqueInput | flashSellProductWhereUniqueInput[]
    connect?: flashSellProductWhereUniqueInput | flashSellProductWhereUniqueInput[]
    update?: flashSellProductUpdateWithWhereUniqueWithoutProductInput | flashSellProductUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: flashSellProductUpdateManyWithWhereWithoutProductInput | flashSellProductUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: flashSellProductScalarWhereInput | flashSellProductScalarWhereInput[]
  }

  export type bannerUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<bannerCreateWithoutProductInput, bannerUncheckedCreateWithoutProductInput> | bannerCreateWithoutProductInput[] | bannerUncheckedCreateWithoutProductInput[]
    connectOrCreate?: bannerCreateOrConnectWithoutProductInput | bannerCreateOrConnectWithoutProductInput[]
    upsert?: bannerUpsertWithWhereUniqueWithoutProductInput | bannerUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: bannerCreateManyProductInputEnvelope
    set?: bannerWhereUniqueInput | bannerWhereUniqueInput[]
    disconnect?: bannerWhereUniqueInput | bannerWhereUniqueInput[]
    delete?: bannerWhereUniqueInput | bannerWhereUniqueInput[]
    connect?: bannerWhereUniqueInput | bannerWhereUniqueInput[]
    update?: bannerUpdateWithWhereUniqueWithoutProductInput | bannerUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: bannerUpdateManyWithWhereWithoutProductInput | bannerUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: bannerScalarWhereInput | bannerScalarWhereInput[]
  }

  export type addsUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<addsCreateWithoutProductInput, addsUncheckedCreateWithoutProductInput> | addsCreateWithoutProductInput[] | addsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: addsCreateOrConnectWithoutProductInput | addsCreateOrConnectWithoutProductInput[]
    upsert?: addsUpsertWithWhereUniqueWithoutProductInput | addsUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: addsCreateManyProductInputEnvelope
    set?: addsWhereUniqueInput | addsWhereUniqueInput[]
    disconnect?: addsWhereUniqueInput | addsWhereUniqueInput[]
    delete?: addsWhereUniqueInput | addsWhereUniqueInput[]
    connect?: addsWhereUniqueInput | addsWhereUniqueInput[]
    update?: addsUpdateWithWhereUniqueWithoutProductInput | addsUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: addsUpdateManyWithWhereWithoutProductInput | addsUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: addsScalarWhereInput | addsScalarWhereInput[]
  }

  export type messagesUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<messagesCreateWithoutProductInput, messagesUncheckedCreateWithoutProductInput> | messagesCreateWithoutProductInput[] | messagesUncheckedCreateWithoutProductInput[]
    connectOrCreate?: messagesCreateOrConnectWithoutProductInput | messagesCreateOrConnectWithoutProductInput[]
    upsert?: messagesUpsertWithWhereUniqueWithoutProductInput | messagesUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: messagesCreateManyProductInputEnvelope
    set?: messagesWhereUniqueInput | messagesWhereUniqueInput[]
    disconnect?: messagesWhereUniqueInput | messagesWhereUniqueInput[]
    delete?: messagesWhereUniqueInput | messagesWhereUniqueInput[]
    connect?: messagesWhereUniqueInput | messagesWhereUniqueInput[]
    update?: messagesUpdateWithWhereUniqueWithoutProductInput | messagesUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: messagesUpdateManyWithWhereWithoutProductInput | messagesUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: messagesScalarWhereInput | messagesScalarWhereInput[]
  }

  export type ordersUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<ordersCreateWithoutProductInput, ordersUncheckedCreateWithoutProductInput> | ordersCreateWithoutProductInput[] | ordersUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ordersCreateOrConnectWithoutProductInput | ordersCreateOrConnectWithoutProductInput[]
    upsert?: ordersUpsertWithWhereUniqueWithoutProductInput | ordersUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: ordersCreateManyProductInputEnvelope
    set?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    disconnect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    delete?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    connect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    update?: ordersUpdateWithWhereUniqueWithoutProductInput | ordersUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: ordersUpdateManyWithWhereWithoutProductInput | ordersUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: ordersScalarWhereInput | ordersScalarWhereInput[]
  }

  export type productsCreateNestedManyWithoutColorsInput = {
    create?: XOR<productsCreateWithoutColorsInput, productsUncheckedCreateWithoutColorsInput> | productsCreateWithoutColorsInput[] | productsUncheckedCreateWithoutColorsInput[]
    connectOrCreate?: productsCreateOrConnectWithoutColorsInput | productsCreateOrConnectWithoutColorsInput[]
    createMany?: productsCreateManyColorsInputEnvelope
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
  }

  export type productsUncheckedCreateNestedManyWithoutColorsInput = {
    create?: XOR<productsCreateWithoutColorsInput, productsUncheckedCreateWithoutColorsInput> | productsCreateWithoutColorsInput[] | productsUncheckedCreateWithoutColorsInput[]
    connectOrCreate?: productsCreateOrConnectWithoutColorsInput | productsCreateOrConnectWithoutColorsInput[]
    createMany?: productsCreateManyColorsInputEnvelope
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
  }

  export type productsUpdateManyWithoutColorsNestedInput = {
    create?: XOR<productsCreateWithoutColorsInput, productsUncheckedCreateWithoutColorsInput> | productsCreateWithoutColorsInput[] | productsUncheckedCreateWithoutColorsInput[]
    connectOrCreate?: productsCreateOrConnectWithoutColorsInput | productsCreateOrConnectWithoutColorsInput[]
    upsert?: productsUpsertWithWhereUniqueWithoutColorsInput | productsUpsertWithWhereUniqueWithoutColorsInput[]
    createMany?: productsCreateManyColorsInputEnvelope
    set?: productsWhereUniqueInput | productsWhereUniqueInput[]
    disconnect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    delete?: productsWhereUniqueInput | productsWhereUniqueInput[]
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    update?: productsUpdateWithWhereUniqueWithoutColorsInput | productsUpdateWithWhereUniqueWithoutColorsInput[]
    updateMany?: productsUpdateManyWithWhereWithoutColorsInput | productsUpdateManyWithWhereWithoutColorsInput[]
    deleteMany?: productsScalarWhereInput | productsScalarWhereInput[]
  }

  export type productsUncheckedUpdateManyWithoutColorsNestedInput = {
    create?: XOR<productsCreateWithoutColorsInput, productsUncheckedCreateWithoutColorsInput> | productsCreateWithoutColorsInput[] | productsUncheckedCreateWithoutColorsInput[]
    connectOrCreate?: productsCreateOrConnectWithoutColorsInput | productsCreateOrConnectWithoutColorsInput[]
    upsert?: productsUpsertWithWhereUniqueWithoutColorsInput | productsUpsertWithWhereUniqueWithoutColorsInput[]
    createMany?: productsCreateManyColorsInputEnvelope
    set?: productsWhereUniqueInput | productsWhereUniqueInput[]
    disconnect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    delete?: productsWhereUniqueInput | productsWhereUniqueInput[]
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    update?: productsUpdateWithWhereUniqueWithoutColorsInput | productsUpdateWithWhereUniqueWithoutColorsInput[]
    updateMany?: productsUpdateManyWithWhereWithoutColorsInput | productsUpdateManyWithWhereWithoutColorsInput[]
    deleteMany?: productsScalarWhereInput | productsScalarWhereInput[]
  }

  export type productsCreateNestedManyWithoutSizeInput = {
    create?: XOR<productsCreateWithoutSizeInput, productsUncheckedCreateWithoutSizeInput> | productsCreateWithoutSizeInput[] | productsUncheckedCreateWithoutSizeInput[]
    connectOrCreate?: productsCreateOrConnectWithoutSizeInput | productsCreateOrConnectWithoutSizeInput[]
    createMany?: productsCreateManySizeInputEnvelope
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
  }

  export type productsUncheckedCreateNestedManyWithoutSizeInput = {
    create?: XOR<productsCreateWithoutSizeInput, productsUncheckedCreateWithoutSizeInput> | productsCreateWithoutSizeInput[] | productsUncheckedCreateWithoutSizeInput[]
    connectOrCreate?: productsCreateOrConnectWithoutSizeInput | productsCreateOrConnectWithoutSizeInput[]
    createMany?: productsCreateManySizeInputEnvelope
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
  }

  export type productsUpdateManyWithoutSizeNestedInput = {
    create?: XOR<productsCreateWithoutSizeInput, productsUncheckedCreateWithoutSizeInput> | productsCreateWithoutSizeInput[] | productsUncheckedCreateWithoutSizeInput[]
    connectOrCreate?: productsCreateOrConnectWithoutSizeInput | productsCreateOrConnectWithoutSizeInput[]
    upsert?: productsUpsertWithWhereUniqueWithoutSizeInput | productsUpsertWithWhereUniqueWithoutSizeInput[]
    createMany?: productsCreateManySizeInputEnvelope
    set?: productsWhereUniqueInput | productsWhereUniqueInput[]
    disconnect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    delete?: productsWhereUniqueInput | productsWhereUniqueInput[]
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    update?: productsUpdateWithWhereUniqueWithoutSizeInput | productsUpdateWithWhereUniqueWithoutSizeInput[]
    updateMany?: productsUpdateManyWithWhereWithoutSizeInput | productsUpdateManyWithWhereWithoutSizeInput[]
    deleteMany?: productsScalarWhereInput | productsScalarWhereInput[]
  }

  export type productsUncheckedUpdateManyWithoutSizeNestedInput = {
    create?: XOR<productsCreateWithoutSizeInput, productsUncheckedCreateWithoutSizeInput> | productsCreateWithoutSizeInput[] | productsUncheckedCreateWithoutSizeInput[]
    connectOrCreate?: productsCreateOrConnectWithoutSizeInput | productsCreateOrConnectWithoutSizeInput[]
    upsert?: productsUpsertWithWhereUniqueWithoutSizeInput | productsUpsertWithWhereUniqueWithoutSizeInput[]
    createMany?: productsCreateManySizeInputEnvelope
    set?: productsWhereUniqueInput | productsWhereUniqueInput[]
    disconnect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    delete?: productsWhereUniqueInput | productsWhereUniqueInput[]
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    update?: productsUpdateWithWhereUniqueWithoutSizeInput | productsUpdateWithWhereUniqueWithoutSizeInput[]
    updateMany?: productsUpdateManyWithWhereWithoutSizeInput | productsUpdateManyWithWhereWithoutSizeInput[]
    deleteMany?: productsScalarWhereInput | productsScalarWhereInput[]
  }

  export type productsCreateNestedManyWithoutSpecificationInput = {
    create?: XOR<productsCreateWithoutSpecificationInput, productsUncheckedCreateWithoutSpecificationInput> | productsCreateWithoutSpecificationInput[] | productsUncheckedCreateWithoutSpecificationInput[]
    connectOrCreate?: productsCreateOrConnectWithoutSpecificationInput | productsCreateOrConnectWithoutSpecificationInput[]
    createMany?: productsCreateManySpecificationInputEnvelope
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
  }

  export type productsUncheckedCreateNestedManyWithoutSpecificationInput = {
    create?: XOR<productsCreateWithoutSpecificationInput, productsUncheckedCreateWithoutSpecificationInput> | productsCreateWithoutSpecificationInput[] | productsUncheckedCreateWithoutSpecificationInput[]
    connectOrCreate?: productsCreateOrConnectWithoutSpecificationInput | productsCreateOrConnectWithoutSpecificationInput[]
    createMany?: productsCreateManySpecificationInputEnvelope
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
  }

  export type productsUpdateManyWithoutSpecificationNestedInput = {
    create?: XOR<productsCreateWithoutSpecificationInput, productsUncheckedCreateWithoutSpecificationInput> | productsCreateWithoutSpecificationInput[] | productsUncheckedCreateWithoutSpecificationInput[]
    connectOrCreate?: productsCreateOrConnectWithoutSpecificationInput | productsCreateOrConnectWithoutSpecificationInput[]
    upsert?: productsUpsertWithWhereUniqueWithoutSpecificationInput | productsUpsertWithWhereUniqueWithoutSpecificationInput[]
    createMany?: productsCreateManySpecificationInputEnvelope
    set?: productsWhereUniqueInput | productsWhereUniqueInput[]
    disconnect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    delete?: productsWhereUniqueInput | productsWhereUniqueInput[]
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    update?: productsUpdateWithWhereUniqueWithoutSpecificationInput | productsUpdateWithWhereUniqueWithoutSpecificationInput[]
    updateMany?: productsUpdateManyWithWhereWithoutSpecificationInput | productsUpdateManyWithWhereWithoutSpecificationInput[]
    deleteMany?: productsScalarWhereInput | productsScalarWhereInput[]
  }

  export type productsUncheckedUpdateManyWithoutSpecificationNestedInput = {
    create?: XOR<productsCreateWithoutSpecificationInput, productsUncheckedCreateWithoutSpecificationInput> | productsCreateWithoutSpecificationInput[] | productsUncheckedCreateWithoutSpecificationInput[]
    connectOrCreate?: productsCreateOrConnectWithoutSpecificationInput | productsCreateOrConnectWithoutSpecificationInput[]
    upsert?: productsUpsertWithWhereUniqueWithoutSpecificationInput | productsUpsertWithWhereUniqueWithoutSpecificationInput[]
    createMany?: productsCreateManySpecificationInputEnvelope
    set?: productsWhereUniqueInput | productsWhereUniqueInput[]
    disconnect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    delete?: productsWhereUniqueInput | productsWhereUniqueInput[]
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    update?: productsUpdateWithWhereUniqueWithoutSpecificationInput | productsUpdateWithWhereUniqueWithoutSpecificationInput[]
    updateMany?: productsUpdateManyWithWhereWithoutSpecificationInput | productsUpdateManyWithWhereWithoutSpecificationInput[]
    deleteMany?: productsScalarWhereInput | productsScalarWhereInput[]
  }

  export type usersCreateNestedOneWithoutCommentsInput = {
    create?: XOR<usersCreateWithoutCommentsInput, usersUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: usersCreateOrConnectWithoutCommentsInput
    connect?: usersWhereUniqueInput
  }

  export type productsCreateNestedOneWithoutCommentsInput = {
    create?: XOR<productsCreateWithoutCommentsInput, productsUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: productsCreateOrConnectWithoutCommentsInput
    connect?: productsWhereUniqueInput
  }

  export type notificationsCreateNestedManyWithoutCommentsInput = {
    create?: XOR<notificationsCreateWithoutCommentsInput, notificationsUncheckedCreateWithoutCommentsInput> | notificationsCreateWithoutCommentsInput[] | notificationsUncheckedCreateWithoutCommentsInput[]
    connectOrCreate?: notificationsCreateOrConnectWithoutCommentsInput | notificationsCreateOrConnectWithoutCommentsInput[]
    createMany?: notificationsCreateManyCommentsInputEnvelope
    connect?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
  }

  export type notificationsUncheckedCreateNestedManyWithoutCommentsInput = {
    create?: XOR<notificationsCreateWithoutCommentsInput, notificationsUncheckedCreateWithoutCommentsInput> | notificationsCreateWithoutCommentsInput[] | notificationsUncheckedCreateWithoutCommentsInput[]
    connectOrCreate?: notificationsCreateOrConnectWithoutCommentsInput | notificationsCreateOrConnectWithoutCommentsInput[]
    createMany?: notificationsCreateManyCommentsInputEnvelope
    connect?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
  }

  export type usersUpdateOneWithoutCommentsNestedInput = {
    create?: XOR<usersCreateWithoutCommentsInput, usersUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: usersCreateOrConnectWithoutCommentsInput
    upsert?: usersUpsertWithoutCommentsInput
    disconnect?: usersWhereInput | boolean
    delete?: usersWhereInput | boolean
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutCommentsInput, usersUpdateWithoutCommentsInput>, usersUncheckedUpdateWithoutCommentsInput>
  }

  export type productsUpdateOneWithoutCommentsNestedInput = {
    create?: XOR<productsCreateWithoutCommentsInput, productsUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: productsCreateOrConnectWithoutCommentsInput
    upsert?: productsUpsertWithoutCommentsInput
    disconnect?: productsWhereInput | boolean
    delete?: productsWhereInput | boolean
    connect?: productsWhereUniqueInput
    update?: XOR<XOR<productsUpdateToOneWithWhereWithoutCommentsInput, productsUpdateWithoutCommentsInput>, productsUncheckedUpdateWithoutCommentsInput>
  }

  export type notificationsUpdateManyWithoutCommentsNestedInput = {
    create?: XOR<notificationsCreateWithoutCommentsInput, notificationsUncheckedCreateWithoutCommentsInput> | notificationsCreateWithoutCommentsInput[] | notificationsUncheckedCreateWithoutCommentsInput[]
    connectOrCreate?: notificationsCreateOrConnectWithoutCommentsInput | notificationsCreateOrConnectWithoutCommentsInput[]
    upsert?: notificationsUpsertWithWhereUniqueWithoutCommentsInput | notificationsUpsertWithWhereUniqueWithoutCommentsInput[]
    createMany?: notificationsCreateManyCommentsInputEnvelope
    set?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    disconnect?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    delete?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    connect?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    update?: notificationsUpdateWithWhereUniqueWithoutCommentsInput | notificationsUpdateWithWhereUniqueWithoutCommentsInput[]
    updateMany?: notificationsUpdateManyWithWhereWithoutCommentsInput | notificationsUpdateManyWithWhereWithoutCommentsInput[]
    deleteMany?: notificationsScalarWhereInput | notificationsScalarWhereInput[]
  }

  export type notificationsUncheckedUpdateManyWithoutCommentsNestedInput = {
    create?: XOR<notificationsCreateWithoutCommentsInput, notificationsUncheckedCreateWithoutCommentsInput> | notificationsCreateWithoutCommentsInput[] | notificationsUncheckedCreateWithoutCommentsInput[]
    connectOrCreate?: notificationsCreateOrConnectWithoutCommentsInput | notificationsCreateOrConnectWithoutCommentsInput[]
    upsert?: notificationsUpsertWithWhereUniqueWithoutCommentsInput | notificationsUpsertWithWhereUniqueWithoutCommentsInput[]
    createMany?: notificationsCreateManyCommentsInputEnvelope
    set?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    disconnect?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    delete?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    connect?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    update?: notificationsUpdateWithWhereUniqueWithoutCommentsInput | notificationsUpdateWithWhereUniqueWithoutCommentsInput[]
    updateMany?: notificationsUpdateManyWithWhereWithoutCommentsInput | notificationsUpdateManyWithWhereWithoutCommentsInput[]
    deleteMany?: notificationsScalarWhereInput | notificationsScalarWhereInput[]
  }

  export type usersCreateNestedOneWithoutReviewsInput = {
    create?: XOR<usersCreateWithoutReviewsInput, usersUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: usersCreateOrConnectWithoutReviewsInput
    connect?: usersWhereUniqueInput
  }

  export type productsCreateNestedOneWithoutReviewsInput = {
    create?: XOR<productsCreateWithoutReviewsInput, productsUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: productsCreateOrConnectWithoutReviewsInput
    connect?: productsWhereUniqueInput
  }

  export type notificationsCreateNestedManyWithoutReviewsInput = {
    create?: XOR<notificationsCreateWithoutReviewsInput, notificationsUncheckedCreateWithoutReviewsInput> | notificationsCreateWithoutReviewsInput[] | notificationsUncheckedCreateWithoutReviewsInput[]
    connectOrCreate?: notificationsCreateOrConnectWithoutReviewsInput | notificationsCreateOrConnectWithoutReviewsInput[]
    createMany?: notificationsCreateManyReviewsInputEnvelope
    connect?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
  }

  export type sellerCreateNestedOneWithoutReviewsInput = {
    create?: XOR<sellerCreateWithoutReviewsInput, sellerUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: sellerCreateOrConnectWithoutReviewsInput
    connect?: sellerWhereUniqueInput
  }

  export type brandsCreateNestedOneWithoutReviewsInput = {
    create?: XOR<brandsCreateWithoutReviewsInput, brandsUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: brandsCreateOrConnectWithoutReviewsInput
    connect?: brandsWhereUniqueInput
  }

  export type notificationsUncheckedCreateNestedManyWithoutReviewsInput = {
    create?: XOR<notificationsCreateWithoutReviewsInput, notificationsUncheckedCreateWithoutReviewsInput> | notificationsCreateWithoutReviewsInput[] | notificationsUncheckedCreateWithoutReviewsInput[]
    connectOrCreate?: notificationsCreateOrConnectWithoutReviewsInput | notificationsCreateOrConnectWithoutReviewsInput[]
    createMany?: notificationsCreateManyReviewsInputEnvelope
    connect?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
  }

  export type usersUpdateOneWithoutReviewsNestedInput = {
    create?: XOR<usersCreateWithoutReviewsInput, usersUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: usersCreateOrConnectWithoutReviewsInput
    upsert?: usersUpsertWithoutReviewsInput
    disconnect?: usersWhereInput | boolean
    delete?: usersWhereInput | boolean
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutReviewsInput, usersUpdateWithoutReviewsInput>, usersUncheckedUpdateWithoutReviewsInput>
  }

  export type productsUpdateOneWithoutReviewsNestedInput = {
    create?: XOR<productsCreateWithoutReviewsInput, productsUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: productsCreateOrConnectWithoutReviewsInput
    upsert?: productsUpsertWithoutReviewsInput
    disconnect?: productsWhereInput | boolean
    delete?: productsWhereInput | boolean
    connect?: productsWhereUniqueInput
    update?: XOR<XOR<productsUpdateToOneWithWhereWithoutReviewsInput, productsUpdateWithoutReviewsInput>, productsUncheckedUpdateWithoutReviewsInput>
  }

  export type notificationsUpdateManyWithoutReviewsNestedInput = {
    create?: XOR<notificationsCreateWithoutReviewsInput, notificationsUncheckedCreateWithoutReviewsInput> | notificationsCreateWithoutReviewsInput[] | notificationsUncheckedCreateWithoutReviewsInput[]
    connectOrCreate?: notificationsCreateOrConnectWithoutReviewsInput | notificationsCreateOrConnectWithoutReviewsInput[]
    upsert?: notificationsUpsertWithWhereUniqueWithoutReviewsInput | notificationsUpsertWithWhereUniqueWithoutReviewsInput[]
    createMany?: notificationsCreateManyReviewsInputEnvelope
    set?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    disconnect?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    delete?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    connect?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    update?: notificationsUpdateWithWhereUniqueWithoutReviewsInput | notificationsUpdateWithWhereUniqueWithoutReviewsInput[]
    updateMany?: notificationsUpdateManyWithWhereWithoutReviewsInput | notificationsUpdateManyWithWhereWithoutReviewsInput[]
    deleteMany?: notificationsScalarWhereInput | notificationsScalarWhereInput[]
  }

  export type sellerUpdateOneWithoutReviewsNestedInput = {
    create?: XOR<sellerCreateWithoutReviewsInput, sellerUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: sellerCreateOrConnectWithoutReviewsInput
    upsert?: sellerUpsertWithoutReviewsInput
    disconnect?: sellerWhereInput | boolean
    delete?: sellerWhereInput | boolean
    connect?: sellerWhereUniqueInput
    update?: XOR<XOR<sellerUpdateToOneWithWhereWithoutReviewsInput, sellerUpdateWithoutReviewsInput>, sellerUncheckedUpdateWithoutReviewsInput>
  }

  export type brandsUpdateOneWithoutReviewsNestedInput = {
    create?: XOR<brandsCreateWithoutReviewsInput, brandsUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: brandsCreateOrConnectWithoutReviewsInput
    upsert?: brandsUpsertWithoutReviewsInput
    disconnect?: brandsWhereInput | boolean
    delete?: brandsWhereInput | boolean
    connect?: brandsWhereUniqueInput
    update?: XOR<XOR<brandsUpdateToOneWithWhereWithoutReviewsInput, brandsUpdateWithoutReviewsInput>, brandsUncheckedUpdateWithoutReviewsInput>
  }

  export type notificationsUncheckedUpdateManyWithoutReviewsNestedInput = {
    create?: XOR<notificationsCreateWithoutReviewsInput, notificationsUncheckedCreateWithoutReviewsInput> | notificationsCreateWithoutReviewsInput[] | notificationsUncheckedCreateWithoutReviewsInput[]
    connectOrCreate?: notificationsCreateOrConnectWithoutReviewsInput | notificationsCreateOrConnectWithoutReviewsInput[]
    upsert?: notificationsUpsertWithWhereUniqueWithoutReviewsInput | notificationsUpsertWithWhereUniqueWithoutReviewsInput[]
    createMany?: notificationsCreateManyReviewsInputEnvelope
    set?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    disconnect?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    delete?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    connect?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    update?: notificationsUpdateWithWhereUniqueWithoutReviewsInput | notificationsUpdateWithWhereUniqueWithoutReviewsInput[]
    updateMany?: notificationsUpdateManyWithWhereWithoutReviewsInput | notificationsUpdateManyWithWhereWithoutReviewsInput[]
    deleteMany?: notificationsScalarWhereInput | notificationsScalarWhereInput[]
  }

  export type usersCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<usersCreateWithoutNotificationsInput, usersUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: usersCreateOrConnectWithoutNotificationsInput
    connect?: usersWhereUniqueInput
  }

  export type commentsCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<commentsCreateWithoutNotificationsInput, commentsUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: commentsCreateOrConnectWithoutNotificationsInput
    connect?: commentsWhereUniqueInput
  }

  export type reviewsCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<reviewsCreateWithoutNotificationsInput, reviewsUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: reviewsCreateOrConnectWithoutNotificationsInput
    connect?: reviewsWhereUniqueInput
  }

  export type usersUpdateOneWithoutNotificationsNestedInput = {
    create?: XOR<usersCreateWithoutNotificationsInput, usersUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: usersCreateOrConnectWithoutNotificationsInput
    upsert?: usersUpsertWithoutNotificationsInput
    disconnect?: usersWhereInput | boolean
    delete?: usersWhereInput | boolean
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutNotificationsInput, usersUpdateWithoutNotificationsInput>, usersUncheckedUpdateWithoutNotificationsInput>
  }

  export type commentsUpdateOneWithoutNotificationsNestedInput = {
    create?: XOR<commentsCreateWithoutNotificationsInput, commentsUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: commentsCreateOrConnectWithoutNotificationsInput
    upsert?: commentsUpsertWithoutNotificationsInput
    disconnect?: commentsWhereInput | boolean
    delete?: commentsWhereInput | boolean
    connect?: commentsWhereUniqueInput
    update?: XOR<XOR<commentsUpdateToOneWithWhereWithoutNotificationsInput, commentsUpdateWithoutNotificationsInput>, commentsUncheckedUpdateWithoutNotificationsInput>
  }

  export type reviewsUpdateOneWithoutNotificationsNestedInput = {
    create?: XOR<reviewsCreateWithoutNotificationsInput, reviewsUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: reviewsCreateOrConnectWithoutNotificationsInput
    upsert?: reviewsUpsertWithoutNotificationsInput
    disconnect?: reviewsWhereInput | boolean
    delete?: reviewsWhereInput | boolean
    connect?: reviewsWhereUniqueInput
    update?: XOR<XOR<reviewsUpdateToOneWithWhereWithoutNotificationsInput, reviewsUpdateWithoutNotificationsInput>, reviewsUncheckedUpdateWithoutNotificationsInput>
  }

  export type flashSellProductCreateNestedManyWithoutFlashSellInput = {
    create?: XOR<flashSellProductCreateWithoutFlashSellInput, flashSellProductUncheckedCreateWithoutFlashSellInput> | flashSellProductCreateWithoutFlashSellInput[] | flashSellProductUncheckedCreateWithoutFlashSellInput[]
    connectOrCreate?: flashSellProductCreateOrConnectWithoutFlashSellInput | flashSellProductCreateOrConnectWithoutFlashSellInput[]
    createMany?: flashSellProductCreateManyFlashSellInputEnvelope
    connect?: flashSellProductWhereUniqueInput | flashSellProductWhereUniqueInput[]
  }

  export type flashSellProductUncheckedCreateNestedManyWithoutFlashSellInput = {
    create?: XOR<flashSellProductCreateWithoutFlashSellInput, flashSellProductUncheckedCreateWithoutFlashSellInput> | flashSellProductCreateWithoutFlashSellInput[] | flashSellProductUncheckedCreateWithoutFlashSellInput[]
    connectOrCreate?: flashSellProductCreateOrConnectWithoutFlashSellInput | flashSellProductCreateOrConnectWithoutFlashSellInput[]
    createMany?: flashSellProductCreateManyFlashSellInputEnvelope
    connect?: flashSellProductWhereUniqueInput | flashSellProductWhereUniqueInput[]
  }

  export type flashSellProductUpdateManyWithoutFlashSellNestedInput = {
    create?: XOR<flashSellProductCreateWithoutFlashSellInput, flashSellProductUncheckedCreateWithoutFlashSellInput> | flashSellProductCreateWithoutFlashSellInput[] | flashSellProductUncheckedCreateWithoutFlashSellInput[]
    connectOrCreate?: flashSellProductCreateOrConnectWithoutFlashSellInput | flashSellProductCreateOrConnectWithoutFlashSellInput[]
    upsert?: flashSellProductUpsertWithWhereUniqueWithoutFlashSellInput | flashSellProductUpsertWithWhereUniqueWithoutFlashSellInput[]
    createMany?: flashSellProductCreateManyFlashSellInputEnvelope
    set?: flashSellProductWhereUniqueInput | flashSellProductWhereUniqueInput[]
    disconnect?: flashSellProductWhereUniqueInput | flashSellProductWhereUniqueInput[]
    delete?: flashSellProductWhereUniqueInput | flashSellProductWhereUniqueInput[]
    connect?: flashSellProductWhereUniqueInput | flashSellProductWhereUniqueInput[]
    update?: flashSellProductUpdateWithWhereUniqueWithoutFlashSellInput | flashSellProductUpdateWithWhereUniqueWithoutFlashSellInput[]
    updateMany?: flashSellProductUpdateManyWithWhereWithoutFlashSellInput | flashSellProductUpdateManyWithWhereWithoutFlashSellInput[]
    deleteMany?: flashSellProductScalarWhereInput | flashSellProductScalarWhereInput[]
  }

  export type flashSellProductUncheckedUpdateManyWithoutFlashSellNestedInput = {
    create?: XOR<flashSellProductCreateWithoutFlashSellInput, flashSellProductUncheckedCreateWithoutFlashSellInput> | flashSellProductCreateWithoutFlashSellInput[] | flashSellProductUncheckedCreateWithoutFlashSellInput[]
    connectOrCreate?: flashSellProductCreateOrConnectWithoutFlashSellInput | flashSellProductCreateOrConnectWithoutFlashSellInput[]
    upsert?: flashSellProductUpsertWithWhereUniqueWithoutFlashSellInput | flashSellProductUpsertWithWhereUniqueWithoutFlashSellInput[]
    createMany?: flashSellProductCreateManyFlashSellInputEnvelope
    set?: flashSellProductWhereUniqueInput | flashSellProductWhereUniqueInput[]
    disconnect?: flashSellProductWhereUniqueInput | flashSellProductWhereUniqueInput[]
    delete?: flashSellProductWhereUniqueInput | flashSellProductWhereUniqueInput[]
    connect?: flashSellProductWhereUniqueInput | flashSellProductWhereUniqueInput[]
    update?: flashSellProductUpdateWithWhereUniqueWithoutFlashSellInput | flashSellProductUpdateWithWhereUniqueWithoutFlashSellInput[]
    updateMany?: flashSellProductUpdateManyWithWhereWithoutFlashSellInput | flashSellProductUpdateManyWithWhereWithoutFlashSellInput[]
    deleteMany?: flashSellProductScalarWhereInput | flashSellProductScalarWhereInput[]
  }

  export type flashSellCreateNestedOneWithoutProductInput = {
    create?: XOR<flashSellCreateWithoutProductInput, flashSellUncheckedCreateWithoutProductInput>
    connectOrCreate?: flashSellCreateOrConnectWithoutProductInput
    connect?: flashSellWhereUniqueInput
  }

  export type productsCreateNestedOneWithoutFlashSellProductInput = {
    create?: XOR<productsCreateWithoutFlashSellProductInput, productsUncheckedCreateWithoutFlashSellProductInput>
    connectOrCreate?: productsCreateOrConnectWithoutFlashSellProductInput
    connect?: productsWhereUniqueInput
  }

  export type usersCreateNestedOneWithoutFlashSellProductInput = {
    create?: XOR<usersCreateWithoutFlashSellProductInput, usersUncheckedCreateWithoutFlashSellProductInput>
    connectOrCreate?: usersCreateOrConnectWithoutFlashSellProductInput
    connect?: usersWhereUniqueInput
  }

  export type flashSellUpdateOneWithoutProductNestedInput = {
    create?: XOR<flashSellCreateWithoutProductInput, flashSellUncheckedCreateWithoutProductInput>
    connectOrCreate?: flashSellCreateOrConnectWithoutProductInput
    upsert?: flashSellUpsertWithoutProductInput
    disconnect?: flashSellWhereInput | boolean
    delete?: flashSellWhereInput | boolean
    connect?: flashSellWhereUniqueInput
    update?: XOR<XOR<flashSellUpdateToOneWithWhereWithoutProductInput, flashSellUpdateWithoutProductInput>, flashSellUncheckedUpdateWithoutProductInput>
  }

  export type productsUpdateOneWithoutFlashSellProductNestedInput = {
    create?: XOR<productsCreateWithoutFlashSellProductInput, productsUncheckedCreateWithoutFlashSellProductInput>
    connectOrCreate?: productsCreateOrConnectWithoutFlashSellProductInput
    upsert?: productsUpsertWithoutFlashSellProductInput
    disconnect?: productsWhereInput | boolean
    delete?: productsWhereInput | boolean
    connect?: productsWhereUniqueInput
    update?: XOR<XOR<productsUpdateToOneWithWhereWithoutFlashSellProductInput, productsUpdateWithoutFlashSellProductInput>, productsUncheckedUpdateWithoutFlashSellProductInput>
  }

  export type usersUpdateOneWithoutFlashSellProductNestedInput = {
    create?: XOR<usersCreateWithoutFlashSellProductInput, usersUncheckedCreateWithoutFlashSellProductInput>
    connectOrCreate?: usersCreateOrConnectWithoutFlashSellProductInput
    upsert?: usersUpsertWithoutFlashSellProductInput
    disconnect?: usersWhereInput | boolean
    delete?: usersWhereInput | boolean
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutFlashSellProductInput, usersUpdateWithoutFlashSellProductInput>, usersUncheckedUpdateWithoutFlashSellProductInput>
  }

  export type usersCreateNestedOneWithoutConversationsInput = {
    create?: XOR<usersCreateWithoutConversationsInput, usersUncheckedCreateWithoutConversationsInput>
    connectOrCreate?: usersCreateOrConnectWithoutConversationsInput
    connect?: usersWhereUniqueInput
  }

  export type usersUpdateOneWithoutConversationsNestedInput = {
    create?: XOR<usersCreateWithoutConversationsInput, usersUncheckedCreateWithoutConversationsInput>
    connectOrCreate?: usersCreateOrConnectWithoutConversationsInput
    upsert?: usersUpsertWithoutConversationsInput
    disconnect?: usersWhereInput | boolean
    delete?: usersWhereInput | boolean
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutConversationsInput, usersUpdateWithoutConversationsInput>, usersUncheckedUpdateWithoutConversationsInput>
  }

  export type productsCreateNestedOneWithoutMessagesInput = {
    create?: XOR<productsCreateWithoutMessagesInput, productsUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: productsCreateOrConnectWithoutMessagesInput
    connect?: productsWhereUniqueInput
  }

  export type productsUpdateOneWithoutMessagesNestedInput = {
    create?: XOR<productsCreateWithoutMessagesInput, productsUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: productsCreateOrConnectWithoutMessagesInput
    upsert?: productsUpsertWithoutMessagesInput
    disconnect?: productsWhereInput | boolean
    delete?: productsWhereInput | boolean
    connect?: productsWhereUniqueInput
    update?: XOR<XOR<productsUpdateToOneWithWhereWithoutMessagesInput, productsUpdateWithoutMessagesInput>, productsUncheckedUpdateWithoutMessagesInput>
  }

  export type usersCreateNestedOneWithoutOrdersInput = {
    create?: XOR<usersCreateWithoutOrdersInput, usersUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: usersCreateOrConnectWithoutOrdersInput
    connect?: usersWhereUniqueInput
  }

  export type productsCreateNestedOneWithoutOrdersInput = {
    create?: XOR<productsCreateWithoutOrdersInput, productsUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: productsCreateOrConnectWithoutOrdersInput
    connect?: productsWhereUniqueInput
  }

  export type usersUpdateOneRequiredWithoutOrdersNestedInput = {
    create?: XOR<usersCreateWithoutOrdersInput, usersUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: usersCreateOrConnectWithoutOrdersInput
    upsert?: usersUpsertWithoutOrdersInput
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutOrdersInput, usersUpdateWithoutOrdersInput>, usersUncheckedUpdateWithoutOrdersInput>
  }

  export type productsUpdateOneRequiredWithoutOrdersNestedInput = {
    create?: XOR<productsCreateWithoutOrdersInput, productsUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: productsCreateOrConnectWithoutOrdersInput
    upsert?: productsUpsertWithoutOrdersInput
    connect?: productsWhereUniqueInput
    update?: XOR<XOR<productsUpdateToOneWithWhereWithoutOrdersInput, productsUpdateWithoutOrdersInput>, productsUncheckedUpdateWithoutOrdersInput>
  }

  export type productsCreateNestedOneWithoutBannerInput = {
    create?: XOR<productsCreateWithoutBannerInput, productsUncheckedCreateWithoutBannerInput>
    connectOrCreate?: productsCreateOrConnectWithoutBannerInput
    connect?: productsWhereUniqueInput
  }

  export type productsUpdateOneWithoutBannerNestedInput = {
    create?: XOR<productsCreateWithoutBannerInput, productsUncheckedCreateWithoutBannerInput>
    connectOrCreate?: productsCreateOrConnectWithoutBannerInput
    upsert?: productsUpsertWithoutBannerInput
    disconnect?: productsWhereInput | boolean
    delete?: productsWhereInput | boolean
    connect?: productsWhereUniqueInput
    update?: XOR<XOR<productsUpdateToOneWithWhereWithoutBannerInput, productsUpdateWithoutBannerInput>, productsUncheckedUpdateWithoutBannerInput>
  }

  export type productsCreateNestedOneWithoutAddsInput = {
    create?: XOR<productsCreateWithoutAddsInput, productsUncheckedCreateWithoutAddsInput>
    connectOrCreate?: productsCreateOrConnectWithoutAddsInput
    connect?: productsWhereUniqueInput
  }

  export type visitorsCreateNestedOneWithoutAddsInput = {
    create?: XOR<visitorsCreateWithoutAddsInput, visitorsUncheckedCreateWithoutAddsInput>
    connectOrCreate?: visitorsCreateOrConnectWithoutAddsInput
    connect?: visitorsWhereUniqueInput
  }

  export type productsUpdateOneWithoutAddsNestedInput = {
    create?: XOR<productsCreateWithoutAddsInput, productsUncheckedCreateWithoutAddsInput>
    connectOrCreate?: productsCreateOrConnectWithoutAddsInput
    upsert?: productsUpsertWithoutAddsInput
    disconnect?: productsWhereInput | boolean
    delete?: productsWhereInput | boolean
    connect?: productsWhereUniqueInput
    update?: XOR<XOR<productsUpdateToOneWithWhereWithoutAddsInput, productsUpdateWithoutAddsInput>, productsUncheckedUpdateWithoutAddsInput>
  }

  export type visitorsUpdateOneWithoutAddsNestedInput = {
    create?: XOR<visitorsCreateWithoutAddsInput, visitorsUncheckedCreateWithoutAddsInput>
    connectOrCreate?: visitorsCreateOrConnectWithoutAddsInput
    upsert?: visitorsUpsertWithoutAddsInput
    disconnect?: visitorsWhereInput | boolean
    delete?: visitorsWhereInput | boolean
    connect?: visitorsWhereUniqueInput
    update?: XOR<XOR<visitorsUpdateToOneWithWhereWithoutAddsInput, visitorsUpdateWithoutAddsInput>, visitorsUncheckedUpdateWithoutAddsInput>
  }

  export type addsCreateNestedOneWithoutVisitorsInput = {
    create?: XOR<addsCreateWithoutVisitorsInput, addsUncheckedCreateWithoutVisitorsInput>
    connectOrCreate?: addsCreateOrConnectWithoutVisitorsInput
    connect?: addsWhereUniqueInput
  }

  export type addsUncheckedCreateNestedOneWithoutVisitorsInput = {
    create?: XOR<addsCreateWithoutVisitorsInput, addsUncheckedCreateWithoutVisitorsInput>
    connectOrCreate?: addsCreateOrConnectWithoutVisitorsInput
    connect?: addsWhereUniqueInput
  }

  export type addsUpdateOneWithoutVisitorsNestedInput = {
    create?: XOR<addsCreateWithoutVisitorsInput, addsUncheckedCreateWithoutVisitorsInput>
    connectOrCreate?: addsCreateOrConnectWithoutVisitorsInput
    upsert?: addsUpsertWithoutVisitorsInput
    disconnect?: addsWhereInput | boolean
    delete?: addsWhereInput | boolean
    connect?: addsWhereUniqueInput
    update?: XOR<XOR<addsUpdateToOneWithWhereWithoutVisitorsInput, addsUpdateWithoutVisitorsInput>, addsUncheckedUpdateWithoutVisitorsInput>
  }

  export type addsUncheckedUpdateOneWithoutVisitorsNestedInput = {
    create?: XOR<addsCreateWithoutVisitorsInput, addsUncheckedCreateWithoutVisitorsInput>
    connectOrCreate?: addsCreateOrConnectWithoutVisitorsInput
    upsert?: addsUpsertWithoutVisitorsInput
    disconnect?: addsWhereInput | boolean
    delete?: addsWhereInput | boolean
    connect?: addsWhereUniqueInput
    update?: XOR<XOR<addsUpdateToOneWithWhereWithoutVisitorsInput, addsUpdateWithoutVisitorsInput>, addsUncheckedUpdateWithoutVisitorsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type sellerCreateWithoutUserInput = {
    id?: string
    shopName: string
    shopAddress: string
    categories?: NullableJsonNullValueInput | InputJsonValue
    logo: string
    verified?: boolean
    products?: productsCreateNestedManyWithoutSellerInput
    reviews?: reviewsCreateNestedManyWithoutSellerInput
  }

  export type sellerUncheckedCreateWithoutUserInput = {
    id?: string
    shopName: string
    shopAddress: string
    categories?: NullableJsonNullValueInput | InputJsonValue
    logo: string
    verified?: boolean
    products?: productsUncheckedCreateNestedManyWithoutSellerInput
    reviews?: reviewsUncheckedCreateNestedManyWithoutSellerInput
  }

  export type sellerCreateOrConnectWithoutUserInput = {
    where: sellerWhereUniqueInput
    create: XOR<sellerCreateWithoutUserInput, sellerUncheckedCreateWithoutUserInput>
  }

  export type sellerCreateManyUserInputEnvelope = {
    data: sellerCreateManyUserInput | sellerCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type brandsCreateWithoutUserInput = {
    id?: string
    brandName: string
    brandAddress: string
    brandIcon: string
    categories?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean
    products?: productsCreateNestedManyWithoutBrandInput
    reviews?: reviewsCreateNestedManyWithoutBrandInput
  }

  export type brandsUncheckedCreateWithoutUserInput = {
    id?: string
    brandName: string
    brandAddress: string
    brandIcon: string
    categories?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean
    products?: productsUncheckedCreateNestedManyWithoutBrandInput
    reviews?: reviewsUncheckedCreateNestedManyWithoutBrandInput
  }

  export type brandsCreateOrConnectWithoutUserInput = {
    where: brandsWhereUniqueInput
    create: XOR<brandsCreateWithoutUserInput, brandsUncheckedCreateWithoutUserInput>
  }

  export type brandsCreateManyUserInputEnvelope = {
    data: brandsCreateManyUserInput | brandsCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type productsCreateWithoutUserInput = {
    id?: string
    price: number
    coin?: boolean
    title: string
    description: string
    thumbnail: string
    quantity?: number
    minOrder?: number
    freeCoin?: number
    offer?: number
    percentage?: boolean
    freeDelivery?: boolean
    fixedPrice?: boolean
    createdAt?: Date | string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean
    colors?: colorsCreateNestedOneWithoutProductsInput
    size?: sizeCreateNestedOneWithoutProductsInput
    specification?: specificationsCreateNestedOneWithoutProductsInput
    comments?: commentsCreateNestedManyWithoutProductInput
    reviews?: reviewsCreateNestedManyWithoutProductInput
    flashSellProduct?: flashSellProductCreateNestedManyWithoutProductInput
    seller?: sellerCreateNestedOneWithoutProductsInput
    brand?: brandsCreateNestedOneWithoutProductsInput
    category?: categoryCreateNestedOneWithoutProductsInput
    subCategory?: subCategoryCreateNestedOneWithoutProductsInput
    option?: optionsCreateNestedOneWithoutProductsInput
    banner?: bannerCreateNestedManyWithoutProductInput
    adds?: addsCreateNestedManyWithoutProductInput
    messages?: messagesCreateNestedManyWithoutProductInput
    orders?: ordersCreateNestedManyWithoutProductInput
  }

  export type productsUncheckedCreateWithoutUserInput = {
    id?: string
    price: number
    coin?: boolean
    title: string
    description: string
    thumbnail: string
    quantity?: number
    minOrder?: number
    freeCoin?: number
    offer?: number
    percentage?: boolean
    freeDelivery?: boolean
    fixedPrice?: boolean
    createdAt?: Date | string
    colorId: string
    sizeId: string
    specificationsId: string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean
    sellerId?: string | null
    brandId?: string | null
    categoryId: string
    subCategoryId: string
    optionId: string
    comments?: commentsUncheckedCreateNestedManyWithoutProductInput
    reviews?: reviewsUncheckedCreateNestedManyWithoutProductInput
    flashSellProduct?: flashSellProductUncheckedCreateNestedManyWithoutProductInput
    banner?: bannerUncheckedCreateNestedManyWithoutProductInput
    adds?: addsUncheckedCreateNestedManyWithoutProductInput
    messages?: messagesUncheckedCreateNestedManyWithoutProductInput
    orders?: ordersUncheckedCreateNestedManyWithoutProductInput
  }

  export type productsCreateOrConnectWithoutUserInput = {
    where: productsWhereUniqueInput
    create: XOR<productsCreateWithoutUserInput, productsUncheckedCreateWithoutUserInput>
  }

  export type productsCreateManyUserInputEnvelope = {
    data: productsCreateManyUserInput | productsCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type commentsCreateWithoutUserInput = {
    id?: string
    message: string
    image?: string | null
    replay?: string | null
    receiverId: string
    product?: productsCreateNestedOneWithoutCommentsInput
    notifications?: notificationsCreateNestedManyWithoutCommentsInput
  }

  export type commentsUncheckedCreateWithoutUserInput = {
    id?: string
    message: string
    image?: string | null
    replay?: string | null
    productId: string
    receiverId: string
    notifications?: notificationsUncheckedCreateNestedManyWithoutCommentsInput
  }

  export type commentsCreateOrConnectWithoutUserInput = {
    where: commentsWhereUniqueInput
    create: XOR<commentsCreateWithoutUserInput, commentsUncheckedCreateWithoutUserInput>
  }

  export type commentsCreateManyUserInputEnvelope = {
    data: commentsCreateManyUserInput | commentsCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type reviewsCreateWithoutUserInput = {
    id?: string
    message: string
    rate?: number
    product?: productsCreateNestedOneWithoutReviewsInput
    notifications?: notificationsCreateNestedManyWithoutReviewsInput
    seller?: sellerCreateNestedOneWithoutReviewsInput
    brand?: brandsCreateNestedOneWithoutReviewsInput
  }

  export type reviewsUncheckedCreateWithoutUserInput = {
    id?: string
    message: string
    rate?: number
    productId: string
    sellerId?: string | null
    brandId?: string | null
    notifications?: notificationsUncheckedCreateNestedManyWithoutReviewsInput
  }

  export type reviewsCreateOrConnectWithoutUserInput = {
    where: reviewsWhereUniqueInput
    create: XOR<reviewsCreateWithoutUserInput, reviewsUncheckedCreateWithoutUserInput>
  }

  export type reviewsCreateManyUserInputEnvelope = {
    data: reviewsCreateManyUserInput | reviewsCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type notificationsCreateWithoutUserInput = {
    id?: string
    message: string
    title: string
    comments?: commentsCreateNestedOneWithoutNotificationsInput
    reviews?: reviewsCreateNestedOneWithoutNotificationsInput
  }

  export type notificationsUncheckedCreateWithoutUserInput = {
    id?: string
    message: string
    title: string
    commentId: string
    reviewId: string
  }

  export type notificationsCreateOrConnectWithoutUserInput = {
    where: notificationsWhereUniqueInput
    create: XOR<notificationsCreateWithoutUserInput, notificationsUncheckedCreateWithoutUserInput>
  }

  export type notificationsCreateManyUserInputEnvelope = {
    data: notificationsCreateManyUserInput | notificationsCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type flashSellProductCreateWithoutUserInput = {
    id?: string
    offer?: number
    percentage?: boolean
    minSell?: number
    quantity?: number
    deliveryFree?: boolean
    createdAt?: Date | string
    flashSell?: flashSellCreateNestedOneWithoutProductInput
    product?: productsCreateNestedOneWithoutFlashSellProductInput
  }

  export type flashSellProductUncheckedCreateWithoutUserInput = {
    id?: string
    offer?: number
    percentage?: boolean
    minSell?: number
    quantity?: number
    deliveryFree?: boolean
    flashSellId: string
    productId: string
    createdAt?: Date | string
  }

  export type flashSellProductCreateOrConnectWithoutUserInput = {
    where: flashSellProductWhereUniqueInput
    create: XOR<flashSellProductCreateWithoutUserInput, flashSellProductUncheckedCreateWithoutUserInput>
  }

  export type flashSellProductCreateManyUserInputEnvelope = {
    data: flashSellProductCreateManyUserInput | flashSellProductCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type conversationsCreateWithoutSenderInput = {
    id?: string
    receiverId: string
    date?: Date | string
  }

  export type conversationsUncheckedCreateWithoutSenderInput = {
    id?: string
    receiverId: string
    date?: Date | string
  }

  export type conversationsCreateOrConnectWithoutSenderInput = {
    where: conversationsWhereUniqueInput
    create: XOR<conversationsCreateWithoutSenderInput, conversationsUncheckedCreateWithoutSenderInput>
  }

  export type conversationsCreateManySenderInputEnvelope = {
    data: conversationsCreateManySenderInput | conversationsCreateManySenderInput[]
    skipDuplicates?: boolean
  }

  export type ordersCreateWithoutBuyerInput = {
    id?: string
    offerPrice?: number
    date?: Date | string
    product: productsCreateNestedOneWithoutOrdersInput
  }

  export type ordersUncheckedCreateWithoutBuyerInput = {
    id?: string
    productId: string
    offerPrice?: number
    date?: Date | string
  }

  export type ordersCreateOrConnectWithoutBuyerInput = {
    where: ordersWhereUniqueInput
    create: XOR<ordersCreateWithoutBuyerInput, ordersUncheckedCreateWithoutBuyerInput>
  }

  export type ordersCreateManyBuyerInputEnvelope = {
    data: ordersCreateManyBuyerInput | ordersCreateManyBuyerInput[]
    skipDuplicates?: boolean
  }

  export type sellerUpsertWithWhereUniqueWithoutUserInput = {
    where: sellerWhereUniqueInput
    update: XOR<sellerUpdateWithoutUserInput, sellerUncheckedUpdateWithoutUserInput>
    create: XOR<sellerCreateWithoutUserInput, sellerUncheckedCreateWithoutUserInput>
  }

  export type sellerUpdateWithWhereUniqueWithoutUserInput = {
    where: sellerWhereUniqueInput
    data: XOR<sellerUpdateWithoutUserInput, sellerUncheckedUpdateWithoutUserInput>
  }

  export type sellerUpdateManyWithWhereWithoutUserInput = {
    where: sellerScalarWhereInput
    data: XOR<sellerUpdateManyMutationInput, sellerUncheckedUpdateManyWithoutUserInput>
  }

  export type sellerScalarWhereInput = {
    AND?: sellerScalarWhereInput | sellerScalarWhereInput[]
    OR?: sellerScalarWhereInput[]
    NOT?: sellerScalarWhereInput | sellerScalarWhereInput[]
    id?: StringFilter<"seller"> | string
    userId?: StringFilter<"seller"> | string
    shopName?: StringFilter<"seller"> | string
    shopAddress?: StringFilter<"seller"> | string
    categories?: JsonNullableFilter<"seller">
    logo?: StringFilter<"seller"> | string
    verified?: BoolFilter<"seller"> | boolean
  }

  export type brandsUpsertWithWhereUniqueWithoutUserInput = {
    where: brandsWhereUniqueInput
    update: XOR<brandsUpdateWithoutUserInput, brandsUncheckedUpdateWithoutUserInput>
    create: XOR<brandsCreateWithoutUserInput, brandsUncheckedCreateWithoutUserInput>
  }

  export type brandsUpdateWithWhereUniqueWithoutUserInput = {
    where: brandsWhereUniqueInput
    data: XOR<brandsUpdateWithoutUserInput, brandsUncheckedUpdateWithoutUserInput>
  }

  export type brandsUpdateManyWithWhereWithoutUserInput = {
    where: brandsScalarWhereInput
    data: XOR<brandsUpdateManyMutationInput, brandsUncheckedUpdateManyWithoutUserInput>
  }

  export type brandsScalarWhereInput = {
    AND?: brandsScalarWhereInput | brandsScalarWhereInput[]
    OR?: brandsScalarWhereInput[]
    NOT?: brandsScalarWhereInput | brandsScalarWhereInput[]
    id?: StringFilter<"brands"> | string
    userId?: StringFilter<"brands"> | string
    brandName?: StringFilter<"brands"> | string
    brandAddress?: StringFilter<"brands"> | string
    brandIcon?: StringFilter<"brands"> | string
    categories?: JsonNullableFilter<"brands">
    verified?: BoolFilter<"brands"> | boolean
  }

  export type productsUpsertWithWhereUniqueWithoutUserInput = {
    where: productsWhereUniqueInput
    update: XOR<productsUpdateWithoutUserInput, productsUncheckedUpdateWithoutUserInput>
    create: XOR<productsCreateWithoutUserInput, productsUncheckedCreateWithoutUserInput>
  }

  export type productsUpdateWithWhereUniqueWithoutUserInput = {
    where: productsWhereUniqueInput
    data: XOR<productsUpdateWithoutUserInput, productsUncheckedUpdateWithoutUserInput>
  }

  export type productsUpdateManyWithWhereWithoutUserInput = {
    where: productsScalarWhereInput
    data: XOR<productsUpdateManyMutationInput, productsUncheckedUpdateManyWithoutUserInput>
  }

  export type productsScalarWhereInput = {
    AND?: productsScalarWhereInput | productsScalarWhereInput[]
    OR?: productsScalarWhereInput[]
    NOT?: productsScalarWhereInput | productsScalarWhereInput[]
    id?: StringFilter<"products"> | string
    price?: IntFilter<"products"> | number
    coin?: BoolFilter<"products"> | boolean
    title?: StringFilter<"products"> | string
    description?: StringFilter<"products"> | string
    thumbnail?: StringFilter<"products"> | string
    quantity?: IntFilter<"products"> | number
    minOrder?: IntFilter<"products"> | number
    freeCoin?: IntFilter<"products"> | number
    offer?: IntFilter<"products"> | number
    percentage?: BoolFilter<"products"> | boolean
    freeDelivery?: BoolFilter<"products"> | boolean
    fixedPrice?: BoolFilter<"products"> | boolean
    createdAt?: DateTimeFilter<"products"> | Date | string
    colorId?: StringFilter<"products"> | string
    sizeId?: StringFilter<"products"> | string
    specificationsId?: StringFilter<"products"> | string
    images?: JsonNullableFilter<"products">
    verified?: BoolFilter<"products"> | boolean
    sellerId?: StringNullableFilter<"products"> | string | null
    brandId?: StringNullableFilter<"products"> | string | null
    categoryId?: StringFilter<"products"> | string
    subCategoryId?: StringFilter<"products"> | string
    optionId?: StringFilter<"products"> | string
    userId?: StringFilter<"products"> | string
  }

  export type commentsUpsertWithWhereUniqueWithoutUserInput = {
    where: commentsWhereUniqueInput
    update: XOR<commentsUpdateWithoutUserInput, commentsUncheckedUpdateWithoutUserInput>
    create: XOR<commentsCreateWithoutUserInput, commentsUncheckedCreateWithoutUserInput>
  }

  export type commentsUpdateWithWhereUniqueWithoutUserInput = {
    where: commentsWhereUniqueInput
    data: XOR<commentsUpdateWithoutUserInput, commentsUncheckedUpdateWithoutUserInput>
  }

  export type commentsUpdateManyWithWhereWithoutUserInput = {
    where: commentsScalarWhereInput
    data: XOR<commentsUpdateManyMutationInput, commentsUncheckedUpdateManyWithoutUserInput>
  }

  export type commentsScalarWhereInput = {
    AND?: commentsScalarWhereInput | commentsScalarWhereInput[]
    OR?: commentsScalarWhereInput[]
    NOT?: commentsScalarWhereInput | commentsScalarWhereInput[]
    id?: StringFilter<"comments"> | string
    message?: StringFilter<"comments"> | string
    image?: StringNullableFilter<"comments"> | string | null
    replay?: StringNullableFilter<"comments"> | string | null
    userId?: StringFilter<"comments"> | string
    productId?: StringFilter<"comments"> | string
    receiverId?: StringFilter<"comments"> | string
  }

  export type reviewsUpsertWithWhereUniqueWithoutUserInput = {
    where: reviewsWhereUniqueInput
    update: XOR<reviewsUpdateWithoutUserInput, reviewsUncheckedUpdateWithoutUserInput>
    create: XOR<reviewsCreateWithoutUserInput, reviewsUncheckedCreateWithoutUserInput>
  }

  export type reviewsUpdateWithWhereUniqueWithoutUserInput = {
    where: reviewsWhereUniqueInput
    data: XOR<reviewsUpdateWithoutUserInput, reviewsUncheckedUpdateWithoutUserInput>
  }

  export type reviewsUpdateManyWithWhereWithoutUserInput = {
    where: reviewsScalarWhereInput
    data: XOR<reviewsUpdateManyMutationInput, reviewsUncheckedUpdateManyWithoutUserInput>
  }

  export type reviewsScalarWhereInput = {
    AND?: reviewsScalarWhereInput | reviewsScalarWhereInput[]
    OR?: reviewsScalarWhereInput[]
    NOT?: reviewsScalarWhereInput | reviewsScalarWhereInput[]
    id?: StringFilter<"reviews"> | string
    message?: StringFilter<"reviews"> | string
    rate?: IntFilter<"reviews"> | number
    userId?: StringFilter<"reviews"> | string
    productId?: StringFilter<"reviews"> | string
    sellerId?: StringNullableFilter<"reviews"> | string | null
    brandId?: StringNullableFilter<"reviews"> | string | null
  }

  export type notificationsUpsertWithWhereUniqueWithoutUserInput = {
    where: notificationsWhereUniqueInput
    update: XOR<notificationsUpdateWithoutUserInput, notificationsUncheckedUpdateWithoutUserInput>
    create: XOR<notificationsCreateWithoutUserInput, notificationsUncheckedCreateWithoutUserInput>
  }

  export type notificationsUpdateWithWhereUniqueWithoutUserInput = {
    where: notificationsWhereUniqueInput
    data: XOR<notificationsUpdateWithoutUserInput, notificationsUncheckedUpdateWithoutUserInput>
  }

  export type notificationsUpdateManyWithWhereWithoutUserInput = {
    where: notificationsScalarWhereInput
    data: XOR<notificationsUpdateManyMutationInput, notificationsUncheckedUpdateManyWithoutUserInput>
  }

  export type notificationsScalarWhereInput = {
    AND?: notificationsScalarWhereInput | notificationsScalarWhereInput[]
    OR?: notificationsScalarWhereInput[]
    NOT?: notificationsScalarWhereInput | notificationsScalarWhereInput[]
    id?: StringFilter<"notifications"> | string
    message?: StringFilter<"notifications"> | string
    title?: StringFilter<"notifications"> | string
    userId?: StringFilter<"notifications"> | string
    commentId?: StringFilter<"notifications"> | string
    reviewId?: StringFilter<"notifications"> | string
  }

  export type flashSellProductUpsertWithWhereUniqueWithoutUserInput = {
    where: flashSellProductWhereUniqueInput
    update: XOR<flashSellProductUpdateWithoutUserInput, flashSellProductUncheckedUpdateWithoutUserInput>
    create: XOR<flashSellProductCreateWithoutUserInput, flashSellProductUncheckedCreateWithoutUserInput>
  }

  export type flashSellProductUpdateWithWhereUniqueWithoutUserInput = {
    where: flashSellProductWhereUniqueInput
    data: XOR<flashSellProductUpdateWithoutUserInput, flashSellProductUncheckedUpdateWithoutUserInput>
  }

  export type flashSellProductUpdateManyWithWhereWithoutUserInput = {
    where: flashSellProductScalarWhereInput
    data: XOR<flashSellProductUpdateManyMutationInput, flashSellProductUncheckedUpdateManyWithoutUserInput>
  }

  export type flashSellProductScalarWhereInput = {
    AND?: flashSellProductScalarWhereInput | flashSellProductScalarWhereInput[]
    OR?: flashSellProductScalarWhereInput[]
    NOT?: flashSellProductScalarWhereInput | flashSellProductScalarWhereInput[]
    id?: StringFilter<"flashSellProduct"> | string
    offer?: IntFilter<"flashSellProduct"> | number
    percentage?: BoolFilter<"flashSellProduct"> | boolean
    minSell?: IntFilter<"flashSellProduct"> | number
    quantity?: IntFilter<"flashSellProduct"> | number
    deliveryFree?: BoolFilter<"flashSellProduct"> | boolean
    flashSellId?: StringFilter<"flashSellProduct"> | string
    productId?: StringFilter<"flashSellProduct"> | string
    userId?: StringFilter<"flashSellProduct"> | string
    createdAt?: DateTimeFilter<"flashSellProduct"> | Date | string
  }

  export type conversationsUpsertWithWhereUniqueWithoutSenderInput = {
    where: conversationsWhereUniqueInput
    update: XOR<conversationsUpdateWithoutSenderInput, conversationsUncheckedUpdateWithoutSenderInput>
    create: XOR<conversationsCreateWithoutSenderInput, conversationsUncheckedCreateWithoutSenderInput>
  }

  export type conversationsUpdateWithWhereUniqueWithoutSenderInput = {
    where: conversationsWhereUniqueInput
    data: XOR<conversationsUpdateWithoutSenderInput, conversationsUncheckedUpdateWithoutSenderInput>
  }

  export type conversationsUpdateManyWithWhereWithoutSenderInput = {
    where: conversationsScalarWhereInput
    data: XOR<conversationsUpdateManyMutationInput, conversationsUncheckedUpdateManyWithoutSenderInput>
  }

  export type conversationsScalarWhereInput = {
    AND?: conversationsScalarWhereInput | conversationsScalarWhereInput[]
    OR?: conversationsScalarWhereInput[]
    NOT?: conversationsScalarWhereInput | conversationsScalarWhereInput[]
    id?: StringFilter<"conversations"> | string
    senderId?: StringFilter<"conversations"> | string
    receiverId?: StringFilter<"conversations"> | string
    date?: DateTimeFilter<"conversations"> | Date | string
  }

  export type ordersUpsertWithWhereUniqueWithoutBuyerInput = {
    where: ordersWhereUniqueInput
    update: XOR<ordersUpdateWithoutBuyerInput, ordersUncheckedUpdateWithoutBuyerInput>
    create: XOR<ordersCreateWithoutBuyerInput, ordersUncheckedCreateWithoutBuyerInput>
  }

  export type ordersUpdateWithWhereUniqueWithoutBuyerInput = {
    where: ordersWhereUniqueInput
    data: XOR<ordersUpdateWithoutBuyerInput, ordersUncheckedUpdateWithoutBuyerInput>
  }

  export type ordersUpdateManyWithWhereWithoutBuyerInput = {
    where: ordersScalarWhereInput
    data: XOR<ordersUpdateManyMutationInput, ordersUncheckedUpdateManyWithoutBuyerInput>
  }

  export type ordersScalarWhereInput = {
    AND?: ordersScalarWhereInput | ordersScalarWhereInput[]
    OR?: ordersScalarWhereInput[]
    NOT?: ordersScalarWhereInput | ordersScalarWhereInput[]
    id?: StringFilter<"orders"> | string
    buyerid?: StringFilter<"orders"> | string
    productId?: StringFilter<"orders"> | string
    offerPrice?: IntFilter<"orders"> | number
    date?: DateTimeFilter<"orders"> | Date | string
  }

  export type subCategoryCreateWithoutCategoryInput = {
    id?: string
    name: string
    options?: optionsCreateNestedManyWithoutSubCategoryInput
    products?: productsCreateNestedManyWithoutSubCategoryInput
  }

  export type subCategoryUncheckedCreateWithoutCategoryInput = {
    id?: string
    name: string
    options?: optionsUncheckedCreateNestedManyWithoutSubCategoryInput
    products?: productsUncheckedCreateNestedManyWithoutSubCategoryInput
  }

  export type subCategoryCreateOrConnectWithoutCategoryInput = {
    where: subCategoryWhereUniqueInput
    create: XOR<subCategoryCreateWithoutCategoryInput, subCategoryUncheckedCreateWithoutCategoryInput>
  }

  export type subCategoryCreateManyCategoryInputEnvelope = {
    data: subCategoryCreateManyCategoryInput | subCategoryCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type productsCreateWithoutCategoryInput = {
    id?: string
    price: number
    coin?: boolean
    title: string
    description: string
    thumbnail: string
    quantity?: number
    minOrder?: number
    freeCoin?: number
    offer?: number
    percentage?: boolean
    freeDelivery?: boolean
    fixedPrice?: boolean
    createdAt?: Date | string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean
    colors?: colorsCreateNestedOneWithoutProductsInput
    size?: sizeCreateNestedOneWithoutProductsInput
    specification?: specificationsCreateNestedOneWithoutProductsInput
    comments?: commentsCreateNestedManyWithoutProductInput
    reviews?: reviewsCreateNestedManyWithoutProductInput
    flashSellProduct?: flashSellProductCreateNestedManyWithoutProductInput
    seller?: sellerCreateNestedOneWithoutProductsInput
    brand?: brandsCreateNestedOneWithoutProductsInput
    subCategory?: subCategoryCreateNestedOneWithoutProductsInput
    option?: optionsCreateNestedOneWithoutProductsInput
    user?: usersCreateNestedOneWithoutProductsInput
    banner?: bannerCreateNestedManyWithoutProductInput
    adds?: addsCreateNestedManyWithoutProductInput
    messages?: messagesCreateNestedManyWithoutProductInput
    orders?: ordersCreateNestedManyWithoutProductInput
  }

  export type productsUncheckedCreateWithoutCategoryInput = {
    id?: string
    price: number
    coin?: boolean
    title: string
    description: string
    thumbnail: string
    quantity?: number
    minOrder?: number
    freeCoin?: number
    offer?: number
    percentage?: boolean
    freeDelivery?: boolean
    fixedPrice?: boolean
    createdAt?: Date | string
    colorId: string
    sizeId: string
    specificationsId: string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean
    sellerId?: string | null
    brandId?: string | null
    subCategoryId: string
    optionId: string
    userId: string
    comments?: commentsUncheckedCreateNestedManyWithoutProductInput
    reviews?: reviewsUncheckedCreateNestedManyWithoutProductInput
    flashSellProduct?: flashSellProductUncheckedCreateNestedManyWithoutProductInput
    banner?: bannerUncheckedCreateNestedManyWithoutProductInput
    adds?: addsUncheckedCreateNestedManyWithoutProductInput
    messages?: messagesUncheckedCreateNestedManyWithoutProductInput
    orders?: ordersUncheckedCreateNestedManyWithoutProductInput
  }

  export type productsCreateOrConnectWithoutCategoryInput = {
    where: productsWhereUniqueInput
    create: XOR<productsCreateWithoutCategoryInput, productsUncheckedCreateWithoutCategoryInput>
  }

  export type productsCreateManyCategoryInputEnvelope = {
    data: productsCreateManyCategoryInput | productsCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type subCategoryUpsertWithWhereUniqueWithoutCategoryInput = {
    where: subCategoryWhereUniqueInput
    update: XOR<subCategoryUpdateWithoutCategoryInput, subCategoryUncheckedUpdateWithoutCategoryInput>
    create: XOR<subCategoryCreateWithoutCategoryInput, subCategoryUncheckedCreateWithoutCategoryInput>
  }

  export type subCategoryUpdateWithWhereUniqueWithoutCategoryInput = {
    where: subCategoryWhereUniqueInput
    data: XOR<subCategoryUpdateWithoutCategoryInput, subCategoryUncheckedUpdateWithoutCategoryInput>
  }

  export type subCategoryUpdateManyWithWhereWithoutCategoryInput = {
    where: subCategoryScalarWhereInput
    data: XOR<subCategoryUpdateManyMutationInput, subCategoryUncheckedUpdateManyWithoutCategoryInput>
  }

  export type subCategoryScalarWhereInput = {
    AND?: subCategoryScalarWhereInput | subCategoryScalarWhereInput[]
    OR?: subCategoryScalarWhereInput[]
    NOT?: subCategoryScalarWhereInput | subCategoryScalarWhereInput[]
    id?: StringFilter<"subCategory"> | string
    name?: StringFilter<"subCategory"> | string
    categoryId?: StringFilter<"subCategory"> | string
  }

  export type productsUpsertWithWhereUniqueWithoutCategoryInput = {
    where: productsWhereUniqueInput
    update: XOR<productsUpdateWithoutCategoryInput, productsUncheckedUpdateWithoutCategoryInput>
    create: XOR<productsCreateWithoutCategoryInput, productsUncheckedCreateWithoutCategoryInput>
  }

  export type productsUpdateWithWhereUniqueWithoutCategoryInput = {
    where: productsWhereUniqueInput
    data: XOR<productsUpdateWithoutCategoryInput, productsUncheckedUpdateWithoutCategoryInput>
  }

  export type productsUpdateManyWithWhereWithoutCategoryInput = {
    where: productsScalarWhereInput
    data: XOR<productsUpdateManyMutationInput, productsUncheckedUpdateManyWithoutCategoryInput>
  }

  export type categoryCreateWithoutSubCategoryInput = {
    id?: string
    name: string
    icon: string
    products?: productsCreateNestedManyWithoutCategoryInput
  }

  export type categoryUncheckedCreateWithoutSubCategoryInput = {
    id?: string
    name: string
    icon: string
    products?: productsUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type categoryCreateOrConnectWithoutSubCategoryInput = {
    where: categoryWhereUniqueInput
    create: XOR<categoryCreateWithoutSubCategoryInput, categoryUncheckedCreateWithoutSubCategoryInput>
  }

  export type optionsCreateWithoutSubCategoryInput = {
    id?: string
    name: string
    products?: productsCreateNestedManyWithoutOptionInput
  }

  export type optionsUncheckedCreateWithoutSubCategoryInput = {
    id?: string
    name: string
    products?: productsUncheckedCreateNestedManyWithoutOptionInput
  }

  export type optionsCreateOrConnectWithoutSubCategoryInput = {
    where: optionsWhereUniqueInput
    create: XOR<optionsCreateWithoutSubCategoryInput, optionsUncheckedCreateWithoutSubCategoryInput>
  }

  export type optionsCreateManySubCategoryInputEnvelope = {
    data: optionsCreateManySubCategoryInput | optionsCreateManySubCategoryInput[]
    skipDuplicates?: boolean
  }

  export type productsCreateWithoutSubCategoryInput = {
    id?: string
    price: number
    coin?: boolean
    title: string
    description: string
    thumbnail: string
    quantity?: number
    minOrder?: number
    freeCoin?: number
    offer?: number
    percentage?: boolean
    freeDelivery?: boolean
    fixedPrice?: boolean
    createdAt?: Date | string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean
    colors?: colorsCreateNestedOneWithoutProductsInput
    size?: sizeCreateNestedOneWithoutProductsInput
    specification?: specificationsCreateNestedOneWithoutProductsInput
    comments?: commentsCreateNestedManyWithoutProductInput
    reviews?: reviewsCreateNestedManyWithoutProductInput
    flashSellProduct?: flashSellProductCreateNestedManyWithoutProductInput
    seller?: sellerCreateNestedOneWithoutProductsInput
    brand?: brandsCreateNestedOneWithoutProductsInput
    category?: categoryCreateNestedOneWithoutProductsInput
    option?: optionsCreateNestedOneWithoutProductsInput
    user?: usersCreateNestedOneWithoutProductsInput
    banner?: bannerCreateNestedManyWithoutProductInput
    adds?: addsCreateNestedManyWithoutProductInput
    messages?: messagesCreateNestedManyWithoutProductInput
    orders?: ordersCreateNestedManyWithoutProductInput
  }

  export type productsUncheckedCreateWithoutSubCategoryInput = {
    id?: string
    price: number
    coin?: boolean
    title: string
    description: string
    thumbnail: string
    quantity?: number
    minOrder?: number
    freeCoin?: number
    offer?: number
    percentage?: boolean
    freeDelivery?: boolean
    fixedPrice?: boolean
    createdAt?: Date | string
    colorId: string
    sizeId: string
    specificationsId: string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean
    sellerId?: string | null
    brandId?: string | null
    categoryId: string
    optionId: string
    userId: string
    comments?: commentsUncheckedCreateNestedManyWithoutProductInput
    reviews?: reviewsUncheckedCreateNestedManyWithoutProductInput
    flashSellProduct?: flashSellProductUncheckedCreateNestedManyWithoutProductInput
    banner?: bannerUncheckedCreateNestedManyWithoutProductInput
    adds?: addsUncheckedCreateNestedManyWithoutProductInput
    messages?: messagesUncheckedCreateNestedManyWithoutProductInput
    orders?: ordersUncheckedCreateNestedManyWithoutProductInput
  }

  export type productsCreateOrConnectWithoutSubCategoryInput = {
    where: productsWhereUniqueInput
    create: XOR<productsCreateWithoutSubCategoryInput, productsUncheckedCreateWithoutSubCategoryInput>
  }

  export type productsCreateManySubCategoryInputEnvelope = {
    data: productsCreateManySubCategoryInput | productsCreateManySubCategoryInput[]
    skipDuplicates?: boolean
  }

  export type categoryUpsertWithoutSubCategoryInput = {
    update: XOR<categoryUpdateWithoutSubCategoryInput, categoryUncheckedUpdateWithoutSubCategoryInput>
    create: XOR<categoryCreateWithoutSubCategoryInput, categoryUncheckedCreateWithoutSubCategoryInput>
    where?: categoryWhereInput
  }

  export type categoryUpdateToOneWithWhereWithoutSubCategoryInput = {
    where?: categoryWhereInput
    data: XOR<categoryUpdateWithoutSubCategoryInput, categoryUncheckedUpdateWithoutSubCategoryInput>
  }

  export type categoryUpdateWithoutSubCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    products?: productsUpdateManyWithoutCategoryNestedInput
  }

  export type categoryUncheckedUpdateWithoutSubCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    products?: productsUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type optionsUpsertWithWhereUniqueWithoutSubCategoryInput = {
    where: optionsWhereUniqueInput
    update: XOR<optionsUpdateWithoutSubCategoryInput, optionsUncheckedUpdateWithoutSubCategoryInput>
    create: XOR<optionsCreateWithoutSubCategoryInput, optionsUncheckedCreateWithoutSubCategoryInput>
  }

  export type optionsUpdateWithWhereUniqueWithoutSubCategoryInput = {
    where: optionsWhereUniqueInput
    data: XOR<optionsUpdateWithoutSubCategoryInput, optionsUncheckedUpdateWithoutSubCategoryInput>
  }

  export type optionsUpdateManyWithWhereWithoutSubCategoryInput = {
    where: optionsScalarWhereInput
    data: XOR<optionsUpdateManyMutationInput, optionsUncheckedUpdateManyWithoutSubCategoryInput>
  }

  export type optionsScalarWhereInput = {
    AND?: optionsScalarWhereInput | optionsScalarWhereInput[]
    OR?: optionsScalarWhereInput[]
    NOT?: optionsScalarWhereInput | optionsScalarWhereInput[]
    id?: StringFilter<"options"> | string
    name?: StringFilter<"options"> | string
    subCategoryId?: StringFilter<"options"> | string
  }

  export type productsUpsertWithWhereUniqueWithoutSubCategoryInput = {
    where: productsWhereUniqueInput
    update: XOR<productsUpdateWithoutSubCategoryInput, productsUncheckedUpdateWithoutSubCategoryInput>
    create: XOR<productsCreateWithoutSubCategoryInput, productsUncheckedCreateWithoutSubCategoryInput>
  }

  export type productsUpdateWithWhereUniqueWithoutSubCategoryInput = {
    where: productsWhereUniqueInput
    data: XOR<productsUpdateWithoutSubCategoryInput, productsUncheckedUpdateWithoutSubCategoryInput>
  }

  export type productsUpdateManyWithWhereWithoutSubCategoryInput = {
    where: productsScalarWhereInput
    data: XOR<productsUpdateManyMutationInput, productsUncheckedUpdateManyWithoutSubCategoryInput>
  }

  export type subCategoryCreateWithoutOptionsInput = {
    id?: string
    name: string
    category?: categoryCreateNestedOneWithoutSubCategoryInput
    products?: productsCreateNestedManyWithoutSubCategoryInput
  }

  export type subCategoryUncheckedCreateWithoutOptionsInput = {
    id?: string
    name: string
    categoryId: string
    products?: productsUncheckedCreateNestedManyWithoutSubCategoryInput
  }

  export type subCategoryCreateOrConnectWithoutOptionsInput = {
    where: subCategoryWhereUniqueInput
    create: XOR<subCategoryCreateWithoutOptionsInput, subCategoryUncheckedCreateWithoutOptionsInput>
  }

  export type productsCreateWithoutOptionInput = {
    id?: string
    price: number
    coin?: boolean
    title: string
    description: string
    thumbnail: string
    quantity?: number
    minOrder?: number
    freeCoin?: number
    offer?: number
    percentage?: boolean
    freeDelivery?: boolean
    fixedPrice?: boolean
    createdAt?: Date | string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean
    colors?: colorsCreateNestedOneWithoutProductsInput
    size?: sizeCreateNestedOneWithoutProductsInput
    specification?: specificationsCreateNestedOneWithoutProductsInput
    comments?: commentsCreateNestedManyWithoutProductInput
    reviews?: reviewsCreateNestedManyWithoutProductInput
    flashSellProduct?: flashSellProductCreateNestedManyWithoutProductInput
    seller?: sellerCreateNestedOneWithoutProductsInput
    brand?: brandsCreateNestedOneWithoutProductsInput
    category?: categoryCreateNestedOneWithoutProductsInput
    subCategory?: subCategoryCreateNestedOneWithoutProductsInput
    user?: usersCreateNestedOneWithoutProductsInput
    banner?: bannerCreateNestedManyWithoutProductInput
    adds?: addsCreateNestedManyWithoutProductInput
    messages?: messagesCreateNestedManyWithoutProductInput
    orders?: ordersCreateNestedManyWithoutProductInput
  }

  export type productsUncheckedCreateWithoutOptionInput = {
    id?: string
    price: number
    coin?: boolean
    title: string
    description: string
    thumbnail: string
    quantity?: number
    minOrder?: number
    freeCoin?: number
    offer?: number
    percentage?: boolean
    freeDelivery?: boolean
    fixedPrice?: boolean
    createdAt?: Date | string
    colorId: string
    sizeId: string
    specificationsId: string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean
    sellerId?: string | null
    brandId?: string | null
    categoryId: string
    subCategoryId: string
    userId: string
    comments?: commentsUncheckedCreateNestedManyWithoutProductInput
    reviews?: reviewsUncheckedCreateNestedManyWithoutProductInput
    flashSellProduct?: flashSellProductUncheckedCreateNestedManyWithoutProductInput
    banner?: bannerUncheckedCreateNestedManyWithoutProductInput
    adds?: addsUncheckedCreateNestedManyWithoutProductInput
    messages?: messagesUncheckedCreateNestedManyWithoutProductInput
    orders?: ordersUncheckedCreateNestedManyWithoutProductInput
  }

  export type productsCreateOrConnectWithoutOptionInput = {
    where: productsWhereUniqueInput
    create: XOR<productsCreateWithoutOptionInput, productsUncheckedCreateWithoutOptionInput>
  }

  export type productsCreateManyOptionInputEnvelope = {
    data: productsCreateManyOptionInput | productsCreateManyOptionInput[]
    skipDuplicates?: boolean
  }

  export type subCategoryUpsertWithoutOptionsInput = {
    update: XOR<subCategoryUpdateWithoutOptionsInput, subCategoryUncheckedUpdateWithoutOptionsInput>
    create: XOR<subCategoryCreateWithoutOptionsInput, subCategoryUncheckedCreateWithoutOptionsInput>
    where?: subCategoryWhereInput
  }

  export type subCategoryUpdateToOneWithWhereWithoutOptionsInput = {
    where?: subCategoryWhereInput
    data: XOR<subCategoryUpdateWithoutOptionsInput, subCategoryUncheckedUpdateWithoutOptionsInput>
  }

  export type subCategoryUpdateWithoutOptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: categoryUpdateOneWithoutSubCategoryNestedInput
    products?: productsUpdateManyWithoutSubCategoryNestedInput
  }

  export type subCategoryUncheckedUpdateWithoutOptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    products?: productsUncheckedUpdateManyWithoutSubCategoryNestedInput
  }

  export type productsUpsertWithWhereUniqueWithoutOptionInput = {
    where: productsWhereUniqueInput
    update: XOR<productsUpdateWithoutOptionInput, productsUncheckedUpdateWithoutOptionInput>
    create: XOR<productsCreateWithoutOptionInput, productsUncheckedCreateWithoutOptionInput>
  }

  export type productsUpdateWithWhereUniqueWithoutOptionInput = {
    where: productsWhereUniqueInput
    data: XOR<productsUpdateWithoutOptionInput, productsUncheckedUpdateWithoutOptionInput>
  }

  export type productsUpdateManyWithWhereWithoutOptionInput = {
    where: productsScalarWhereInput
    data: XOR<productsUpdateManyMutationInput, productsUncheckedUpdateManyWithoutOptionInput>
  }

  export type usersCreateWithoutSellerInput = {
    id?: string
    email?: string | null
    name: string
    image?: string | null
    phone?: string | null
    birthday?: string | null
    gender?: string | null
    role?: number
    uid: string
    address?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    pushToken?: string | null
    verified?: boolean
    brand?: brandsCreateNestedManyWithoutUserInput
    products?: productsCreateNestedManyWithoutUserInput
    comments?: commentsCreateNestedManyWithoutUserInput
    reviews?: reviewsCreateNestedManyWithoutUserInput
    notifications?: notificationsCreateNestedManyWithoutUserInput
    flashSellProduct?: flashSellProductCreateNestedManyWithoutUserInput
    conversations?: conversationsCreateNestedManyWithoutSenderInput
    orders?: ordersCreateNestedManyWithoutBuyerInput
  }

  export type usersUncheckedCreateWithoutSellerInput = {
    id?: string
    email?: string | null
    name: string
    image?: string | null
    phone?: string | null
    birthday?: string | null
    gender?: string | null
    role?: number
    uid: string
    address?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    pushToken?: string | null
    verified?: boolean
    brand?: brandsUncheckedCreateNestedManyWithoutUserInput
    products?: productsUncheckedCreateNestedManyWithoutUserInput
    comments?: commentsUncheckedCreateNestedManyWithoutUserInput
    reviews?: reviewsUncheckedCreateNestedManyWithoutUserInput
    notifications?: notificationsUncheckedCreateNestedManyWithoutUserInput
    flashSellProduct?: flashSellProductUncheckedCreateNestedManyWithoutUserInput
    conversations?: conversationsUncheckedCreateNestedManyWithoutSenderInput
    orders?: ordersUncheckedCreateNestedManyWithoutBuyerInput
  }

  export type usersCreateOrConnectWithoutSellerInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutSellerInput, usersUncheckedCreateWithoutSellerInput>
  }

  export type productsCreateWithoutSellerInput = {
    id?: string
    price: number
    coin?: boolean
    title: string
    description: string
    thumbnail: string
    quantity?: number
    minOrder?: number
    freeCoin?: number
    offer?: number
    percentage?: boolean
    freeDelivery?: boolean
    fixedPrice?: boolean
    createdAt?: Date | string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean
    colors?: colorsCreateNestedOneWithoutProductsInput
    size?: sizeCreateNestedOneWithoutProductsInput
    specification?: specificationsCreateNestedOneWithoutProductsInput
    comments?: commentsCreateNestedManyWithoutProductInput
    reviews?: reviewsCreateNestedManyWithoutProductInput
    flashSellProduct?: flashSellProductCreateNestedManyWithoutProductInput
    brand?: brandsCreateNestedOneWithoutProductsInput
    category?: categoryCreateNestedOneWithoutProductsInput
    subCategory?: subCategoryCreateNestedOneWithoutProductsInput
    option?: optionsCreateNestedOneWithoutProductsInput
    user?: usersCreateNestedOneWithoutProductsInput
    banner?: bannerCreateNestedManyWithoutProductInput
    adds?: addsCreateNestedManyWithoutProductInput
    messages?: messagesCreateNestedManyWithoutProductInput
    orders?: ordersCreateNestedManyWithoutProductInput
  }

  export type productsUncheckedCreateWithoutSellerInput = {
    id?: string
    price: number
    coin?: boolean
    title: string
    description: string
    thumbnail: string
    quantity?: number
    minOrder?: number
    freeCoin?: number
    offer?: number
    percentage?: boolean
    freeDelivery?: boolean
    fixedPrice?: boolean
    createdAt?: Date | string
    colorId: string
    sizeId: string
    specificationsId: string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean
    brandId?: string | null
    categoryId: string
    subCategoryId: string
    optionId: string
    userId: string
    comments?: commentsUncheckedCreateNestedManyWithoutProductInput
    reviews?: reviewsUncheckedCreateNestedManyWithoutProductInput
    flashSellProduct?: flashSellProductUncheckedCreateNestedManyWithoutProductInput
    banner?: bannerUncheckedCreateNestedManyWithoutProductInput
    adds?: addsUncheckedCreateNestedManyWithoutProductInput
    messages?: messagesUncheckedCreateNestedManyWithoutProductInput
    orders?: ordersUncheckedCreateNestedManyWithoutProductInput
  }

  export type productsCreateOrConnectWithoutSellerInput = {
    where: productsWhereUniqueInput
    create: XOR<productsCreateWithoutSellerInput, productsUncheckedCreateWithoutSellerInput>
  }

  export type productsCreateManySellerInputEnvelope = {
    data: productsCreateManySellerInput | productsCreateManySellerInput[]
    skipDuplicates?: boolean
  }

  export type reviewsCreateWithoutSellerInput = {
    id?: string
    message: string
    rate?: number
    user?: usersCreateNestedOneWithoutReviewsInput
    product?: productsCreateNestedOneWithoutReviewsInput
    notifications?: notificationsCreateNestedManyWithoutReviewsInput
    brand?: brandsCreateNestedOneWithoutReviewsInput
  }

  export type reviewsUncheckedCreateWithoutSellerInput = {
    id?: string
    message: string
    rate?: number
    userId: string
    productId: string
    brandId?: string | null
    notifications?: notificationsUncheckedCreateNestedManyWithoutReviewsInput
  }

  export type reviewsCreateOrConnectWithoutSellerInput = {
    where: reviewsWhereUniqueInput
    create: XOR<reviewsCreateWithoutSellerInput, reviewsUncheckedCreateWithoutSellerInput>
  }

  export type reviewsCreateManySellerInputEnvelope = {
    data: reviewsCreateManySellerInput | reviewsCreateManySellerInput[]
    skipDuplicates?: boolean
  }

  export type usersUpsertWithoutSellerInput = {
    update: XOR<usersUpdateWithoutSellerInput, usersUncheckedUpdateWithoutSellerInput>
    create: XOR<usersCreateWithoutSellerInput, usersUncheckedCreateWithoutSellerInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutSellerInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutSellerInput, usersUncheckedUpdateWithoutSellerInput>
  }

  export type usersUpdateWithoutSellerInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    role?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    address?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pushToken?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    brand?: brandsUpdateManyWithoutUserNestedInput
    products?: productsUpdateManyWithoutUserNestedInput
    comments?: commentsUpdateManyWithoutUserNestedInput
    reviews?: reviewsUpdateManyWithoutUserNestedInput
    notifications?: notificationsUpdateManyWithoutUserNestedInput
    flashSellProduct?: flashSellProductUpdateManyWithoutUserNestedInput
    conversations?: conversationsUpdateManyWithoutSenderNestedInput
    orders?: ordersUpdateManyWithoutBuyerNestedInput
  }

  export type usersUncheckedUpdateWithoutSellerInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    role?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    address?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pushToken?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    brand?: brandsUncheckedUpdateManyWithoutUserNestedInput
    products?: productsUncheckedUpdateManyWithoutUserNestedInput
    comments?: commentsUncheckedUpdateManyWithoutUserNestedInput
    reviews?: reviewsUncheckedUpdateManyWithoutUserNestedInput
    notifications?: notificationsUncheckedUpdateManyWithoutUserNestedInput
    flashSellProduct?: flashSellProductUncheckedUpdateManyWithoutUserNestedInput
    conversations?: conversationsUncheckedUpdateManyWithoutSenderNestedInput
    orders?: ordersUncheckedUpdateManyWithoutBuyerNestedInput
  }

  export type productsUpsertWithWhereUniqueWithoutSellerInput = {
    where: productsWhereUniqueInput
    update: XOR<productsUpdateWithoutSellerInput, productsUncheckedUpdateWithoutSellerInput>
    create: XOR<productsCreateWithoutSellerInput, productsUncheckedCreateWithoutSellerInput>
  }

  export type productsUpdateWithWhereUniqueWithoutSellerInput = {
    where: productsWhereUniqueInput
    data: XOR<productsUpdateWithoutSellerInput, productsUncheckedUpdateWithoutSellerInput>
  }

  export type productsUpdateManyWithWhereWithoutSellerInput = {
    where: productsScalarWhereInput
    data: XOR<productsUpdateManyMutationInput, productsUncheckedUpdateManyWithoutSellerInput>
  }

  export type reviewsUpsertWithWhereUniqueWithoutSellerInput = {
    where: reviewsWhereUniqueInput
    update: XOR<reviewsUpdateWithoutSellerInput, reviewsUncheckedUpdateWithoutSellerInput>
    create: XOR<reviewsCreateWithoutSellerInput, reviewsUncheckedCreateWithoutSellerInput>
  }

  export type reviewsUpdateWithWhereUniqueWithoutSellerInput = {
    where: reviewsWhereUniqueInput
    data: XOR<reviewsUpdateWithoutSellerInput, reviewsUncheckedUpdateWithoutSellerInput>
  }

  export type reviewsUpdateManyWithWhereWithoutSellerInput = {
    where: reviewsScalarWhereInput
    data: XOR<reviewsUpdateManyMutationInput, reviewsUncheckedUpdateManyWithoutSellerInput>
  }

  export type usersCreateWithoutBrandInput = {
    id?: string
    email?: string | null
    name: string
    image?: string | null
    phone?: string | null
    birthday?: string | null
    gender?: string | null
    role?: number
    uid: string
    address?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    pushToken?: string | null
    verified?: boolean
    seller?: sellerCreateNestedManyWithoutUserInput
    products?: productsCreateNestedManyWithoutUserInput
    comments?: commentsCreateNestedManyWithoutUserInput
    reviews?: reviewsCreateNestedManyWithoutUserInput
    notifications?: notificationsCreateNestedManyWithoutUserInput
    flashSellProduct?: flashSellProductCreateNestedManyWithoutUserInput
    conversations?: conversationsCreateNestedManyWithoutSenderInput
    orders?: ordersCreateNestedManyWithoutBuyerInput
  }

  export type usersUncheckedCreateWithoutBrandInput = {
    id?: string
    email?: string | null
    name: string
    image?: string | null
    phone?: string | null
    birthday?: string | null
    gender?: string | null
    role?: number
    uid: string
    address?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    pushToken?: string | null
    verified?: boolean
    seller?: sellerUncheckedCreateNestedManyWithoutUserInput
    products?: productsUncheckedCreateNestedManyWithoutUserInput
    comments?: commentsUncheckedCreateNestedManyWithoutUserInput
    reviews?: reviewsUncheckedCreateNestedManyWithoutUserInput
    notifications?: notificationsUncheckedCreateNestedManyWithoutUserInput
    flashSellProduct?: flashSellProductUncheckedCreateNestedManyWithoutUserInput
    conversations?: conversationsUncheckedCreateNestedManyWithoutSenderInput
    orders?: ordersUncheckedCreateNestedManyWithoutBuyerInput
  }

  export type usersCreateOrConnectWithoutBrandInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutBrandInput, usersUncheckedCreateWithoutBrandInput>
  }

  export type productsCreateWithoutBrandInput = {
    id?: string
    price: number
    coin?: boolean
    title: string
    description: string
    thumbnail: string
    quantity?: number
    minOrder?: number
    freeCoin?: number
    offer?: number
    percentage?: boolean
    freeDelivery?: boolean
    fixedPrice?: boolean
    createdAt?: Date | string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean
    colors?: colorsCreateNestedOneWithoutProductsInput
    size?: sizeCreateNestedOneWithoutProductsInput
    specification?: specificationsCreateNestedOneWithoutProductsInput
    comments?: commentsCreateNestedManyWithoutProductInput
    reviews?: reviewsCreateNestedManyWithoutProductInput
    flashSellProduct?: flashSellProductCreateNestedManyWithoutProductInput
    seller?: sellerCreateNestedOneWithoutProductsInput
    category?: categoryCreateNestedOneWithoutProductsInput
    subCategory?: subCategoryCreateNestedOneWithoutProductsInput
    option?: optionsCreateNestedOneWithoutProductsInput
    user?: usersCreateNestedOneWithoutProductsInput
    banner?: bannerCreateNestedManyWithoutProductInput
    adds?: addsCreateNestedManyWithoutProductInput
    messages?: messagesCreateNestedManyWithoutProductInput
    orders?: ordersCreateNestedManyWithoutProductInput
  }

  export type productsUncheckedCreateWithoutBrandInput = {
    id?: string
    price: number
    coin?: boolean
    title: string
    description: string
    thumbnail: string
    quantity?: number
    minOrder?: number
    freeCoin?: number
    offer?: number
    percentage?: boolean
    freeDelivery?: boolean
    fixedPrice?: boolean
    createdAt?: Date | string
    colorId: string
    sizeId: string
    specificationsId: string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean
    sellerId?: string | null
    categoryId: string
    subCategoryId: string
    optionId: string
    userId: string
    comments?: commentsUncheckedCreateNestedManyWithoutProductInput
    reviews?: reviewsUncheckedCreateNestedManyWithoutProductInput
    flashSellProduct?: flashSellProductUncheckedCreateNestedManyWithoutProductInput
    banner?: bannerUncheckedCreateNestedManyWithoutProductInput
    adds?: addsUncheckedCreateNestedManyWithoutProductInput
    messages?: messagesUncheckedCreateNestedManyWithoutProductInput
    orders?: ordersUncheckedCreateNestedManyWithoutProductInput
  }

  export type productsCreateOrConnectWithoutBrandInput = {
    where: productsWhereUniqueInput
    create: XOR<productsCreateWithoutBrandInput, productsUncheckedCreateWithoutBrandInput>
  }

  export type productsCreateManyBrandInputEnvelope = {
    data: productsCreateManyBrandInput | productsCreateManyBrandInput[]
    skipDuplicates?: boolean
  }

  export type reviewsCreateWithoutBrandInput = {
    id?: string
    message: string
    rate?: number
    user?: usersCreateNestedOneWithoutReviewsInput
    product?: productsCreateNestedOneWithoutReviewsInput
    notifications?: notificationsCreateNestedManyWithoutReviewsInput
    seller?: sellerCreateNestedOneWithoutReviewsInput
  }

  export type reviewsUncheckedCreateWithoutBrandInput = {
    id?: string
    message: string
    rate?: number
    userId: string
    productId: string
    sellerId?: string | null
    notifications?: notificationsUncheckedCreateNestedManyWithoutReviewsInput
  }

  export type reviewsCreateOrConnectWithoutBrandInput = {
    where: reviewsWhereUniqueInput
    create: XOR<reviewsCreateWithoutBrandInput, reviewsUncheckedCreateWithoutBrandInput>
  }

  export type reviewsCreateManyBrandInputEnvelope = {
    data: reviewsCreateManyBrandInput | reviewsCreateManyBrandInput[]
    skipDuplicates?: boolean
  }

  export type usersUpsertWithoutBrandInput = {
    update: XOR<usersUpdateWithoutBrandInput, usersUncheckedUpdateWithoutBrandInput>
    create: XOR<usersCreateWithoutBrandInput, usersUncheckedCreateWithoutBrandInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutBrandInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutBrandInput, usersUncheckedUpdateWithoutBrandInput>
  }

  export type usersUpdateWithoutBrandInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    role?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    address?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pushToken?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    seller?: sellerUpdateManyWithoutUserNestedInput
    products?: productsUpdateManyWithoutUserNestedInput
    comments?: commentsUpdateManyWithoutUserNestedInput
    reviews?: reviewsUpdateManyWithoutUserNestedInput
    notifications?: notificationsUpdateManyWithoutUserNestedInput
    flashSellProduct?: flashSellProductUpdateManyWithoutUserNestedInput
    conversations?: conversationsUpdateManyWithoutSenderNestedInput
    orders?: ordersUpdateManyWithoutBuyerNestedInput
  }

  export type usersUncheckedUpdateWithoutBrandInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    role?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    address?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pushToken?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    seller?: sellerUncheckedUpdateManyWithoutUserNestedInput
    products?: productsUncheckedUpdateManyWithoutUserNestedInput
    comments?: commentsUncheckedUpdateManyWithoutUserNestedInput
    reviews?: reviewsUncheckedUpdateManyWithoutUserNestedInput
    notifications?: notificationsUncheckedUpdateManyWithoutUserNestedInput
    flashSellProduct?: flashSellProductUncheckedUpdateManyWithoutUserNestedInput
    conversations?: conversationsUncheckedUpdateManyWithoutSenderNestedInput
    orders?: ordersUncheckedUpdateManyWithoutBuyerNestedInput
  }

  export type productsUpsertWithWhereUniqueWithoutBrandInput = {
    where: productsWhereUniqueInput
    update: XOR<productsUpdateWithoutBrandInput, productsUncheckedUpdateWithoutBrandInput>
    create: XOR<productsCreateWithoutBrandInput, productsUncheckedCreateWithoutBrandInput>
  }

  export type productsUpdateWithWhereUniqueWithoutBrandInput = {
    where: productsWhereUniqueInput
    data: XOR<productsUpdateWithoutBrandInput, productsUncheckedUpdateWithoutBrandInput>
  }

  export type productsUpdateManyWithWhereWithoutBrandInput = {
    where: productsScalarWhereInput
    data: XOR<productsUpdateManyMutationInput, productsUncheckedUpdateManyWithoutBrandInput>
  }

  export type reviewsUpsertWithWhereUniqueWithoutBrandInput = {
    where: reviewsWhereUniqueInput
    update: XOR<reviewsUpdateWithoutBrandInput, reviewsUncheckedUpdateWithoutBrandInput>
    create: XOR<reviewsCreateWithoutBrandInput, reviewsUncheckedCreateWithoutBrandInput>
  }

  export type reviewsUpdateWithWhereUniqueWithoutBrandInput = {
    where: reviewsWhereUniqueInput
    data: XOR<reviewsUpdateWithoutBrandInput, reviewsUncheckedUpdateWithoutBrandInput>
  }

  export type reviewsUpdateManyWithWhereWithoutBrandInput = {
    where: reviewsScalarWhereInput
    data: XOR<reviewsUpdateManyMutationInput, reviewsUncheckedUpdateManyWithoutBrandInput>
  }

  export type colorsCreateWithoutProductsInput = {
    id?: string
    title: string
    color: string
  }

  export type colorsUncheckedCreateWithoutProductsInput = {
    id?: string
    title: string
    color: string
  }

  export type colorsCreateOrConnectWithoutProductsInput = {
    where: colorsWhereUniqueInput
    create: XOR<colorsCreateWithoutProductsInput, colorsUncheckedCreateWithoutProductsInput>
  }

  export type sizeCreateWithoutProductsInput = {
    id?: string
    title: string
    cm: string
  }

  export type sizeUncheckedCreateWithoutProductsInput = {
    id?: string
    title: string
    cm: string
  }

  export type sizeCreateOrConnectWithoutProductsInput = {
    where: sizeWhereUniqueInput
    create: XOR<sizeCreateWithoutProductsInput, sizeUncheckedCreateWithoutProductsInput>
  }

  export type specificationsCreateWithoutProductsInput = {
    id?: string
    title: string
    details: string
  }

  export type specificationsUncheckedCreateWithoutProductsInput = {
    id?: string
    title: string
    details: string
  }

  export type specificationsCreateOrConnectWithoutProductsInput = {
    where: specificationsWhereUniqueInput
    create: XOR<specificationsCreateWithoutProductsInput, specificationsUncheckedCreateWithoutProductsInput>
  }

  export type commentsCreateWithoutProductInput = {
    id?: string
    message: string
    image?: string | null
    replay?: string | null
    receiverId: string
    user?: usersCreateNestedOneWithoutCommentsInput
    notifications?: notificationsCreateNestedManyWithoutCommentsInput
  }

  export type commentsUncheckedCreateWithoutProductInput = {
    id?: string
    message: string
    image?: string | null
    replay?: string | null
    userId: string
    receiverId: string
    notifications?: notificationsUncheckedCreateNestedManyWithoutCommentsInput
  }

  export type commentsCreateOrConnectWithoutProductInput = {
    where: commentsWhereUniqueInput
    create: XOR<commentsCreateWithoutProductInput, commentsUncheckedCreateWithoutProductInput>
  }

  export type commentsCreateManyProductInputEnvelope = {
    data: commentsCreateManyProductInput | commentsCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type reviewsCreateWithoutProductInput = {
    id?: string
    message: string
    rate?: number
    user?: usersCreateNestedOneWithoutReviewsInput
    notifications?: notificationsCreateNestedManyWithoutReviewsInput
    seller?: sellerCreateNestedOneWithoutReviewsInput
    brand?: brandsCreateNestedOneWithoutReviewsInput
  }

  export type reviewsUncheckedCreateWithoutProductInput = {
    id?: string
    message: string
    rate?: number
    userId: string
    sellerId?: string | null
    brandId?: string | null
    notifications?: notificationsUncheckedCreateNestedManyWithoutReviewsInput
  }

  export type reviewsCreateOrConnectWithoutProductInput = {
    where: reviewsWhereUniqueInput
    create: XOR<reviewsCreateWithoutProductInput, reviewsUncheckedCreateWithoutProductInput>
  }

  export type reviewsCreateManyProductInputEnvelope = {
    data: reviewsCreateManyProductInput | reviewsCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type flashSellProductCreateWithoutProductInput = {
    id?: string
    offer?: number
    percentage?: boolean
    minSell?: number
    quantity?: number
    deliveryFree?: boolean
    createdAt?: Date | string
    flashSell?: flashSellCreateNestedOneWithoutProductInput
    user?: usersCreateNestedOneWithoutFlashSellProductInput
  }

  export type flashSellProductUncheckedCreateWithoutProductInput = {
    id?: string
    offer?: number
    percentage?: boolean
    minSell?: number
    quantity?: number
    deliveryFree?: boolean
    flashSellId: string
    userId: string
    createdAt?: Date | string
  }

  export type flashSellProductCreateOrConnectWithoutProductInput = {
    where: flashSellProductWhereUniqueInput
    create: XOR<flashSellProductCreateWithoutProductInput, flashSellProductUncheckedCreateWithoutProductInput>
  }

  export type flashSellProductCreateManyProductInputEnvelope = {
    data: flashSellProductCreateManyProductInput | flashSellProductCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type sellerCreateWithoutProductsInput = {
    id?: string
    shopName: string
    shopAddress: string
    categories?: NullableJsonNullValueInput | InputJsonValue
    logo: string
    verified?: boolean
    user?: usersCreateNestedOneWithoutSellerInput
    reviews?: reviewsCreateNestedManyWithoutSellerInput
  }

  export type sellerUncheckedCreateWithoutProductsInput = {
    id?: string
    userId: string
    shopName: string
    shopAddress: string
    categories?: NullableJsonNullValueInput | InputJsonValue
    logo: string
    verified?: boolean
    reviews?: reviewsUncheckedCreateNestedManyWithoutSellerInput
  }

  export type sellerCreateOrConnectWithoutProductsInput = {
    where: sellerWhereUniqueInput
    create: XOR<sellerCreateWithoutProductsInput, sellerUncheckedCreateWithoutProductsInput>
  }

  export type brandsCreateWithoutProductsInput = {
    id?: string
    brandName: string
    brandAddress: string
    brandIcon: string
    categories?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean
    user?: usersCreateNestedOneWithoutBrandInput
    reviews?: reviewsCreateNestedManyWithoutBrandInput
  }

  export type brandsUncheckedCreateWithoutProductsInput = {
    id?: string
    userId: string
    brandName: string
    brandAddress: string
    brandIcon: string
    categories?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean
    reviews?: reviewsUncheckedCreateNestedManyWithoutBrandInput
  }

  export type brandsCreateOrConnectWithoutProductsInput = {
    where: brandsWhereUniqueInput
    create: XOR<brandsCreateWithoutProductsInput, brandsUncheckedCreateWithoutProductsInput>
  }

  export type categoryCreateWithoutProductsInput = {
    id?: string
    name: string
    icon: string
    subCategory?: subCategoryCreateNestedManyWithoutCategoryInput
  }

  export type categoryUncheckedCreateWithoutProductsInput = {
    id?: string
    name: string
    icon: string
    subCategory?: subCategoryUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type categoryCreateOrConnectWithoutProductsInput = {
    where: categoryWhereUniqueInput
    create: XOR<categoryCreateWithoutProductsInput, categoryUncheckedCreateWithoutProductsInput>
  }

  export type subCategoryCreateWithoutProductsInput = {
    id?: string
    name: string
    category?: categoryCreateNestedOneWithoutSubCategoryInput
    options?: optionsCreateNestedManyWithoutSubCategoryInput
  }

  export type subCategoryUncheckedCreateWithoutProductsInput = {
    id?: string
    name: string
    categoryId: string
    options?: optionsUncheckedCreateNestedManyWithoutSubCategoryInput
  }

  export type subCategoryCreateOrConnectWithoutProductsInput = {
    where: subCategoryWhereUniqueInput
    create: XOR<subCategoryCreateWithoutProductsInput, subCategoryUncheckedCreateWithoutProductsInput>
  }

  export type optionsCreateWithoutProductsInput = {
    id?: string
    name: string
    subCategory?: subCategoryCreateNestedOneWithoutOptionsInput
  }

  export type optionsUncheckedCreateWithoutProductsInput = {
    id?: string
    name: string
    subCategoryId: string
  }

  export type optionsCreateOrConnectWithoutProductsInput = {
    where: optionsWhereUniqueInput
    create: XOR<optionsCreateWithoutProductsInput, optionsUncheckedCreateWithoutProductsInput>
  }

  export type usersCreateWithoutProductsInput = {
    id?: string
    email?: string | null
    name: string
    image?: string | null
    phone?: string | null
    birthday?: string | null
    gender?: string | null
    role?: number
    uid: string
    address?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    pushToken?: string | null
    verified?: boolean
    seller?: sellerCreateNestedManyWithoutUserInput
    brand?: brandsCreateNestedManyWithoutUserInput
    comments?: commentsCreateNestedManyWithoutUserInput
    reviews?: reviewsCreateNestedManyWithoutUserInput
    notifications?: notificationsCreateNestedManyWithoutUserInput
    flashSellProduct?: flashSellProductCreateNestedManyWithoutUserInput
    conversations?: conversationsCreateNestedManyWithoutSenderInput
    orders?: ordersCreateNestedManyWithoutBuyerInput
  }

  export type usersUncheckedCreateWithoutProductsInput = {
    id?: string
    email?: string | null
    name: string
    image?: string | null
    phone?: string | null
    birthday?: string | null
    gender?: string | null
    role?: number
    uid: string
    address?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    pushToken?: string | null
    verified?: boolean
    seller?: sellerUncheckedCreateNestedManyWithoutUserInput
    brand?: brandsUncheckedCreateNestedManyWithoutUserInput
    comments?: commentsUncheckedCreateNestedManyWithoutUserInput
    reviews?: reviewsUncheckedCreateNestedManyWithoutUserInput
    notifications?: notificationsUncheckedCreateNestedManyWithoutUserInput
    flashSellProduct?: flashSellProductUncheckedCreateNestedManyWithoutUserInput
    conversations?: conversationsUncheckedCreateNestedManyWithoutSenderInput
    orders?: ordersUncheckedCreateNestedManyWithoutBuyerInput
  }

  export type usersCreateOrConnectWithoutProductsInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutProductsInput, usersUncheckedCreateWithoutProductsInput>
  }

  export type bannerCreateWithoutProductInput = {
    id?: string
    title: string
    image: string
  }

  export type bannerUncheckedCreateWithoutProductInput = {
    id?: string
    title: string
    image: string
  }

  export type bannerCreateOrConnectWithoutProductInput = {
    where: bannerWhereUniqueInput
    create: XOR<bannerCreateWithoutProductInput, bannerUncheckedCreateWithoutProductInput>
  }

  export type bannerCreateManyProductInputEnvelope = {
    data: bannerCreateManyProductInput | bannerCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type addsCreateWithoutProductInput = {
    id?: string
    title: string
    image: string
    date?: Date | string
    visitors?: visitorsCreateNestedOneWithoutAddsInput
  }

  export type addsUncheckedCreateWithoutProductInput = {
    id?: string
    title: string
    image: string
    visitorId?: string | null
    date?: Date | string
  }

  export type addsCreateOrConnectWithoutProductInput = {
    where: addsWhereUniqueInput
    create: XOR<addsCreateWithoutProductInput, addsUncheckedCreateWithoutProductInput>
  }

  export type addsCreateManyProductInputEnvelope = {
    data: addsCreateManyProductInput | addsCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type messagesCreateWithoutProductInput = {
    id?: string
    message?: string | null
    image?: string | null
    date?: Date | string
  }

  export type messagesUncheckedCreateWithoutProductInput = {
    id?: string
    message?: string | null
    image?: string | null
    date?: Date | string
  }

  export type messagesCreateOrConnectWithoutProductInput = {
    where: messagesWhereUniqueInput
    create: XOR<messagesCreateWithoutProductInput, messagesUncheckedCreateWithoutProductInput>
  }

  export type messagesCreateManyProductInputEnvelope = {
    data: messagesCreateManyProductInput | messagesCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type ordersCreateWithoutProductInput = {
    id?: string
    offerPrice?: number
    date?: Date | string
    buyer: usersCreateNestedOneWithoutOrdersInput
  }

  export type ordersUncheckedCreateWithoutProductInput = {
    id?: string
    buyerid: string
    offerPrice?: number
    date?: Date | string
  }

  export type ordersCreateOrConnectWithoutProductInput = {
    where: ordersWhereUniqueInput
    create: XOR<ordersCreateWithoutProductInput, ordersUncheckedCreateWithoutProductInput>
  }

  export type ordersCreateManyProductInputEnvelope = {
    data: ordersCreateManyProductInput | ordersCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type colorsUpsertWithoutProductsInput = {
    update: XOR<colorsUpdateWithoutProductsInput, colorsUncheckedUpdateWithoutProductsInput>
    create: XOR<colorsCreateWithoutProductsInput, colorsUncheckedCreateWithoutProductsInput>
    where?: colorsWhereInput
  }

  export type colorsUpdateToOneWithWhereWithoutProductsInput = {
    where?: colorsWhereInput
    data: XOR<colorsUpdateWithoutProductsInput, colorsUncheckedUpdateWithoutProductsInput>
  }

  export type colorsUpdateWithoutProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
  }

  export type colorsUncheckedUpdateWithoutProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
  }

  export type sizeUpsertWithoutProductsInput = {
    update: XOR<sizeUpdateWithoutProductsInput, sizeUncheckedUpdateWithoutProductsInput>
    create: XOR<sizeCreateWithoutProductsInput, sizeUncheckedCreateWithoutProductsInput>
    where?: sizeWhereInput
  }

  export type sizeUpdateToOneWithWhereWithoutProductsInput = {
    where?: sizeWhereInput
    data: XOR<sizeUpdateWithoutProductsInput, sizeUncheckedUpdateWithoutProductsInput>
  }

  export type sizeUpdateWithoutProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    cm?: StringFieldUpdateOperationsInput | string
  }

  export type sizeUncheckedUpdateWithoutProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    cm?: StringFieldUpdateOperationsInput | string
  }

  export type specificationsUpsertWithoutProductsInput = {
    update: XOR<specificationsUpdateWithoutProductsInput, specificationsUncheckedUpdateWithoutProductsInput>
    create: XOR<specificationsCreateWithoutProductsInput, specificationsUncheckedCreateWithoutProductsInput>
    where?: specificationsWhereInput
  }

  export type specificationsUpdateToOneWithWhereWithoutProductsInput = {
    where?: specificationsWhereInput
    data: XOR<specificationsUpdateWithoutProductsInput, specificationsUncheckedUpdateWithoutProductsInput>
  }

  export type specificationsUpdateWithoutProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
  }

  export type specificationsUncheckedUpdateWithoutProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
  }

  export type commentsUpsertWithWhereUniqueWithoutProductInput = {
    where: commentsWhereUniqueInput
    update: XOR<commentsUpdateWithoutProductInput, commentsUncheckedUpdateWithoutProductInput>
    create: XOR<commentsCreateWithoutProductInput, commentsUncheckedCreateWithoutProductInput>
  }

  export type commentsUpdateWithWhereUniqueWithoutProductInput = {
    where: commentsWhereUniqueInput
    data: XOR<commentsUpdateWithoutProductInput, commentsUncheckedUpdateWithoutProductInput>
  }

  export type commentsUpdateManyWithWhereWithoutProductInput = {
    where: commentsScalarWhereInput
    data: XOR<commentsUpdateManyMutationInput, commentsUncheckedUpdateManyWithoutProductInput>
  }

  export type reviewsUpsertWithWhereUniqueWithoutProductInput = {
    where: reviewsWhereUniqueInput
    update: XOR<reviewsUpdateWithoutProductInput, reviewsUncheckedUpdateWithoutProductInput>
    create: XOR<reviewsCreateWithoutProductInput, reviewsUncheckedCreateWithoutProductInput>
  }

  export type reviewsUpdateWithWhereUniqueWithoutProductInput = {
    where: reviewsWhereUniqueInput
    data: XOR<reviewsUpdateWithoutProductInput, reviewsUncheckedUpdateWithoutProductInput>
  }

  export type reviewsUpdateManyWithWhereWithoutProductInput = {
    where: reviewsScalarWhereInput
    data: XOR<reviewsUpdateManyMutationInput, reviewsUncheckedUpdateManyWithoutProductInput>
  }

  export type flashSellProductUpsertWithWhereUniqueWithoutProductInput = {
    where: flashSellProductWhereUniqueInput
    update: XOR<flashSellProductUpdateWithoutProductInput, flashSellProductUncheckedUpdateWithoutProductInput>
    create: XOR<flashSellProductCreateWithoutProductInput, flashSellProductUncheckedCreateWithoutProductInput>
  }

  export type flashSellProductUpdateWithWhereUniqueWithoutProductInput = {
    where: flashSellProductWhereUniqueInput
    data: XOR<flashSellProductUpdateWithoutProductInput, flashSellProductUncheckedUpdateWithoutProductInput>
  }

  export type flashSellProductUpdateManyWithWhereWithoutProductInput = {
    where: flashSellProductScalarWhereInput
    data: XOR<flashSellProductUpdateManyMutationInput, flashSellProductUncheckedUpdateManyWithoutProductInput>
  }

  export type sellerUpsertWithoutProductsInput = {
    update: XOR<sellerUpdateWithoutProductsInput, sellerUncheckedUpdateWithoutProductsInput>
    create: XOR<sellerCreateWithoutProductsInput, sellerUncheckedCreateWithoutProductsInput>
    where?: sellerWhereInput
  }

  export type sellerUpdateToOneWithWhereWithoutProductsInput = {
    where?: sellerWhereInput
    data: XOR<sellerUpdateWithoutProductsInput, sellerUncheckedUpdateWithoutProductsInput>
  }

  export type sellerUpdateWithoutProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopName?: StringFieldUpdateOperationsInput | string
    shopAddress?: StringFieldUpdateOperationsInput | string
    categories?: NullableJsonNullValueInput | InputJsonValue
    logo?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    user?: usersUpdateOneWithoutSellerNestedInput
    reviews?: reviewsUpdateManyWithoutSellerNestedInput
  }

  export type sellerUncheckedUpdateWithoutProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    shopName?: StringFieldUpdateOperationsInput | string
    shopAddress?: StringFieldUpdateOperationsInput | string
    categories?: NullableJsonNullValueInput | InputJsonValue
    logo?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    reviews?: reviewsUncheckedUpdateManyWithoutSellerNestedInput
  }

  export type brandsUpsertWithoutProductsInput = {
    update: XOR<brandsUpdateWithoutProductsInput, brandsUncheckedUpdateWithoutProductsInput>
    create: XOR<brandsCreateWithoutProductsInput, brandsUncheckedCreateWithoutProductsInput>
    where?: brandsWhereInput
  }

  export type brandsUpdateToOneWithWhereWithoutProductsInput = {
    where?: brandsWhereInput
    data: XOR<brandsUpdateWithoutProductsInput, brandsUncheckedUpdateWithoutProductsInput>
  }

  export type brandsUpdateWithoutProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    brandName?: StringFieldUpdateOperationsInput | string
    brandAddress?: StringFieldUpdateOperationsInput | string
    brandIcon?: StringFieldUpdateOperationsInput | string
    categories?: NullableJsonNullValueInput | InputJsonValue
    verified?: BoolFieldUpdateOperationsInput | boolean
    user?: usersUpdateOneWithoutBrandNestedInput
    reviews?: reviewsUpdateManyWithoutBrandNestedInput
  }

  export type brandsUncheckedUpdateWithoutProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    brandName?: StringFieldUpdateOperationsInput | string
    brandAddress?: StringFieldUpdateOperationsInput | string
    brandIcon?: StringFieldUpdateOperationsInput | string
    categories?: NullableJsonNullValueInput | InputJsonValue
    verified?: BoolFieldUpdateOperationsInput | boolean
    reviews?: reviewsUncheckedUpdateManyWithoutBrandNestedInput
  }

  export type categoryUpsertWithoutProductsInput = {
    update: XOR<categoryUpdateWithoutProductsInput, categoryUncheckedUpdateWithoutProductsInput>
    create: XOR<categoryCreateWithoutProductsInput, categoryUncheckedCreateWithoutProductsInput>
    where?: categoryWhereInput
  }

  export type categoryUpdateToOneWithWhereWithoutProductsInput = {
    where?: categoryWhereInput
    data: XOR<categoryUpdateWithoutProductsInput, categoryUncheckedUpdateWithoutProductsInput>
  }

  export type categoryUpdateWithoutProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    subCategory?: subCategoryUpdateManyWithoutCategoryNestedInput
  }

  export type categoryUncheckedUpdateWithoutProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    subCategory?: subCategoryUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type subCategoryUpsertWithoutProductsInput = {
    update: XOR<subCategoryUpdateWithoutProductsInput, subCategoryUncheckedUpdateWithoutProductsInput>
    create: XOR<subCategoryCreateWithoutProductsInput, subCategoryUncheckedCreateWithoutProductsInput>
    where?: subCategoryWhereInput
  }

  export type subCategoryUpdateToOneWithWhereWithoutProductsInput = {
    where?: subCategoryWhereInput
    data: XOR<subCategoryUpdateWithoutProductsInput, subCategoryUncheckedUpdateWithoutProductsInput>
  }

  export type subCategoryUpdateWithoutProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: categoryUpdateOneWithoutSubCategoryNestedInput
    options?: optionsUpdateManyWithoutSubCategoryNestedInput
  }

  export type subCategoryUncheckedUpdateWithoutProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    options?: optionsUncheckedUpdateManyWithoutSubCategoryNestedInput
  }

  export type optionsUpsertWithoutProductsInput = {
    update: XOR<optionsUpdateWithoutProductsInput, optionsUncheckedUpdateWithoutProductsInput>
    create: XOR<optionsCreateWithoutProductsInput, optionsUncheckedCreateWithoutProductsInput>
    where?: optionsWhereInput
  }

  export type optionsUpdateToOneWithWhereWithoutProductsInput = {
    where?: optionsWhereInput
    data: XOR<optionsUpdateWithoutProductsInput, optionsUncheckedUpdateWithoutProductsInput>
  }

  export type optionsUpdateWithoutProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subCategory?: subCategoryUpdateOneWithoutOptionsNestedInput
  }

  export type optionsUncheckedUpdateWithoutProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subCategoryId?: StringFieldUpdateOperationsInput | string
  }

  export type usersUpsertWithoutProductsInput = {
    update: XOR<usersUpdateWithoutProductsInput, usersUncheckedUpdateWithoutProductsInput>
    create: XOR<usersCreateWithoutProductsInput, usersUncheckedCreateWithoutProductsInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutProductsInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutProductsInput, usersUncheckedUpdateWithoutProductsInput>
  }

  export type usersUpdateWithoutProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    role?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    address?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pushToken?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    seller?: sellerUpdateManyWithoutUserNestedInput
    brand?: brandsUpdateManyWithoutUserNestedInput
    comments?: commentsUpdateManyWithoutUserNestedInput
    reviews?: reviewsUpdateManyWithoutUserNestedInput
    notifications?: notificationsUpdateManyWithoutUserNestedInput
    flashSellProduct?: flashSellProductUpdateManyWithoutUserNestedInput
    conversations?: conversationsUpdateManyWithoutSenderNestedInput
    orders?: ordersUpdateManyWithoutBuyerNestedInput
  }

  export type usersUncheckedUpdateWithoutProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    role?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    address?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pushToken?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    seller?: sellerUncheckedUpdateManyWithoutUserNestedInput
    brand?: brandsUncheckedUpdateManyWithoutUserNestedInput
    comments?: commentsUncheckedUpdateManyWithoutUserNestedInput
    reviews?: reviewsUncheckedUpdateManyWithoutUserNestedInput
    notifications?: notificationsUncheckedUpdateManyWithoutUserNestedInput
    flashSellProduct?: flashSellProductUncheckedUpdateManyWithoutUserNestedInput
    conversations?: conversationsUncheckedUpdateManyWithoutSenderNestedInput
    orders?: ordersUncheckedUpdateManyWithoutBuyerNestedInput
  }

  export type bannerUpsertWithWhereUniqueWithoutProductInput = {
    where: bannerWhereUniqueInput
    update: XOR<bannerUpdateWithoutProductInput, bannerUncheckedUpdateWithoutProductInput>
    create: XOR<bannerCreateWithoutProductInput, bannerUncheckedCreateWithoutProductInput>
  }

  export type bannerUpdateWithWhereUniqueWithoutProductInput = {
    where: bannerWhereUniqueInput
    data: XOR<bannerUpdateWithoutProductInput, bannerUncheckedUpdateWithoutProductInput>
  }

  export type bannerUpdateManyWithWhereWithoutProductInput = {
    where: bannerScalarWhereInput
    data: XOR<bannerUpdateManyMutationInput, bannerUncheckedUpdateManyWithoutProductInput>
  }

  export type bannerScalarWhereInput = {
    AND?: bannerScalarWhereInput | bannerScalarWhereInput[]
    OR?: bannerScalarWhereInput[]
    NOT?: bannerScalarWhereInput | bannerScalarWhereInput[]
    id?: StringFilter<"banner"> | string
    title?: StringFilter<"banner"> | string
    image?: StringFilter<"banner"> | string
    productId?: StringFilter<"banner"> | string
  }

  export type addsUpsertWithWhereUniqueWithoutProductInput = {
    where: addsWhereUniqueInput
    update: XOR<addsUpdateWithoutProductInput, addsUncheckedUpdateWithoutProductInput>
    create: XOR<addsCreateWithoutProductInput, addsUncheckedCreateWithoutProductInput>
  }

  export type addsUpdateWithWhereUniqueWithoutProductInput = {
    where: addsWhereUniqueInput
    data: XOR<addsUpdateWithoutProductInput, addsUncheckedUpdateWithoutProductInput>
  }

  export type addsUpdateManyWithWhereWithoutProductInput = {
    where: addsScalarWhereInput
    data: XOR<addsUpdateManyMutationInput, addsUncheckedUpdateManyWithoutProductInput>
  }

  export type addsScalarWhereInput = {
    AND?: addsScalarWhereInput | addsScalarWhereInput[]
    OR?: addsScalarWhereInput[]
    NOT?: addsScalarWhereInput | addsScalarWhereInput[]
    id?: StringFilter<"adds"> | string
    title?: StringFilter<"adds"> | string
    image?: StringFilter<"adds"> | string
    productId?: StringFilter<"adds"> | string
    visitorId?: StringNullableFilter<"adds"> | string | null
    date?: DateTimeFilter<"adds"> | Date | string
  }

  export type messagesUpsertWithWhereUniqueWithoutProductInput = {
    where: messagesWhereUniqueInput
    update: XOR<messagesUpdateWithoutProductInput, messagesUncheckedUpdateWithoutProductInput>
    create: XOR<messagesCreateWithoutProductInput, messagesUncheckedCreateWithoutProductInput>
  }

  export type messagesUpdateWithWhereUniqueWithoutProductInput = {
    where: messagesWhereUniqueInput
    data: XOR<messagesUpdateWithoutProductInput, messagesUncheckedUpdateWithoutProductInput>
  }

  export type messagesUpdateManyWithWhereWithoutProductInput = {
    where: messagesScalarWhereInput
    data: XOR<messagesUpdateManyMutationInput, messagesUncheckedUpdateManyWithoutProductInput>
  }

  export type messagesScalarWhereInput = {
    AND?: messagesScalarWhereInput | messagesScalarWhereInput[]
    OR?: messagesScalarWhereInput[]
    NOT?: messagesScalarWhereInput | messagesScalarWhereInput[]
    id?: StringFilter<"messages"> | string
    message?: StringNullableFilter<"messages"> | string | null
    image?: StringNullableFilter<"messages"> | string | null
    date?: DateTimeFilter<"messages"> | Date | string
    productId?: StringFilter<"messages"> | string
  }

  export type ordersUpsertWithWhereUniqueWithoutProductInput = {
    where: ordersWhereUniqueInput
    update: XOR<ordersUpdateWithoutProductInput, ordersUncheckedUpdateWithoutProductInput>
    create: XOR<ordersCreateWithoutProductInput, ordersUncheckedCreateWithoutProductInput>
  }

  export type ordersUpdateWithWhereUniqueWithoutProductInput = {
    where: ordersWhereUniqueInput
    data: XOR<ordersUpdateWithoutProductInput, ordersUncheckedUpdateWithoutProductInput>
  }

  export type ordersUpdateManyWithWhereWithoutProductInput = {
    where: ordersScalarWhereInput
    data: XOR<ordersUpdateManyMutationInput, ordersUncheckedUpdateManyWithoutProductInput>
  }

  export type productsCreateWithoutColorsInput = {
    id?: string
    price: number
    coin?: boolean
    title: string
    description: string
    thumbnail: string
    quantity?: number
    minOrder?: number
    freeCoin?: number
    offer?: number
    percentage?: boolean
    freeDelivery?: boolean
    fixedPrice?: boolean
    createdAt?: Date | string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean
    size?: sizeCreateNestedOneWithoutProductsInput
    specification?: specificationsCreateNestedOneWithoutProductsInput
    comments?: commentsCreateNestedManyWithoutProductInput
    reviews?: reviewsCreateNestedManyWithoutProductInput
    flashSellProduct?: flashSellProductCreateNestedManyWithoutProductInput
    seller?: sellerCreateNestedOneWithoutProductsInput
    brand?: brandsCreateNestedOneWithoutProductsInput
    category?: categoryCreateNestedOneWithoutProductsInput
    subCategory?: subCategoryCreateNestedOneWithoutProductsInput
    option?: optionsCreateNestedOneWithoutProductsInput
    user?: usersCreateNestedOneWithoutProductsInput
    banner?: bannerCreateNestedManyWithoutProductInput
    adds?: addsCreateNestedManyWithoutProductInput
    messages?: messagesCreateNestedManyWithoutProductInput
    orders?: ordersCreateNestedManyWithoutProductInput
  }

  export type productsUncheckedCreateWithoutColorsInput = {
    id?: string
    price: number
    coin?: boolean
    title: string
    description: string
    thumbnail: string
    quantity?: number
    minOrder?: number
    freeCoin?: number
    offer?: number
    percentage?: boolean
    freeDelivery?: boolean
    fixedPrice?: boolean
    createdAt?: Date | string
    sizeId: string
    specificationsId: string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean
    sellerId?: string | null
    brandId?: string | null
    categoryId: string
    subCategoryId: string
    optionId: string
    userId: string
    comments?: commentsUncheckedCreateNestedManyWithoutProductInput
    reviews?: reviewsUncheckedCreateNestedManyWithoutProductInput
    flashSellProduct?: flashSellProductUncheckedCreateNestedManyWithoutProductInput
    banner?: bannerUncheckedCreateNestedManyWithoutProductInput
    adds?: addsUncheckedCreateNestedManyWithoutProductInput
    messages?: messagesUncheckedCreateNestedManyWithoutProductInput
    orders?: ordersUncheckedCreateNestedManyWithoutProductInput
  }

  export type productsCreateOrConnectWithoutColorsInput = {
    where: productsWhereUniqueInput
    create: XOR<productsCreateWithoutColorsInput, productsUncheckedCreateWithoutColorsInput>
  }

  export type productsCreateManyColorsInputEnvelope = {
    data: productsCreateManyColorsInput | productsCreateManyColorsInput[]
    skipDuplicates?: boolean
  }

  export type productsUpsertWithWhereUniqueWithoutColorsInput = {
    where: productsWhereUniqueInput
    update: XOR<productsUpdateWithoutColorsInput, productsUncheckedUpdateWithoutColorsInput>
    create: XOR<productsCreateWithoutColorsInput, productsUncheckedCreateWithoutColorsInput>
  }

  export type productsUpdateWithWhereUniqueWithoutColorsInput = {
    where: productsWhereUniqueInput
    data: XOR<productsUpdateWithoutColorsInput, productsUncheckedUpdateWithoutColorsInput>
  }

  export type productsUpdateManyWithWhereWithoutColorsInput = {
    where: productsScalarWhereInput
    data: XOR<productsUpdateManyMutationInput, productsUncheckedUpdateManyWithoutColorsInput>
  }

  export type productsCreateWithoutSizeInput = {
    id?: string
    price: number
    coin?: boolean
    title: string
    description: string
    thumbnail: string
    quantity?: number
    minOrder?: number
    freeCoin?: number
    offer?: number
    percentage?: boolean
    freeDelivery?: boolean
    fixedPrice?: boolean
    createdAt?: Date | string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean
    colors?: colorsCreateNestedOneWithoutProductsInput
    specification?: specificationsCreateNestedOneWithoutProductsInput
    comments?: commentsCreateNestedManyWithoutProductInput
    reviews?: reviewsCreateNestedManyWithoutProductInput
    flashSellProduct?: flashSellProductCreateNestedManyWithoutProductInput
    seller?: sellerCreateNestedOneWithoutProductsInput
    brand?: brandsCreateNestedOneWithoutProductsInput
    category?: categoryCreateNestedOneWithoutProductsInput
    subCategory?: subCategoryCreateNestedOneWithoutProductsInput
    option?: optionsCreateNestedOneWithoutProductsInput
    user?: usersCreateNestedOneWithoutProductsInput
    banner?: bannerCreateNestedManyWithoutProductInput
    adds?: addsCreateNestedManyWithoutProductInput
    messages?: messagesCreateNestedManyWithoutProductInput
    orders?: ordersCreateNestedManyWithoutProductInput
  }

  export type productsUncheckedCreateWithoutSizeInput = {
    id?: string
    price: number
    coin?: boolean
    title: string
    description: string
    thumbnail: string
    quantity?: number
    minOrder?: number
    freeCoin?: number
    offer?: number
    percentage?: boolean
    freeDelivery?: boolean
    fixedPrice?: boolean
    createdAt?: Date | string
    colorId: string
    specificationsId: string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean
    sellerId?: string | null
    brandId?: string | null
    categoryId: string
    subCategoryId: string
    optionId: string
    userId: string
    comments?: commentsUncheckedCreateNestedManyWithoutProductInput
    reviews?: reviewsUncheckedCreateNestedManyWithoutProductInput
    flashSellProduct?: flashSellProductUncheckedCreateNestedManyWithoutProductInput
    banner?: bannerUncheckedCreateNestedManyWithoutProductInput
    adds?: addsUncheckedCreateNestedManyWithoutProductInput
    messages?: messagesUncheckedCreateNestedManyWithoutProductInput
    orders?: ordersUncheckedCreateNestedManyWithoutProductInput
  }

  export type productsCreateOrConnectWithoutSizeInput = {
    where: productsWhereUniqueInput
    create: XOR<productsCreateWithoutSizeInput, productsUncheckedCreateWithoutSizeInput>
  }

  export type productsCreateManySizeInputEnvelope = {
    data: productsCreateManySizeInput | productsCreateManySizeInput[]
    skipDuplicates?: boolean
  }

  export type productsUpsertWithWhereUniqueWithoutSizeInput = {
    where: productsWhereUniqueInput
    update: XOR<productsUpdateWithoutSizeInput, productsUncheckedUpdateWithoutSizeInput>
    create: XOR<productsCreateWithoutSizeInput, productsUncheckedCreateWithoutSizeInput>
  }

  export type productsUpdateWithWhereUniqueWithoutSizeInput = {
    where: productsWhereUniqueInput
    data: XOR<productsUpdateWithoutSizeInput, productsUncheckedUpdateWithoutSizeInput>
  }

  export type productsUpdateManyWithWhereWithoutSizeInput = {
    where: productsScalarWhereInput
    data: XOR<productsUpdateManyMutationInput, productsUncheckedUpdateManyWithoutSizeInput>
  }

  export type productsCreateWithoutSpecificationInput = {
    id?: string
    price: number
    coin?: boolean
    title: string
    description: string
    thumbnail: string
    quantity?: number
    minOrder?: number
    freeCoin?: number
    offer?: number
    percentage?: boolean
    freeDelivery?: boolean
    fixedPrice?: boolean
    createdAt?: Date | string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean
    colors?: colorsCreateNestedOneWithoutProductsInput
    size?: sizeCreateNestedOneWithoutProductsInput
    comments?: commentsCreateNestedManyWithoutProductInput
    reviews?: reviewsCreateNestedManyWithoutProductInput
    flashSellProduct?: flashSellProductCreateNestedManyWithoutProductInput
    seller?: sellerCreateNestedOneWithoutProductsInput
    brand?: brandsCreateNestedOneWithoutProductsInput
    category?: categoryCreateNestedOneWithoutProductsInput
    subCategory?: subCategoryCreateNestedOneWithoutProductsInput
    option?: optionsCreateNestedOneWithoutProductsInput
    user?: usersCreateNestedOneWithoutProductsInput
    banner?: bannerCreateNestedManyWithoutProductInput
    adds?: addsCreateNestedManyWithoutProductInput
    messages?: messagesCreateNestedManyWithoutProductInput
    orders?: ordersCreateNestedManyWithoutProductInput
  }

  export type productsUncheckedCreateWithoutSpecificationInput = {
    id?: string
    price: number
    coin?: boolean
    title: string
    description: string
    thumbnail: string
    quantity?: number
    minOrder?: number
    freeCoin?: number
    offer?: number
    percentage?: boolean
    freeDelivery?: boolean
    fixedPrice?: boolean
    createdAt?: Date | string
    colorId: string
    sizeId: string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean
    sellerId?: string | null
    brandId?: string | null
    categoryId: string
    subCategoryId: string
    optionId: string
    userId: string
    comments?: commentsUncheckedCreateNestedManyWithoutProductInput
    reviews?: reviewsUncheckedCreateNestedManyWithoutProductInput
    flashSellProduct?: flashSellProductUncheckedCreateNestedManyWithoutProductInput
    banner?: bannerUncheckedCreateNestedManyWithoutProductInput
    adds?: addsUncheckedCreateNestedManyWithoutProductInput
    messages?: messagesUncheckedCreateNestedManyWithoutProductInput
    orders?: ordersUncheckedCreateNestedManyWithoutProductInput
  }

  export type productsCreateOrConnectWithoutSpecificationInput = {
    where: productsWhereUniqueInput
    create: XOR<productsCreateWithoutSpecificationInput, productsUncheckedCreateWithoutSpecificationInput>
  }

  export type productsCreateManySpecificationInputEnvelope = {
    data: productsCreateManySpecificationInput | productsCreateManySpecificationInput[]
    skipDuplicates?: boolean
  }

  export type productsUpsertWithWhereUniqueWithoutSpecificationInput = {
    where: productsWhereUniqueInput
    update: XOR<productsUpdateWithoutSpecificationInput, productsUncheckedUpdateWithoutSpecificationInput>
    create: XOR<productsCreateWithoutSpecificationInput, productsUncheckedCreateWithoutSpecificationInput>
  }

  export type productsUpdateWithWhereUniqueWithoutSpecificationInput = {
    where: productsWhereUniqueInput
    data: XOR<productsUpdateWithoutSpecificationInput, productsUncheckedUpdateWithoutSpecificationInput>
  }

  export type productsUpdateManyWithWhereWithoutSpecificationInput = {
    where: productsScalarWhereInput
    data: XOR<productsUpdateManyMutationInput, productsUncheckedUpdateManyWithoutSpecificationInput>
  }

  export type usersCreateWithoutCommentsInput = {
    id?: string
    email?: string | null
    name: string
    image?: string | null
    phone?: string | null
    birthday?: string | null
    gender?: string | null
    role?: number
    uid: string
    address?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    pushToken?: string | null
    verified?: boolean
    seller?: sellerCreateNestedManyWithoutUserInput
    brand?: brandsCreateNestedManyWithoutUserInput
    products?: productsCreateNestedManyWithoutUserInput
    reviews?: reviewsCreateNestedManyWithoutUserInput
    notifications?: notificationsCreateNestedManyWithoutUserInput
    flashSellProduct?: flashSellProductCreateNestedManyWithoutUserInput
    conversations?: conversationsCreateNestedManyWithoutSenderInput
    orders?: ordersCreateNestedManyWithoutBuyerInput
  }

  export type usersUncheckedCreateWithoutCommentsInput = {
    id?: string
    email?: string | null
    name: string
    image?: string | null
    phone?: string | null
    birthday?: string | null
    gender?: string | null
    role?: number
    uid: string
    address?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    pushToken?: string | null
    verified?: boolean
    seller?: sellerUncheckedCreateNestedManyWithoutUserInput
    brand?: brandsUncheckedCreateNestedManyWithoutUserInput
    products?: productsUncheckedCreateNestedManyWithoutUserInput
    reviews?: reviewsUncheckedCreateNestedManyWithoutUserInput
    notifications?: notificationsUncheckedCreateNestedManyWithoutUserInput
    flashSellProduct?: flashSellProductUncheckedCreateNestedManyWithoutUserInput
    conversations?: conversationsUncheckedCreateNestedManyWithoutSenderInput
    orders?: ordersUncheckedCreateNestedManyWithoutBuyerInput
  }

  export type usersCreateOrConnectWithoutCommentsInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutCommentsInput, usersUncheckedCreateWithoutCommentsInput>
  }

  export type productsCreateWithoutCommentsInput = {
    id?: string
    price: number
    coin?: boolean
    title: string
    description: string
    thumbnail: string
    quantity?: number
    minOrder?: number
    freeCoin?: number
    offer?: number
    percentage?: boolean
    freeDelivery?: boolean
    fixedPrice?: boolean
    createdAt?: Date | string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean
    colors?: colorsCreateNestedOneWithoutProductsInput
    size?: sizeCreateNestedOneWithoutProductsInput
    specification?: specificationsCreateNestedOneWithoutProductsInput
    reviews?: reviewsCreateNestedManyWithoutProductInput
    flashSellProduct?: flashSellProductCreateNestedManyWithoutProductInput
    seller?: sellerCreateNestedOneWithoutProductsInput
    brand?: brandsCreateNestedOneWithoutProductsInput
    category?: categoryCreateNestedOneWithoutProductsInput
    subCategory?: subCategoryCreateNestedOneWithoutProductsInput
    option?: optionsCreateNestedOneWithoutProductsInput
    user?: usersCreateNestedOneWithoutProductsInput
    banner?: bannerCreateNestedManyWithoutProductInput
    adds?: addsCreateNestedManyWithoutProductInput
    messages?: messagesCreateNestedManyWithoutProductInput
    orders?: ordersCreateNestedManyWithoutProductInput
  }

  export type productsUncheckedCreateWithoutCommentsInput = {
    id?: string
    price: number
    coin?: boolean
    title: string
    description: string
    thumbnail: string
    quantity?: number
    minOrder?: number
    freeCoin?: number
    offer?: number
    percentage?: boolean
    freeDelivery?: boolean
    fixedPrice?: boolean
    createdAt?: Date | string
    colorId: string
    sizeId: string
    specificationsId: string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean
    sellerId?: string | null
    brandId?: string | null
    categoryId: string
    subCategoryId: string
    optionId: string
    userId: string
    reviews?: reviewsUncheckedCreateNestedManyWithoutProductInput
    flashSellProduct?: flashSellProductUncheckedCreateNestedManyWithoutProductInput
    banner?: bannerUncheckedCreateNestedManyWithoutProductInput
    adds?: addsUncheckedCreateNestedManyWithoutProductInput
    messages?: messagesUncheckedCreateNestedManyWithoutProductInput
    orders?: ordersUncheckedCreateNestedManyWithoutProductInput
  }

  export type productsCreateOrConnectWithoutCommentsInput = {
    where: productsWhereUniqueInput
    create: XOR<productsCreateWithoutCommentsInput, productsUncheckedCreateWithoutCommentsInput>
  }

  export type notificationsCreateWithoutCommentsInput = {
    id?: string
    message: string
    title: string
    user?: usersCreateNestedOneWithoutNotificationsInput
    reviews?: reviewsCreateNestedOneWithoutNotificationsInput
  }

  export type notificationsUncheckedCreateWithoutCommentsInput = {
    id?: string
    message: string
    title: string
    userId: string
    reviewId: string
  }

  export type notificationsCreateOrConnectWithoutCommentsInput = {
    where: notificationsWhereUniqueInput
    create: XOR<notificationsCreateWithoutCommentsInput, notificationsUncheckedCreateWithoutCommentsInput>
  }

  export type notificationsCreateManyCommentsInputEnvelope = {
    data: notificationsCreateManyCommentsInput | notificationsCreateManyCommentsInput[]
    skipDuplicates?: boolean
  }

  export type usersUpsertWithoutCommentsInput = {
    update: XOR<usersUpdateWithoutCommentsInput, usersUncheckedUpdateWithoutCommentsInput>
    create: XOR<usersCreateWithoutCommentsInput, usersUncheckedCreateWithoutCommentsInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutCommentsInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutCommentsInput, usersUncheckedUpdateWithoutCommentsInput>
  }

  export type usersUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    role?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    address?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pushToken?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    seller?: sellerUpdateManyWithoutUserNestedInput
    brand?: brandsUpdateManyWithoutUserNestedInput
    products?: productsUpdateManyWithoutUserNestedInput
    reviews?: reviewsUpdateManyWithoutUserNestedInput
    notifications?: notificationsUpdateManyWithoutUserNestedInput
    flashSellProduct?: flashSellProductUpdateManyWithoutUserNestedInput
    conversations?: conversationsUpdateManyWithoutSenderNestedInput
    orders?: ordersUpdateManyWithoutBuyerNestedInput
  }

  export type usersUncheckedUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    role?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    address?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pushToken?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    seller?: sellerUncheckedUpdateManyWithoutUserNestedInput
    brand?: brandsUncheckedUpdateManyWithoutUserNestedInput
    products?: productsUncheckedUpdateManyWithoutUserNestedInput
    reviews?: reviewsUncheckedUpdateManyWithoutUserNestedInput
    notifications?: notificationsUncheckedUpdateManyWithoutUserNestedInput
    flashSellProduct?: flashSellProductUncheckedUpdateManyWithoutUserNestedInput
    conversations?: conversationsUncheckedUpdateManyWithoutSenderNestedInput
    orders?: ordersUncheckedUpdateManyWithoutBuyerNestedInput
  }

  export type productsUpsertWithoutCommentsInput = {
    update: XOR<productsUpdateWithoutCommentsInput, productsUncheckedUpdateWithoutCommentsInput>
    create: XOR<productsCreateWithoutCommentsInput, productsUncheckedCreateWithoutCommentsInput>
    where?: productsWhereInput
  }

  export type productsUpdateToOneWithWhereWithoutCommentsInput = {
    where?: productsWhereInput
    data: XOR<productsUpdateWithoutCommentsInput, productsUncheckedUpdateWithoutCommentsInput>
  }

  export type productsUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    coin?: BoolFieldUpdateOperationsInput | boolean
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    minOrder?: IntFieldUpdateOperationsInput | number
    freeCoin?: IntFieldUpdateOperationsInput | number
    offer?: IntFieldUpdateOperationsInput | number
    percentage?: BoolFieldUpdateOperationsInput | boolean
    freeDelivery?: BoolFieldUpdateOperationsInput | boolean
    fixedPrice?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: BoolFieldUpdateOperationsInput | boolean
    colors?: colorsUpdateOneWithoutProductsNestedInput
    size?: sizeUpdateOneWithoutProductsNestedInput
    specification?: specificationsUpdateOneWithoutProductsNestedInput
    reviews?: reviewsUpdateManyWithoutProductNestedInput
    flashSellProduct?: flashSellProductUpdateManyWithoutProductNestedInput
    seller?: sellerUpdateOneWithoutProductsNestedInput
    brand?: brandsUpdateOneWithoutProductsNestedInput
    category?: categoryUpdateOneWithoutProductsNestedInput
    subCategory?: subCategoryUpdateOneWithoutProductsNestedInput
    option?: optionsUpdateOneWithoutProductsNestedInput
    user?: usersUpdateOneWithoutProductsNestedInput
    banner?: bannerUpdateManyWithoutProductNestedInput
    adds?: addsUpdateManyWithoutProductNestedInput
    messages?: messagesUpdateManyWithoutProductNestedInput
    orders?: ordersUpdateManyWithoutProductNestedInput
  }

  export type productsUncheckedUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    coin?: BoolFieldUpdateOperationsInput | boolean
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    minOrder?: IntFieldUpdateOperationsInput | number
    freeCoin?: IntFieldUpdateOperationsInput | number
    offer?: IntFieldUpdateOperationsInput | number
    percentage?: BoolFieldUpdateOperationsInput | boolean
    freeDelivery?: BoolFieldUpdateOperationsInput | boolean
    fixedPrice?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    colorId?: StringFieldUpdateOperationsInput | string
    sizeId?: StringFieldUpdateOperationsInput | string
    specificationsId?: StringFieldUpdateOperationsInput | string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: BoolFieldUpdateOperationsInput | boolean
    sellerId?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    subCategoryId?: StringFieldUpdateOperationsInput | string
    optionId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    reviews?: reviewsUncheckedUpdateManyWithoutProductNestedInput
    flashSellProduct?: flashSellProductUncheckedUpdateManyWithoutProductNestedInput
    banner?: bannerUncheckedUpdateManyWithoutProductNestedInput
    adds?: addsUncheckedUpdateManyWithoutProductNestedInput
    messages?: messagesUncheckedUpdateManyWithoutProductNestedInput
    orders?: ordersUncheckedUpdateManyWithoutProductNestedInput
  }

  export type notificationsUpsertWithWhereUniqueWithoutCommentsInput = {
    where: notificationsWhereUniqueInput
    update: XOR<notificationsUpdateWithoutCommentsInput, notificationsUncheckedUpdateWithoutCommentsInput>
    create: XOR<notificationsCreateWithoutCommentsInput, notificationsUncheckedCreateWithoutCommentsInput>
  }

  export type notificationsUpdateWithWhereUniqueWithoutCommentsInput = {
    where: notificationsWhereUniqueInput
    data: XOR<notificationsUpdateWithoutCommentsInput, notificationsUncheckedUpdateWithoutCommentsInput>
  }

  export type notificationsUpdateManyWithWhereWithoutCommentsInput = {
    where: notificationsScalarWhereInput
    data: XOR<notificationsUpdateManyMutationInput, notificationsUncheckedUpdateManyWithoutCommentsInput>
  }

  export type usersCreateWithoutReviewsInput = {
    id?: string
    email?: string | null
    name: string
    image?: string | null
    phone?: string | null
    birthday?: string | null
    gender?: string | null
    role?: number
    uid: string
    address?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    pushToken?: string | null
    verified?: boolean
    seller?: sellerCreateNestedManyWithoutUserInput
    brand?: brandsCreateNestedManyWithoutUserInput
    products?: productsCreateNestedManyWithoutUserInput
    comments?: commentsCreateNestedManyWithoutUserInput
    notifications?: notificationsCreateNestedManyWithoutUserInput
    flashSellProduct?: flashSellProductCreateNestedManyWithoutUserInput
    conversations?: conversationsCreateNestedManyWithoutSenderInput
    orders?: ordersCreateNestedManyWithoutBuyerInput
  }

  export type usersUncheckedCreateWithoutReviewsInput = {
    id?: string
    email?: string | null
    name: string
    image?: string | null
    phone?: string | null
    birthday?: string | null
    gender?: string | null
    role?: number
    uid: string
    address?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    pushToken?: string | null
    verified?: boolean
    seller?: sellerUncheckedCreateNestedManyWithoutUserInput
    brand?: brandsUncheckedCreateNestedManyWithoutUserInput
    products?: productsUncheckedCreateNestedManyWithoutUserInput
    comments?: commentsUncheckedCreateNestedManyWithoutUserInput
    notifications?: notificationsUncheckedCreateNestedManyWithoutUserInput
    flashSellProduct?: flashSellProductUncheckedCreateNestedManyWithoutUserInput
    conversations?: conversationsUncheckedCreateNestedManyWithoutSenderInput
    orders?: ordersUncheckedCreateNestedManyWithoutBuyerInput
  }

  export type usersCreateOrConnectWithoutReviewsInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutReviewsInput, usersUncheckedCreateWithoutReviewsInput>
  }

  export type productsCreateWithoutReviewsInput = {
    id?: string
    price: number
    coin?: boolean
    title: string
    description: string
    thumbnail: string
    quantity?: number
    minOrder?: number
    freeCoin?: number
    offer?: number
    percentage?: boolean
    freeDelivery?: boolean
    fixedPrice?: boolean
    createdAt?: Date | string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean
    colors?: colorsCreateNestedOneWithoutProductsInput
    size?: sizeCreateNestedOneWithoutProductsInput
    specification?: specificationsCreateNestedOneWithoutProductsInput
    comments?: commentsCreateNestedManyWithoutProductInput
    flashSellProduct?: flashSellProductCreateNestedManyWithoutProductInput
    seller?: sellerCreateNestedOneWithoutProductsInput
    brand?: brandsCreateNestedOneWithoutProductsInput
    category?: categoryCreateNestedOneWithoutProductsInput
    subCategory?: subCategoryCreateNestedOneWithoutProductsInput
    option?: optionsCreateNestedOneWithoutProductsInput
    user?: usersCreateNestedOneWithoutProductsInput
    banner?: bannerCreateNestedManyWithoutProductInput
    adds?: addsCreateNestedManyWithoutProductInput
    messages?: messagesCreateNestedManyWithoutProductInput
    orders?: ordersCreateNestedManyWithoutProductInput
  }

  export type productsUncheckedCreateWithoutReviewsInput = {
    id?: string
    price: number
    coin?: boolean
    title: string
    description: string
    thumbnail: string
    quantity?: number
    minOrder?: number
    freeCoin?: number
    offer?: number
    percentage?: boolean
    freeDelivery?: boolean
    fixedPrice?: boolean
    createdAt?: Date | string
    colorId: string
    sizeId: string
    specificationsId: string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean
    sellerId?: string | null
    brandId?: string | null
    categoryId: string
    subCategoryId: string
    optionId: string
    userId: string
    comments?: commentsUncheckedCreateNestedManyWithoutProductInput
    flashSellProduct?: flashSellProductUncheckedCreateNestedManyWithoutProductInput
    banner?: bannerUncheckedCreateNestedManyWithoutProductInput
    adds?: addsUncheckedCreateNestedManyWithoutProductInput
    messages?: messagesUncheckedCreateNestedManyWithoutProductInput
    orders?: ordersUncheckedCreateNestedManyWithoutProductInput
  }

  export type productsCreateOrConnectWithoutReviewsInput = {
    where: productsWhereUniqueInput
    create: XOR<productsCreateWithoutReviewsInput, productsUncheckedCreateWithoutReviewsInput>
  }

  export type notificationsCreateWithoutReviewsInput = {
    id?: string
    message: string
    title: string
    user?: usersCreateNestedOneWithoutNotificationsInput
    comments?: commentsCreateNestedOneWithoutNotificationsInput
  }

  export type notificationsUncheckedCreateWithoutReviewsInput = {
    id?: string
    message: string
    title: string
    userId: string
    commentId: string
  }

  export type notificationsCreateOrConnectWithoutReviewsInput = {
    where: notificationsWhereUniqueInput
    create: XOR<notificationsCreateWithoutReviewsInput, notificationsUncheckedCreateWithoutReviewsInput>
  }

  export type notificationsCreateManyReviewsInputEnvelope = {
    data: notificationsCreateManyReviewsInput | notificationsCreateManyReviewsInput[]
    skipDuplicates?: boolean
  }

  export type sellerCreateWithoutReviewsInput = {
    id?: string
    shopName: string
    shopAddress: string
    categories?: NullableJsonNullValueInput | InputJsonValue
    logo: string
    verified?: boolean
    user?: usersCreateNestedOneWithoutSellerInput
    products?: productsCreateNestedManyWithoutSellerInput
  }

  export type sellerUncheckedCreateWithoutReviewsInput = {
    id?: string
    userId: string
    shopName: string
    shopAddress: string
    categories?: NullableJsonNullValueInput | InputJsonValue
    logo: string
    verified?: boolean
    products?: productsUncheckedCreateNestedManyWithoutSellerInput
  }

  export type sellerCreateOrConnectWithoutReviewsInput = {
    where: sellerWhereUniqueInput
    create: XOR<sellerCreateWithoutReviewsInput, sellerUncheckedCreateWithoutReviewsInput>
  }

  export type brandsCreateWithoutReviewsInput = {
    id?: string
    brandName: string
    brandAddress: string
    brandIcon: string
    categories?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean
    user?: usersCreateNestedOneWithoutBrandInput
    products?: productsCreateNestedManyWithoutBrandInput
  }

  export type brandsUncheckedCreateWithoutReviewsInput = {
    id?: string
    userId: string
    brandName: string
    brandAddress: string
    brandIcon: string
    categories?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean
    products?: productsUncheckedCreateNestedManyWithoutBrandInput
  }

  export type brandsCreateOrConnectWithoutReviewsInput = {
    where: brandsWhereUniqueInput
    create: XOR<brandsCreateWithoutReviewsInput, brandsUncheckedCreateWithoutReviewsInput>
  }

  export type usersUpsertWithoutReviewsInput = {
    update: XOR<usersUpdateWithoutReviewsInput, usersUncheckedUpdateWithoutReviewsInput>
    create: XOR<usersCreateWithoutReviewsInput, usersUncheckedCreateWithoutReviewsInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutReviewsInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutReviewsInput, usersUncheckedUpdateWithoutReviewsInput>
  }

  export type usersUpdateWithoutReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    role?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    address?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pushToken?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    seller?: sellerUpdateManyWithoutUserNestedInput
    brand?: brandsUpdateManyWithoutUserNestedInput
    products?: productsUpdateManyWithoutUserNestedInput
    comments?: commentsUpdateManyWithoutUserNestedInput
    notifications?: notificationsUpdateManyWithoutUserNestedInput
    flashSellProduct?: flashSellProductUpdateManyWithoutUserNestedInput
    conversations?: conversationsUpdateManyWithoutSenderNestedInput
    orders?: ordersUpdateManyWithoutBuyerNestedInput
  }

  export type usersUncheckedUpdateWithoutReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    role?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    address?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pushToken?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    seller?: sellerUncheckedUpdateManyWithoutUserNestedInput
    brand?: brandsUncheckedUpdateManyWithoutUserNestedInput
    products?: productsUncheckedUpdateManyWithoutUserNestedInput
    comments?: commentsUncheckedUpdateManyWithoutUserNestedInput
    notifications?: notificationsUncheckedUpdateManyWithoutUserNestedInput
    flashSellProduct?: flashSellProductUncheckedUpdateManyWithoutUserNestedInput
    conversations?: conversationsUncheckedUpdateManyWithoutSenderNestedInput
    orders?: ordersUncheckedUpdateManyWithoutBuyerNestedInput
  }

  export type productsUpsertWithoutReviewsInput = {
    update: XOR<productsUpdateWithoutReviewsInput, productsUncheckedUpdateWithoutReviewsInput>
    create: XOR<productsCreateWithoutReviewsInput, productsUncheckedCreateWithoutReviewsInput>
    where?: productsWhereInput
  }

  export type productsUpdateToOneWithWhereWithoutReviewsInput = {
    where?: productsWhereInput
    data: XOR<productsUpdateWithoutReviewsInput, productsUncheckedUpdateWithoutReviewsInput>
  }

  export type productsUpdateWithoutReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    coin?: BoolFieldUpdateOperationsInput | boolean
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    minOrder?: IntFieldUpdateOperationsInput | number
    freeCoin?: IntFieldUpdateOperationsInput | number
    offer?: IntFieldUpdateOperationsInput | number
    percentage?: BoolFieldUpdateOperationsInput | boolean
    freeDelivery?: BoolFieldUpdateOperationsInput | boolean
    fixedPrice?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: BoolFieldUpdateOperationsInput | boolean
    colors?: colorsUpdateOneWithoutProductsNestedInput
    size?: sizeUpdateOneWithoutProductsNestedInput
    specification?: specificationsUpdateOneWithoutProductsNestedInput
    comments?: commentsUpdateManyWithoutProductNestedInput
    flashSellProduct?: flashSellProductUpdateManyWithoutProductNestedInput
    seller?: sellerUpdateOneWithoutProductsNestedInput
    brand?: brandsUpdateOneWithoutProductsNestedInput
    category?: categoryUpdateOneWithoutProductsNestedInput
    subCategory?: subCategoryUpdateOneWithoutProductsNestedInput
    option?: optionsUpdateOneWithoutProductsNestedInput
    user?: usersUpdateOneWithoutProductsNestedInput
    banner?: bannerUpdateManyWithoutProductNestedInput
    adds?: addsUpdateManyWithoutProductNestedInput
    messages?: messagesUpdateManyWithoutProductNestedInput
    orders?: ordersUpdateManyWithoutProductNestedInput
  }

  export type productsUncheckedUpdateWithoutReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    coin?: BoolFieldUpdateOperationsInput | boolean
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    minOrder?: IntFieldUpdateOperationsInput | number
    freeCoin?: IntFieldUpdateOperationsInput | number
    offer?: IntFieldUpdateOperationsInput | number
    percentage?: BoolFieldUpdateOperationsInput | boolean
    freeDelivery?: BoolFieldUpdateOperationsInput | boolean
    fixedPrice?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    colorId?: StringFieldUpdateOperationsInput | string
    sizeId?: StringFieldUpdateOperationsInput | string
    specificationsId?: StringFieldUpdateOperationsInput | string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: BoolFieldUpdateOperationsInput | boolean
    sellerId?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    subCategoryId?: StringFieldUpdateOperationsInput | string
    optionId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    comments?: commentsUncheckedUpdateManyWithoutProductNestedInput
    flashSellProduct?: flashSellProductUncheckedUpdateManyWithoutProductNestedInput
    banner?: bannerUncheckedUpdateManyWithoutProductNestedInput
    adds?: addsUncheckedUpdateManyWithoutProductNestedInput
    messages?: messagesUncheckedUpdateManyWithoutProductNestedInput
    orders?: ordersUncheckedUpdateManyWithoutProductNestedInput
  }

  export type notificationsUpsertWithWhereUniqueWithoutReviewsInput = {
    where: notificationsWhereUniqueInput
    update: XOR<notificationsUpdateWithoutReviewsInput, notificationsUncheckedUpdateWithoutReviewsInput>
    create: XOR<notificationsCreateWithoutReviewsInput, notificationsUncheckedCreateWithoutReviewsInput>
  }

  export type notificationsUpdateWithWhereUniqueWithoutReviewsInput = {
    where: notificationsWhereUniqueInput
    data: XOR<notificationsUpdateWithoutReviewsInput, notificationsUncheckedUpdateWithoutReviewsInput>
  }

  export type notificationsUpdateManyWithWhereWithoutReviewsInput = {
    where: notificationsScalarWhereInput
    data: XOR<notificationsUpdateManyMutationInput, notificationsUncheckedUpdateManyWithoutReviewsInput>
  }

  export type sellerUpsertWithoutReviewsInput = {
    update: XOR<sellerUpdateWithoutReviewsInput, sellerUncheckedUpdateWithoutReviewsInput>
    create: XOR<sellerCreateWithoutReviewsInput, sellerUncheckedCreateWithoutReviewsInput>
    where?: sellerWhereInput
  }

  export type sellerUpdateToOneWithWhereWithoutReviewsInput = {
    where?: sellerWhereInput
    data: XOR<sellerUpdateWithoutReviewsInput, sellerUncheckedUpdateWithoutReviewsInput>
  }

  export type sellerUpdateWithoutReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopName?: StringFieldUpdateOperationsInput | string
    shopAddress?: StringFieldUpdateOperationsInput | string
    categories?: NullableJsonNullValueInput | InputJsonValue
    logo?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    user?: usersUpdateOneWithoutSellerNestedInput
    products?: productsUpdateManyWithoutSellerNestedInput
  }

  export type sellerUncheckedUpdateWithoutReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    shopName?: StringFieldUpdateOperationsInput | string
    shopAddress?: StringFieldUpdateOperationsInput | string
    categories?: NullableJsonNullValueInput | InputJsonValue
    logo?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    products?: productsUncheckedUpdateManyWithoutSellerNestedInput
  }

  export type brandsUpsertWithoutReviewsInput = {
    update: XOR<brandsUpdateWithoutReviewsInput, brandsUncheckedUpdateWithoutReviewsInput>
    create: XOR<brandsCreateWithoutReviewsInput, brandsUncheckedCreateWithoutReviewsInput>
    where?: brandsWhereInput
  }

  export type brandsUpdateToOneWithWhereWithoutReviewsInput = {
    where?: brandsWhereInput
    data: XOR<brandsUpdateWithoutReviewsInput, brandsUncheckedUpdateWithoutReviewsInput>
  }

  export type brandsUpdateWithoutReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    brandName?: StringFieldUpdateOperationsInput | string
    brandAddress?: StringFieldUpdateOperationsInput | string
    brandIcon?: StringFieldUpdateOperationsInput | string
    categories?: NullableJsonNullValueInput | InputJsonValue
    verified?: BoolFieldUpdateOperationsInput | boolean
    user?: usersUpdateOneWithoutBrandNestedInput
    products?: productsUpdateManyWithoutBrandNestedInput
  }

  export type brandsUncheckedUpdateWithoutReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    brandName?: StringFieldUpdateOperationsInput | string
    brandAddress?: StringFieldUpdateOperationsInput | string
    brandIcon?: StringFieldUpdateOperationsInput | string
    categories?: NullableJsonNullValueInput | InputJsonValue
    verified?: BoolFieldUpdateOperationsInput | boolean
    products?: productsUncheckedUpdateManyWithoutBrandNestedInput
  }

  export type usersCreateWithoutNotificationsInput = {
    id?: string
    email?: string | null
    name: string
    image?: string | null
    phone?: string | null
    birthday?: string | null
    gender?: string | null
    role?: number
    uid: string
    address?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    pushToken?: string | null
    verified?: boolean
    seller?: sellerCreateNestedManyWithoutUserInput
    brand?: brandsCreateNestedManyWithoutUserInput
    products?: productsCreateNestedManyWithoutUserInput
    comments?: commentsCreateNestedManyWithoutUserInput
    reviews?: reviewsCreateNestedManyWithoutUserInput
    flashSellProduct?: flashSellProductCreateNestedManyWithoutUserInput
    conversations?: conversationsCreateNestedManyWithoutSenderInput
    orders?: ordersCreateNestedManyWithoutBuyerInput
  }

  export type usersUncheckedCreateWithoutNotificationsInput = {
    id?: string
    email?: string | null
    name: string
    image?: string | null
    phone?: string | null
    birthday?: string | null
    gender?: string | null
    role?: number
    uid: string
    address?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    pushToken?: string | null
    verified?: boolean
    seller?: sellerUncheckedCreateNestedManyWithoutUserInput
    brand?: brandsUncheckedCreateNestedManyWithoutUserInput
    products?: productsUncheckedCreateNestedManyWithoutUserInput
    comments?: commentsUncheckedCreateNestedManyWithoutUserInput
    reviews?: reviewsUncheckedCreateNestedManyWithoutUserInput
    flashSellProduct?: flashSellProductUncheckedCreateNestedManyWithoutUserInput
    conversations?: conversationsUncheckedCreateNestedManyWithoutSenderInput
    orders?: ordersUncheckedCreateNestedManyWithoutBuyerInput
  }

  export type usersCreateOrConnectWithoutNotificationsInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutNotificationsInput, usersUncheckedCreateWithoutNotificationsInput>
  }

  export type commentsCreateWithoutNotificationsInput = {
    id?: string
    message: string
    image?: string | null
    replay?: string | null
    receiverId: string
    user?: usersCreateNestedOneWithoutCommentsInput
    product?: productsCreateNestedOneWithoutCommentsInput
  }

  export type commentsUncheckedCreateWithoutNotificationsInput = {
    id?: string
    message: string
    image?: string | null
    replay?: string | null
    userId: string
    productId: string
    receiverId: string
  }

  export type commentsCreateOrConnectWithoutNotificationsInput = {
    where: commentsWhereUniqueInput
    create: XOR<commentsCreateWithoutNotificationsInput, commentsUncheckedCreateWithoutNotificationsInput>
  }

  export type reviewsCreateWithoutNotificationsInput = {
    id?: string
    message: string
    rate?: number
    user?: usersCreateNestedOneWithoutReviewsInput
    product?: productsCreateNestedOneWithoutReviewsInput
    seller?: sellerCreateNestedOneWithoutReviewsInput
    brand?: brandsCreateNestedOneWithoutReviewsInput
  }

  export type reviewsUncheckedCreateWithoutNotificationsInput = {
    id?: string
    message: string
    rate?: number
    userId: string
    productId: string
    sellerId?: string | null
    brandId?: string | null
  }

  export type reviewsCreateOrConnectWithoutNotificationsInput = {
    where: reviewsWhereUniqueInput
    create: XOR<reviewsCreateWithoutNotificationsInput, reviewsUncheckedCreateWithoutNotificationsInput>
  }

  export type usersUpsertWithoutNotificationsInput = {
    update: XOR<usersUpdateWithoutNotificationsInput, usersUncheckedUpdateWithoutNotificationsInput>
    create: XOR<usersCreateWithoutNotificationsInput, usersUncheckedCreateWithoutNotificationsInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutNotificationsInput, usersUncheckedUpdateWithoutNotificationsInput>
  }

  export type usersUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    role?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    address?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pushToken?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    seller?: sellerUpdateManyWithoutUserNestedInput
    brand?: brandsUpdateManyWithoutUserNestedInput
    products?: productsUpdateManyWithoutUserNestedInput
    comments?: commentsUpdateManyWithoutUserNestedInput
    reviews?: reviewsUpdateManyWithoutUserNestedInput
    flashSellProduct?: flashSellProductUpdateManyWithoutUserNestedInput
    conversations?: conversationsUpdateManyWithoutSenderNestedInput
    orders?: ordersUpdateManyWithoutBuyerNestedInput
  }

  export type usersUncheckedUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    role?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    address?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pushToken?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    seller?: sellerUncheckedUpdateManyWithoutUserNestedInput
    brand?: brandsUncheckedUpdateManyWithoutUserNestedInput
    products?: productsUncheckedUpdateManyWithoutUserNestedInput
    comments?: commentsUncheckedUpdateManyWithoutUserNestedInput
    reviews?: reviewsUncheckedUpdateManyWithoutUserNestedInput
    flashSellProduct?: flashSellProductUncheckedUpdateManyWithoutUserNestedInput
    conversations?: conversationsUncheckedUpdateManyWithoutSenderNestedInput
    orders?: ordersUncheckedUpdateManyWithoutBuyerNestedInput
  }

  export type commentsUpsertWithoutNotificationsInput = {
    update: XOR<commentsUpdateWithoutNotificationsInput, commentsUncheckedUpdateWithoutNotificationsInput>
    create: XOR<commentsCreateWithoutNotificationsInput, commentsUncheckedCreateWithoutNotificationsInput>
    where?: commentsWhereInput
  }

  export type commentsUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: commentsWhereInput
    data: XOR<commentsUpdateWithoutNotificationsInput, commentsUncheckedUpdateWithoutNotificationsInput>
  }

  export type commentsUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    replay?: NullableStringFieldUpdateOperationsInput | string | null
    receiverId?: StringFieldUpdateOperationsInput | string
    user?: usersUpdateOneWithoutCommentsNestedInput
    product?: productsUpdateOneWithoutCommentsNestedInput
  }

  export type commentsUncheckedUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    replay?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    receiverId?: StringFieldUpdateOperationsInput | string
  }

  export type reviewsUpsertWithoutNotificationsInput = {
    update: XOR<reviewsUpdateWithoutNotificationsInput, reviewsUncheckedUpdateWithoutNotificationsInput>
    create: XOR<reviewsCreateWithoutNotificationsInput, reviewsUncheckedCreateWithoutNotificationsInput>
    where?: reviewsWhereInput
  }

  export type reviewsUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: reviewsWhereInput
    data: XOR<reviewsUpdateWithoutNotificationsInput, reviewsUncheckedUpdateWithoutNotificationsInput>
  }

  export type reviewsUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    rate?: IntFieldUpdateOperationsInput | number
    user?: usersUpdateOneWithoutReviewsNestedInput
    product?: productsUpdateOneWithoutReviewsNestedInput
    seller?: sellerUpdateOneWithoutReviewsNestedInput
    brand?: brandsUpdateOneWithoutReviewsNestedInput
  }

  export type reviewsUncheckedUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    rate?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    sellerId?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type flashSellProductCreateWithoutFlashSellInput = {
    id?: string
    offer?: number
    percentage?: boolean
    minSell?: number
    quantity?: number
    deliveryFree?: boolean
    createdAt?: Date | string
    product?: productsCreateNestedOneWithoutFlashSellProductInput
    user?: usersCreateNestedOneWithoutFlashSellProductInput
  }

  export type flashSellProductUncheckedCreateWithoutFlashSellInput = {
    id?: string
    offer?: number
    percentage?: boolean
    minSell?: number
    quantity?: number
    deliveryFree?: boolean
    productId: string
    userId: string
    createdAt?: Date | string
  }

  export type flashSellProductCreateOrConnectWithoutFlashSellInput = {
    where: flashSellProductWhereUniqueInput
    create: XOR<flashSellProductCreateWithoutFlashSellInput, flashSellProductUncheckedCreateWithoutFlashSellInput>
  }

  export type flashSellProductCreateManyFlashSellInputEnvelope = {
    data: flashSellProductCreateManyFlashSellInput | flashSellProductCreateManyFlashSellInput[]
    skipDuplicates?: boolean
  }

  export type flashSellProductUpsertWithWhereUniqueWithoutFlashSellInput = {
    where: flashSellProductWhereUniqueInput
    update: XOR<flashSellProductUpdateWithoutFlashSellInput, flashSellProductUncheckedUpdateWithoutFlashSellInput>
    create: XOR<flashSellProductCreateWithoutFlashSellInput, flashSellProductUncheckedCreateWithoutFlashSellInput>
  }

  export type flashSellProductUpdateWithWhereUniqueWithoutFlashSellInput = {
    where: flashSellProductWhereUniqueInput
    data: XOR<flashSellProductUpdateWithoutFlashSellInput, flashSellProductUncheckedUpdateWithoutFlashSellInput>
  }

  export type flashSellProductUpdateManyWithWhereWithoutFlashSellInput = {
    where: flashSellProductScalarWhereInput
    data: XOR<flashSellProductUpdateManyMutationInput, flashSellProductUncheckedUpdateManyWithoutFlashSellInput>
  }

  export type flashSellCreateWithoutProductInput = {
    id?: string
    startAt: Date | string
    endAt: Date | string
    banner: string
    title: string
  }

  export type flashSellUncheckedCreateWithoutProductInput = {
    id?: string
    startAt: Date | string
    endAt: Date | string
    banner: string
    title: string
  }

  export type flashSellCreateOrConnectWithoutProductInput = {
    where: flashSellWhereUniqueInput
    create: XOR<flashSellCreateWithoutProductInput, flashSellUncheckedCreateWithoutProductInput>
  }

  export type productsCreateWithoutFlashSellProductInput = {
    id?: string
    price: number
    coin?: boolean
    title: string
    description: string
    thumbnail: string
    quantity?: number
    minOrder?: number
    freeCoin?: number
    offer?: number
    percentage?: boolean
    freeDelivery?: boolean
    fixedPrice?: boolean
    createdAt?: Date | string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean
    colors?: colorsCreateNestedOneWithoutProductsInput
    size?: sizeCreateNestedOneWithoutProductsInput
    specification?: specificationsCreateNestedOneWithoutProductsInput
    comments?: commentsCreateNestedManyWithoutProductInput
    reviews?: reviewsCreateNestedManyWithoutProductInput
    seller?: sellerCreateNestedOneWithoutProductsInput
    brand?: brandsCreateNestedOneWithoutProductsInput
    category?: categoryCreateNestedOneWithoutProductsInput
    subCategory?: subCategoryCreateNestedOneWithoutProductsInput
    option?: optionsCreateNestedOneWithoutProductsInput
    user?: usersCreateNestedOneWithoutProductsInput
    banner?: bannerCreateNestedManyWithoutProductInput
    adds?: addsCreateNestedManyWithoutProductInput
    messages?: messagesCreateNestedManyWithoutProductInput
    orders?: ordersCreateNestedManyWithoutProductInput
  }

  export type productsUncheckedCreateWithoutFlashSellProductInput = {
    id?: string
    price: number
    coin?: boolean
    title: string
    description: string
    thumbnail: string
    quantity?: number
    minOrder?: number
    freeCoin?: number
    offer?: number
    percentage?: boolean
    freeDelivery?: boolean
    fixedPrice?: boolean
    createdAt?: Date | string
    colorId: string
    sizeId: string
    specificationsId: string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean
    sellerId?: string | null
    brandId?: string | null
    categoryId: string
    subCategoryId: string
    optionId: string
    userId: string
    comments?: commentsUncheckedCreateNestedManyWithoutProductInput
    reviews?: reviewsUncheckedCreateNestedManyWithoutProductInput
    banner?: bannerUncheckedCreateNestedManyWithoutProductInput
    adds?: addsUncheckedCreateNestedManyWithoutProductInput
    messages?: messagesUncheckedCreateNestedManyWithoutProductInput
    orders?: ordersUncheckedCreateNestedManyWithoutProductInput
  }

  export type productsCreateOrConnectWithoutFlashSellProductInput = {
    where: productsWhereUniqueInput
    create: XOR<productsCreateWithoutFlashSellProductInput, productsUncheckedCreateWithoutFlashSellProductInput>
  }

  export type usersCreateWithoutFlashSellProductInput = {
    id?: string
    email?: string | null
    name: string
    image?: string | null
    phone?: string | null
    birthday?: string | null
    gender?: string | null
    role?: number
    uid: string
    address?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    pushToken?: string | null
    verified?: boolean
    seller?: sellerCreateNestedManyWithoutUserInput
    brand?: brandsCreateNestedManyWithoutUserInput
    products?: productsCreateNestedManyWithoutUserInput
    comments?: commentsCreateNestedManyWithoutUserInput
    reviews?: reviewsCreateNestedManyWithoutUserInput
    notifications?: notificationsCreateNestedManyWithoutUserInput
    conversations?: conversationsCreateNestedManyWithoutSenderInput
    orders?: ordersCreateNestedManyWithoutBuyerInput
  }

  export type usersUncheckedCreateWithoutFlashSellProductInput = {
    id?: string
    email?: string | null
    name: string
    image?: string | null
    phone?: string | null
    birthday?: string | null
    gender?: string | null
    role?: number
    uid: string
    address?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    pushToken?: string | null
    verified?: boolean
    seller?: sellerUncheckedCreateNestedManyWithoutUserInput
    brand?: brandsUncheckedCreateNestedManyWithoutUserInput
    products?: productsUncheckedCreateNestedManyWithoutUserInput
    comments?: commentsUncheckedCreateNestedManyWithoutUserInput
    reviews?: reviewsUncheckedCreateNestedManyWithoutUserInput
    notifications?: notificationsUncheckedCreateNestedManyWithoutUserInput
    conversations?: conversationsUncheckedCreateNestedManyWithoutSenderInput
    orders?: ordersUncheckedCreateNestedManyWithoutBuyerInput
  }

  export type usersCreateOrConnectWithoutFlashSellProductInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutFlashSellProductInput, usersUncheckedCreateWithoutFlashSellProductInput>
  }

  export type flashSellUpsertWithoutProductInput = {
    update: XOR<flashSellUpdateWithoutProductInput, flashSellUncheckedUpdateWithoutProductInput>
    create: XOR<flashSellCreateWithoutProductInput, flashSellUncheckedCreateWithoutProductInput>
    where?: flashSellWhereInput
  }

  export type flashSellUpdateToOneWithWhereWithoutProductInput = {
    where?: flashSellWhereInput
    data: XOR<flashSellUpdateWithoutProductInput, flashSellUncheckedUpdateWithoutProductInput>
  }

  export type flashSellUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    startAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endAt?: DateTimeFieldUpdateOperationsInput | Date | string
    banner?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
  }

  export type flashSellUncheckedUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    startAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endAt?: DateTimeFieldUpdateOperationsInput | Date | string
    banner?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
  }

  export type productsUpsertWithoutFlashSellProductInput = {
    update: XOR<productsUpdateWithoutFlashSellProductInput, productsUncheckedUpdateWithoutFlashSellProductInput>
    create: XOR<productsCreateWithoutFlashSellProductInput, productsUncheckedCreateWithoutFlashSellProductInput>
    where?: productsWhereInput
  }

  export type productsUpdateToOneWithWhereWithoutFlashSellProductInput = {
    where?: productsWhereInput
    data: XOR<productsUpdateWithoutFlashSellProductInput, productsUncheckedUpdateWithoutFlashSellProductInput>
  }

  export type productsUpdateWithoutFlashSellProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    coin?: BoolFieldUpdateOperationsInput | boolean
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    minOrder?: IntFieldUpdateOperationsInput | number
    freeCoin?: IntFieldUpdateOperationsInput | number
    offer?: IntFieldUpdateOperationsInput | number
    percentage?: BoolFieldUpdateOperationsInput | boolean
    freeDelivery?: BoolFieldUpdateOperationsInput | boolean
    fixedPrice?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: BoolFieldUpdateOperationsInput | boolean
    colors?: colorsUpdateOneWithoutProductsNestedInput
    size?: sizeUpdateOneWithoutProductsNestedInput
    specification?: specificationsUpdateOneWithoutProductsNestedInput
    comments?: commentsUpdateManyWithoutProductNestedInput
    reviews?: reviewsUpdateManyWithoutProductNestedInput
    seller?: sellerUpdateOneWithoutProductsNestedInput
    brand?: brandsUpdateOneWithoutProductsNestedInput
    category?: categoryUpdateOneWithoutProductsNestedInput
    subCategory?: subCategoryUpdateOneWithoutProductsNestedInput
    option?: optionsUpdateOneWithoutProductsNestedInput
    user?: usersUpdateOneWithoutProductsNestedInput
    banner?: bannerUpdateManyWithoutProductNestedInput
    adds?: addsUpdateManyWithoutProductNestedInput
    messages?: messagesUpdateManyWithoutProductNestedInput
    orders?: ordersUpdateManyWithoutProductNestedInput
  }

  export type productsUncheckedUpdateWithoutFlashSellProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    coin?: BoolFieldUpdateOperationsInput | boolean
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    minOrder?: IntFieldUpdateOperationsInput | number
    freeCoin?: IntFieldUpdateOperationsInput | number
    offer?: IntFieldUpdateOperationsInput | number
    percentage?: BoolFieldUpdateOperationsInput | boolean
    freeDelivery?: BoolFieldUpdateOperationsInput | boolean
    fixedPrice?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    colorId?: StringFieldUpdateOperationsInput | string
    sizeId?: StringFieldUpdateOperationsInput | string
    specificationsId?: StringFieldUpdateOperationsInput | string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: BoolFieldUpdateOperationsInput | boolean
    sellerId?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    subCategoryId?: StringFieldUpdateOperationsInput | string
    optionId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    comments?: commentsUncheckedUpdateManyWithoutProductNestedInput
    reviews?: reviewsUncheckedUpdateManyWithoutProductNestedInput
    banner?: bannerUncheckedUpdateManyWithoutProductNestedInput
    adds?: addsUncheckedUpdateManyWithoutProductNestedInput
    messages?: messagesUncheckedUpdateManyWithoutProductNestedInput
    orders?: ordersUncheckedUpdateManyWithoutProductNestedInput
  }

  export type usersUpsertWithoutFlashSellProductInput = {
    update: XOR<usersUpdateWithoutFlashSellProductInput, usersUncheckedUpdateWithoutFlashSellProductInput>
    create: XOR<usersCreateWithoutFlashSellProductInput, usersUncheckedCreateWithoutFlashSellProductInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutFlashSellProductInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutFlashSellProductInput, usersUncheckedUpdateWithoutFlashSellProductInput>
  }

  export type usersUpdateWithoutFlashSellProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    role?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    address?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pushToken?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    seller?: sellerUpdateManyWithoutUserNestedInput
    brand?: brandsUpdateManyWithoutUserNestedInput
    products?: productsUpdateManyWithoutUserNestedInput
    comments?: commentsUpdateManyWithoutUserNestedInput
    reviews?: reviewsUpdateManyWithoutUserNestedInput
    notifications?: notificationsUpdateManyWithoutUserNestedInput
    conversations?: conversationsUpdateManyWithoutSenderNestedInput
    orders?: ordersUpdateManyWithoutBuyerNestedInput
  }

  export type usersUncheckedUpdateWithoutFlashSellProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    role?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    address?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pushToken?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    seller?: sellerUncheckedUpdateManyWithoutUserNestedInput
    brand?: brandsUncheckedUpdateManyWithoutUserNestedInput
    products?: productsUncheckedUpdateManyWithoutUserNestedInput
    comments?: commentsUncheckedUpdateManyWithoutUserNestedInput
    reviews?: reviewsUncheckedUpdateManyWithoutUserNestedInput
    notifications?: notificationsUncheckedUpdateManyWithoutUserNestedInput
    conversations?: conversationsUncheckedUpdateManyWithoutSenderNestedInput
    orders?: ordersUncheckedUpdateManyWithoutBuyerNestedInput
  }

  export type usersCreateWithoutConversationsInput = {
    id?: string
    email?: string | null
    name: string
    image?: string | null
    phone?: string | null
    birthday?: string | null
    gender?: string | null
    role?: number
    uid: string
    address?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    pushToken?: string | null
    verified?: boolean
    seller?: sellerCreateNestedManyWithoutUserInput
    brand?: brandsCreateNestedManyWithoutUserInput
    products?: productsCreateNestedManyWithoutUserInput
    comments?: commentsCreateNestedManyWithoutUserInput
    reviews?: reviewsCreateNestedManyWithoutUserInput
    notifications?: notificationsCreateNestedManyWithoutUserInput
    flashSellProduct?: flashSellProductCreateNestedManyWithoutUserInput
    orders?: ordersCreateNestedManyWithoutBuyerInput
  }

  export type usersUncheckedCreateWithoutConversationsInput = {
    id?: string
    email?: string | null
    name: string
    image?: string | null
    phone?: string | null
    birthday?: string | null
    gender?: string | null
    role?: number
    uid: string
    address?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    pushToken?: string | null
    verified?: boolean
    seller?: sellerUncheckedCreateNestedManyWithoutUserInput
    brand?: brandsUncheckedCreateNestedManyWithoutUserInput
    products?: productsUncheckedCreateNestedManyWithoutUserInput
    comments?: commentsUncheckedCreateNestedManyWithoutUserInput
    reviews?: reviewsUncheckedCreateNestedManyWithoutUserInput
    notifications?: notificationsUncheckedCreateNestedManyWithoutUserInput
    flashSellProduct?: flashSellProductUncheckedCreateNestedManyWithoutUserInput
    orders?: ordersUncheckedCreateNestedManyWithoutBuyerInput
  }

  export type usersCreateOrConnectWithoutConversationsInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutConversationsInput, usersUncheckedCreateWithoutConversationsInput>
  }

  export type usersUpsertWithoutConversationsInput = {
    update: XOR<usersUpdateWithoutConversationsInput, usersUncheckedUpdateWithoutConversationsInput>
    create: XOR<usersCreateWithoutConversationsInput, usersUncheckedCreateWithoutConversationsInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutConversationsInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutConversationsInput, usersUncheckedUpdateWithoutConversationsInput>
  }

  export type usersUpdateWithoutConversationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    role?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    address?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pushToken?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    seller?: sellerUpdateManyWithoutUserNestedInput
    brand?: brandsUpdateManyWithoutUserNestedInput
    products?: productsUpdateManyWithoutUserNestedInput
    comments?: commentsUpdateManyWithoutUserNestedInput
    reviews?: reviewsUpdateManyWithoutUserNestedInput
    notifications?: notificationsUpdateManyWithoutUserNestedInput
    flashSellProduct?: flashSellProductUpdateManyWithoutUserNestedInput
    orders?: ordersUpdateManyWithoutBuyerNestedInput
  }

  export type usersUncheckedUpdateWithoutConversationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    role?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    address?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pushToken?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    seller?: sellerUncheckedUpdateManyWithoutUserNestedInput
    brand?: brandsUncheckedUpdateManyWithoutUserNestedInput
    products?: productsUncheckedUpdateManyWithoutUserNestedInput
    comments?: commentsUncheckedUpdateManyWithoutUserNestedInput
    reviews?: reviewsUncheckedUpdateManyWithoutUserNestedInput
    notifications?: notificationsUncheckedUpdateManyWithoutUserNestedInput
    flashSellProduct?: flashSellProductUncheckedUpdateManyWithoutUserNestedInput
    orders?: ordersUncheckedUpdateManyWithoutBuyerNestedInput
  }

  export type productsCreateWithoutMessagesInput = {
    id?: string
    price: number
    coin?: boolean
    title: string
    description: string
    thumbnail: string
    quantity?: number
    minOrder?: number
    freeCoin?: number
    offer?: number
    percentage?: boolean
    freeDelivery?: boolean
    fixedPrice?: boolean
    createdAt?: Date | string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean
    colors?: colorsCreateNestedOneWithoutProductsInput
    size?: sizeCreateNestedOneWithoutProductsInput
    specification?: specificationsCreateNestedOneWithoutProductsInput
    comments?: commentsCreateNestedManyWithoutProductInput
    reviews?: reviewsCreateNestedManyWithoutProductInput
    flashSellProduct?: flashSellProductCreateNestedManyWithoutProductInput
    seller?: sellerCreateNestedOneWithoutProductsInput
    brand?: brandsCreateNestedOneWithoutProductsInput
    category?: categoryCreateNestedOneWithoutProductsInput
    subCategory?: subCategoryCreateNestedOneWithoutProductsInput
    option?: optionsCreateNestedOneWithoutProductsInput
    user?: usersCreateNestedOneWithoutProductsInput
    banner?: bannerCreateNestedManyWithoutProductInput
    adds?: addsCreateNestedManyWithoutProductInput
    orders?: ordersCreateNestedManyWithoutProductInput
  }

  export type productsUncheckedCreateWithoutMessagesInput = {
    id?: string
    price: number
    coin?: boolean
    title: string
    description: string
    thumbnail: string
    quantity?: number
    minOrder?: number
    freeCoin?: number
    offer?: number
    percentage?: boolean
    freeDelivery?: boolean
    fixedPrice?: boolean
    createdAt?: Date | string
    colorId: string
    sizeId: string
    specificationsId: string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean
    sellerId?: string | null
    brandId?: string | null
    categoryId: string
    subCategoryId: string
    optionId: string
    userId: string
    comments?: commentsUncheckedCreateNestedManyWithoutProductInput
    reviews?: reviewsUncheckedCreateNestedManyWithoutProductInput
    flashSellProduct?: flashSellProductUncheckedCreateNestedManyWithoutProductInput
    banner?: bannerUncheckedCreateNestedManyWithoutProductInput
    adds?: addsUncheckedCreateNestedManyWithoutProductInput
    orders?: ordersUncheckedCreateNestedManyWithoutProductInput
  }

  export type productsCreateOrConnectWithoutMessagesInput = {
    where: productsWhereUniqueInput
    create: XOR<productsCreateWithoutMessagesInput, productsUncheckedCreateWithoutMessagesInput>
  }

  export type productsUpsertWithoutMessagesInput = {
    update: XOR<productsUpdateWithoutMessagesInput, productsUncheckedUpdateWithoutMessagesInput>
    create: XOR<productsCreateWithoutMessagesInput, productsUncheckedCreateWithoutMessagesInput>
    where?: productsWhereInput
  }

  export type productsUpdateToOneWithWhereWithoutMessagesInput = {
    where?: productsWhereInput
    data: XOR<productsUpdateWithoutMessagesInput, productsUncheckedUpdateWithoutMessagesInput>
  }

  export type productsUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    coin?: BoolFieldUpdateOperationsInput | boolean
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    minOrder?: IntFieldUpdateOperationsInput | number
    freeCoin?: IntFieldUpdateOperationsInput | number
    offer?: IntFieldUpdateOperationsInput | number
    percentage?: BoolFieldUpdateOperationsInput | boolean
    freeDelivery?: BoolFieldUpdateOperationsInput | boolean
    fixedPrice?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: BoolFieldUpdateOperationsInput | boolean
    colors?: colorsUpdateOneWithoutProductsNestedInput
    size?: sizeUpdateOneWithoutProductsNestedInput
    specification?: specificationsUpdateOneWithoutProductsNestedInput
    comments?: commentsUpdateManyWithoutProductNestedInput
    reviews?: reviewsUpdateManyWithoutProductNestedInput
    flashSellProduct?: flashSellProductUpdateManyWithoutProductNestedInput
    seller?: sellerUpdateOneWithoutProductsNestedInput
    brand?: brandsUpdateOneWithoutProductsNestedInput
    category?: categoryUpdateOneWithoutProductsNestedInput
    subCategory?: subCategoryUpdateOneWithoutProductsNestedInput
    option?: optionsUpdateOneWithoutProductsNestedInput
    user?: usersUpdateOneWithoutProductsNestedInput
    banner?: bannerUpdateManyWithoutProductNestedInput
    adds?: addsUpdateManyWithoutProductNestedInput
    orders?: ordersUpdateManyWithoutProductNestedInput
  }

  export type productsUncheckedUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    coin?: BoolFieldUpdateOperationsInput | boolean
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    minOrder?: IntFieldUpdateOperationsInput | number
    freeCoin?: IntFieldUpdateOperationsInput | number
    offer?: IntFieldUpdateOperationsInput | number
    percentage?: BoolFieldUpdateOperationsInput | boolean
    freeDelivery?: BoolFieldUpdateOperationsInput | boolean
    fixedPrice?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    colorId?: StringFieldUpdateOperationsInput | string
    sizeId?: StringFieldUpdateOperationsInput | string
    specificationsId?: StringFieldUpdateOperationsInput | string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: BoolFieldUpdateOperationsInput | boolean
    sellerId?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    subCategoryId?: StringFieldUpdateOperationsInput | string
    optionId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    comments?: commentsUncheckedUpdateManyWithoutProductNestedInput
    reviews?: reviewsUncheckedUpdateManyWithoutProductNestedInput
    flashSellProduct?: flashSellProductUncheckedUpdateManyWithoutProductNestedInput
    banner?: bannerUncheckedUpdateManyWithoutProductNestedInput
    adds?: addsUncheckedUpdateManyWithoutProductNestedInput
    orders?: ordersUncheckedUpdateManyWithoutProductNestedInput
  }

  export type usersCreateWithoutOrdersInput = {
    id?: string
    email?: string | null
    name: string
    image?: string | null
    phone?: string | null
    birthday?: string | null
    gender?: string | null
    role?: number
    uid: string
    address?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    pushToken?: string | null
    verified?: boolean
    seller?: sellerCreateNestedManyWithoutUserInput
    brand?: brandsCreateNestedManyWithoutUserInput
    products?: productsCreateNestedManyWithoutUserInput
    comments?: commentsCreateNestedManyWithoutUserInput
    reviews?: reviewsCreateNestedManyWithoutUserInput
    notifications?: notificationsCreateNestedManyWithoutUserInput
    flashSellProduct?: flashSellProductCreateNestedManyWithoutUserInput
    conversations?: conversationsCreateNestedManyWithoutSenderInput
  }

  export type usersUncheckedCreateWithoutOrdersInput = {
    id?: string
    email?: string | null
    name: string
    image?: string | null
    phone?: string | null
    birthday?: string | null
    gender?: string | null
    role?: number
    uid: string
    address?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    pushToken?: string | null
    verified?: boolean
    seller?: sellerUncheckedCreateNestedManyWithoutUserInput
    brand?: brandsUncheckedCreateNestedManyWithoutUserInput
    products?: productsUncheckedCreateNestedManyWithoutUserInput
    comments?: commentsUncheckedCreateNestedManyWithoutUserInput
    reviews?: reviewsUncheckedCreateNestedManyWithoutUserInput
    notifications?: notificationsUncheckedCreateNestedManyWithoutUserInput
    flashSellProduct?: flashSellProductUncheckedCreateNestedManyWithoutUserInput
    conversations?: conversationsUncheckedCreateNestedManyWithoutSenderInput
  }

  export type usersCreateOrConnectWithoutOrdersInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutOrdersInput, usersUncheckedCreateWithoutOrdersInput>
  }

  export type productsCreateWithoutOrdersInput = {
    id?: string
    price: number
    coin?: boolean
    title: string
    description: string
    thumbnail: string
    quantity?: number
    minOrder?: number
    freeCoin?: number
    offer?: number
    percentage?: boolean
    freeDelivery?: boolean
    fixedPrice?: boolean
    createdAt?: Date | string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean
    colors?: colorsCreateNestedOneWithoutProductsInput
    size?: sizeCreateNestedOneWithoutProductsInput
    specification?: specificationsCreateNestedOneWithoutProductsInput
    comments?: commentsCreateNestedManyWithoutProductInput
    reviews?: reviewsCreateNestedManyWithoutProductInput
    flashSellProduct?: flashSellProductCreateNestedManyWithoutProductInput
    seller?: sellerCreateNestedOneWithoutProductsInput
    brand?: brandsCreateNestedOneWithoutProductsInput
    category?: categoryCreateNestedOneWithoutProductsInput
    subCategory?: subCategoryCreateNestedOneWithoutProductsInput
    option?: optionsCreateNestedOneWithoutProductsInput
    user?: usersCreateNestedOneWithoutProductsInput
    banner?: bannerCreateNestedManyWithoutProductInput
    adds?: addsCreateNestedManyWithoutProductInput
    messages?: messagesCreateNestedManyWithoutProductInput
  }

  export type productsUncheckedCreateWithoutOrdersInput = {
    id?: string
    price: number
    coin?: boolean
    title: string
    description: string
    thumbnail: string
    quantity?: number
    minOrder?: number
    freeCoin?: number
    offer?: number
    percentage?: boolean
    freeDelivery?: boolean
    fixedPrice?: boolean
    createdAt?: Date | string
    colorId: string
    sizeId: string
    specificationsId: string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean
    sellerId?: string | null
    brandId?: string | null
    categoryId: string
    subCategoryId: string
    optionId: string
    userId: string
    comments?: commentsUncheckedCreateNestedManyWithoutProductInput
    reviews?: reviewsUncheckedCreateNestedManyWithoutProductInput
    flashSellProduct?: flashSellProductUncheckedCreateNestedManyWithoutProductInput
    banner?: bannerUncheckedCreateNestedManyWithoutProductInput
    adds?: addsUncheckedCreateNestedManyWithoutProductInput
    messages?: messagesUncheckedCreateNestedManyWithoutProductInput
  }

  export type productsCreateOrConnectWithoutOrdersInput = {
    where: productsWhereUniqueInput
    create: XOR<productsCreateWithoutOrdersInput, productsUncheckedCreateWithoutOrdersInput>
  }

  export type usersUpsertWithoutOrdersInput = {
    update: XOR<usersUpdateWithoutOrdersInput, usersUncheckedUpdateWithoutOrdersInput>
    create: XOR<usersCreateWithoutOrdersInput, usersUncheckedCreateWithoutOrdersInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutOrdersInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutOrdersInput, usersUncheckedUpdateWithoutOrdersInput>
  }

  export type usersUpdateWithoutOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    role?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    address?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pushToken?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    seller?: sellerUpdateManyWithoutUserNestedInput
    brand?: brandsUpdateManyWithoutUserNestedInput
    products?: productsUpdateManyWithoutUserNestedInput
    comments?: commentsUpdateManyWithoutUserNestedInput
    reviews?: reviewsUpdateManyWithoutUserNestedInput
    notifications?: notificationsUpdateManyWithoutUserNestedInput
    flashSellProduct?: flashSellProductUpdateManyWithoutUserNestedInput
    conversations?: conversationsUpdateManyWithoutSenderNestedInput
  }

  export type usersUncheckedUpdateWithoutOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    role?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    address?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pushToken?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    seller?: sellerUncheckedUpdateManyWithoutUserNestedInput
    brand?: brandsUncheckedUpdateManyWithoutUserNestedInput
    products?: productsUncheckedUpdateManyWithoutUserNestedInput
    comments?: commentsUncheckedUpdateManyWithoutUserNestedInput
    reviews?: reviewsUncheckedUpdateManyWithoutUserNestedInput
    notifications?: notificationsUncheckedUpdateManyWithoutUserNestedInput
    flashSellProduct?: flashSellProductUncheckedUpdateManyWithoutUserNestedInput
    conversations?: conversationsUncheckedUpdateManyWithoutSenderNestedInput
  }

  export type productsUpsertWithoutOrdersInput = {
    update: XOR<productsUpdateWithoutOrdersInput, productsUncheckedUpdateWithoutOrdersInput>
    create: XOR<productsCreateWithoutOrdersInput, productsUncheckedCreateWithoutOrdersInput>
    where?: productsWhereInput
  }

  export type productsUpdateToOneWithWhereWithoutOrdersInput = {
    where?: productsWhereInput
    data: XOR<productsUpdateWithoutOrdersInput, productsUncheckedUpdateWithoutOrdersInput>
  }

  export type productsUpdateWithoutOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    coin?: BoolFieldUpdateOperationsInput | boolean
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    minOrder?: IntFieldUpdateOperationsInput | number
    freeCoin?: IntFieldUpdateOperationsInput | number
    offer?: IntFieldUpdateOperationsInput | number
    percentage?: BoolFieldUpdateOperationsInput | boolean
    freeDelivery?: BoolFieldUpdateOperationsInput | boolean
    fixedPrice?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: BoolFieldUpdateOperationsInput | boolean
    colors?: colorsUpdateOneWithoutProductsNestedInput
    size?: sizeUpdateOneWithoutProductsNestedInput
    specification?: specificationsUpdateOneWithoutProductsNestedInput
    comments?: commentsUpdateManyWithoutProductNestedInput
    reviews?: reviewsUpdateManyWithoutProductNestedInput
    flashSellProduct?: flashSellProductUpdateManyWithoutProductNestedInput
    seller?: sellerUpdateOneWithoutProductsNestedInput
    brand?: brandsUpdateOneWithoutProductsNestedInput
    category?: categoryUpdateOneWithoutProductsNestedInput
    subCategory?: subCategoryUpdateOneWithoutProductsNestedInput
    option?: optionsUpdateOneWithoutProductsNestedInput
    user?: usersUpdateOneWithoutProductsNestedInput
    banner?: bannerUpdateManyWithoutProductNestedInput
    adds?: addsUpdateManyWithoutProductNestedInput
    messages?: messagesUpdateManyWithoutProductNestedInput
  }

  export type productsUncheckedUpdateWithoutOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    coin?: BoolFieldUpdateOperationsInput | boolean
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    minOrder?: IntFieldUpdateOperationsInput | number
    freeCoin?: IntFieldUpdateOperationsInput | number
    offer?: IntFieldUpdateOperationsInput | number
    percentage?: BoolFieldUpdateOperationsInput | boolean
    freeDelivery?: BoolFieldUpdateOperationsInput | boolean
    fixedPrice?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    colorId?: StringFieldUpdateOperationsInput | string
    sizeId?: StringFieldUpdateOperationsInput | string
    specificationsId?: StringFieldUpdateOperationsInput | string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: BoolFieldUpdateOperationsInput | boolean
    sellerId?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    subCategoryId?: StringFieldUpdateOperationsInput | string
    optionId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    comments?: commentsUncheckedUpdateManyWithoutProductNestedInput
    reviews?: reviewsUncheckedUpdateManyWithoutProductNestedInput
    flashSellProduct?: flashSellProductUncheckedUpdateManyWithoutProductNestedInput
    banner?: bannerUncheckedUpdateManyWithoutProductNestedInput
    adds?: addsUncheckedUpdateManyWithoutProductNestedInput
    messages?: messagesUncheckedUpdateManyWithoutProductNestedInput
  }

  export type productsCreateWithoutBannerInput = {
    id?: string
    price: number
    coin?: boolean
    title: string
    description: string
    thumbnail: string
    quantity?: number
    minOrder?: number
    freeCoin?: number
    offer?: number
    percentage?: boolean
    freeDelivery?: boolean
    fixedPrice?: boolean
    createdAt?: Date | string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean
    colors?: colorsCreateNestedOneWithoutProductsInput
    size?: sizeCreateNestedOneWithoutProductsInput
    specification?: specificationsCreateNestedOneWithoutProductsInput
    comments?: commentsCreateNestedManyWithoutProductInput
    reviews?: reviewsCreateNestedManyWithoutProductInput
    flashSellProduct?: flashSellProductCreateNestedManyWithoutProductInput
    seller?: sellerCreateNestedOneWithoutProductsInput
    brand?: brandsCreateNestedOneWithoutProductsInput
    category?: categoryCreateNestedOneWithoutProductsInput
    subCategory?: subCategoryCreateNestedOneWithoutProductsInput
    option?: optionsCreateNestedOneWithoutProductsInput
    user?: usersCreateNestedOneWithoutProductsInput
    adds?: addsCreateNestedManyWithoutProductInput
    messages?: messagesCreateNestedManyWithoutProductInput
    orders?: ordersCreateNestedManyWithoutProductInput
  }

  export type productsUncheckedCreateWithoutBannerInput = {
    id?: string
    price: number
    coin?: boolean
    title: string
    description: string
    thumbnail: string
    quantity?: number
    minOrder?: number
    freeCoin?: number
    offer?: number
    percentage?: boolean
    freeDelivery?: boolean
    fixedPrice?: boolean
    createdAt?: Date | string
    colorId: string
    sizeId: string
    specificationsId: string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean
    sellerId?: string | null
    brandId?: string | null
    categoryId: string
    subCategoryId: string
    optionId: string
    userId: string
    comments?: commentsUncheckedCreateNestedManyWithoutProductInput
    reviews?: reviewsUncheckedCreateNestedManyWithoutProductInput
    flashSellProduct?: flashSellProductUncheckedCreateNestedManyWithoutProductInput
    adds?: addsUncheckedCreateNestedManyWithoutProductInput
    messages?: messagesUncheckedCreateNestedManyWithoutProductInput
    orders?: ordersUncheckedCreateNestedManyWithoutProductInput
  }

  export type productsCreateOrConnectWithoutBannerInput = {
    where: productsWhereUniqueInput
    create: XOR<productsCreateWithoutBannerInput, productsUncheckedCreateWithoutBannerInput>
  }

  export type productsUpsertWithoutBannerInput = {
    update: XOR<productsUpdateWithoutBannerInput, productsUncheckedUpdateWithoutBannerInput>
    create: XOR<productsCreateWithoutBannerInput, productsUncheckedCreateWithoutBannerInput>
    where?: productsWhereInput
  }

  export type productsUpdateToOneWithWhereWithoutBannerInput = {
    where?: productsWhereInput
    data: XOR<productsUpdateWithoutBannerInput, productsUncheckedUpdateWithoutBannerInput>
  }

  export type productsUpdateWithoutBannerInput = {
    id?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    coin?: BoolFieldUpdateOperationsInput | boolean
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    minOrder?: IntFieldUpdateOperationsInput | number
    freeCoin?: IntFieldUpdateOperationsInput | number
    offer?: IntFieldUpdateOperationsInput | number
    percentage?: BoolFieldUpdateOperationsInput | boolean
    freeDelivery?: BoolFieldUpdateOperationsInput | boolean
    fixedPrice?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: BoolFieldUpdateOperationsInput | boolean
    colors?: colorsUpdateOneWithoutProductsNestedInput
    size?: sizeUpdateOneWithoutProductsNestedInput
    specification?: specificationsUpdateOneWithoutProductsNestedInput
    comments?: commentsUpdateManyWithoutProductNestedInput
    reviews?: reviewsUpdateManyWithoutProductNestedInput
    flashSellProduct?: flashSellProductUpdateManyWithoutProductNestedInput
    seller?: sellerUpdateOneWithoutProductsNestedInput
    brand?: brandsUpdateOneWithoutProductsNestedInput
    category?: categoryUpdateOneWithoutProductsNestedInput
    subCategory?: subCategoryUpdateOneWithoutProductsNestedInput
    option?: optionsUpdateOneWithoutProductsNestedInput
    user?: usersUpdateOneWithoutProductsNestedInput
    adds?: addsUpdateManyWithoutProductNestedInput
    messages?: messagesUpdateManyWithoutProductNestedInput
    orders?: ordersUpdateManyWithoutProductNestedInput
  }

  export type productsUncheckedUpdateWithoutBannerInput = {
    id?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    coin?: BoolFieldUpdateOperationsInput | boolean
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    minOrder?: IntFieldUpdateOperationsInput | number
    freeCoin?: IntFieldUpdateOperationsInput | number
    offer?: IntFieldUpdateOperationsInput | number
    percentage?: BoolFieldUpdateOperationsInput | boolean
    freeDelivery?: BoolFieldUpdateOperationsInput | boolean
    fixedPrice?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    colorId?: StringFieldUpdateOperationsInput | string
    sizeId?: StringFieldUpdateOperationsInput | string
    specificationsId?: StringFieldUpdateOperationsInput | string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: BoolFieldUpdateOperationsInput | boolean
    sellerId?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    subCategoryId?: StringFieldUpdateOperationsInput | string
    optionId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    comments?: commentsUncheckedUpdateManyWithoutProductNestedInput
    reviews?: reviewsUncheckedUpdateManyWithoutProductNestedInput
    flashSellProduct?: flashSellProductUncheckedUpdateManyWithoutProductNestedInput
    adds?: addsUncheckedUpdateManyWithoutProductNestedInput
    messages?: messagesUncheckedUpdateManyWithoutProductNestedInput
    orders?: ordersUncheckedUpdateManyWithoutProductNestedInput
  }

  export type productsCreateWithoutAddsInput = {
    id?: string
    price: number
    coin?: boolean
    title: string
    description: string
    thumbnail: string
    quantity?: number
    minOrder?: number
    freeCoin?: number
    offer?: number
    percentage?: boolean
    freeDelivery?: boolean
    fixedPrice?: boolean
    createdAt?: Date | string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean
    colors?: colorsCreateNestedOneWithoutProductsInput
    size?: sizeCreateNestedOneWithoutProductsInput
    specification?: specificationsCreateNestedOneWithoutProductsInput
    comments?: commentsCreateNestedManyWithoutProductInput
    reviews?: reviewsCreateNestedManyWithoutProductInput
    flashSellProduct?: flashSellProductCreateNestedManyWithoutProductInput
    seller?: sellerCreateNestedOneWithoutProductsInput
    brand?: brandsCreateNestedOneWithoutProductsInput
    category?: categoryCreateNestedOneWithoutProductsInput
    subCategory?: subCategoryCreateNestedOneWithoutProductsInput
    option?: optionsCreateNestedOneWithoutProductsInput
    user?: usersCreateNestedOneWithoutProductsInput
    banner?: bannerCreateNestedManyWithoutProductInput
    messages?: messagesCreateNestedManyWithoutProductInput
    orders?: ordersCreateNestedManyWithoutProductInput
  }

  export type productsUncheckedCreateWithoutAddsInput = {
    id?: string
    price: number
    coin?: boolean
    title: string
    description: string
    thumbnail: string
    quantity?: number
    minOrder?: number
    freeCoin?: number
    offer?: number
    percentage?: boolean
    freeDelivery?: boolean
    fixedPrice?: boolean
    createdAt?: Date | string
    colorId: string
    sizeId: string
    specificationsId: string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean
    sellerId?: string | null
    brandId?: string | null
    categoryId: string
    subCategoryId: string
    optionId: string
    userId: string
    comments?: commentsUncheckedCreateNestedManyWithoutProductInput
    reviews?: reviewsUncheckedCreateNestedManyWithoutProductInput
    flashSellProduct?: flashSellProductUncheckedCreateNestedManyWithoutProductInput
    banner?: bannerUncheckedCreateNestedManyWithoutProductInput
    messages?: messagesUncheckedCreateNestedManyWithoutProductInput
    orders?: ordersUncheckedCreateNestedManyWithoutProductInput
  }

  export type productsCreateOrConnectWithoutAddsInput = {
    where: productsWhereUniqueInput
    create: XOR<productsCreateWithoutAddsInput, productsUncheckedCreateWithoutAddsInput>
  }

  export type visitorsCreateWithoutAddsInput = {
    id?: string
    ip: string
    deviceName: string
    randomId: string
    date?: Date | string
  }

  export type visitorsUncheckedCreateWithoutAddsInput = {
    id?: string
    ip: string
    deviceName: string
    randomId: string
    date?: Date | string
  }

  export type visitorsCreateOrConnectWithoutAddsInput = {
    where: visitorsWhereUniqueInput
    create: XOR<visitorsCreateWithoutAddsInput, visitorsUncheckedCreateWithoutAddsInput>
  }

  export type productsUpsertWithoutAddsInput = {
    update: XOR<productsUpdateWithoutAddsInput, productsUncheckedUpdateWithoutAddsInput>
    create: XOR<productsCreateWithoutAddsInput, productsUncheckedCreateWithoutAddsInput>
    where?: productsWhereInput
  }

  export type productsUpdateToOneWithWhereWithoutAddsInput = {
    where?: productsWhereInput
    data: XOR<productsUpdateWithoutAddsInput, productsUncheckedUpdateWithoutAddsInput>
  }

  export type productsUpdateWithoutAddsInput = {
    id?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    coin?: BoolFieldUpdateOperationsInput | boolean
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    minOrder?: IntFieldUpdateOperationsInput | number
    freeCoin?: IntFieldUpdateOperationsInput | number
    offer?: IntFieldUpdateOperationsInput | number
    percentage?: BoolFieldUpdateOperationsInput | boolean
    freeDelivery?: BoolFieldUpdateOperationsInput | boolean
    fixedPrice?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: BoolFieldUpdateOperationsInput | boolean
    colors?: colorsUpdateOneWithoutProductsNestedInput
    size?: sizeUpdateOneWithoutProductsNestedInput
    specification?: specificationsUpdateOneWithoutProductsNestedInput
    comments?: commentsUpdateManyWithoutProductNestedInput
    reviews?: reviewsUpdateManyWithoutProductNestedInput
    flashSellProduct?: flashSellProductUpdateManyWithoutProductNestedInput
    seller?: sellerUpdateOneWithoutProductsNestedInput
    brand?: brandsUpdateOneWithoutProductsNestedInput
    category?: categoryUpdateOneWithoutProductsNestedInput
    subCategory?: subCategoryUpdateOneWithoutProductsNestedInput
    option?: optionsUpdateOneWithoutProductsNestedInput
    user?: usersUpdateOneWithoutProductsNestedInput
    banner?: bannerUpdateManyWithoutProductNestedInput
    messages?: messagesUpdateManyWithoutProductNestedInput
    orders?: ordersUpdateManyWithoutProductNestedInput
  }

  export type productsUncheckedUpdateWithoutAddsInput = {
    id?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    coin?: BoolFieldUpdateOperationsInput | boolean
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    minOrder?: IntFieldUpdateOperationsInput | number
    freeCoin?: IntFieldUpdateOperationsInput | number
    offer?: IntFieldUpdateOperationsInput | number
    percentage?: BoolFieldUpdateOperationsInput | boolean
    freeDelivery?: BoolFieldUpdateOperationsInput | boolean
    fixedPrice?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    colorId?: StringFieldUpdateOperationsInput | string
    sizeId?: StringFieldUpdateOperationsInput | string
    specificationsId?: StringFieldUpdateOperationsInput | string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: BoolFieldUpdateOperationsInput | boolean
    sellerId?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    subCategoryId?: StringFieldUpdateOperationsInput | string
    optionId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    comments?: commentsUncheckedUpdateManyWithoutProductNestedInput
    reviews?: reviewsUncheckedUpdateManyWithoutProductNestedInput
    flashSellProduct?: flashSellProductUncheckedUpdateManyWithoutProductNestedInput
    banner?: bannerUncheckedUpdateManyWithoutProductNestedInput
    messages?: messagesUncheckedUpdateManyWithoutProductNestedInput
    orders?: ordersUncheckedUpdateManyWithoutProductNestedInput
  }

  export type visitorsUpsertWithoutAddsInput = {
    update: XOR<visitorsUpdateWithoutAddsInput, visitorsUncheckedUpdateWithoutAddsInput>
    create: XOR<visitorsCreateWithoutAddsInput, visitorsUncheckedCreateWithoutAddsInput>
    where?: visitorsWhereInput
  }

  export type visitorsUpdateToOneWithWhereWithoutAddsInput = {
    where?: visitorsWhereInput
    data: XOR<visitorsUpdateWithoutAddsInput, visitorsUncheckedUpdateWithoutAddsInput>
  }

  export type visitorsUpdateWithoutAddsInput = {
    id?: StringFieldUpdateOperationsInput | string
    ip?: StringFieldUpdateOperationsInput | string
    deviceName?: StringFieldUpdateOperationsInput | string
    randomId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type visitorsUncheckedUpdateWithoutAddsInput = {
    id?: StringFieldUpdateOperationsInput | string
    ip?: StringFieldUpdateOperationsInput | string
    deviceName?: StringFieldUpdateOperationsInput | string
    randomId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type addsCreateWithoutVisitorsInput = {
    id?: string
    title: string
    image: string
    date?: Date | string
    product?: productsCreateNestedOneWithoutAddsInput
  }

  export type addsUncheckedCreateWithoutVisitorsInput = {
    id?: string
    title: string
    image: string
    productId: string
    date?: Date | string
  }

  export type addsCreateOrConnectWithoutVisitorsInput = {
    where: addsWhereUniqueInput
    create: XOR<addsCreateWithoutVisitorsInput, addsUncheckedCreateWithoutVisitorsInput>
  }

  export type addsUpsertWithoutVisitorsInput = {
    update: XOR<addsUpdateWithoutVisitorsInput, addsUncheckedUpdateWithoutVisitorsInput>
    create: XOR<addsCreateWithoutVisitorsInput, addsUncheckedCreateWithoutVisitorsInput>
    where?: addsWhereInput
  }

  export type addsUpdateToOneWithWhereWithoutVisitorsInput = {
    where?: addsWhereInput
    data: XOR<addsUpdateWithoutVisitorsInput, addsUncheckedUpdateWithoutVisitorsInput>
  }

  export type addsUpdateWithoutVisitorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: productsUpdateOneWithoutAddsNestedInput
  }

  export type addsUncheckedUpdateWithoutVisitorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type sellerCreateManyUserInput = {
    id?: string
    shopName: string
    shopAddress: string
    categories?: NullableJsonNullValueInput | InputJsonValue
    logo: string
    verified?: boolean
  }

  export type brandsCreateManyUserInput = {
    id?: string
    brandName: string
    brandAddress: string
    brandIcon: string
    categories?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean
  }

  export type productsCreateManyUserInput = {
    id?: string
    price: number
    coin?: boolean
    title: string
    description: string
    thumbnail: string
    quantity?: number
    minOrder?: number
    freeCoin?: number
    offer?: number
    percentage?: boolean
    freeDelivery?: boolean
    fixedPrice?: boolean
    createdAt?: Date | string
    colorId: string
    sizeId: string
    specificationsId: string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean
    sellerId?: string | null
    brandId?: string | null
    categoryId: string
    subCategoryId: string
    optionId: string
  }

  export type commentsCreateManyUserInput = {
    id?: string
    message: string
    image?: string | null
    replay?: string | null
    productId: string
    receiverId: string
  }

  export type reviewsCreateManyUserInput = {
    id?: string
    message: string
    rate?: number
    productId: string
    sellerId?: string | null
    brandId?: string | null
  }

  export type notificationsCreateManyUserInput = {
    id?: string
    message: string
    title: string
    commentId: string
    reviewId: string
  }

  export type flashSellProductCreateManyUserInput = {
    id?: string
    offer?: number
    percentage?: boolean
    minSell?: number
    quantity?: number
    deliveryFree?: boolean
    flashSellId: string
    productId: string
    createdAt?: Date | string
  }

  export type conversationsCreateManySenderInput = {
    id?: string
    receiverId: string
    date?: Date | string
  }

  export type ordersCreateManyBuyerInput = {
    id?: string
    productId: string
    offerPrice?: number
    date?: Date | string
  }

  export type sellerUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopName?: StringFieldUpdateOperationsInput | string
    shopAddress?: StringFieldUpdateOperationsInput | string
    categories?: NullableJsonNullValueInput | InputJsonValue
    logo?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    products?: productsUpdateManyWithoutSellerNestedInput
    reviews?: reviewsUpdateManyWithoutSellerNestedInput
  }

  export type sellerUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopName?: StringFieldUpdateOperationsInput | string
    shopAddress?: StringFieldUpdateOperationsInput | string
    categories?: NullableJsonNullValueInput | InputJsonValue
    logo?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    products?: productsUncheckedUpdateManyWithoutSellerNestedInput
    reviews?: reviewsUncheckedUpdateManyWithoutSellerNestedInput
  }

  export type sellerUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopName?: StringFieldUpdateOperationsInput | string
    shopAddress?: StringFieldUpdateOperationsInput | string
    categories?: NullableJsonNullValueInput | InputJsonValue
    logo?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
  }

  export type brandsUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    brandName?: StringFieldUpdateOperationsInput | string
    brandAddress?: StringFieldUpdateOperationsInput | string
    brandIcon?: StringFieldUpdateOperationsInput | string
    categories?: NullableJsonNullValueInput | InputJsonValue
    verified?: BoolFieldUpdateOperationsInput | boolean
    products?: productsUpdateManyWithoutBrandNestedInput
    reviews?: reviewsUpdateManyWithoutBrandNestedInput
  }

  export type brandsUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    brandName?: StringFieldUpdateOperationsInput | string
    brandAddress?: StringFieldUpdateOperationsInput | string
    brandIcon?: StringFieldUpdateOperationsInput | string
    categories?: NullableJsonNullValueInput | InputJsonValue
    verified?: BoolFieldUpdateOperationsInput | boolean
    products?: productsUncheckedUpdateManyWithoutBrandNestedInput
    reviews?: reviewsUncheckedUpdateManyWithoutBrandNestedInput
  }

  export type brandsUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    brandName?: StringFieldUpdateOperationsInput | string
    brandAddress?: StringFieldUpdateOperationsInput | string
    brandIcon?: StringFieldUpdateOperationsInput | string
    categories?: NullableJsonNullValueInput | InputJsonValue
    verified?: BoolFieldUpdateOperationsInput | boolean
  }

  export type productsUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    coin?: BoolFieldUpdateOperationsInput | boolean
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    minOrder?: IntFieldUpdateOperationsInput | number
    freeCoin?: IntFieldUpdateOperationsInput | number
    offer?: IntFieldUpdateOperationsInput | number
    percentage?: BoolFieldUpdateOperationsInput | boolean
    freeDelivery?: BoolFieldUpdateOperationsInput | boolean
    fixedPrice?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: BoolFieldUpdateOperationsInput | boolean
    colors?: colorsUpdateOneWithoutProductsNestedInput
    size?: sizeUpdateOneWithoutProductsNestedInput
    specification?: specificationsUpdateOneWithoutProductsNestedInput
    comments?: commentsUpdateManyWithoutProductNestedInput
    reviews?: reviewsUpdateManyWithoutProductNestedInput
    flashSellProduct?: flashSellProductUpdateManyWithoutProductNestedInput
    seller?: sellerUpdateOneWithoutProductsNestedInput
    brand?: brandsUpdateOneWithoutProductsNestedInput
    category?: categoryUpdateOneWithoutProductsNestedInput
    subCategory?: subCategoryUpdateOneWithoutProductsNestedInput
    option?: optionsUpdateOneWithoutProductsNestedInput
    banner?: bannerUpdateManyWithoutProductNestedInput
    adds?: addsUpdateManyWithoutProductNestedInput
    messages?: messagesUpdateManyWithoutProductNestedInput
    orders?: ordersUpdateManyWithoutProductNestedInput
  }

  export type productsUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    coin?: BoolFieldUpdateOperationsInput | boolean
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    minOrder?: IntFieldUpdateOperationsInput | number
    freeCoin?: IntFieldUpdateOperationsInput | number
    offer?: IntFieldUpdateOperationsInput | number
    percentage?: BoolFieldUpdateOperationsInput | boolean
    freeDelivery?: BoolFieldUpdateOperationsInput | boolean
    fixedPrice?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    colorId?: StringFieldUpdateOperationsInput | string
    sizeId?: StringFieldUpdateOperationsInput | string
    specificationsId?: StringFieldUpdateOperationsInput | string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: BoolFieldUpdateOperationsInput | boolean
    sellerId?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    subCategoryId?: StringFieldUpdateOperationsInput | string
    optionId?: StringFieldUpdateOperationsInput | string
    comments?: commentsUncheckedUpdateManyWithoutProductNestedInput
    reviews?: reviewsUncheckedUpdateManyWithoutProductNestedInput
    flashSellProduct?: flashSellProductUncheckedUpdateManyWithoutProductNestedInput
    banner?: bannerUncheckedUpdateManyWithoutProductNestedInput
    adds?: addsUncheckedUpdateManyWithoutProductNestedInput
    messages?: messagesUncheckedUpdateManyWithoutProductNestedInput
    orders?: ordersUncheckedUpdateManyWithoutProductNestedInput
  }

  export type productsUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    coin?: BoolFieldUpdateOperationsInput | boolean
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    minOrder?: IntFieldUpdateOperationsInput | number
    freeCoin?: IntFieldUpdateOperationsInput | number
    offer?: IntFieldUpdateOperationsInput | number
    percentage?: BoolFieldUpdateOperationsInput | boolean
    freeDelivery?: BoolFieldUpdateOperationsInput | boolean
    fixedPrice?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    colorId?: StringFieldUpdateOperationsInput | string
    sizeId?: StringFieldUpdateOperationsInput | string
    specificationsId?: StringFieldUpdateOperationsInput | string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: BoolFieldUpdateOperationsInput | boolean
    sellerId?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    subCategoryId?: StringFieldUpdateOperationsInput | string
    optionId?: StringFieldUpdateOperationsInput | string
  }

  export type commentsUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    replay?: NullableStringFieldUpdateOperationsInput | string | null
    receiverId?: StringFieldUpdateOperationsInput | string
    product?: productsUpdateOneWithoutCommentsNestedInput
    notifications?: notificationsUpdateManyWithoutCommentsNestedInput
  }

  export type commentsUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    replay?: NullableStringFieldUpdateOperationsInput | string | null
    productId?: StringFieldUpdateOperationsInput | string
    receiverId?: StringFieldUpdateOperationsInput | string
    notifications?: notificationsUncheckedUpdateManyWithoutCommentsNestedInput
  }

  export type commentsUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    replay?: NullableStringFieldUpdateOperationsInput | string | null
    productId?: StringFieldUpdateOperationsInput | string
    receiverId?: StringFieldUpdateOperationsInput | string
  }

  export type reviewsUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    rate?: IntFieldUpdateOperationsInput | number
    product?: productsUpdateOneWithoutReviewsNestedInput
    notifications?: notificationsUpdateManyWithoutReviewsNestedInput
    seller?: sellerUpdateOneWithoutReviewsNestedInput
    brand?: brandsUpdateOneWithoutReviewsNestedInput
  }

  export type reviewsUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    rate?: IntFieldUpdateOperationsInput | number
    productId?: StringFieldUpdateOperationsInput | string
    sellerId?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    notifications?: notificationsUncheckedUpdateManyWithoutReviewsNestedInput
  }

  export type reviewsUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    rate?: IntFieldUpdateOperationsInput | number
    productId?: StringFieldUpdateOperationsInput | string
    sellerId?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type notificationsUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    comments?: commentsUpdateOneWithoutNotificationsNestedInput
    reviews?: reviewsUpdateOneWithoutNotificationsNestedInput
  }

  export type notificationsUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    commentId?: StringFieldUpdateOperationsInput | string
    reviewId?: StringFieldUpdateOperationsInput | string
  }

  export type notificationsUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    commentId?: StringFieldUpdateOperationsInput | string
    reviewId?: StringFieldUpdateOperationsInput | string
  }

  export type flashSellProductUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    offer?: IntFieldUpdateOperationsInput | number
    percentage?: BoolFieldUpdateOperationsInput | boolean
    minSell?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    deliveryFree?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    flashSell?: flashSellUpdateOneWithoutProductNestedInput
    product?: productsUpdateOneWithoutFlashSellProductNestedInput
  }

  export type flashSellProductUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    offer?: IntFieldUpdateOperationsInput | number
    percentage?: BoolFieldUpdateOperationsInput | boolean
    minSell?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    deliveryFree?: BoolFieldUpdateOperationsInput | boolean
    flashSellId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type flashSellProductUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    offer?: IntFieldUpdateOperationsInput | number
    percentage?: BoolFieldUpdateOperationsInput | boolean
    minSell?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    deliveryFree?: BoolFieldUpdateOperationsInput | boolean
    flashSellId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type conversationsUpdateWithoutSenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    receiverId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type conversationsUncheckedUpdateWithoutSenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    receiverId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type conversationsUncheckedUpdateManyWithoutSenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    receiverId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ordersUpdateWithoutBuyerInput = {
    id?: StringFieldUpdateOperationsInput | string
    offerPrice?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: productsUpdateOneRequiredWithoutOrdersNestedInput
  }

  export type ordersUncheckedUpdateWithoutBuyerInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    offerPrice?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ordersUncheckedUpdateManyWithoutBuyerInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    offerPrice?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type subCategoryCreateManyCategoryInput = {
    id?: string
    name: string
  }

  export type productsCreateManyCategoryInput = {
    id?: string
    price: number
    coin?: boolean
    title: string
    description: string
    thumbnail: string
    quantity?: number
    minOrder?: number
    freeCoin?: number
    offer?: number
    percentage?: boolean
    freeDelivery?: boolean
    fixedPrice?: boolean
    createdAt?: Date | string
    colorId: string
    sizeId: string
    specificationsId: string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean
    sellerId?: string | null
    brandId?: string | null
    subCategoryId: string
    optionId: string
    userId: string
  }

  export type subCategoryUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    options?: optionsUpdateManyWithoutSubCategoryNestedInput
    products?: productsUpdateManyWithoutSubCategoryNestedInput
  }

  export type subCategoryUncheckedUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    options?: optionsUncheckedUpdateManyWithoutSubCategoryNestedInput
    products?: productsUncheckedUpdateManyWithoutSubCategoryNestedInput
  }

  export type subCategoryUncheckedUpdateManyWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type productsUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    coin?: BoolFieldUpdateOperationsInput | boolean
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    minOrder?: IntFieldUpdateOperationsInput | number
    freeCoin?: IntFieldUpdateOperationsInput | number
    offer?: IntFieldUpdateOperationsInput | number
    percentage?: BoolFieldUpdateOperationsInput | boolean
    freeDelivery?: BoolFieldUpdateOperationsInput | boolean
    fixedPrice?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: BoolFieldUpdateOperationsInput | boolean
    colors?: colorsUpdateOneWithoutProductsNestedInput
    size?: sizeUpdateOneWithoutProductsNestedInput
    specification?: specificationsUpdateOneWithoutProductsNestedInput
    comments?: commentsUpdateManyWithoutProductNestedInput
    reviews?: reviewsUpdateManyWithoutProductNestedInput
    flashSellProduct?: flashSellProductUpdateManyWithoutProductNestedInput
    seller?: sellerUpdateOneWithoutProductsNestedInput
    brand?: brandsUpdateOneWithoutProductsNestedInput
    subCategory?: subCategoryUpdateOneWithoutProductsNestedInput
    option?: optionsUpdateOneWithoutProductsNestedInput
    user?: usersUpdateOneWithoutProductsNestedInput
    banner?: bannerUpdateManyWithoutProductNestedInput
    adds?: addsUpdateManyWithoutProductNestedInput
    messages?: messagesUpdateManyWithoutProductNestedInput
    orders?: ordersUpdateManyWithoutProductNestedInput
  }

  export type productsUncheckedUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    coin?: BoolFieldUpdateOperationsInput | boolean
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    minOrder?: IntFieldUpdateOperationsInput | number
    freeCoin?: IntFieldUpdateOperationsInput | number
    offer?: IntFieldUpdateOperationsInput | number
    percentage?: BoolFieldUpdateOperationsInput | boolean
    freeDelivery?: BoolFieldUpdateOperationsInput | boolean
    fixedPrice?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    colorId?: StringFieldUpdateOperationsInput | string
    sizeId?: StringFieldUpdateOperationsInput | string
    specificationsId?: StringFieldUpdateOperationsInput | string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: BoolFieldUpdateOperationsInput | boolean
    sellerId?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    subCategoryId?: StringFieldUpdateOperationsInput | string
    optionId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    comments?: commentsUncheckedUpdateManyWithoutProductNestedInput
    reviews?: reviewsUncheckedUpdateManyWithoutProductNestedInput
    flashSellProduct?: flashSellProductUncheckedUpdateManyWithoutProductNestedInput
    banner?: bannerUncheckedUpdateManyWithoutProductNestedInput
    adds?: addsUncheckedUpdateManyWithoutProductNestedInput
    messages?: messagesUncheckedUpdateManyWithoutProductNestedInput
    orders?: ordersUncheckedUpdateManyWithoutProductNestedInput
  }

  export type productsUncheckedUpdateManyWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    coin?: BoolFieldUpdateOperationsInput | boolean
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    minOrder?: IntFieldUpdateOperationsInput | number
    freeCoin?: IntFieldUpdateOperationsInput | number
    offer?: IntFieldUpdateOperationsInput | number
    percentage?: BoolFieldUpdateOperationsInput | boolean
    freeDelivery?: BoolFieldUpdateOperationsInput | boolean
    fixedPrice?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    colorId?: StringFieldUpdateOperationsInput | string
    sizeId?: StringFieldUpdateOperationsInput | string
    specificationsId?: StringFieldUpdateOperationsInput | string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: BoolFieldUpdateOperationsInput | boolean
    sellerId?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    subCategoryId?: StringFieldUpdateOperationsInput | string
    optionId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type optionsCreateManySubCategoryInput = {
    id?: string
    name: string
  }

  export type productsCreateManySubCategoryInput = {
    id?: string
    price: number
    coin?: boolean
    title: string
    description: string
    thumbnail: string
    quantity?: number
    minOrder?: number
    freeCoin?: number
    offer?: number
    percentage?: boolean
    freeDelivery?: boolean
    fixedPrice?: boolean
    createdAt?: Date | string
    colorId: string
    sizeId: string
    specificationsId: string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean
    sellerId?: string | null
    brandId?: string | null
    categoryId: string
    optionId: string
    userId: string
  }

  export type optionsUpdateWithoutSubCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    products?: productsUpdateManyWithoutOptionNestedInput
  }

  export type optionsUncheckedUpdateWithoutSubCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    products?: productsUncheckedUpdateManyWithoutOptionNestedInput
  }

  export type optionsUncheckedUpdateManyWithoutSubCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type productsUpdateWithoutSubCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    coin?: BoolFieldUpdateOperationsInput | boolean
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    minOrder?: IntFieldUpdateOperationsInput | number
    freeCoin?: IntFieldUpdateOperationsInput | number
    offer?: IntFieldUpdateOperationsInput | number
    percentage?: BoolFieldUpdateOperationsInput | boolean
    freeDelivery?: BoolFieldUpdateOperationsInput | boolean
    fixedPrice?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: BoolFieldUpdateOperationsInput | boolean
    colors?: colorsUpdateOneWithoutProductsNestedInput
    size?: sizeUpdateOneWithoutProductsNestedInput
    specification?: specificationsUpdateOneWithoutProductsNestedInput
    comments?: commentsUpdateManyWithoutProductNestedInput
    reviews?: reviewsUpdateManyWithoutProductNestedInput
    flashSellProduct?: flashSellProductUpdateManyWithoutProductNestedInput
    seller?: sellerUpdateOneWithoutProductsNestedInput
    brand?: brandsUpdateOneWithoutProductsNestedInput
    category?: categoryUpdateOneWithoutProductsNestedInput
    option?: optionsUpdateOneWithoutProductsNestedInput
    user?: usersUpdateOneWithoutProductsNestedInput
    banner?: bannerUpdateManyWithoutProductNestedInput
    adds?: addsUpdateManyWithoutProductNestedInput
    messages?: messagesUpdateManyWithoutProductNestedInput
    orders?: ordersUpdateManyWithoutProductNestedInput
  }

  export type productsUncheckedUpdateWithoutSubCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    coin?: BoolFieldUpdateOperationsInput | boolean
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    minOrder?: IntFieldUpdateOperationsInput | number
    freeCoin?: IntFieldUpdateOperationsInput | number
    offer?: IntFieldUpdateOperationsInput | number
    percentage?: BoolFieldUpdateOperationsInput | boolean
    freeDelivery?: BoolFieldUpdateOperationsInput | boolean
    fixedPrice?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    colorId?: StringFieldUpdateOperationsInput | string
    sizeId?: StringFieldUpdateOperationsInput | string
    specificationsId?: StringFieldUpdateOperationsInput | string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: BoolFieldUpdateOperationsInput | boolean
    sellerId?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    optionId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    comments?: commentsUncheckedUpdateManyWithoutProductNestedInput
    reviews?: reviewsUncheckedUpdateManyWithoutProductNestedInput
    flashSellProduct?: flashSellProductUncheckedUpdateManyWithoutProductNestedInput
    banner?: bannerUncheckedUpdateManyWithoutProductNestedInput
    adds?: addsUncheckedUpdateManyWithoutProductNestedInput
    messages?: messagesUncheckedUpdateManyWithoutProductNestedInput
    orders?: ordersUncheckedUpdateManyWithoutProductNestedInput
  }

  export type productsUncheckedUpdateManyWithoutSubCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    coin?: BoolFieldUpdateOperationsInput | boolean
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    minOrder?: IntFieldUpdateOperationsInput | number
    freeCoin?: IntFieldUpdateOperationsInput | number
    offer?: IntFieldUpdateOperationsInput | number
    percentage?: BoolFieldUpdateOperationsInput | boolean
    freeDelivery?: BoolFieldUpdateOperationsInput | boolean
    fixedPrice?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    colorId?: StringFieldUpdateOperationsInput | string
    sizeId?: StringFieldUpdateOperationsInput | string
    specificationsId?: StringFieldUpdateOperationsInput | string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: BoolFieldUpdateOperationsInput | boolean
    sellerId?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    optionId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type productsCreateManyOptionInput = {
    id?: string
    price: number
    coin?: boolean
    title: string
    description: string
    thumbnail: string
    quantity?: number
    minOrder?: number
    freeCoin?: number
    offer?: number
    percentage?: boolean
    freeDelivery?: boolean
    fixedPrice?: boolean
    createdAt?: Date | string
    colorId: string
    sizeId: string
    specificationsId: string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean
    sellerId?: string | null
    brandId?: string | null
    categoryId: string
    subCategoryId: string
    userId: string
  }

  export type productsUpdateWithoutOptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    coin?: BoolFieldUpdateOperationsInput | boolean
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    minOrder?: IntFieldUpdateOperationsInput | number
    freeCoin?: IntFieldUpdateOperationsInput | number
    offer?: IntFieldUpdateOperationsInput | number
    percentage?: BoolFieldUpdateOperationsInput | boolean
    freeDelivery?: BoolFieldUpdateOperationsInput | boolean
    fixedPrice?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: BoolFieldUpdateOperationsInput | boolean
    colors?: colorsUpdateOneWithoutProductsNestedInput
    size?: sizeUpdateOneWithoutProductsNestedInput
    specification?: specificationsUpdateOneWithoutProductsNestedInput
    comments?: commentsUpdateManyWithoutProductNestedInput
    reviews?: reviewsUpdateManyWithoutProductNestedInput
    flashSellProduct?: flashSellProductUpdateManyWithoutProductNestedInput
    seller?: sellerUpdateOneWithoutProductsNestedInput
    brand?: brandsUpdateOneWithoutProductsNestedInput
    category?: categoryUpdateOneWithoutProductsNestedInput
    subCategory?: subCategoryUpdateOneWithoutProductsNestedInput
    user?: usersUpdateOneWithoutProductsNestedInput
    banner?: bannerUpdateManyWithoutProductNestedInput
    adds?: addsUpdateManyWithoutProductNestedInput
    messages?: messagesUpdateManyWithoutProductNestedInput
    orders?: ordersUpdateManyWithoutProductNestedInput
  }

  export type productsUncheckedUpdateWithoutOptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    coin?: BoolFieldUpdateOperationsInput | boolean
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    minOrder?: IntFieldUpdateOperationsInput | number
    freeCoin?: IntFieldUpdateOperationsInput | number
    offer?: IntFieldUpdateOperationsInput | number
    percentage?: BoolFieldUpdateOperationsInput | boolean
    freeDelivery?: BoolFieldUpdateOperationsInput | boolean
    fixedPrice?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    colorId?: StringFieldUpdateOperationsInput | string
    sizeId?: StringFieldUpdateOperationsInput | string
    specificationsId?: StringFieldUpdateOperationsInput | string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: BoolFieldUpdateOperationsInput | boolean
    sellerId?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    subCategoryId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    comments?: commentsUncheckedUpdateManyWithoutProductNestedInput
    reviews?: reviewsUncheckedUpdateManyWithoutProductNestedInput
    flashSellProduct?: flashSellProductUncheckedUpdateManyWithoutProductNestedInput
    banner?: bannerUncheckedUpdateManyWithoutProductNestedInput
    adds?: addsUncheckedUpdateManyWithoutProductNestedInput
    messages?: messagesUncheckedUpdateManyWithoutProductNestedInput
    orders?: ordersUncheckedUpdateManyWithoutProductNestedInput
  }

  export type productsUncheckedUpdateManyWithoutOptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    coin?: BoolFieldUpdateOperationsInput | boolean
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    minOrder?: IntFieldUpdateOperationsInput | number
    freeCoin?: IntFieldUpdateOperationsInput | number
    offer?: IntFieldUpdateOperationsInput | number
    percentage?: BoolFieldUpdateOperationsInput | boolean
    freeDelivery?: BoolFieldUpdateOperationsInput | boolean
    fixedPrice?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    colorId?: StringFieldUpdateOperationsInput | string
    sizeId?: StringFieldUpdateOperationsInput | string
    specificationsId?: StringFieldUpdateOperationsInput | string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: BoolFieldUpdateOperationsInput | boolean
    sellerId?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    subCategoryId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type productsCreateManySellerInput = {
    id?: string
    price: number
    coin?: boolean
    title: string
    description: string
    thumbnail: string
    quantity?: number
    minOrder?: number
    freeCoin?: number
    offer?: number
    percentage?: boolean
    freeDelivery?: boolean
    fixedPrice?: boolean
    createdAt?: Date | string
    colorId: string
    sizeId: string
    specificationsId: string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean
    brandId?: string | null
    categoryId: string
    subCategoryId: string
    optionId: string
    userId: string
  }

  export type reviewsCreateManySellerInput = {
    id?: string
    message: string
    rate?: number
    userId: string
    productId: string
    brandId?: string | null
  }

  export type productsUpdateWithoutSellerInput = {
    id?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    coin?: BoolFieldUpdateOperationsInput | boolean
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    minOrder?: IntFieldUpdateOperationsInput | number
    freeCoin?: IntFieldUpdateOperationsInput | number
    offer?: IntFieldUpdateOperationsInput | number
    percentage?: BoolFieldUpdateOperationsInput | boolean
    freeDelivery?: BoolFieldUpdateOperationsInput | boolean
    fixedPrice?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: BoolFieldUpdateOperationsInput | boolean
    colors?: colorsUpdateOneWithoutProductsNestedInput
    size?: sizeUpdateOneWithoutProductsNestedInput
    specification?: specificationsUpdateOneWithoutProductsNestedInput
    comments?: commentsUpdateManyWithoutProductNestedInput
    reviews?: reviewsUpdateManyWithoutProductNestedInput
    flashSellProduct?: flashSellProductUpdateManyWithoutProductNestedInput
    brand?: brandsUpdateOneWithoutProductsNestedInput
    category?: categoryUpdateOneWithoutProductsNestedInput
    subCategory?: subCategoryUpdateOneWithoutProductsNestedInput
    option?: optionsUpdateOneWithoutProductsNestedInput
    user?: usersUpdateOneWithoutProductsNestedInput
    banner?: bannerUpdateManyWithoutProductNestedInput
    adds?: addsUpdateManyWithoutProductNestedInput
    messages?: messagesUpdateManyWithoutProductNestedInput
    orders?: ordersUpdateManyWithoutProductNestedInput
  }

  export type productsUncheckedUpdateWithoutSellerInput = {
    id?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    coin?: BoolFieldUpdateOperationsInput | boolean
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    minOrder?: IntFieldUpdateOperationsInput | number
    freeCoin?: IntFieldUpdateOperationsInput | number
    offer?: IntFieldUpdateOperationsInput | number
    percentage?: BoolFieldUpdateOperationsInput | boolean
    freeDelivery?: BoolFieldUpdateOperationsInput | boolean
    fixedPrice?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    colorId?: StringFieldUpdateOperationsInput | string
    sizeId?: StringFieldUpdateOperationsInput | string
    specificationsId?: StringFieldUpdateOperationsInput | string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: BoolFieldUpdateOperationsInput | boolean
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    subCategoryId?: StringFieldUpdateOperationsInput | string
    optionId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    comments?: commentsUncheckedUpdateManyWithoutProductNestedInput
    reviews?: reviewsUncheckedUpdateManyWithoutProductNestedInput
    flashSellProduct?: flashSellProductUncheckedUpdateManyWithoutProductNestedInput
    banner?: bannerUncheckedUpdateManyWithoutProductNestedInput
    adds?: addsUncheckedUpdateManyWithoutProductNestedInput
    messages?: messagesUncheckedUpdateManyWithoutProductNestedInput
    orders?: ordersUncheckedUpdateManyWithoutProductNestedInput
  }

  export type productsUncheckedUpdateManyWithoutSellerInput = {
    id?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    coin?: BoolFieldUpdateOperationsInput | boolean
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    minOrder?: IntFieldUpdateOperationsInput | number
    freeCoin?: IntFieldUpdateOperationsInput | number
    offer?: IntFieldUpdateOperationsInput | number
    percentage?: BoolFieldUpdateOperationsInput | boolean
    freeDelivery?: BoolFieldUpdateOperationsInput | boolean
    fixedPrice?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    colorId?: StringFieldUpdateOperationsInput | string
    sizeId?: StringFieldUpdateOperationsInput | string
    specificationsId?: StringFieldUpdateOperationsInput | string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: BoolFieldUpdateOperationsInput | boolean
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    subCategoryId?: StringFieldUpdateOperationsInput | string
    optionId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type reviewsUpdateWithoutSellerInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    rate?: IntFieldUpdateOperationsInput | number
    user?: usersUpdateOneWithoutReviewsNestedInput
    product?: productsUpdateOneWithoutReviewsNestedInput
    notifications?: notificationsUpdateManyWithoutReviewsNestedInput
    brand?: brandsUpdateOneWithoutReviewsNestedInput
  }

  export type reviewsUncheckedUpdateWithoutSellerInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    rate?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    notifications?: notificationsUncheckedUpdateManyWithoutReviewsNestedInput
  }

  export type reviewsUncheckedUpdateManyWithoutSellerInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    rate?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type productsCreateManyBrandInput = {
    id?: string
    price: number
    coin?: boolean
    title: string
    description: string
    thumbnail: string
    quantity?: number
    minOrder?: number
    freeCoin?: number
    offer?: number
    percentage?: boolean
    freeDelivery?: boolean
    fixedPrice?: boolean
    createdAt?: Date | string
    colorId: string
    sizeId: string
    specificationsId: string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean
    sellerId?: string | null
    categoryId: string
    subCategoryId: string
    optionId: string
    userId: string
  }

  export type reviewsCreateManyBrandInput = {
    id?: string
    message: string
    rate?: number
    userId: string
    productId: string
    sellerId?: string | null
  }

  export type productsUpdateWithoutBrandInput = {
    id?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    coin?: BoolFieldUpdateOperationsInput | boolean
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    minOrder?: IntFieldUpdateOperationsInput | number
    freeCoin?: IntFieldUpdateOperationsInput | number
    offer?: IntFieldUpdateOperationsInput | number
    percentage?: BoolFieldUpdateOperationsInput | boolean
    freeDelivery?: BoolFieldUpdateOperationsInput | boolean
    fixedPrice?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: BoolFieldUpdateOperationsInput | boolean
    colors?: colorsUpdateOneWithoutProductsNestedInput
    size?: sizeUpdateOneWithoutProductsNestedInput
    specification?: specificationsUpdateOneWithoutProductsNestedInput
    comments?: commentsUpdateManyWithoutProductNestedInput
    reviews?: reviewsUpdateManyWithoutProductNestedInput
    flashSellProduct?: flashSellProductUpdateManyWithoutProductNestedInput
    seller?: sellerUpdateOneWithoutProductsNestedInput
    category?: categoryUpdateOneWithoutProductsNestedInput
    subCategory?: subCategoryUpdateOneWithoutProductsNestedInput
    option?: optionsUpdateOneWithoutProductsNestedInput
    user?: usersUpdateOneWithoutProductsNestedInput
    banner?: bannerUpdateManyWithoutProductNestedInput
    adds?: addsUpdateManyWithoutProductNestedInput
    messages?: messagesUpdateManyWithoutProductNestedInput
    orders?: ordersUpdateManyWithoutProductNestedInput
  }

  export type productsUncheckedUpdateWithoutBrandInput = {
    id?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    coin?: BoolFieldUpdateOperationsInput | boolean
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    minOrder?: IntFieldUpdateOperationsInput | number
    freeCoin?: IntFieldUpdateOperationsInput | number
    offer?: IntFieldUpdateOperationsInput | number
    percentage?: BoolFieldUpdateOperationsInput | boolean
    freeDelivery?: BoolFieldUpdateOperationsInput | boolean
    fixedPrice?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    colorId?: StringFieldUpdateOperationsInput | string
    sizeId?: StringFieldUpdateOperationsInput | string
    specificationsId?: StringFieldUpdateOperationsInput | string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: BoolFieldUpdateOperationsInput | boolean
    sellerId?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    subCategoryId?: StringFieldUpdateOperationsInput | string
    optionId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    comments?: commentsUncheckedUpdateManyWithoutProductNestedInput
    reviews?: reviewsUncheckedUpdateManyWithoutProductNestedInput
    flashSellProduct?: flashSellProductUncheckedUpdateManyWithoutProductNestedInput
    banner?: bannerUncheckedUpdateManyWithoutProductNestedInput
    adds?: addsUncheckedUpdateManyWithoutProductNestedInput
    messages?: messagesUncheckedUpdateManyWithoutProductNestedInput
    orders?: ordersUncheckedUpdateManyWithoutProductNestedInput
  }

  export type productsUncheckedUpdateManyWithoutBrandInput = {
    id?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    coin?: BoolFieldUpdateOperationsInput | boolean
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    minOrder?: IntFieldUpdateOperationsInput | number
    freeCoin?: IntFieldUpdateOperationsInput | number
    offer?: IntFieldUpdateOperationsInput | number
    percentage?: BoolFieldUpdateOperationsInput | boolean
    freeDelivery?: BoolFieldUpdateOperationsInput | boolean
    fixedPrice?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    colorId?: StringFieldUpdateOperationsInput | string
    sizeId?: StringFieldUpdateOperationsInput | string
    specificationsId?: StringFieldUpdateOperationsInput | string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: BoolFieldUpdateOperationsInput | boolean
    sellerId?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    subCategoryId?: StringFieldUpdateOperationsInput | string
    optionId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type reviewsUpdateWithoutBrandInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    rate?: IntFieldUpdateOperationsInput | number
    user?: usersUpdateOneWithoutReviewsNestedInput
    product?: productsUpdateOneWithoutReviewsNestedInput
    notifications?: notificationsUpdateManyWithoutReviewsNestedInput
    seller?: sellerUpdateOneWithoutReviewsNestedInput
  }

  export type reviewsUncheckedUpdateWithoutBrandInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    rate?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    sellerId?: NullableStringFieldUpdateOperationsInput | string | null
    notifications?: notificationsUncheckedUpdateManyWithoutReviewsNestedInput
  }

  export type reviewsUncheckedUpdateManyWithoutBrandInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    rate?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    sellerId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type commentsCreateManyProductInput = {
    id?: string
    message: string
    image?: string | null
    replay?: string | null
    userId: string
    receiverId: string
  }

  export type reviewsCreateManyProductInput = {
    id?: string
    message: string
    rate?: number
    userId: string
    sellerId?: string | null
    brandId?: string | null
  }

  export type flashSellProductCreateManyProductInput = {
    id?: string
    offer?: number
    percentage?: boolean
    minSell?: number
    quantity?: number
    deliveryFree?: boolean
    flashSellId: string
    userId: string
    createdAt?: Date | string
  }

  export type bannerCreateManyProductInput = {
    id?: string
    title: string
    image: string
  }

  export type addsCreateManyProductInput = {
    id?: string
    title: string
    image: string
    visitorId?: string | null
    date?: Date | string
  }

  export type messagesCreateManyProductInput = {
    id?: string
    message?: string | null
    image?: string | null
    date?: Date | string
  }

  export type ordersCreateManyProductInput = {
    id?: string
    buyerid: string
    offerPrice?: number
    date?: Date | string
  }

  export type commentsUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    replay?: NullableStringFieldUpdateOperationsInput | string | null
    receiverId?: StringFieldUpdateOperationsInput | string
    user?: usersUpdateOneWithoutCommentsNestedInput
    notifications?: notificationsUpdateManyWithoutCommentsNestedInput
  }

  export type commentsUncheckedUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    replay?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    receiverId?: StringFieldUpdateOperationsInput | string
    notifications?: notificationsUncheckedUpdateManyWithoutCommentsNestedInput
  }

  export type commentsUncheckedUpdateManyWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    replay?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    receiverId?: StringFieldUpdateOperationsInput | string
  }

  export type reviewsUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    rate?: IntFieldUpdateOperationsInput | number
    user?: usersUpdateOneWithoutReviewsNestedInput
    notifications?: notificationsUpdateManyWithoutReviewsNestedInput
    seller?: sellerUpdateOneWithoutReviewsNestedInput
    brand?: brandsUpdateOneWithoutReviewsNestedInput
  }

  export type reviewsUncheckedUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    rate?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    sellerId?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    notifications?: notificationsUncheckedUpdateManyWithoutReviewsNestedInput
  }

  export type reviewsUncheckedUpdateManyWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    rate?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    sellerId?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type flashSellProductUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    offer?: IntFieldUpdateOperationsInput | number
    percentage?: BoolFieldUpdateOperationsInput | boolean
    minSell?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    deliveryFree?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    flashSell?: flashSellUpdateOneWithoutProductNestedInput
    user?: usersUpdateOneWithoutFlashSellProductNestedInput
  }

  export type flashSellProductUncheckedUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    offer?: IntFieldUpdateOperationsInput | number
    percentage?: BoolFieldUpdateOperationsInput | boolean
    minSell?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    deliveryFree?: BoolFieldUpdateOperationsInput | boolean
    flashSellId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type flashSellProductUncheckedUpdateManyWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    offer?: IntFieldUpdateOperationsInput | number
    percentage?: BoolFieldUpdateOperationsInput | boolean
    minSell?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    deliveryFree?: BoolFieldUpdateOperationsInput | boolean
    flashSellId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type bannerUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type bannerUncheckedUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type bannerUncheckedUpdateManyWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type addsUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    visitors?: visitorsUpdateOneWithoutAddsNestedInput
  }

  export type addsUncheckedUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    visitorId?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type addsUncheckedUpdateManyWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    visitorId?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type messagesUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type messagesUncheckedUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type messagesUncheckedUpdateManyWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ordersUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    offerPrice?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    buyer?: usersUpdateOneRequiredWithoutOrdersNestedInput
  }

  export type ordersUncheckedUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    buyerid?: StringFieldUpdateOperationsInput | string
    offerPrice?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ordersUncheckedUpdateManyWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    buyerid?: StringFieldUpdateOperationsInput | string
    offerPrice?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type productsCreateManyColorsInput = {
    id?: string
    price: number
    coin?: boolean
    title: string
    description: string
    thumbnail: string
    quantity?: number
    minOrder?: number
    freeCoin?: number
    offer?: number
    percentage?: boolean
    freeDelivery?: boolean
    fixedPrice?: boolean
    createdAt?: Date | string
    sizeId: string
    specificationsId: string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean
    sellerId?: string | null
    brandId?: string | null
    categoryId: string
    subCategoryId: string
    optionId: string
    userId: string
  }

  export type productsUpdateWithoutColorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    coin?: BoolFieldUpdateOperationsInput | boolean
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    minOrder?: IntFieldUpdateOperationsInput | number
    freeCoin?: IntFieldUpdateOperationsInput | number
    offer?: IntFieldUpdateOperationsInput | number
    percentage?: BoolFieldUpdateOperationsInput | boolean
    freeDelivery?: BoolFieldUpdateOperationsInput | boolean
    fixedPrice?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: BoolFieldUpdateOperationsInput | boolean
    size?: sizeUpdateOneWithoutProductsNestedInput
    specification?: specificationsUpdateOneWithoutProductsNestedInput
    comments?: commentsUpdateManyWithoutProductNestedInput
    reviews?: reviewsUpdateManyWithoutProductNestedInput
    flashSellProduct?: flashSellProductUpdateManyWithoutProductNestedInput
    seller?: sellerUpdateOneWithoutProductsNestedInput
    brand?: brandsUpdateOneWithoutProductsNestedInput
    category?: categoryUpdateOneWithoutProductsNestedInput
    subCategory?: subCategoryUpdateOneWithoutProductsNestedInput
    option?: optionsUpdateOneWithoutProductsNestedInput
    user?: usersUpdateOneWithoutProductsNestedInput
    banner?: bannerUpdateManyWithoutProductNestedInput
    adds?: addsUpdateManyWithoutProductNestedInput
    messages?: messagesUpdateManyWithoutProductNestedInput
    orders?: ordersUpdateManyWithoutProductNestedInput
  }

  export type productsUncheckedUpdateWithoutColorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    coin?: BoolFieldUpdateOperationsInput | boolean
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    minOrder?: IntFieldUpdateOperationsInput | number
    freeCoin?: IntFieldUpdateOperationsInput | number
    offer?: IntFieldUpdateOperationsInput | number
    percentage?: BoolFieldUpdateOperationsInput | boolean
    freeDelivery?: BoolFieldUpdateOperationsInput | boolean
    fixedPrice?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sizeId?: StringFieldUpdateOperationsInput | string
    specificationsId?: StringFieldUpdateOperationsInput | string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: BoolFieldUpdateOperationsInput | boolean
    sellerId?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    subCategoryId?: StringFieldUpdateOperationsInput | string
    optionId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    comments?: commentsUncheckedUpdateManyWithoutProductNestedInput
    reviews?: reviewsUncheckedUpdateManyWithoutProductNestedInput
    flashSellProduct?: flashSellProductUncheckedUpdateManyWithoutProductNestedInput
    banner?: bannerUncheckedUpdateManyWithoutProductNestedInput
    adds?: addsUncheckedUpdateManyWithoutProductNestedInput
    messages?: messagesUncheckedUpdateManyWithoutProductNestedInput
    orders?: ordersUncheckedUpdateManyWithoutProductNestedInput
  }

  export type productsUncheckedUpdateManyWithoutColorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    coin?: BoolFieldUpdateOperationsInput | boolean
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    minOrder?: IntFieldUpdateOperationsInput | number
    freeCoin?: IntFieldUpdateOperationsInput | number
    offer?: IntFieldUpdateOperationsInput | number
    percentage?: BoolFieldUpdateOperationsInput | boolean
    freeDelivery?: BoolFieldUpdateOperationsInput | boolean
    fixedPrice?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sizeId?: StringFieldUpdateOperationsInput | string
    specificationsId?: StringFieldUpdateOperationsInput | string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: BoolFieldUpdateOperationsInput | boolean
    sellerId?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    subCategoryId?: StringFieldUpdateOperationsInput | string
    optionId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type productsCreateManySizeInput = {
    id?: string
    price: number
    coin?: boolean
    title: string
    description: string
    thumbnail: string
    quantity?: number
    minOrder?: number
    freeCoin?: number
    offer?: number
    percentage?: boolean
    freeDelivery?: boolean
    fixedPrice?: boolean
    createdAt?: Date | string
    colorId: string
    specificationsId: string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean
    sellerId?: string | null
    brandId?: string | null
    categoryId: string
    subCategoryId: string
    optionId: string
    userId: string
  }

  export type productsUpdateWithoutSizeInput = {
    id?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    coin?: BoolFieldUpdateOperationsInput | boolean
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    minOrder?: IntFieldUpdateOperationsInput | number
    freeCoin?: IntFieldUpdateOperationsInput | number
    offer?: IntFieldUpdateOperationsInput | number
    percentage?: BoolFieldUpdateOperationsInput | boolean
    freeDelivery?: BoolFieldUpdateOperationsInput | boolean
    fixedPrice?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: BoolFieldUpdateOperationsInput | boolean
    colors?: colorsUpdateOneWithoutProductsNestedInput
    specification?: specificationsUpdateOneWithoutProductsNestedInput
    comments?: commentsUpdateManyWithoutProductNestedInput
    reviews?: reviewsUpdateManyWithoutProductNestedInput
    flashSellProduct?: flashSellProductUpdateManyWithoutProductNestedInput
    seller?: sellerUpdateOneWithoutProductsNestedInput
    brand?: brandsUpdateOneWithoutProductsNestedInput
    category?: categoryUpdateOneWithoutProductsNestedInput
    subCategory?: subCategoryUpdateOneWithoutProductsNestedInput
    option?: optionsUpdateOneWithoutProductsNestedInput
    user?: usersUpdateOneWithoutProductsNestedInput
    banner?: bannerUpdateManyWithoutProductNestedInput
    adds?: addsUpdateManyWithoutProductNestedInput
    messages?: messagesUpdateManyWithoutProductNestedInput
    orders?: ordersUpdateManyWithoutProductNestedInput
  }

  export type productsUncheckedUpdateWithoutSizeInput = {
    id?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    coin?: BoolFieldUpdateOperationsInput | boolean
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    minOrder?: IntFieldUpdateOperationsInput | number
    freeCoin?: IntFieldUpdateOperationsInput | number
    offer?: IntFieldUpdateOperationsInput | number
    percentage?: BoolFieldUpdateOperationsInput | boolean
    freeDelivery?: BoolFieldUpdateOperationsInput | boolean
    fixedPrice?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    colorId?: StringFieldUpdateOperationsInput | string
    specificationsId?: StringFieldUpdateOperationsInput | string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: BoolFieldUpdateOperationsInput | boolean
    sellerId?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    subCategoryId?: StringFieldUpdateOperationsInput | string
    optionId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    comments?: commentsUncheckedUpdateManyWithoutProductNestedInput
    reviews?: reviewsUncheckedUpdateManyWithoutProductNestedInput
    flashSellProduct?: flashSellProductUncheckedUpdateManyWithoutProductNestedInput
    banner?: bannerUncheckedUpdateManyWithoutProductNestedInput
    adds?: addsUncheckedUpdateManyWithoutProductNestedInput
    messages?: messagesUncheckedUpdateManyWithoutProductNestedInput
    orders?: ordersUncheckedUpdateManyWithoutProductNestedInput
  }

  export type productsUncheckedUpdateManyWithoutSizeInput = {
    id?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    coin?: BoolFieldUpdateOperationsInput | boolean
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    minOrder?: IntFieldUpdateOperationsInput | number
    freeCoin?: IntFieldUpdateOperationsInput | number
    offer?: IntFieldUpdateOperationsInput | number
    percentage?: BoolFieldUpdateOperationsInput | boolean
    freeDelivery?: BoolFieldUpdateOperationsInput | boolean
    fixedPrice?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    colorId?: StringFieldUpdateOperationsInput | string
    specificationsId?: StringFieldUpdateOperationsInput | string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: BoolFieldUpdateOperationsInput | boolean
    sellerId?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    subCategoryId?: StringFieldUpdateOperationsInput | string
    optionId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type productsCreateManySpecificationInput = {
    id?: string
    price: number
    coin?: boolean
    title: string
    description: string
    thumbnail: string
    quantity?: number
    minOrder?: number
    freeCoin?: number
    offer?: number
    percentage?: boolean
    freeDelivery?: boolean
    fixedPrice?: boolean
    createdAt?: Date | string
    colorId: string
    sizeId: string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean
    sellerId?: string | null
    brandId?: string | null
    categoryId: string
    subCategoryId: string
    optionId: string
    userId: string
  }

  export type productsUpdateWithoutSpecificationInput = {
    id?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    coin?: BoolFieldUpdateOperationsInput | boolean
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    minOrder?: IntFieldUpdateOperationsInput | number
    freeCoin?: IntFieldUpdateOperationsInput | number
    offer?: IntFieldUpdateOperationsInput | number
    percentage?: BoolFieldUpdateOperationsInput | boolean
    freeDelivery?: BoolFieldUpdateOperationsInput | boolean
    fixedPrice?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: BoolFieldUpdateOperationsInput | boolean
    colors?: colorsUpdateOneWithoutProductsNestedInput
    size?: sizeUpdateOneWithoutProductsNestedInput
    comments?: commentsUpdateManyWithoutProductNestedInput
    reviews?: reviewsUpdateManyWithoutProductNestedInput
    flashSellProduct?: flashSellProductUpdateManyWithoutProductNestedInput
    seller?: sellerUpdateOneWithoutProductsNestedInput
    brand?: brandsUpdateOneWithoutProductsNestedInput
    category?: categoryUpdateOneWithoutProductsNestedInput
    subCategory?: subCategoryUpdateOneWithoutProductsNestedInput
    option?: optionsUpdateOneWithoutProductsNestedInput
    user?: usersUpdateOneWithoutProductsNestedInput
    banner?: bannerUpdateManyWithoutProductNestedInput
    adds?: addsUpdateManyWithoutProductNestedInput
    messages?: messagesUpdateManyWithoutProductNestedInput
    orders?: ordersUpdateManyWithoutProductNestedInput
  }

  export type productsUncheckedUpdateWithoutSpecificationInput = {
    id?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    coin?: BoolFieldUpdateOperationsInput | boolean
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    minOrder?: IntFieldUpdateOperationsInput | number
    freeCoin?: IntFieldUpdateOperationsInput | number
    offer?: IntFieldUpdateOperationsInput | number
    percentage?: BoolFieldUpdateOperationsInput | boolean
    freeDelivery?: BoolFieldUpdateOperationsInput | boolean
    fixedPrice?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    colorId?: StringFieldUpdateOperationsInput | string
    sizeId?: StringFieldUpdateOperationsInput | string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: BoolFieldUpdateOperationsInput | boolean
    sellerId?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    subCategoryId?: StringFieldUpdateOperationsInput | string
    optionId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    comments?: commentsUncheckedUpdateManyWithoutProductNestedInput
    reviews?: reviewsUncheckedUpdateManyWithoutProductNestedInput
    flashSellProduct?: flashSellProductUncheckedUpdateManyWithoutProductNestedInput
    banner?: bannerUncheckedUpdateManyWithoutProductNestedInput
    adds?: addsUncheckedUpdateManyWithoutProductNestedInput
    messages?: messagesUncheckedUpdateManyWithoutProductNestedInput
    orders?: ordersUncheckedUpdateManyWithoutProductNestedInput
  }

  export type productsUncheckedUpdateManyWithoutSpecificationInput = {
    id?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    coin?: BoolFieldUpdateOperationsInput | boolean
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    minOrder?: IntFieldUpdateOperationsInput | number
    freeCoin?: IntFieldUpdateOperationsInput | number
    offer?: IntFieldUpdateOperationsInput | number
    percentage?: BoolFieldUpdateOperationsInput | boolean
    freeDelivery?: BoolFieldUpdateOperationsInput | boolean
    fixedPrice?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    colorId?: StringFieldUpdateOperationsInput | string
    sizeId?: StringFieldUpdateOperationsInput | string
    images?: NullableJsonNullValueInput | InputJsonValue
    verified?: BoolFieldUpdateOperationsInput | boolean
    sellerId?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    subCategoryId?: StringFieldUpdateOperationsInput | string
    optionId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type notificationsCreateManyCommentsInput = {
    id?: string
    message: string
    title: string
    userId: string
    reviewId: string
  }

  export type notificationsUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    user?: usersUpdateOneWithoutNotificationsNestedInput
    reviews?: reviewsUpdateOneWithoutNotificationsNestedInput
  }

  export type notificationsUncheckedUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    reviewId?: StringFieldUpdateOperationsInput | string
  }

  export type notificationsUncheckedUpdateManyWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    reviewId?: StringFieldUpdateOperationsInput | string
  }

  export type notificationsCreateManyReviewsInput = {
    id?: string
    message: string
    title: string
    userId: string
    commentId: string
  }

  export type notificationsUpdateWithoutReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    user?: usersUpdateOneWithoutNotificationsNestedInput
    comments?: commentsUpdateOneWithoutNotificationsNestedInput
  }

  export type notificationsUncheckedUpdateWithoutReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    commentId?: StringFieldUpdateOperationsInput | string
  }

  export type notificationsUncheckedUpdateManyWithoutReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    commentId?: StringFieldUpdateOperationsInput | string
  }

  export type flashSellProductCreateManyFlashSellInput = {
    id?: string
    offer?: number
    percentage?: boolean
    minSell?: number
    quantity?: number
    deliveryFree?: boolean
    productId: string
    userId: string
    createdAt?: Date | string
  }

  export type flashSellProductUpdateWithoutFlashSellInput = {
    id?: StringFieldUpdateOperationsInput | string
    offer?: IntFieldUpdateOperationsInput | number
    percentage?: BoolFieldUpdateOperationsInput | boolean
    minSell?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    deliveryFree?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: productsUpdateOneWithoutFlashSellProductNestedInput
    user?: usersUpdateOneWithoutFlashSellProductNestedInput
  }

  export type flashSellProductUncheckedUpdateWithoutFlashSellInput = {
    id?: StringFieldUpdateOperationsInput | string
    offer?: IntFieldUpdateOperationsInput | number
    percentage?: BoolFieldUpdateOperationsInput | boolean
    minSell?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    deliveryFree?: BoolFieldUpdateOperationsInput | boolean
    productId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type flashSellProductUncheckedUpdateManyWithoutFlashSellInput = {
    id?: StringFieldUpdateOperationsInput | string
    offer?: IntFieldUpdateOperationsInput | number
    percentage?: BoolFieldUpdateOperationsInput | boolean
    minSell?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    deliveryFree?: BoolFieldUpdateOperationsInput | boolean
    productId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}
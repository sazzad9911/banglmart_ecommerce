
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 5.0.0
 * Query Engine version: 6b0aef69b7cdfc787f822ecd7cdc76d5f1991584
 */
Prisma.prismaVersion = {
  client: "5.0.0",
  engine: "6b0aef69b7cdfc787f822ecd7cdc76d5f1991584"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  throw new Error(`Extensions.getExtensionContext is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.defineExtension = () => {
  throw new Error(`Extensions.defineExtension is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.UsersScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  image: 'image',
  phone: 'phone',
  birthday: 'birthday',
  gender: 'gender',
  role: 'role',
  uid: 'uid',
  address: 'address',
  createdAt: 'createdAt',
  pushToken: 'pushToken'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  icon: 'icon'
};

exports.Prisma.SubCategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  categoryId: 'categoryId'
};

exports.Prisma.OptionsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  subCategoryId: 'subCategoryId'
};

exports.Prisma.SellerScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  shopName: 'shopName',
  shopAddress: 'shopAddress'
};

exports.Prisma.BrandsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  brandName: 'brandName',
  brandAddress: 'brandAddress',
  brandIcon: 'brandIcon'
};

exports.Prisma.ProductsScalarFieldEnum = {
  id: 'id',
  price: 'price',
  coin: 'coin',
  title: 'title',
  description: 'description',
  thumbnail: 'thumbnail',
  quantity: 'quantity',
  minOrder: 'minOrder',
  createdAt: 'createdAt',
  verified: 'verified',
  sellerId: 'sellerId',
  brandId: 'brandId',
  categoryId: 'categoryId',
  subCategoryId: 'subCategoryId',
  optionId: 'optionId',
  userId: 'userId'
};

exports.Prisma.OffersScalarFieldEnum = {
  id: 'id',
  money: 'money',
  percentage: 'percentage',
  name: 'name',
  productId: 'productId'
};

exports.Prisma.CoinsScalarFieldEnum = {
  id: 'id',
  number: 'number',
  name: 'name',
  productId: 'productId'
};

exports.Prisma.ColorsScalarFieldEnum = {
  id: 'id',
  title: 'title',
  color: 'color'
};

exports.Prisma.SizeScalarFieldEnum = {
  id: 'id',
  title: 'title',
  cm: 'cm'
};

exports.Prisma.VariantsScalarFieldEnum = {
  id: 'id',
  sizeId: 'sizeId',
  colorId: 'colorId',
  image: 'image',
  productId: 'productId',
  userId: 'userId'
};

exports.Prisma.CommentsScalarFieldEnum = {
  id: 'id',
  message: 'message',
  replay: 'replay',
  userId: 'userId',
  productId: 'productId'
};

exports.Prisma.ReviewsScalarFieldEnum = {
  id: 'id',
  message: 'message',
  rate: 'rate',
  replay: 'replay',
  userId: 'userId',
  productId: 'productId'
};

exports.Prisma.NotificationsScalarFieldEnum = {
  id: 'id',
  message: 'message',
  title: 'title',
  userId: 'userId',
  commentId: 'commentId',
  reviewId: 'reviewId'
};

exports.Prisma.FlashSellScalarFieldEnum = {
  id: 'id',
  startAt: 'startAt',
  endAt: 'endAt',
  banner: 'banner',
  title: 'title'
};

exports.Prisma.FlashSellProductScalarFieldEnum = {
  id: 'id',
  offer: 'offer',
  percentage: 'percentage',
  flashSellId: 'flashSellId',
  productId: 'productId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};


exports.Prisma.ModelName = {
  users: 'users',
  category: 'category',
  subCategory: 'subCategory',
  options: 'options',
  seller: 'seller',
  brands: 'brands',
  products: 'products',
  offers: 'offers',
  coins: 'coins',
  colors: 'colors',
  size: 'size',
  variants: 'variants',
  comments: 'comments',
  reviews: 'reviews',
  notifications: 'notifications',
  flashSell: 'flashSell',
  flashSellProduct: 'flashSellProduct'
};

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)

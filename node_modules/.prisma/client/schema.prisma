datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["mongodb"]
}

model users {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  email            String?            @unique
  name             String
  image            String?
  phone            String?            @unique
  birthday         String?
  gender           String?
  role             Int                @default(1)
  uid              String
  address          Json?
  createdAt        DateTime           @default(now())
  seller           seller[]
  brand            brands[]
  products         products[]
  comments         comments[]
  reviews          reviews[]
  notifications    notifications[]
  varants          variants[]
  pushToken        String?
  flashSellProduct flashSellProduct[]
}

model category {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  name        String        @unique
  icon        String
  subCategory subCategory[]
  products    products[]
}

model subCategory {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  name       String     @unique
  categoryId String     @db.ObjectId
  category   category?  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  options    options[]
  products   products[]
}

model options {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  subCategoryId String       @db.ObjectId
  subCategory   subCategory? @relation(fields: [subCategoryId], references: [id], onDelete: Cascade)
  products      products[]
}

model seller {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  userId      String     @unique @db.ObjectId
  user        users?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  shopName    String
  shopAddress String
  products    products[]
}

model brands {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  userId       String     @unique @db.ObjectId
  user         users?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  brandName    String
  brandAddress String
  brandIcon    String
  products     products[]
}

model products {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  price            Int
  coin             Boolean            @default(false)
  title            String
  description      String
  thumbnail        String
  quantity         Int                @default(1)
  minOrder         Int                @default(1)
  createdAt        DateTime           @default(now())
  offers           offers[]
  coins            coins[]
  variants         variants[]
  comments         comments[]
  reviews          reviews[]
  flashSellProduct flashSellProduct[]
  verified         Boolean            @default(false)
  sellerId         String?            @db.ObjectId
  seller           seller?            @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  brandId          String?            @db.ObjectId
  brand            brands?            @relation(fields: [brandId], references: [id], onDelete: Cascade)
  category         category?          @relation(fields: [categoryId], references: [id])
  categoryId       String             @db.ObjectId
  subCategoryId    String             @db.ObjectId
  subCategory      subCategory?       @relation(fields: [subCategoryId], references: [id])
  optionId         String             @db.ObjectId
  option           options?           @relation(fields: [optionId], references: [id])
  userId           String             @db.ObjectId
  user             users?             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model offers {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  money        Int       @default(0)
  percentage   Boolean   @default(false)
  name         String?
  deliveryFree Boolean   @default(false)
  productId    String    @unique @db.ObjectId
  product      products? @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model coins {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  number    Int       @default(0)
  name      String?
  productId String    @unique @db.ObjectId
  product   products? @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model colors {
  id       String     @id @default(auto()) @map("_id") @db.ObjectId
  title    String     @unique
  color    String
  variants variants[]
}

model size {
  id       String     @id @default(auto()) @map("_id") @db.ObjectId
  title    String     @unique
  cm       String
  variants variants[]
}

model variants {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  sizeId    String    @db.ObjectId
  colorId   String    @db.ObjectId
  color     colors?   @relation(fields: [colorId], references: [id])
  size      size?     @relation(fields: [sizeId], references: [id])
  image     String
  productId String    @db.ObjectId
  product   products? @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId    String    @db.ObjectId
  user      users?    @relation(fields: [userId], references: [id])
}

model comments {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  message       String
  replay        String
  userId        String          @db.ObjectId
  user          users?          @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId     String          @db.ObjectId
  product       products?       @relation(fields: [productId], references: [id], onDelete: Cascade)
  notifications notifications[]
}

model reviews {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  message       String
  rate          Int             @default(0)
  replay        String
  userId        String          @db.ObjectId
  user          users?          @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId     String          @db.ObjectId
  product       products?       @relation(fields: [productId], references: [id], onDelete: Cascade)
  notifications notifications[]
}

model notifications {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  message   String
  title     String
  userId    String    @db.ObjectId
  user      users?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  commentId String    @db.ObjectId
  comments  comments? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  reviewId  String    @db.ObjectId
  reviews   reviews?  @relation(fields: [reviewId], references: [id], onDelete: Cascade)
}

model flashSell {
  id      String             @id @default(auto()) @map("_id") @db.ObjectId
  startAt DateTime
  endAt   DateTime
  banner  String
  title   String             @unique
  product flashSellProduct[]
}

model flashSellProduct {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  offer        Int        @default(0)
  percentage   Boolean    @default(false)
  minSell      Int        @default(1)
  quantity     Int        @default(1)
  deliveryFree Boolean    @default(false)
  flashSellId  String     @db.ObjectId
  flashSell    flashSell? @relation(fields: [flashSellId], references: [id], onDelete: Cascade)
  productId    String     @db.ObjectId
  product      products?  @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId       String     @db.ObjectId
  user         users?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
}
